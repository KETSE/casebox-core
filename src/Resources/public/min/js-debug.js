
/* Models.js */

/* 1   */ Ext.namespace('CB.DB');
/* 2   */ 
/* 3   */ CB.DB.defaultItemFields = [
/* 4   */     {name: 'nid', type: 'string'}
/* 5   */     ,{name: 'pid', type: 'int'}
/* 6   */     ,{name: 'system', type: 'int'}
/* 7   */     ,{name: 'status'}
/* 8   */     ,{name: 'task_status', type: 'int'}
/* 9   */     ,{name: 'template_id', type: 'int'}
/* 10  */     ,'template_type'
/* 11  */     ,'path'
/* 12  */     ,'name'
/* 13  */     ,'hl'
/* 14  */     ,'iconCls'
/* 15  */     ,{name: 'date', type: 'date'}
/* 16  */     ,{name: 'date_end', type: 'date'}
/* 17  */     ,{name: 'size', type: 'int'}
/* 18  */     ,{name: 'oid', type: 'int'}
/* 19  */     ,{name: 'cid', type: 'int'}
/* 20  */     ,{name: 'versions', type: 'int'}
/* 21  */     ,{name: 'cdate', type: 'date'}
/* 22  */     ,{name: 'udate', type: 'date'}
/* 23  */     ,'case'
/* 24  */     ,'content'
/* 25  */     ,{name: 'has_childs', type: 'bool'}
/* 26  */     ,{name: 'acl_count', type: 'int'}
/* 27  */     ,'cfg'
/* 28  */     ,'cls'
/* 29  */     ,'can'
/* 30  */     ,'group'
/* 31  */     ,'groupText'
/* 32  */ ];
/* 33  */ 
/* 34  */ Ext.define('Items', {
/* 35  */     extend: 'Ext.data.Model'
/* 36  */     ,alias: 'model.Items'
/* 37  */     ,fields: Ext.apply([], CB.DB.defaultItemFields)
/* 38  */ });
/* 39  */ 
/* 40  */ 
/* 41  */ Ext.define('DropDownListItems', {
/* 42  */     extend: 'Ext.data.Model'
/* 43  */     ,fields: [
/* 44  */         {name: 'id', type: 'int'}
/* 45  */         ,{name: 'text',  type: 'string'}
/* 46  */         ,{name: 'info',  type: 'string'}
/* 47  */         ,{name: 'descr',  type: 'string'}
/* 48  */     ]
/* 49  */ });
/* 50  */ 

/* Models.js */

/* 51  */ Ext.define('Notification', {
/* 52  */     extend: 'Ext.data.Model'
/* 53  */     ,fields: [
/* 54  */         {name: 'ids', type: 'string'}
/* 55  */         ,{name: 'user_id', type: 'int'}
/* 56  */         ,{name: 'object_id', type: 'int'}
/* 57  */         ,{name: 'action_id', type: 'int'}
/* 58  */         ,{name: 'text',  type: 'string'}
/* 59  */         ,{name: 'date_text',  type: 'string'}
/* 60  */         ,{name: 'read',  type: 'bool'}
/* 61  */         ,{name: 'seen',  type: 'bool'}
/* 62  */         ,'data'
/* 63  */     ]
/* 64  */ });
/* 65  */ 
/* 66  */ Ext.define('ContentItem', {
/* 67  */     extend: 'Ext.data.Model'
/* 68  */     ,fields: [
/* 69  */         {name: 'id', type: 'int'}
/* 70  */         ,{name: 'pid', type: 'int'}
/* 71  */         ,'name'
/* 72  */         ,{name: 'template_id', type: 'int'}
/* 73  */         ,{name: 'cid', type: 'int'}
/* 74  */         ,'iconCls'
/* 75  */         ,'user'
/* 76  */         ,'cdate'
/* 77  */         ,'ago_text'
/* 78  */     ]
/* 79  */ });
/* 80  */ 
/* 81  */ Ext.define('FieldObjects', {
/* 82  */     extend: 'Ext.data.Model'
/* 83  */     ,fields: [
/* 84  */         {name: 'id'} //, type: 'int' // let it be string, custom sources could return a non int id
/* 85  */         ,'name'
/* 86  */         ,{name: 'date', type: 'date'}
/* 87  */         ,{name: 'type', type: 'int'}
/* 88  */         ,{name: 'template_id', type: 'int'}
/* 89  */         ,{name: 'status', type: 'int'}
/* 90  */         ,'iconCls'
/* 91  */         ,'path'
/* 92  */         ,{name: 'size', type: 'int'}
/* 93  */         ,{name: 'oid', type: 'int'}
/* 94  */         ,{name: 'cid', type: 'int'}
/* 95  */         ,{name: 'cdate', type: 'date'}
/* 96  */         ,{name: 'udate', type: 'date'}
/* 97  */         ,'case'
/* 98  */     ]
/* 99  */ });
/* 100 */ 

/* Models.js */

/* 101 */ Ext.define('ObjectsRecord', {
/* 102 */     extend: 'Ext.data.Model'
/* 103 */     ,fields: [
/* 104 */         {name: 'id'} // , type: 'int'
/* 105 */         ,'name'
/* 106 */         ,{name: 'date', type: 'date'}
/* 107 */         ,{name: 'template_id', type: 'int'}
/* 108 */         ,{name: 'status', type: 'int'}
/* 109 */         ,'iconCls'
/* 110 */         ,'cfg'
/* 111 */     ]
/* 112 */ });
/* 113 */ 
/* 114 */ Ext.define('FavoriteRecord', {
/* 115 */     extend: 'Ext.data.Model'
/* 116 */     ,fields: [
/* 117 */         {name: 'id', type: 'int'}
/* 118 */         ,'node_id'
/* 119 */         ,'data'
/* 120 */     ]
/* 121 */ });
/* 122 */ 
/* 123 */ Ext.define('Generic', {
/* 124 */     extend: 'Ext.data.Model'
/* 125 */     ,fields: [
/* 126 */         {name: 'id', type: 'int'}
/* 127 */         ,{name: 'name',  type: 'string'}
/* 128 */         ,{name: 'iconCls',  type: 'string'}
/* 129 */     ]
/* 130 */ });
/* 131 */ 
/* 132 */ Ext.define('Generic2', {
/* 133 */     extend: 'Ext.data.Model'
/* 134 */     ,fields: [
/* 135 */         {name: 'id', type: 'string'}
/* 136 */         ,{name: 'name',  type: 'string'}
/* 137 */     ]
/* 138 */ });
/* 139 */ 
/* 140 */ Ext.define('GenericCount', {
/* 141 */     extend: 'Ext.data.Model'
/* 142 */     ,fields: [
/* 143 */         {name: 'id', type: 'string'}
/* 144 */         ,{name: 'name',  type: 'string'}
/* 145 */         ,{name: 'count',  type: 'int'}
/* 146 */     ]
/* 147 */ });
/* 148 */ 
/* 149 */ Ext.define('EditGridRecord', {
/* 150 */     extend: 'Ext.data.Model'

/* Models.js */

/* 151 */     ,fields: [
/* 152 */         'id' // it's varchar generated by Ext
/* 153 */         ,'title'
/* 154 */         ,'readonly'
/* 155 */         ,'value'
/* 156 */         ,'info'
/* 157 */         ,'type'
/* 158 */         ,'cond' //condition used for search templates
/* 159 */     ]
/* 160 */ });
/* 161 */ 
/* 162 */ Ext.define('Facet', {
/* 163 */     extend: 'Ext.data.Model'
/* 164 */     ,fields: [
/* 165 */         'id'
/* 166 */         ,'name'
/* 167 */         ,{
/* 168 */             name: 'active'
/* 169 */             ,type: 'int'
/* 170 */         }
/* 171 */         ,'last'
/* 172 */         ,'items'
/* 173 */         ,'new_items'
/* 174 */     ]
/* 175 */ });
/* 176 */ 
/* 177 */ Ext.define('Filter', {
/* 178 */     extend: 'Ext.data.Model'
/* 179 */     ,fields: ['id', 'facetId', 'value', 'name']
/* 180 */ });
/* 181 */ 
/* 182 */ Ext.define('AclRecord', {
/* 183 */     extend: 'Ext.data.Model'
/* 184 */     ,fields: [
/* 185 */         {name:'id', type: 'int'}
/* 186 */         ,{name:'user_group_id', type: 'int'}
/* 187 */         ,'name'
/* 188 */         ,'iconCls'
/* 189 */         ,'allow'
/* 190 */         ,'deny'
/* 191 */     ]
/* 192 */ });
/* 193 */ 
/* 194 */ Ext.define('UploadRecord', {
/* 195 */     extend: 'Ext.data.Model'
/* 196 */     ,fields: ['id'
/* 197 */         ,{name:'group', type: 'int'}
/* 198 */         ,'name'
/* 199 */         ,'type'
/* 200 */         ,{name:'size', type: 'int'}

/* Models.js */

/* 201 */         ,{name:'loaded', type: 'int'}
/* 202 */         ,'pid'
/* 203 */         ,'draftPid'
/* 204 */         ,'dir'
/* 205 */         ,'pathtext'
/* 206 */         ,'file'
/* 207 */         ,{name: 'status', type: 'int'}
/* 208 */             /* 0 - ready to upload */
/* 209 */             /* 1 - uploading */
/* 210 */             /* 2 - upload error */
/* 211 */             /* 3 - upload timeout */
/* 212 */             /* 4 - upload abort */
/* 213 */             /* 5 - uploaded */
/* 214 */             /* 6 - skipped */
/* 215 */         ,'msg'
/* 216 */         ,'md5'
/* 217 */         ,{name: 'md5_verified', type: 'int'}
/* 218 */         ,'content_id'
/* 219 */         ,'response'
/* 220 */     ]
/* 221 */ });
/* 222 */ 
/* 223 */ Ext.define('PhoneCode', {
/* 224 */     extend: 'Ext.data.Model'
/* 225 */     ,fields: [
/* 226 */         {name: 'code', type: 'string'}
/* 227 */         ,{name: 'name',  type: 'string'}
/* 228 */     ]
/* 229 */ });
/* 230 */ 
/* 231 */ Ext.define('Language', {
/* 232 */     extend: 'Ext.data.Model'
/* 233 */     ,fields: [
/* 234 */         {name: 'id', type: 'int'}
/* 235 */         ,{name: 'abreviation', type: 'string'}
/* 236 */         ,{name: 'name',  type: 'string'}
/* 237 */         ,{name: 'long_date_format',  type: 'string'}
/* 238 */         ,{name: 'short_date_format',  type: 'string'}
/* 239 */         ,{name: 'time_format',  type: 'string'}
/* 240 */     ]
/* 241 */ });
/* 242 */ 
/* 243 */ Ext.define('SecurityQuestion', {
/* 244 */     extend: 'Ext.data.Model'
/* 245 */     ,fields: [
/* 246 */         {name: 'id', type: 'int'}
/* 247 */         ,{name: 'text',  type: 'string'}
/* 248 */     ]
/* 249 */ });
/* 250 */ 

/* Models.js */

/* 251 */ Ext.define('Template', {
/* 252 */     extend: 'Ext.data.Model'
/* 253 */     ,fields: [
/* 254 */         {name: 'id', type: 'int'}
/* 255 */         ,{name: 'pid', type: 'int'}
/* 256 */         ,'type'
/* 257 */         ,'title'
/* 258 */         ,'iconCls'
/* 259 */         ,{name: "cfg", convert: function(v, r){ return Ext.isEmpty(v) ? {} : v;}}
/* 260 */         ,'info_template'
/* 261 */         ,{name: 'visible', type: 'int'}
/* 262 */     ]
/* 263 */ });
/* 264 */ 
/* 265 */ Ext.define('User', {
/* 266 */     extend: 'Ext.data.Model'
/* 267 */     ,fields: [
/* 268 */         {name: 'id', type: 'int'}
/* 269 */         ,{name: 'user',  type: 'string'}
/* 270 */         ,{name: 'name',  type: 'string'}
/* 271 */         ,{name: 'iconCls',  type: 'string'}
/* 272 */         ,{name: 'photo',  type: 'string'}
/* 273 */     ]
/* 274 */ });
/* 275 */ 
/* 276 */ Ext.define('Group', {
/* 277 */     extend: 'Ext.data.Model'
/* 278 */     ,fields: [
/* 279 */         {name: 'id', type: 'int'}
/* 280 */         ,{name: 'name',  type: 'string'}
/* 281 */         ,{name: 'title',  type: 'string'}
/* 282 */         ,{name: 'system',  type: 'int'}
/* 283 */         ,{name: 'enabled',  type: 'int'}
/* 284 */         ,'iconCls'
/* 285 */     ]
/* 286 */ });
/* 287 */ 
/* 288 */ Ext.define('Country', {
/* 289 */     extend: 'Ext.data.Model'
/* 290 */     ,fields: [
/* 291 */         {name: 'id', type: 'int'}
/* 292 */         ,{name: 'name',  type: 'string'}
/* 293 */         ,{name: 'phone_codes',  type: 'string'}
/* 294 */     ]
/* 295 */ });
/* 296 */ 
/* 297 */ Ext.define('Timezone', {
/* 298 */     extend: 'Ext.data.Model'
/* 299 */     ,fields: [
/* 300 */         {name: 'id', type: 'string'}

/* Models.js */

/* 301 */         ,{name: 'gmt_offset',  type: 'string'}
/* 302 */         ,{name: 'caption',  type: 'string'}
/* 303 */     ]
/* 304 */ });
/* 305 */ 

;
/* iso8601.min.js */

/* 1 */ (function(c,e){var g=c.parse,h=[1,4,5,6,10,11];c.parse=function(b){var a,d=0;if(a=/^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/.exec(b)){b=0;for(var f;f=h[b];++b)a[f]=+a[f]||0;a[2]=(+a[2]||1)-1;a[3]=+a[3]||1;a[7]=a[7]?+(a[7]+"00").substr(0,3):0;if((a[8]===e||a[8]==="")&&(a[9]===e||a[9]===""))a=+new c(a[1],a[2],a[3],a[4],a[5],a[6],a[7]);else{if(a[8]!=="Z"&&a[9]!==e){d=a[10]*60+a[11];if(a[9]==="+")d=
/* 2 */ 0-d}a=c.UTC(a[1],a[2],a[3],a[4],a[5]+d,a[6],a[7])}}else a=g?g(b):NaN;return a}})(Date);
/* 3 */ 

;
/* spark-md5.min.js */

/* 1 */ (function(a){if(typeof exports==="object"){module.exports=a()}else{if(typeof define==="function"&&define.amd){define("spark-md5",a)}else{var c;try{c=window}catch(b){c=self}c.SparkMD5=a()}}}(function(c){var e=function(s,r){return(s+r)&4294967295},n=function(z,v,u,r,y,w){v=e(e(v,z),e(r,w));return e((v<<y)|(v>>>(32-y)),u)},a=function(v,u,A,z,r,y,w){return n((u&A)|((~u)&z),v,u,r,y,w)},k=function(v,u,A,z,r,y,w){return n((u&z)|(A&(~z)),v,u,r,y,w)},f=function(v,u,A,z,r,y,w){return n(u^A^z,v,u,r,y,w)},p=function(v,u,A,z,r,y,w){return n(A^(u|(~z)),v,u,r,y,w)},d=function(s,u){var t=s[0],r=s[1],w=s[2],v=s[3];t=a(t,r,w,v,u[0],7,-680876936);v=a(v,t,r,w,u[1],12,-389564586);w=a(w,v,t,r,u[2],17,606105819);r=a(r,w,v,t,u[3],22,-1044525330);t=a(t,r,w,v,u[4],7,-176418897);v=a(v,t,r,w,u[5],12,1200080426);w=a(w,v,t,r,u[6],17,-1473231341);r=a(r,w,v,t,u[7],22,-45705983);t=a(t,r,w,v,u[8],7,1770035416);v=a(v,t,r,w,u[9],12,-1958414417);w=a(w,v,t,r,u[10],17,-42063);r=a(r,w,v,t,u[11],22,-1990404162);t=a(t,r,w,v,u[12],7,1804603682);v=a(v,t,r,w,u[13],12,-40341101);w=a(w,v,t,r,u[14],17,-1502002290);r=a(r,w,v,t,u[15],22,1236535329);t=k(t,r,w,v,u[1],5,-165796510);v=k(v,t,r,w,u[6],9,-1069501632);w=k(w,v,t,r,u[11],14,643717713);r=k(r,w,v,t,u[0],20,-373897302);t=k(t,r,w,v,u[5],5,-701558691);v=k(v,t,r,w,u[10],9,38016083);w=k(w,v,t,r,u[15],14,-660478335);r=k(r,w,v,t,u[4],20,-405537848);t=k(t,r,w,v,u[9],5,568446438);v=k(v,t,r,w,u[14],9,-1019803690);w=k(w,v,t,r,u[3],14,-187363961);r=k(r,w,v,t,u[8],20,1163531501);t=k(t,r,w,v,u[13],5,-1444681467);v=k(v,t,r,w,u[2],9,-51403784);w=k(w,v,t,r,u[7],14,1735328473);r=k(r,w,v,t,u[12],20,-1926607734);t=f(t,r,w,v,u[5],4,-378558);v=f(v,t,r,w,u[8],11,-2022574463);w=f(w,v,t,r,u[11],16,1839030562);r=f(r,w,v,t,u[14],23,-35309556);t=f(t,r,w,v,u[1],4,-1530992060);v=f(v,t,r,w,u[4],11,1272893353);w=f(w,v,t,r,u[7],16,-155497632);r=f(r,w,v,t,u[10],23,-1094730640);t=f(t,r,w,v,u[13],4,681279174);v=f(v,t,r,w,u[0],11,-358537222);w=f(w,v,t,r,u[3],16,-722521979);r=f(r,w,v,t,u[6],23,76029189);t=f(t,r,w,v,u[9],4,-640364487);v=f(v,t,r,w,u[12],11,-421815835);w=f(w,v,t,r,u[15],16,530742520);r=f(r,w,v,t,u[2],23,-995338651);t=p(t,r,w,v,u[0],6,-198630844);v=p(v,t,r,w,u[7],10,1126891415);w=p(w,v,t,r,u[14],15,-1416354905);r=p(r,w,v,t,u[5],21,-57434055);t=p(t,r,w,v,u[12],6,1700485571);v=p(v,t,r,w,u[3],10,-1894986606);w=p(w,v,t,r,u[10],15,-1051523);r=p(r,w,v,t,u[1],21,-2054922799);t=p(t,r,w,v,u[8],6,1873313359);v=p(v,t,r,w,u[15],10,-30611744);w=p(w,v,t,r,u[6],15,-1560198380);r=p(r,w,v,t,u[13],21,1309151649);t=p(t,r,w,v,u[4],6,-145523070);v=p(v,t,r,w,u[11],10,-1120210379);w=p(w,v,t,r,u[2],15,718787259);r=p(r,w,v,t,u[9],21,-343485551);s[0]=e(t,s[0]);s[1]=e(r,s[1]);s[2]=e(w,s[2]);s[3]=e(v,s[3])},q=function(t){var u=[],r;for(r=0;r<64;r+=4){u[r>>2]=t.charCodeAt(r)+(t.charCodeAt(r+1)<<8)+(t.charCodeAt(r+2)<<16)+(t.charCodeAt(r+3)<<24)}return u},m=function(r){var t=[],s;for(s=0;s<64;s+=4){t[s>>2]=r[s]+(r[s+1]<<8)+(r[s+2]<<16)+(r[s+3]<<24)}return t},l=function(A){var u=A.length,r=[1732584193,-271733879,-1732584194,271733878],w,t,z,x,y,v;for(w=64;w<=u;w+=64){d(r,q(A.substring(w-64,w)))}A=A.substring(w-64);t=A.length;z=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(w=0;w<t;w+=1){z[w>>2]|=A.charCodeAt(w)<<((w%4)<<3)}z[w>>2]|=128<<((w%4)<<3);if(w>55){d(r,z);for(w=0;w<16;w+=1){z[w]=0}}x=u*8;x=x.toString(16).match(/(.*?)(.{0,8})$/);y=parseInt(x[2],16);v=parseInt(x[1],16)||0;z[14]=y;z[15]=v;d(r,z);return r},o=function(z){var t=z.length,r=[1732584193,-271733879,-1732584194,271733878],v,s,y,w,x,u;for(v=64;v<=t;v+=64){d(r,m(z.subarray(v-64,v)))}z=(v-64)<t?z.subarray(v-64):new Uint8Array(0);s=z.length;y=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(v=0;v<s;v+=1){y[v>>2]|=z[v]<<((v%4)<<3)}y[v>>2]|=128<<((v%4)<<3);if(v>55){d(r,y);for(v=0;v<16;v+=1){y[v]=0}}w=t*8;w=w.toString(16).match(/(.*?)(.{0,8})$/);x=parseInt(w[2],16);u=parseInt(w[1],16)||0;y[14]=x;y[15]=u;d(r,y);return r},j=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],h=function(u){var t="",r;for(r=0;r<4;r+=1){t+=j[(u>>(r*8+4))&15]+j[(u>>(r*8))&15]}return t},b=function(r){var s;for(s=0;s<r.length;s+=1){r[s]=h(r[s])}return r.join("")},i=function(r){return b(l(r))},g=function(){this.reset()};if(i("hello")!=="5d41402abc4b2a76b9719d911017c592"){e=function(r,u){var t=(r&65535)+(u&65535),s=(r>>16)+(u>>16)+(t>>16);return(s<<16)|(t&65535)}}g.prototype.append=function(r){if(/[\u0080-\uFFFF]/.test(r)){r=unescape(encodeURIComponent(r))}this.appendBinary(r);return this};g.prototype.appendBinary=function(t){this._buff+=t;this._length+=t.length;var s=this._buff.length,r;for(r=64;r<=s;r+=64){d(this._state,q(this._buff.substring(r-64,r)))}this._buff=this._buff.substr(r-64);return this};g.prototype.end=function(t){var w=this._buff,v=w.length,u,s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r;for(u=0;u<v;u+=1){s[u>>2]|=w.charCodeAt(u)<<((u%4)<<3)}this._finish(s,v);r=!!t?this._state:b(this._state);this.reset();return r};g.prototype._finish=function(s,w){var u=w,t,v,r;s[u>>2]|=128<<((u%4)<<3);if(u>55){d(this._state,s);for(u=0;u<16;u+=1){s[u]=0}}t=this._length*8;t=t.toString(16).match(/(.*?)(.{0,8})$/);v=parseInt(t[2],16);r=parseInt(t[1],16)||0;s[14]=v;s[15]=r;d(this._state,s)};g.prototype.reset=function(){this._buff="";this._length=0;this._state=[1732584193,-271733879,-1732584194,271733878];return this};g.prototype.destroy=function(){delete this._state;delete this._buff;delete this._length};g.hash=function(t,r){if(/[\u0080-\uFFFF]/.test(t)){t=unescape(encodeURIComponent(t))}var s=l(t);return !!r?s:b(s)};g.hashBinary=function(s,r){var t=l(s);return !!r?t:b(t)};g.ArrayBuffer=function(){this.reset()};g.ArrayBuffer.prototype.append=function(r){var u=this._concatArrayBuffer(this._buff,r),t=u.length,s;this._length+=r.byteLength;for(s=64;s<=t;s+=64){d(this._state,m(u.subarray(s-64,s)))}this._buff=(s-64)<t?u.subarray(s-64):new Uint8Array(0);return this};g.ArrayBuffer.prototype.end=function(t){var w=this._buff,v=w.length,s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],u,r;for(u=0;u<v;u+=1){s[u>>2]|=w[u]<<((u%4)<<3)}this._finish(s,v);r=!!t?this._state:b(this._state);this.reset();return r};g.ArrayBuffer.prototype._finish=g.prototype._finish;g.ArrayBuffer.prototype.reset=function(){this._buff=new Uint8Array(0);this._length=0;this._state=[1732584193,-271733879,-1732584194,271733878];return this};g.ArrayBuffer.prototype.destroy=g.prototype.destroy;g.ArrayBuffer.prototype._concatArrayBuffer=function(u,s){var t=u.length,r=new Uint8Array(t+s.byteLength);r.set(u);r.set(new Uint8Array(s),t);return r};g.ArrayBuffer.hash=function(r,s){var t=o(new Uint8Array(r));return !!s?t:b(t)};return g}));

;
/* Ext.ux.FileMD5.js */

/* 1  */ Ext.namespace('Ext.ux');
/* 2  */ 
/* 3  */ Ext.define('Ext.ux.fileMD5', {
/* 4  */ 	extend: 'Ext.util.Observable'
/* 5  */ 	,chunkSize: 2097152
/* 6  */ 
/* 7  */ 	,constructor: function(){
/* 8  */ 		this.blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
/* 9  */ 		this.fileReader = new FileReader();
/* 10 */ 		this.fileReader.onload = this.frOnload.bind(this);
/* 11 */ 		this.fileReader.onerror = this.frOnerror.bind(this);
/* 12 */ 
/* 13 */ 		Ext.ux.fileMD5.superclass.constructor.apply(this, arguments);
/* 14 */ 	}
/* 15 */ 
/* 16 */ 	,getMD5: function(file) {
/* 17 */ 		this.file = file;
/* 18 */ 		this.chunks = Math.ceil(this.file.size / this.chunkSize);
/* 19 */ 		this.currentChunk = 0;
/* 20 */ 		this.spark = new SparkMD5.ArrayBuffer();
/* 21 */ 		this.md5 = null;
/* 22 */ 		this.loadNext();
/* 23 */ 	}
/* 24 */ 
/* 25 */ 	,frOnload: function(e){
/* 26 */ 		this.spark.append(e.target.result); // append array buffer
/* 27 */ 		this.currentChunk++;
/* 28 */ 
/* 29 */ 		if (this.currentChunk < this.chunks) {
/* 30 */ 			this.loadNext();
/* 31 */ 		}else{
/* 32 */ 			this.md5 = this.spark.end();
/* 33 */ 			delete this.spark;
/* 34 */ 			this.fireEvent('done', this, this.md5);
/* 35 */ 		}
/* 36 */ 	}
/* 37 */ 
/* 38 */ 	,frOnerror: function () {
/* 39 */ 		delete this.spark;
/* 40 */ 		return null;
/* 41 */ 	}
/* 42 */ 
/* 43 */ 	,loadNext: function() {
/* 44 */ 		var start = this.currentChunk * this.chunkSize,
/* 45 */ 		end = ((start + this.chunkSize) >= this.file.size) ? this.file.size : start + this.chunkSize;
/* 46 */ 		this.fileReader.readAsArrayBuffer(this.blobSlice.call(this.file, start, end));
/* 47 */ 	}
/* 48 */ });
/* 49 */ 

;
/* Ext.ux.WebkitEntriesIterator.js */

/* 1  */ Ext.namespace('Ext.ux');
/* 2  */ 
/* 3  */ Ext.ux.WebkitEntriesIterator = {
/* 4  */     // imageTypes: ['image/png', 'image/jpeg', 'image/gif'],
/* 5  */ 
/* 6  */     //readEntries(entries, parentNode);
/* 7  */     iterateEntries: function(entries, callback, scope){
/* 8  */         this.direcotoriesCount = 0;
/* 9  */         this.result = [];
/* 10 */         this.callback = scope ?  callback.bind(scope) : callback;
/* 11 */         this.readEntries(entries);
/* 12 */ 
/* 13 */     }
/* 14 */     // Recursive directory read
/* 15 */     ,readEntries: function(entries, fromSubfolder) {
/* 16 */         if(fromSubfolder) {
/* 17 */             this.direcotoriesCount--;
/* 18 */         }
/* 19 */ 
/* 20 */         for (var i = 0; i < entries.length; i++) {
/* 21 */             if(!Ext.isEmpty(entries[i])) {
/* 22 */                 if (entries[i].isDirectory) {
/* 23 */                     this.direcotoriesCount++;
/* 24 */                     // appendItem(entries[i].name, 'folder', parentNode);
/* 25 */                     var directoryReader = entries[i].createReader();
/* 26 */                     this.getAllEntries( directoryReader, this.readEntries.bind(this) );
/* 27 */                 } else {
/* 28 */                     this.result.push(entries[i]);
/* 29 */                     // appendItem(entries[i].name, 'file', parentNode);
/* 30 */                     // entries[i].file(appendFile, errorHandler);
/* 31 */                 }
/* 32 */             }
/* 33 */         }
/* 34 */         if(this.direcotoriesCount === 0){
/* 35 */             this.convertEntriesToFiles();
/* 36 */             //this.callback(this.result);
/* 37 */         }
/* 38 */     }
/* 39 */ 
/* 40 */     // This is needed to get all directory entries as one
/* 41 */     // call of readEntries may not return all items. Works a
/* 42 */     // bit like stream reader.
/* 43 */     ,getAllEntries: function (directoryReader, callback) {
/* 44 */         var entries = [];
/* 45 */ 
/* 46 */         var readEntries = function () {
/* 47 */             directoryReader.readEntries(function (results) {
/* 48 */                 if (!results.length) {
/* 49 */                     entries.sort();
/* 50 */                     this.direcotoriesCount--;

/* Ext.ux.WebkitEntriesIterator.js */

/* 51 */                     callback(entries, true);
/* 52 */                 } else {
/* 53 */                     entries = entries.concat(Array.prototype.slice.call(results || [], 0));
/* 54 */                     readEntries();
/* 55 */                 }
/* 56 */             }, this.errorHandler);
/* 57 */         };
/* 58 */ 
/* 59 */         readEntries();
/* 60 */     }
/* 61 */ 
/* 62 */     ,errorHandler: function (e) {
/* 63 */         console.log('FileSystem API error code: ' + e.code);
/* 64 */     }
/* 65 */ 
/* 66 */     ,convertEntriesToFiles: function(){
/* 67 */         this.convertedFiles = 0;
/* 68 */ 
/* 69 */         var fn = function(f){
/* 70 */             f.fullPath = this.result[this.convertedFiles].fullPath;
/* 71 */             this.result[this.convertedFiles] = f;
/* 72 */             this.convertedFiles++;
/* 73 */             if(this.convertedFiles == this.result.length) {
/* 74 */                 this.callback(this.result);
/* 75 */             }
/* 76 */         };
/* 77 */ 
/* 78 */         for (var i = 0; i < this.result.length; i++) {
/* 79 */             this.result[i].file(
/* 80 */                 fn.bind(this)
/* 81 */             );
/* 82 */         }
/* 83 */     }
/* 84 */ 
/* 85 */ };
/* 86 */ 

;
/* EventMappings.js */

/* 1  */ //@define Ext.calendar.data.EventMappings
/* 2  */ /**
/* 3  *|  * @class Ext.calendar.data.EventMappings
/* 4  *|  * A simple object that provides the field definitions for Event records so that they can
/* 5  *|  * be easily overridden.
/* 6  *|  *
/* 7  *|  * To ensure the proper definition of Ext.calendar.data.EventModel the override should be
/* 8  *|  * written like this:
/* 9  *|  *
/* 10 *|  *      Ext.define('MyApp.data.EventMappings', {
/* 11 *|  *          override: 'Ext.calendar.data.EventMappings'
/* 12 *|  *      },
/* 13 *|  *      function () {
/* 14 *|  *          // Update "this" (this === Ext.calendar.data.EventMappings)
/* 15 *|  *      });
/* 16 *|  */
/* 17 */ Ext.ns('Ext.calendar.data');
/* 18 */ 
/* 19 */ Ext.calendar.data.EventMappings = {
/* 20 */     EventId: {
/* 21 */         name: 'EventId',
/* 22 */         mapping: 'id',
/* 23 */         type: 'int'
/* 24 */     },
/* 25 */     CalendarId: {
/* 26 */         name: 'CalendarId',
/* 27 */         mapping: 'cid',
/* 28 */         type: 'int'
/* 29 */     },
/* 30 */     Title: {
/* 31 */         name: 'Title',
/* 32 */         mapping: 'title',
/* 33 */         type: 'string'
/* 34 */     },
/* 35 */     StartDate: {
/* 36 */         name: 'StartDate',
/* 37 */         mapping: 'start',
/* 38 */         type: 'date',
/* 39 */         dateFormat: 'c'
/* 40 */     },
/* 41 */     EndDate: {
/* 42 */         name: 'EndDate',
/* 43 */         mapping: 'end',
/* 44 */         type: 'date',
/* 45 */         dateFormat: 'c'
/* 46 */     },
/* 47 */     Location: {
/* 48 */         name: 'Location',
/* 49 */         mapping: 'loc',
/* 50 */         type: 'string'

/* EventMappings.js */

/* 51 */     },
/* 52 */     Notes: {
/* 53 */         name: 'Notes',
/* 54 */         mapping: 'notes',
/* 55 */         type: 'string'
/* 56 */     },
/* 57 */     Url: {
/* 58 */         name: 'Url',
/* 59 */         mapping: 'url',
/* 60 */         type: 'string'
/* 61 */     },
/* 62 */     IsAllDay: {
/* 63 */         name: 'IsAllDay',
/* 64 */         mapping: 'ad',
/* 65 */         type: 'boolean'
/* 66 */     },
/* 67 */     Reminder: {
/* 68 */         name: 'Reminder',
/* 69 */         mapping: 'rem',
/* 70 */         type: 'string'
/* 71 */     },
/* 72 */     IsNew: {
/* 73 */         name: 'IsNew',
/* 74 */         mapping: 'n',
/* 75 */         type: 'boolean'
/* 76 */     }
/* 77 */     //CaseBox mappings
/* 78 */     ,template_id: {
/* 79 */         name: 'template_id'
/* 80 */         ,type: 'int'
/* 81 */     }
/* 82 */     ,task_status: {
/* 83 */         name: 'task_status'
/* 84 */         ,type: 'string'
/* 85 */     }
/* 86 */     ,iconCls: {
/* 87 */         name: 'iconCls'
/* 88 */         ,type: 'string'
/* 89 */     }
/* 90 */     ,cls: {
/* 91 */         name: 'cls'
/* 92 */         ,type: 'string'
/* 93 */     }
/* 94 */     ,category_id: {
/* 95 */         name: 'category_id'
/* 96 */         ,type: 'string'
/* 97 */     }
/* 98 */ };
/* 99 */ 

;
/* EventModel.js */

/* 1  */ /**
/* 2  *|  * This is the {@link Ext.data.Record Record} specification for calendar event data used by the
/* 3  *|  * {@link Ext.calendar.CalendarPanel CalendarPanel}'s underlying store. It can be overridden as 
/* 4  *|  * necessary to customize the fields supported by events, although the existing column names should
/* 5  *|  * not be altered. If your model fields are named differently you should update the <b>mapping</b>
/* 6  *|  * configs accordingly.
/* 7  *|  *
/* 8  *|  * The only required fields when creating a new event record instance are StartDate and
/* 9  *|  * EndDate.  All other fields are either optional are will be defaulted if blank.
/* 10 *|  *
/* 11 *|  * Here is a basic example for how to create a new record of this type:
/* 12 *|  *
/* 13 *|  *      rec = new Ext.calendar.data.EventModel({
/* 14 *|  *          StartDate: '2101-01-12 12:00:00',
/* 15 *|  *          EndDate: '2101-01-12 13:30:00',
/* 16 *|  *          Title: 'My cool event',
/* 17 *|  *          Notes: 'Some notes'
/* 18 *|  *      });
/* 19 *|  *
/* 20 *|  * If you have overridden any of the record's data mappings via the Ext.calendar.data.EventMappings object
/* 21 *|  * you may need to set the values using this alternate syntax to ensure that the fields match up correctly:
/* 22 *|  *
/* 23 *|  *      var M = Ext.calendar.data.EventMappings;
/* 24 *|  *
/* 25 *|  *      rec = new Ext.calendar.data.EventModel();
/* 26 *|  *      rec.data[M.StartDate.name] = '2101-01-12 12:00:00';
/* 27 *|  *      rec.data[M.EndDate.name] = '2101-01-12 13:30:00';
/* 28 *|  *      rec.data[M.Title.name] = 'My cool event';
/* 29 *|  *      rec.data[M.Notes.name] = 'Some notes';
/* 30 *|  */
/* 31 */ Ext.define('Ext.calendar.data.EventModel', {
/* 32 */     extend: 'Ext.data.Model',
/* 33 */     
/* 34 */     requires: [
/* 35 */         'Ext.calendar.data.EventMappings'
/* 36 */     ],
/* 37 */     
/* 38 */     identifier: 'sequential',
/* 39 */     
/* 40 */     statics: {
/* 41 */         /**
/* 42 *|          * Reconfigures the default record definition based on the current {@link Ext.calendar.data.EventMappings EventMappings}
/* 43 *|          * object. See the header documentation for {@link Ext.calendar.data.EventMappings} for complete details and 
/* 44 *|          * examples of reconfiguring an EventRecord.
/* 45 *|          *
/* 46 *|          * **NOTE**: Calling this method will *not* update derived class fields. To ensure
/* 47 *|          * updates are made before derived classes are defined as an override. See the
/* 48 *|          * documentation of `Ext.calendar.data.EventMappings`.
/* 49 *|          *
/* 50 *|          * @static

/* EventModel.js *|

/* 51 *|          * @return {Class} The updated EventModel
/* 52 *|          */
/* 53 */         reconfigure: function() {
/* 54 */             var me = this,
/* 55 */                 Mappings = Ext.calendar.data.EventMappings;
/* 56 */ 
/* 57 */             // It is critical that the id property mapping is updated in case it changed, since it
/* 58 */             // is used elsewhere in the data package to match records on CRUD actions:
/* 59 */             me.prototype.idProperty = Mappings.EventId.name || 'id';
/* 60 */ 
/* 61 */             me.replaceFields(Ext.Object.getValues(Mappings), true);
/* 62 */ 
/* 63 */             return me;
/* 64 */         }
/* 65 */     }
/* 66 */ },
/* 67 */ function(){
/* 68 */     this.reconfigure();
/* 69 */ });
/* 70 */ 

;
/* CalendarMappings.js */

/* 1  */ //@define Ext.calendar.data.CalendarMappings
/* 2  */ 
/* 3  */ /**
/* 4  *|  * @class Ext.calendar.data.CalendarMappings
/* 5  *|  * A simple object that provides the field definitions for Calendar records so that they can be easily overridden.
/* 6  *|  *
/* 7  *|  * To ensure the proper definition of Ext.calendar.data.EventModel the override should be
/* 8  *|  * written like this:
/* 9  *|  *
/* 10 *|  *      Ext.define('MyApp.data.CalendarMappings', {
/* 11 *|  *          override: 'Ext.calendar.data.CalendarMappings'
/* 12 *|  *      },
/* 13 *|  *      function () {
/* 14 *|  *          // Update "this" (this === Ext.calendar.data.CalendarMappings)
/* 15 *|  *      });
/* 16 *|  */
/* 17 */ Ext.ns('Ext.calendar.data');
/* 18 */ 
/* 19 */ Ext.calendar.data.CalendarMappings = {
/* 20 */     CalendarId: {
/* 21 */         name:    'CalendarId',
/* 22 */         mapping: 'id',
/* 23 */         type:    'int'
/* 24 */     },
/* 25 */     Title: {
/* 26 */         name:    'Title',
/* 27 */         mapping: 'title',
/* 28 */         type:    'string'
/* 29 */     },
/* 30 */     Description: {
/* 31 */         name:    'Description', 
/* 32 */         mapping: 'desc',   
/* 33 */         type:    'string' 
/* 34 */     },
/* 35 */     ColorId: {
/* 36 */         name:    'ColorId',
/* 37 */         mapping: 'color',
/* 38 */         type:    'int'
/* 39 */     },
/* 40 */     IsHidden: {
/* 41 */         name:    'IsHidden',
/* 42 */         mapping: 'hidden',
/* 43 */         type:    'boolean'
/* 44 */     }
/* 45 */ };
/* 46 */ 

;
/* CalendarModel.js */

/* 1  */ Ext.define('Ext.calendar.data.CalendarModel', {
/* 2  */     extend: 'Ext.data.Model',
/* 3  */     
/* 4  */     requires: [
/* 5  */         'Ext.calendar.data.CalendarMappings'
/* 6  */     ],
/* 7  */     
/* 8  */     identifier: 'sequential',
/* 9  */     
/* 10 */     statics: {
/* 11 */         /**
/* 12 *|          * Reconfigures the default record definition based on the current {@link Ext.calendar.data.CalendarMappings CalendarMappings}
/* 13 *|          * object. See the header documentation for {@link Ext.calendar.data.CalendarMappings} for complete details and 
/* 14 *|          * examples of reconfiguring a CalendarRecord.
/* 15 *|          *
/* 16 *|          * **NOTE**: Calling this method will *not* update derived class fields. To ensure
/* 17 *|          * updates are made before derived classes are defined as an override. See the
/* 18 *|          * documentation of `Ext.calendar.data.CalendarMappings`.
/* 19 *|          *
/* 20 *|          * @static
/* 21 *|          * @return {Class} The updated CalendarModel
/* 22 *|          */
/* 23 */         reconfigure: function(){
/* 24 */             var me = this,
/* 25 */                 Mappings = Ext.calendar.data.CalendarMappings;
/* 26 */ 
/* 27 */             // It is critical that the id property mapping is updated in case it changed, since it
/* 28 */             // is used elsewhere in the data package to match records on CRUD actions:
/* 29 */             me.prototype.idProperty = Mappings.CalendarId.name || 'id';
/* 30 */ 
/* 31 */             me.replaceFields(Ext.Object.getValues(Mappings), true);
/* 32 */ 
/* 33 */             return me;
/* 34 */         }
/* 35 */     }
/* 36 */ },
/* 37 */ function() {
/* 38 */     this.reconfigure();
/* 39 */ });
/* 40 */ 

;
/* MemoryCalendarStore.js */

/* 1  */ /*
/* 2  *|  * A simple reusable store that loads static calendar field definitions into memory
/* 3  *|  * and can be bound to the CalendarCombo widget and used for calendar color selection.
/* 4  *|  */
/* 5  */ Ext.define('Ext.calendar.data.MemoryCalendarStore', {
/* 6  */     extend: 'Ext.data.Store',
/* 7  */     model: 'Ext.calendar.data.CalendarModel',
/* 8  */     
/* 9  */     requires: [
/* 10 */         'Ext.data.proxy.Memory',
/* 11 */         'Ext.data.reader.Json',
/* 12 */         'Ext.data.writer.Json',
/* 13 */         'Ext.calendar.data.CalendarModel',
/* 14 */         'Ext.calendar.data.CalendarMappings'
/* 15 */     ],
/* 16 */     
/* 17 */     proxy: {
/* 18 */         type: 'memory',
/* 19 */         reader: {
/* 20 */             type: 'json',
/* 21 */             rootProperty: 'calendars'
/* 22 */         },
/* 23 */         writer: {
/* 24 */             type: 'json'
/* 25 */         }
/* 26 */     },
/* 27 */ 
/* 28 */     autoLoad: true,
/* 29 */     
/* 30 */     initComponent: function() {
/* 31 */         var me = this,
/* 32 */             calendarData = Ext.calendar.data;
/* 33 */             
/* 34 */         me.sorters = me.sorters || [{
/* 35 */             property: calendarData.CalendarMappings.Title.name,
/* 36 */             direction: 'ASC'
/* 37 */         }];
/* 38 */         
/* 39 */         me.idProperty = me.idProperty || calendarData.CalendarMappings.CalendarId.name || 'id';
/* 40 */         
/* 41 */         me.fields = calendarData.CalendarModel.prototype.fields.getRange();
/* 42 */         
/* 43 */         me.callParent(arguments);
/* 44 */     }
/* 45 */ });

;
/* MemoryEventStore.js */

/* 1   */ /*
/* 2   *|  * This is a simple in-memory store implementation that is ONLY intended for use with
/* 3   *|  * calendar samples running locally in the browser with no external data source. Under
/* 4   *|  * normal circumstances, stores that use a MemoryProxy are read-only and intended only
/* 5   *|  * for displaying data read from memory. In the case of the calendar, it's still quite
/* 6   *|  * useful to be able to deal with in-memory data for sample purposes (as many people 
/* 7   *|  * may not have PHP set up to run locally), but by default, updates will not work since the
/* 8   *|  * calendar fully expects all CRUD operations to be supported by the store (and in fact
/* 9   *|  * will break, for example, if phantom records are not removed properly). This simple
/* 10  *|  * class gives us a convenient way of loading and updating calendar event data in memory,
/* 11  *|  * but should NOT be used outside of the local samples.
/* 12  *|  */
/* 13  */ Ext.define('Ext.calendar.data.MemoryEventStore', {
/* 14  */     extend: 'Ext.data.Store',
/* 15  */     model: 'Ext.calendar.data.EventModel',
/* 16  */     
/* 17  */     requires: [
/* 18  */         'Ext.data.proxy.Memory',
/* 19  */         'Ext.data.reader.Json',
/* 20  */         'Ext.data.writer.Json',
/* 21  */         'Ext.calendar.data.EventModel',
/* 22  */         'Ext.calendar.data.EventMappings'
/* 23  */     ],
/* 24  */     
/* 25  */     proxy: {
/* 26  */         type: 'memory',
/* 27  */         reader: {
/* 28  */             type: 'json',
/* 29  */             rootProperty: 'evts'
/* 30  */         },
/* 31  */         writer: {
/* 32  */             type: 'json'
/* 33  */         }
/* 34  */     },
/* 35  */     
/* 36  */     // private
/* 37  */     constructor: function(config){
/* 38  */         this.callParent(arguments);
/* 39  */         
/* 40  */         this.sorters = this.sorters || [{
/* 41  */             property: Ext.calendar.data.EventMappings.StartDate.name,
/* 42  */             direction: 'ASC'
/* 43  */         }];
/* 44  */         
/* 45  */         this.idProperty = this.idProperty || Ext.calendar.data.EventMappings.EventId.mapping || 'id';
/* 46  */         this.fields = Ext.calendar.data.EventModel.getFields();
/* 47  */         this.onCreateRecords = Ext.Function.createInterceptor(this.onCreateRecords, this.interceptCreateRecords);
/* 48  */         this.initRecs();
/* 49  */     },
/* 50  */     

/* MemoryEventStore.js */

/* 51  */     // private - override to make sure that any records added in-memory
/* 52  */     // still get a unique PK assigned at the data level
/* 53  */     interceptCreateRecords: function(records, operation, success) {
/* 54  */         if (success) {
/* 55  */             var i = 0,
/* 56  */                 rec,
/* 57  */                 len = records.length;
/* 58  */             
/* 59  */             for (; i < len; i++) {
/* 60  */                 records[i].data[Ext.calendar.data.EventMappings.EventId.name] = records[i].id;
/* 61  */             }
/* 62  */         }
/* 63  */     },
/* 64  */     
/* 65  */     // If the store started with preloaded inline data, we have to make sure the records are set up
/* 66  */     // properly as valid "saved" records otherwise they may get "added" on initial edit.
/* 67  */     initRecs: function(){
/* 68  */         this.each(function(rec){
/* 69  */             rec.store = this;
/* 70  */             rec.phantom = false;
/* 71  */         }, this);
/* 72  */     },
/* 73  */     
/* 74  */     // private - override the default logic for memory storage
/* 75  */     onProxyLoad: function(operation) {
/* 76  */         var me = this,
/* 77  */             records;
/* 78  */         
/* 79  */         if (me.data && me.data.length > 0) {
/* 80  */             // this store has already been initially loaded, so do not reload
/* 81  */             // and lose updates to the store, just use store's latest data
/* 82  */             me.totalCount = me.data.length;
/* 83  */             records = me.data.items;
/* 84  */         }
/* 85  */         else {
/* 86  */             // this is the initial load, so defer to the proxy's result
/* 87  */             var resultSet = operation.getResultSet(),
/* 88  */                 successful = operation.wasSuccessful();
/* 89  */ 
/* 90  */             records = operation.getRecords();
/* 91  */ 
/* 92  */             if (resultSet) {
/* 93  */                 me.totalCount = resultSet.total;
/* 94  */             }
/* 95  */             if (successful) {
/* 96  */                 me.loadRecords(records, operation);
/* 97  */             }
/* 98  */         }
/* 99  */ 
/* 100 */         me.loading = false;

/* MemoryEventStore.js */

/* 101 */         me.fireEvent('load', me, records, successful);
/* 102 */     }
/* 103 */ });

;
/* Date.js */

/* 1   */ Ext.define('Ext.calendar.util.Date', {
/* 2   */     
/* 3   */     singleton: true,
/* 4   */     
/* 5   */     diffDays: function(start, end) {
/* 6   */         var day = 1000 * 60 * 60 * 24,
/* 7   */             clear = Ext.Date.clearTime,
/* 8   */             diff = clear(end, true).getTime() - clear(start, true).getTime();
/* 9   */         
/* 10  */         return Math.ceil(diff / day);
/* 11  */     },
/* 12  */ 
/* 13  */     copyTime: function(fromDt, toDt) {
/* 14  */         var dt = Ext.Date.clone(toDt);
/* 15  */         dt.setHours(
/* 16  */             fromDt.getHours(),
/* 17  */             fromDt.getMinutes(),
/* 18  */             fromDt.getSeconds(),
/* 19  */             fromDt.getMilliseconds());
/* 20  */ 
/* 21  */         return dt;
/* 22  */     },
/* 23  */ 
/* 24  */     compare: function(dt1, dt2, precise) {
/* 25  */         if (precise !== true) {
/* 26  */             dt1 = Ext.Date.clone(dt1);
/* 27  */             dt1.setMilliseconds(0);
/* 28  */             dt2 = Ext.Date.clone(dt2);
/* 29  */             dt2.setMilliseconds(0);
/* 30  */         }
/* 31  */         return dt2.getTime() - dt1.getTime();
/* 32  */     },
/* 33  */     
/* 34  */     isMidnight: function(dt) {
/* 35  */         return dt.getHours() === 0 &&
/* 36  */                dt.getMinutes() === 0 &&
/* 37  */                dt.getSeconds() === 0 && 
/* 38  */                dt.getMilliseconds() === 0;    
/* 39  */     },
/* 40  */ 
/* 41  */     // private helper fn
/* 42  */     maxOrMin: function(max) {
/* 43  */         var dt = (max ? 0: Number.MAX_VALUE),
/* 44  */         i = 0,
/* 45  */         args = arguments[1],
/* 46  */         ln = args.length;
/* 47  */         for (; i < ln; i++) {
/* 48  */             dt = Math[max ? 'max': 'min'](dt, args[i].getTime());
/* 49  */         }
/* 50  */         return new Date(dt);

/* Date.js */

/* 51  */     },
/* 52  */ 
/* 53  */     max: function() {
/* 54  */         return this.maxOrMin.apply(this, [true, arguments]);
/* 55  */     },
/* 56  */ 
/* 57  */     min: function() {
/* 58  */         return this.maxOrMin.apply(this, [false, arguments]);
/* 59  */     },
/* 60  */     
/* 61  */     today: function() {
/* 62  */         return Ext.Date.clearTime(new Date());
/* 63  */     },
/* 64  */     
/* 65  */     /**
/* 66  *|      * Adds time to the specified date and returns a new Date instance as the result (does not
/* 67  *|      * alter the original date object). Time can be specified in any combination of milliseconds
/* 68  *|      * to years, and the function automatically takes leap years and daylight savings into account.
/* 69  *|      * Some syntax examples:<code><pre>
/* 70  *| var now = new Date();
/* 71  *| 
/* 72  *| // Add 24 hours to the current date/time:
/* 73  *| var tomorrow = Extensible.Date.add(now, { days: 1 });
/* 74  *| 
/* 75  *| // More complex, returning a date only with no time value:
/* 76  *| var futureDate = Extensible.Date.add(now, {
/* 77  *|     weeks: 1,
/* 78  *|     days: 5,
/* 79  *|     minutes: 30,
/* 80  *|     clearTime: true
/* 81  *| });
/* 82  *| </pre></code>
/* 83  *|      * @param {Date} dt The starting date to which to add time
/* 84  *|      * @param {Object} o A config object that can contain one or more of the following
/* 85  *|      * properties, each with an integer value:
/* 86  *|      * 
/* 87  *|      * - millis
/* 88  *|      * - seconds
/* 89  *|      * - minutes
/* 90  *|      * - hours
/* 91  *|      * - days
/* 92  *|      * - weeks
/* 93  *|      * - months
/* 94  *|      * - years
/* 95  *|      * 
/* 96  *|      * You can also optionally include the property "clearTime: true" which will perform all of the
/* 97  *|      * date addition first, then clear the time value of the final date before returning it.
/* 98  *|      * @return {Date} A new date instance containing the resulting date/time value
/* 99  *|      */
/* 100 */     add : function(dt, o) {

/* Date.js */

/* 101 */         if (!o) {
/* 102 */             return dt;
/* 103 */         }
/* 104 */         var ExtDate = Ext.Date,
/* 105 */             dateAdd = ExtDate.add,
/* 106 */             newDt = ExtDate.clone(dt);
/* 107 */         
/* 108 */         if (o.years) {
/* 109 */             newDt = dateAdd(newDt, ExtDate.YEAR, o.years);
/* 110 */         }
/* 111 */         if (o.months) {
/* 112 */             newDt = dateAdd(newDt, ExtDate.MONTH, o.months);
/* 113 */         }
/* 114 */         if (o.weeks) {
/* 115 */             o.days = (o.days || 0) + (o.weeks * 7);
/* 116 */         }
/* 117 */         if (o.days) {
/* 118 */             newDt = dateAdd(newDt, ExtDate.DAY, o.days);
/* 119 */         }
/* 120 */         if (o.hours) {
/* 121 */             newDt = dateAdd(newDt, ExtDate.HOUR, o.hours);
/* 122 */         }
/* 123 */         if (o.minutes) {
/* 124 */             newDt = dateAdd(newDt, ExtDate.MINUTE, o.minutes);
/* 125 */         }
/* 126 */         if (o.seconds) {
/* 127 */             newDt = dateAdd(newDt, ExtDate.SECOND, o.seconds);
/* 128 */         }
/* 129 */         if (o.millis) {
/* 130 */             newDt = dateAdd(newDt, ExtDate.MILLI, o.millis);
/* 131 */         }
/* 132 */          
/* 133 */         return o.clearTime ? ExtDate.clearTime(newDt) : newDt;
/* 134 */     }
/* 135 */ });

;
/* WeekEventRenderer.js */

/* 1   */ /* @private
/* 2   *|  * This is an internal helper class for the calendar views and should not be overridden.
/* 3   *|  * It is responsible for the base event rendering logic underlying all views based on a
/* 4   *|  * box-oriented layout that supports day spanning (MonthView, MultiWeekView, DayHeaderView).
/* 5   *|  */
/* 6   */ Ext.define('Ext.calendar.util.WeekEventRenderer', {
/* 7   */ 
/* 8   */     requires: ['Ext.calendar.util.Date'],
/* 9   */ 
/* 10  */     statics: {
/* 11  */         // private
/* 12  */         getEventRow: function(id, week, index) {
/* 13  */             var indexOffset = 1,
/* 14  */                 //skip row with date #'s
/* 15  */                 evtRow,
/* 16  */                 wkRow = Ext.get(id + '-wk-' + week);
/* 17  */             if (wkRow) {
/* 18  */                 var table = wkRow.child('.ext-cal-evt-tbl', true);
/* 19  */                 evtRow = table.tBodies[0].childNodes[index + indexOffset];
/* 20  */                 if (!evtRow) {
/* 21  */                     evtRow = Ext.core.DomHelper.append(table.tBodies[0], '<tr></tr>');
/* 22  */                 }
/* 23  */             }
/* 24  */             return Ext.get(evtRow);
/* 25  */         },
/* 26  */ 
/* 27  */         render: function(o) {
/* 28  */             var w = 0,
/* 29  */                 grid = o.eventGrid,
/* 30  */                 dt = Ext.Date.clone(o.viewStart),
/* 31  */                 eventTpl = o.tpl,
/* 32  */                 max = o.maxEventsPerDay != undefined ? o.maxEventsPerDay: 999,
/* 33  */                 weekCount = o.weekCount < 1 ? 6: o.weekCount,
/* 34  */                 dayCount = o.weekCount == 1 ? o.dayCount: 7,
/* 35  */                 cellCfg,
/* 36  */                 row;
/* 37  */ 
/* 38  */             for (; w < weekCount; w++) {
/* 39  */                 if (!grid[w] || grid[w].length == 0) {
/* 40  */                     // no events or span cells for the entire week
/* 41  */                     if (weekCount == 1) {
/* 42  */                         row = this.getEventRow(o.id, w, 0);
/* 43  */                         cellCfg = {
/* 44  */                             tag: 'td',
/* 45  */                             cls: 'ext-cal-ev',
/* 46  */                             id: o.id + '-empty-0-day-' + Ext.Date.format(dt, 'Ymd'),
/* 47  */                             html: '&#160;'
/* 48  */                         };
/* 49  */                         if (dayCount > 1) {
/* 50  */                             cellCfg.colspan = dayCount;

/* WeekEventRenderer.js */

/* 51  */                         }
/* 52  */                         Ext.core.DomHelper.append(row, cellCfg);
/* 53  */                     }
/* 54  */                     dt = Ext.calendar.util.Date.add(dt, {days: 7});
/* 55  */                 } else {
/* 56  */                     var d = 0,
/* 57  */                         wk = grid[w],
/* 58  */                         startOfWeek = Ext.Date.clone(dt),
/* 59  */                         endOfWeek = Ext.calendar.util.Date.add(startOfWeek, {days: dayCount, millis: -1});
/* 60  */ 
/* 61  */                     for (; d < dayCount; d++) {
/* 62  */                         if (wk[d]) {
/* 63  */                             var ev = 0,
/* 64  */                                 emptyCells = 0,
/* 65  */                                 skipped = 0,
/* 66  */                                 day = wk[d],
/* 67  */                                 ct = day.length,
/* 68  */                                 evt;
/* 69  */ 
/* 70  */                             for (; ev < ct; ev++) {
/* 71  */                                 evt = day[ev];
/* 72  */ 
/* 73  */                                 // Add an empty cell for days that have sparse arrays.
/* 74  */                                 // See EXTJSIV-7832.
/* 75  */                                 if (!evt && (ev < max)) {
/* 76  */                                     row = this.getEventRow(o.id, w, ev);
/* 77  */                                     cellCfg = {
/* 78  */                                         tag: 'td',
/* 79  */                                         cls: 'ext-cal-ev',
/* 80  */                                         id: o.id + '-empty-' + ct + '-day-' + Ext.Date.format(dt, 'Ymd')
/* 81  */                                     };
/* 82  */ 
/* 83  */                                     Ext.core.DomHelper.append(row, cellCfg);
/* 84  */                                 }
/* 85  */ 
/* 86  */                                 if (!evt) {
/* 87  */                                     continue;
/* 88  */                                 }
/* 89  */ 
/* 90  */                                 if (ev >= max) {
/* 91  */                                     skipped++;
/* 92  */                                     continue;
/* 93  */                                 }
/* 94  */ 
/* 95  */                                 if (!evt.isSpan || evt.isSpanStart) {
/* 96  */                                     //skip non-starting span cells
/* 97  */                                     var item = evt.data || evt.event.data;
/* 98  */                                     item._weekIndex = w;
/* 99  */                                     item._renderAsAllDay = item[Ext.calendar.data.EventMappings.IsAllDay.name] || evt.isSpanStart;
/* 100 */                                     item.spanLeft = item[Ext.calendar.data.EventMappings.StartDate.name].getTime() < startOfWeek.getTime();

/* WeekEventRenderer.js */

/* 101 */                                     item.spanRight = item[Ext.calendar.data.EventMappings.EndDate.name].getTime() > endOfWeek.getTime();
/* 102 */                                     item.spanCls = (item.spanLeft ? (item.spanRight ? 'ext-cal-ev-spanboth':
/* 103 */                                     'ext-cal-ev-spanleft') : (item.spanRight ? 'ext-cal-ev-spanright': ''));
/* 104 */ 
/* 105 */                                     row = this.getEventRow(o.id, w, ev);
/* 106 */                                     cellCfg = {
/* 107 */                                         tag: 'td',
/* 108 */                                         cls: 'ext-cal-ev',
/* 109 */                                         cn: eventTpl.apply(o.templateDataFn(item))
/* 110 */                                     };
/* 111 */                                     var diff = Ext.calendar.util.Date.diffDays(dt, item[Ext.calendar.data.EventMappings.EndDate.name]) + 1,
/* 112 */                                         cspan = Math.min(diff, dayCount - d);
/* 113 */ 
/* 114 */                                     if (cspan > 1) {
/* 115 */                                         cellCfg.colspan = cspan;
/* 116 */                                     }
/* 117 */                                     Ext.core.DomHelper.append(row, cellCfg);
/* 118 */                                 }
/* 119 */                             }
/* 120 */                             if (ev > max) {
/* 121 */                                 row = this.getEventRow(o.id, w, max);
/* 122 */                                 Ext.core.DomHelper.append(row, {
/* 123 */                                     tag: 'td',
/* 124 */                                     cls: 'ext-cal-ev-more',
/* 125 */                                     id: 'ext-cal-ev-more-' + Ext.Date.format(dt, 'Ymd'),
/* 126 */                                     cn: {
/* 127 */                                         tag: 'a',
/* 128 */                                         html: '+' + skipped + ' more...'
/* 129 */                                     }
/* 130 */                                 });
/* 131 */                             }
/* 132 */                             if (ct < o.evtMaxCount[w]) {
/* 133 */                                 row = this.getEventRow(o.id, w, ct);
/* 134 */                                 if (row) {
/* 135 */                                     cellCfg = {
/* 136 */                                         tag: 'td',
/* 137 */                                         cls: 'ext-cal-ev',
/* 138 */                                         id: o.id + '-empty-' + (ct + 1) + '-day-' + Ext.Date.format(dt, 'Ymd')
/* 139 */                                     };
/* 140 */                                     var rowspan = o.evtMaxCount[w] - ct;
/* 141 */                                     if (rowspan > 1) {
/* 142 */                                         cellCfg.rowspan = rowspan;
/* 143 */                                     }
/* 144 */                                     Ext.core.DomHelper.append(row, cellCfg);
/* 145 */                                 }
/* 146 */                             }
/* 147 */                         } else {
/* 148 */                             row = this.getEventRow(o.id, w, 0);
/* 149 */                             if (row) {
/* 150 */                                 cellCfg = {

/* WeekEventRenderer.js */

/* 151 */                                     tag: 'td',
/* 152 */                                     cls: 'ext-cal-ev',
/* 153 */                                     id: o.id + '-empty-day-' + Ext.Date.format(dt, 'Ymd')
/* 154 */                                 };
/* 155 */                                 if (o.evtMaxCount[w] > 1) {
/* 156 */                                     cellCfg.rowSpan = o.evtMaxCount[w];
/* 157 */                                 }
/* 158 */                                 Ext.core.DomHelper.append(row, cellCfg);
/* 159 */                             }
/* 160 */                         }
/* 161 */                         dt = Ext.calendar.util.Date.add(dt, {days: 1});
/* 162 */                     }
/* 163 */                 }
/* 164 */             }
/* 165 */         }
/* 166 */     }
/* 167 */ });
/* 168 */ 

;
/* StatusProxy.js */

/* 1  */ /*
/* 2  *|  * @class Ext.calendar.dd.StatusProxy
/* 3  *|  * A specialized drag proxy that supports a drop status icon and auto-repair. It also
/* 4  *|  * contains a calendar-specific drag status message containing details about the dragged event's target drop date range.  
/* 5  *|  * This is the default drag proxy used by all calendar views.
/* 6  *|  * @constructor
/* 7  *|  * @param {Object} config
/* 8  *|  */
/* 9  */ Ext.define('Ext.calendar.dd.StatusProxy', {
/* 10 */     
/* 11 */     extend: 'Ext.dd.StatusProxy',
/* 12 */ 
/* 13 */     animRepair: true,
/* 14 */     
/* 15 */     /**
/* 16 *|      * @cfg {String} moveEventCls
/* 17 *|      * The CSS class to apply to the status element when an event is being dragged (defaults to 'ext-cal-dd-move').
/* 18 *|      */
/* 19 */     moveEventCls : 'ext-cal-dd-move',
/* 20 */     
/* 21 */     /**
/* 22 *|      * @cfg {String} addEventCls
/* 23 *|      * The CSS class to apply to the status element when drop is not allowed (defaults to 'ext-cal-dd-add').
/* 24 *|      */
/* 25 */     addEventCls : 'ext-cal-dd-add',
/* 26 */     
/* 27 */     // inherit docs
/* 28 */     childEls: [
/* 29 */         'ghost',
/* 30 */         'message'
/* 31 */     ],
/* 32 */     
/* 33 */     // inherit docs
/* 34 */     renderTpl: [
/* 35 */         '<div class="' + Ext.baseCSSPrefix + 'dd-drop-icon"></div>' +
/* 36 */         '<div class="ext-dd-ghost-ct">' +
/* 37 */             '<div id="{id}-ghost" data-ref="ghost" class="' + Ext.baseCSSPrefix + 'dd-drag-ghost"></div>' +
/* 38 */             '<div id="{id}-message" data-ref="message" class="' + Ext.baseCSSPrefix + 'dd-msg"></div>' +
/* 39 */         '</div>'
/* 40 */     ],
/* 41 */ 
/* 42 */     // inherit docs
/* 43 */     update : function(html){
/* 44 */         this.callParent(arguments);
/* 45 */         
/* 46 */         var el = this.ghost.dom.firstChild;
/* 47 */         if(el){
/* 48 */             // if the ghost contains an event clone (from dragging an existing event)
/* 49 */             // set it to auto height to ensure visual consistency
/* 50 */             Ext.fly(el).setHeight('auto');

/* StatusProxy.js */

/* 51 */         }
/* 52 */     },
/* 53 */     
/* 54 */     /* @private
/* 55 *|      * Update the calendar-specific drag status message without altering the ghost element.
/* 56 *|      * @param {String} msg The new status message
/* 57 *|      */
/* 58 */     updateMsg : function(msg){
/* 59 */         this.message.update(msg);
/* 60 */     }
/* 61 */ });

;
/* DragZone.js */

/* 1  */ /*
/* 2  *|  * Internal drag zone implementation for the calendar components. This provides base functionality
/* 3  *|  * and is primarily for the month view -- DayViewDD adds day/week view-specific functionality.
/* 4  *|  */
/* 5  */ Ext.define('Ext.calendar.dd.DragZone', {
/* 6  */     extend: 'Ext.dd.DragZone',
/* 7  */ 
/* 8  */     requires: [
/* 9  */         'Ext.calendar.dd.StatusProxy',
/* 10 */         'Ext.calendar.data.EventMappings'
/* 11 */     ],
/* 12 */     
/* 13 */     ddGroup: 'CalendarDD',
/* 14 */     eventSelector: '.ext-cal-evt',
/* 15 */ 
/* 16 */     constructor: function(el, config) {
/* 17 */         if (!Ext.calendar._statusProxyInstance) {
/* 18 */             Ext.calendar._statusProxyInstance = new Ext.calendar.dd.StatusProxy();
/* 19 */         }
/* 20 */         this.proxy = Ext.calendar._statusProxyInstance;
/* 21 */         this.callParent(arguments);
/* 22 */     },
/* 23 */ 
/* 24 */     getDragData: function(e) {
/* 25 */         // Check whether we are dragging on an event first
/* 26 */         var t = e.getTarget(this.eventSelector, 3);
/* 27 */         if (t) {
/* 28 */             var rec = this.view.getEventRecordFromEl(t);
/* 29 */             return {
/* 30 */                 type: 'eventdrag',
/* 31 */                 ddel: t,
/* 32 */                 eventStart: rec.data[Ext.calendar.data.EventMappings.StartDate.name],
/* 33 */                 eventEnd: rec.data[Ext.calendar.data.EventMappings.EndDate.name],
/* 34 */                 proxy: this.proxy
/* 35 */             };
/* 36 */         }
/* 37 */ 
/* 38 */         // If not dragging an event then we are dragging on
/* 39 */         // the calendar to add a new event
/* 40 */         t = this.view.getDayAt(e.getX(), e.getY());
/* 41 */         if (t.el) {
/* 42 */             return {
/* 43 */                 type: 'caldrag',
/* 44 */                 start: t.date,
/* 45 */                 proxy: this.proxy
/* 46 */             };
/* 47 */         }
/* 48 */         return null;
/* 49 */     },
/* 50 */ 

/* DragZone.js */

/* 51 */     onInitDrag: function(x, y) {
/* 52 */         if (this.dragData.ddel) {
/* 53 */             var ghost = this.dragData.ddel.cloneNode(true),
/* 54 */             child = Ext.fly(ghost).down('dl');
/* 55 */ 
/* 56 */             Ext.fly(ghost).setWidth('auto');
/* 57 */ 
/* 58 */             if (child) {
/* 59 */                 // for IE/Opera
/* 60 */                 child.setHeight('auto');
/* 61 */             }
/* 62 */             this.proxy.update(ghost);
/* 63 */             this.onStartDrag(x, y);
/* 64 */         }
/* 65 */         else if (this.dragData.start) {
/* 66 */             this.onStartDrag(x, y);
/* 67 */         }
/* 68 */         this.view.onInitDrag();
/* 69 */         return true;
/* 70 */     },
/* 71 */ 
/* 72 */     afterRepair: function() {
/* 73 */         if (Ext.enableFx && this.dragData.ddel) {
/* 74 */             Ext.fly(this.dragData.ddel).highlight(this.hlColor || 'c3daf9');
/* 75 */         }
/* 76 */         this.dragging = false;
/* 77 */     },
/* 78 */ 
/* 79 */     getRepairXY: function(e) {
/* 80 */         if (this.dragData.ddel) {
/* 81 */             return Ext.fly(this.dragData.ddel).getXY();
/* 82 */         }
/* 83 */     },
/* 84 */ 
/* 85 */     afterInvalidDrop: function(e, id) {
/* 86 */         Ext.select('.ext-dd-shim').hide();
/* 87 */     }
/* 88 */ });

;
/* DropZone.js */

/* 1   */ /*
/* 2   *|  * Internal drop zone implementation for the calendar components. This provides base functionality
/* 3   *|  * and is primarily for the month view -- DayViewDD adds day/week view-specific functionality.
/* 4   *|  */
/* 5   */ Ext.define('Ext.calendar.dd.DropZone', {
/* 6   */     extend: 'Ext.dd.DropZone',
/* 7   */     
/* 8   */     requires: [
/* 9   */         'Ext.calendar.util.Date',
/* 10  */         'Ext.calendar.data.EventMappings'
/* 11  */     ],
/* 12  */ 
/* 13  */     ddGroup: 'CalendarDD',
/* 14  */     eventSelector: '.ext-cal-evt',
/* 15  */ 
/* 16  */     // private
/* 17  */     shims: [],
/* 18  */ 
/* 19  */     getTargetFromEvent: function(e) {
/* 20  */         var dragOffset = this.dragOffset || 0,
/* 21  */         y = e.getY() - dragOffset,
/* 22  */         d = this.view.getDayAt(e.getX(), y);
/* 23  */ 
/* 24  */         return d.el ? d: null;
/* 25  */     },
/* 26  */ 
/* 27  */     onNodeOver: function(n, dd, e, data) {
/* 28  */         var D = Ext.calendar.util.Date,
/* 29  */         start = data.type == 'eventdrag' ? n.date: D.min(data.start, n.date),
/* 30  */         end = data.type == 'eventdrag' ? D.add(n.date, {days: D.diffDays(data.eventStart, data.eventEnd)}) :
/* 31  */         D.max(data.start, n.date);
/* 32  */ 
/* 33  */         if (!this.dragStartDate || !this.dragEndDate || (D.diffDays(start, this.dragStartDate) != 0) || (D.diffDays(end, this.dragEndDate) != 0)) {
/* 34  */             this.dragStartDate = start;
/* 35  */             this.dragEndDate = D.add(end, {days: 1, millis: -1, clearTime: true});
/* 36  */             this.shim(start, end);
/* 37  */ 
/* 38  */             var range = Ext.Date.format(start, 'n/j');
/* 39  */             if (D.diffDays(start, end) > 0) {
/* 40  */                 range += '-' + Ext.Date.format(end, 'n/j');
/* 41  */             }
/* 42  */             var msg = Ext.util.Format.format(data.type == 'eventdrag' ? this.moveText: this.createText, range);
/* 43  */             data.proxy.updateMsg(msg);
/* 44  */         }
/* 45  */         return this.dropAllowed;
/* 46  */     },
/* 47  */ 
/* 48  */     shim: function(start, end) {
/* 49  */         this.currWeek = -1;
/* 50  */         this.DDMInstance.notifyOccluded = true;

/* DropZone.js */

/* 51  */         var dt = Ext.Date.clone(start),
/* 52  */             i = 0,
/* 53  */             shim,
/* 54  */             box,
/* 55  */             D = Ext.calendar.util.Date,
/* 56  */             cnt = D.diffDays(dt, end) + 1;
/* 57  */ 
/* 58  */         Ext.each(this.shims,
/* 59  */             function(shim) {
/* 60  */                 if (shim) {
/* 61  */                     shim.isActive = false;
/* 62  */                 }
/* 63  */             }
/* 64  */         );
/* 65  */ 
/* 66  */         while (i++<cnt) {
/* 67  */             var dayEl = this.view.getDayEl(dt);
/* 68  */ 
/* 69  */             // if the date is not in the current view ignore it (this
/* 70  */             // can happen when an event is dragged to the end of the
/* 71  */             // month so that it ends outside the view)
/* 72  */             if (dayEl) {
/* 73  */                 var wk = this.view.getWeekIndex(dt);
/* 74  */                 shim = this.shims[wk];
/* 75  */ 
/* 76  */                 if (!shim) {
/* 77  */                     shim = this.createShim();
/* 78  */                     this.shims[wk] = shim;
/* 79  */                 }
/* 80  */                 if (wk != this.currWeek) {
/* 81  */                     shim.boxInfo = dayEl.getBox();
/* 82  */                     this.currWeek = wk;
/* 83  */                 }
/* 84  */                 else {
/* 85  */                     box = dayEl.getBox();
/* 86  */                     shim.boxInfo.right = box.right;
/* 87  */                     shim.boxInfo.width = box.right - shim.boxInfo.x;
/* 88  */                 }
/* 89  */                 shim.isActive = true;
/* 90  */             }
/* 91  */             dt = D.add(dt, {days: 1});
/* 92  */         }
/* 93  */ 
/* 94  */         Ext.each(this.shims, function(shim) {
/* 95  */             if (shim) {
/* 96  */                 if (shim.isActive) {
/* 97  */                     shim.show();
/* 98  */                     shim.setBox(shim.boxInfo);
/* 99  */                 }
/* 100 */                 else if (shim.isVisible()) {

/* DropZone.js */

/* 101 */                     shim.hide();
/* 102 */                 }
/* 103 */             }
/* 104 */         });
/* 105 */     },
/* 106 */ 
/* 107 */     createShim: function() {
/* 108 */         if (!this.shimCt) {
/* 109 */             this.shimCt = Ext.get('ext-dd-shim-ct');
/* 110 */             if (!this.shimCt) {
/* 111 */                 this.shimCt = document.createElement('div');
/* 112 */                 this.shimCt.id = 'ext-dd-shim-ct';
/* 113 */                 Ext.getBody().appendChild(this.shimCt);
/* 114 */             }
/* 115 */         }
/* 116 */         var el = document.createElement('div');
/* 117 */         el.className = 'ext-dd-shim';
/* 118 */         this.shimCt.appendChild(el);
/* 119 */ 
/* 120 */         el = Ext.get(el);
/* 121 */ 
/* 122 */         el.setVisibilityMode(2);
/* 123 */ 
/* 124 */         return el;
/* 125 */     },
/* 126 */ 
/* 127 */     clearShims: function() {
/* 128 */         Ext.each(this.shims,
/* 129 */         function(shim) {
/* 130 */             if (shim) {
/* 131 */                 shim.hide();
/* 132 */             }
/* 133 */         });
/* 134 */         this.DDMInstance.notifyOccluded = false;
/* 135 */     },
/* 136 */ 
/* 137 */     onContainerOver: function(dd, e, data) {
/* 138 */         return this.dropAllowed;
/* 139 */     },
/* 140 */ 
/* 141 */     onCalendarDragComplete: function() {
/* 142 */         delete this.dragStartDate;
/* 143 */         delete this.dragEndDate;
/* 144 */         this.clearShims();
/* 145 */     },
/* 146 */ 
/* 147 */     onNodeDrop: function(n, dd, e, data) {
/* 148 */         if (n && data) {
/* 149 */             if (data.type == 'eventdrag') {
/* 150 */                 var rec = this.view.getEventRecordFromEl(data.ddel),

/* DropZone.js */

/* 151 */                 dt = Ext.calendar.util.Date.copyTime(rec.data[Ext.calendar.data.EventMappings.StartDate.name], n.date);
/* 152 */ 
/* 153 */                 this.view.onEventDrop(rec, dt);
/* 154 */                 this.onCalendarDragComplete();
/* 155 */                 return true;
/* 156 */             }
/* 157 */             if (data.type == 'caldrag') {
/* 158 */                 this.view.onCalendarEndDrag(this.dragStartDate, this.dragEndDate,
/* 159 */                 Ext.bind(this.onCalendarDragComplete, this));
/* 160 */                 //shims are NOT cleared here -- they stay visible until the handling
/* 161 */                 //code calls the onCalendarDragComplete callback which hides them.
/* 162 */                 return true;
/* 163 */             }
/* 164 */         }
/* 165 */         this.onCalendarDragComplete();
/* 166 */         return false;
/* 167 */     },
/* 168 */ 
/* 169 */     onContainerDrop: function(dd, e, data) {
/* 170 */         this.onCalendarDragComplete();
/* 171 */         return false;
/* 172 */     }
/* 173 */ });
/* 174 */ 

;
/* DayDragZone.js */

/* 1  */ /*
/* 2  *|  * Internal drag zone implementation for the calendar day and week views.
/* 3  *|  */
/* 4  */ Ext.define('Ext.calendar.dd.DayDragZone', {
/* 5  */     extend: 'Ext.calendar.dd.DragZone',
/* 6  */     requires: [
/* 7  */         'Ext.calendar.data.EventMappings'
/* 8  */     ],
/* 9  */ 
/* 10 */     ddGroup: 'DayViewDD',
/* 11 */     resizeSelector: '.ext-evt-rsz',
/* 12 */ 
/* 13 */     getDragData: function(e) {
/* 14 */         var startDateName = Ext.calendar.data.EventMappings.StartDate.name,
/* 15 */             endDateName = Ext.calendar.data.EventMappings.EndDate.name,
/* 16 */             t, p, rec;
/* 17 */         
/* 18 */         t = e.getTarget(this.resizeSelector, 2, true);
/* 19 */         
/* 20 */         if (t) {
/* 21 */             p = t.parent(this.eventSelector);
/* 22 */             rec = this.view.getEventRecordFromEl(p);
/* 23 */ 
/* 24 */             return {
/* 25 */                 type: 'eventresize',
/* 26 */                 ddel: p.dom,
/* 27 */                 eventStart: rec.get(startDateName),
/* 28 */                 eventEnd: rec.get(endDateName),
/* 29 */                 proxy: this.proxy
/* 30 */             };
/* 31 */         }
/* 32 */         
/* 33 */         t = e.getTarget(this.eventSelector, 3);
/* 34 */         if (t) {
/* 35 */             rec = this.view.getEventRecordFromEl(t);
/* 36 */             return {
/* 37 */                 type: 'eventdrag',
/* 38 */                 ddel: t,
/* 39 */                 eventStart: rec.get(startDateName),
/* 40 */                 eventEnd: rec.get(endDateName),
/* 41 */                 proxy: this.proxy
/* 42 */             };
/* 43 */         }
/* 44 */ 
/* 45 */         // If not dragging/resizing an event then we are dragging on
/* 46 */         // the calendar to add a new event
/* 47 */         t = this.view.getDayAt(e.getX(), e.getY());
/* 48 */         if (t.el) {
/* 49 */             return {
/* 50 */                 type: 'caldrag',

/* DayDragZone.js */

/* 51 */                 dayInfo: t,
/* 52 */                 proxy: this.proxy
/* 53 */             };
/* 54 */         }
/* 55 */         return null;
/* 56 */     }
/* 57 */ });

;
/* DayDropZone.js */

/* 1   */ /*
/* 2   *|  * Internal drop zone implementation for the calendar day and week views.
/* 3   *|  */
/* 4   */ Ext.define('Ext.calendar.dd.DayDropZone', {
/* 5   */     extend: 'Ext.calendar.dd.DropZone',
/* 6   */     requires: [
/* 7   */         'Ext.calendar.util.Date'
/* 8   */     ],
/* 9   */ 
/* 10  */     ddGroup: 'DayViewDD',
/* 11  */ 
/* 12  */     onNodeOver: function(n, dd, e, data) {
/* 13  */         var dt,
/* 14  */             box,
/* 15  */             endDt,
/* 16  */             text = this.createText,
/* 17  */             curr,
/* 18  */             start,
/* 19  */             end,
/* 20  */             evtEl,
/* 21  */             dayCol;
/* 22  */         if (data.type == 'caldrag') {
/* 23  */             if (!this.dragStartMarker) {
/* 24  */                 // Since the container can scroll, this gets a little tricky.
/* 25  */                 // There is no el in the DOM that we can measure by default since
/* 26  */                 // the box is simply calculated from the original drag start (as opposed
/* 27  */                 // to dragging or resizing the event where the orig event box is present).
/* 28  */                 // To work around this we add a placeholder el into the DOM and give it
/* 29  */                 // the original starting time's box so that we can grab its updated
/* 30  */                 // box measurements as the underlying container scrolls up or down.
/* 31  */                 // This placeholder is removed in onNodeDrop.
/* 32  */                 this.dragStartMarker = n.el.parent().createChild({
/* 33  */                     style: 'position:absolute;'
/* 34  */                 });
/* 35  */                 this.dragStartMarker.setBox(n.timeBox);
/* 36  */                 this.dragCreateDt = n.date;
/* 37  */             }
/* 38  */             box = this.dragStartMarker.getBox();
/* 39  */             box.height = Math.ceil(Math.abs(e.xy[1] - box.y) / n.timeBox.height) * n.timeBox.height;
/* 40  */ 
/* 41  */             if (e.xy[1] < box.y) {
/* 42  */                 box.height += n.timeBox.height;
/* 43  */                 box.y = box.y - box.height + n.timeBox.height;
/* 44  */                 endDt = Ext.Date.add(this.dragCreateDt, Ext.Date.MINUTE, 30);
/* 45  */             }
/* 46  */             else {
/* 47  */                 n.date = Ext.Date.add(n.date, Ext.Date.MINUTE, 30);
/* 48  */             }
/* 49  */             this.shim(this.dragCreateDt, box);
/* 50  */ 

/* DayDropZone.js */

/* 51  */             curr = Ext.calendar.util.Date.copyTime(n.date, this.dragCreateDt);
/* 52  */             this.dragStartDate = Ext.calendar.util.Date.min(this.dragCreateDt, curr);
/* 53  */             this.dragEndDate = endDt || Ext.calendar.util.Date.max(this.dragCreateDt, curr);
/* 54  */ 
/* 55  */             dt = Ext.Date.format(this.dragStartDate, 'g:ia-') + Ext.Date.format(this.dragEndDate, 'g:ia');
/* 56  */         }
/* 57  */         else {
/* 58  */             evtEl = Ext.get(data.ddel);
/* 59  */             dayCol = evtEl.parent().parent();
/* 60  */             box = evtEl.getBox();
/* 61  */ 
/* 62  */             box.width = dayCol.getWidth();
/* 63  */ 
/* 64  */             if (data.type == 'eventdrag') {
/* 65  */                 if (this.dragOffset === undefined) {
/* 66  */                     this.dragOffset = n.timeBox.y - box.y;
/* 67  */                     box.y = n.timeBox.y - this.dragOffset;
/* 68  */                 }
/* 69  */                 else {
/* 70  */                     box.y = n.timeBox.y;
/* 71  */                 }
/* 72  */                 dt = Ext.Date.format(n.date, 'n/j g:ia');
/* 73  */                 box.x = n.el.getX();
/* 74  */ 
/* 75  */                 this.shim(n.date, box);
/* 76  */                 text = this.moveText;
/* 77  */             }
/* 78  */             if (data.type == 'eventresize') {
/* 79  */                 if (!this.resizeDt) {
/* 80  */                     this.resizeDt = n.date;
/* 81  */                 }
/* 82  */                 box.x = dayCol.getX();
/* 83  */                 box.height = Math.ceil(Math.abs(e.xy[1] - box.y) / n.timeBox.height) * n.timeBox.height;
/* 84  */                 if (e.xy[1] < box.y) {
/* 85  */                     box.y -= box.height;
/* 86  */                 }
/* 87  */                 else {
/* 88  */                     n.date = Ext.Date.add(n.date, Ext.Date.MINUTE, 30);
/* 89  */                 }
/* 90  */                 this.shim(this.resizeDt, box);
/* 91  */ 
/* 92  */                 curr = Ext.calendar.util.Date.copyTime(n.date, this.resizeDt);
/* 93  */                 start = Ext.calendar.util.Date.min(data.eventStart, curr);
/* 94  */                 end = Ext.calendar.util.Date.max(data.eventStart, curr);
/* 95  */ 
/* 96  */                 data.resizeDates = {
/* 97  */                     StartDate: start,
/* 98  */                     EndDate: end
/* 99  */                 };
/* 100 */                 dt = Ext.Date.format(start, 'g:ia-') + Ext.Date.format(end, 'g:ia');

/* DayDropZone.js */

/* 101 */                 text = this.resizeText;
/* 102 */             }
/* 103 */         }
/* 104 */ 
/* 105 */         data.proxy.updateMsg(Ext.util.Format.format(text, dt));
/* 106 */         return this.dropAllowed;
/* 107 */     },
/* 108 */ 
/* 109 */     shim: function(dt, box) {
/* 110 */         Ext.each(this.shims,
/* 111 */             function(shim) {
/* 112 */                 if (shim) {
/* 113 */                     shim.isActive = false;
/* 114 */                     shim.hide();
/* 115 */                 }
/* 116 */             }
/* 117 */         );
/* 118 */ 
/* 119 */         var shim = this.shims[0];
/* 120 */         if (!shim) {
/* 121 */             shim = this.createShim();
/* 122 */             this.shims[0] = shim;
/* 123 */         }
/* 124 */ 
/* 125 */         shim.isActive = true;
/* 126 */         shim.show();
/* 127 */         shim.setBox(box);
/* 128 */         this.DDMInstance.notifyOccluded = true;
/* 129 */     },
/* 130 */ 
/* 131 */     onNodeDrop: function(n, dd, e, data) {
/* 132 */         var rec;
/* 133 */         if (n && data) {
/* 134 */             if (data.type == 'eventdrag') {
/* 135 */                 rec = this.view.getEventRecordFromEl(data.ddel);
/* 136 */                 this.view.onEventDrop(rec, n.date);
/* 137 */                 this.onCalendarDragComplete();
/* 138 */                 delete this.dragOffset;
/* 139 */                 return true;
/* 140 */             }
/* 141 */             if (data.type == 'eventresize') {
/* 142 */                 rec = this.view.getEventRecordFromEl(data.ddel);
/* 143 */                 this.view.onEventResize(rec, data.resizeDates);
/* 144 */                 this.onCalendarDragComplete();
/* 145 */                 delete this.resizeDt;
/* 146 */                 return true;
/* 147 */             }
/* 148 */             if (data.type == 'caldrag') {
/* 149 */                 Ext.destroy(this.dragStartMarker);
/* 150 */                 delete this.dragStartMarker;

/* DayDropZone.js */

/* 151 */                 delete this.dragCreateDt;
/* 152 */                 this.view.onCalendarEndDrag(this.dragStartDate, this.dragEndDate,
/* 153 */                 Ext.bind(this.onCalendarDragComplete, this));
/* 154 */                 //shims are NOT cleared here -- they stay visible until the handling
/* 155 */                 //code calls the onCalendarDragComplete callback which hides them.
/* 156 */                 return true;
/* 157 */             }
/* 158 */         }
/* 159 */         this.onCalendarDragComplete();
/* 160 */         return false;
/* 161 */     }
/* 162 */ });
/* 163 */ 

;
/* CalendarCombo.js */

/* 1  */ /**
/* 2  *|  * @class Ext.calendar.form.field.CalendarCombo
/* 3  *|  * @extends Ext.form.ComboBox
/* 4  *|  * <p>A custom combo used for choosing from the list of available calendars to assign an event to.</p>
/* 5  *|  * <p>This is pretty much a standard combo that is simply pre-configured for the options needed by the
/* 6  *|  * calendar components. The default configs are as follows:<pre><code>
/* 7  *|     fieldLabel: 'Calendar',
/* 8  *|     triggerAction: 'all',
/* 9  *|     queryMode: 'local',
/* 10 *|     forceSelection: true,
/* 11 *|     selectOnFocus: true,
/* 12 *|     width: 200
/* 13 *| </code></pre>
/* 14 *|  * @constructor
/* 15 *|  * @param {Object} config The config object
/* 16 *|  */
/* 17 */ Ext.define('Ext.calendar.form.field.CalendarCombo', {
/* 18 */     extend: 'Ext.form.field.ComboBox',
/* 19 */     alias: 'widget.calendarpicker',
/* 20 */     requires: [
/* 21 */         'Ext.calendar.data.CalendarMappings'
/* 22 */     ],
/* 23 */ 
/* 24 */     fieldLabel: 'Calendar',
/* 25 */     triggerAction: 'all',
/* 26 */     queryMode: 'local',
/* 27 */     forceSelection: true,
/* 28 */     selectOnFocus: true,
/* 29 */     
/* 30 */     // private
/* 31 */     defaultCls: 'ext-color-default',
/* 32 */ 
/* 33 */     // private
/* 34 */     initComponent: function(){
/* 35 */         this.valueField = Ext.calendar.data.CalendarMappings.CalendarId.name;
/* 36 */         this.displayField = Ext.calendar.data.CalendarMappings.Title.name;
/* 37 */     
/* 38 */         this.listConfig = Ext.apply(this.listConfig || {}, {
/* 39 */             getInnerTpl: this.getListItemTpl
/* 40 */         });
/* 41 */         
/* 42 */         this.callParent(arguments);
/* 43 */     },
/* 44 */     
/* 45 */     // private
/* 46 */     getListItemTpl: function(displayField) {
/* 47 */         return '<div class="x-combo-list-item ext-color-{' + Ext.calendar.data.CalendarMappings.CalendarId.name +
/* 48 */                 '}"><div class="ext-cal-picker-icon">&#160;</div>{' + displayField + '}</div>';
/* 49 */     },
/* 50 */     

/* CalendarCombo.js */

/* 51 */     // private
/* 52 */     afterRender: function(){
/* 53 */         this.callParent(arguments);
/* 54 */         
/* 55 */         this.wrap = this.el.down('.x-form-text-wrap');
/* 56 */         this.wrap.addCls('ext-calendar-picker');
/* 57 */         
/* 58 */         this.icon = Ext.core.DomHelper.append(this.wrap, {
/* 59 */             tag: 'div', cls: 'ext-cal-picker-icon ext-cal-picker-mainicon'
/* 60 */         });
/* 61 */     },
/* 62 */     
/* 63 */     /* @private
/* 64 *|      * Value can be a data value or record, or an array of values or records.
/* 65 *|      */
/* 66 */     getStyleClass: function(value){
/* 67 */         var val = value;
/* 68 */         
/* 69 */         if (!Ext.isEmpty(val)) {
/* 70 */             if (Ext.isArray(val)) {
/* 71 */                 val = val[0];
/* 72 */             }
/* 73 */             return 'ext-color-' + (val.data ? val.data[Ext.calendar.data.CalendarMappings.CalendarId.name] : val); 
/* 74 */         }
/* 75 */         return '';
/* 76 */     },
/* 77 */     
/* 78 */     // inherited docs
/* 79 */     setValue: function(value) {
/* 80 */         if (!value && this.store.getCount() > 0) {
/* 81 */             // ensure that a valid value is always set if possible
/* 82 */             value = this.store.getAt(0).data[Ext.calendar.data.CalendarMappings.CalendarId.name];
/* 83 */         }
/* 84 */         
/* 85 */         if (this.wrap && value) {
/* 86 */             var currentClass = this.getStyleClass(this.getValue()),
/* 87 */                 newClass = this.getStyleClass(value);
/* 88 */             
/* 89 */             this.wrap.replaceCls(currentClass, newClass);
/* 90 */         }
/* 91 */         
/* 92 */         this.callParent(arguments);
/* 93 */     }
/* 94 */ });

;
/* DateRange.js */

/* 1   */ /**
/* 2   *|  * @class Ext.form.field.DateRange
/* 3   *|  * @extends Ext.form.Field
/* 4   *|  * <p>A combination field that includes start and end dates and times, as well as an optional all-day checkbox.</p>
/* 5   *|  * @constructor
/* 6   *|  * @param {Object} config The config object
/* 7   *|  */
/* 8   */ Ext.define('Ext.calendar.form.field.DateRange', {
/* 9   */     extend: 'Ext.form.FieldContainer',
/* 10  */     alias: 'widget.daterangefield',
/* 11  */     
/* 12  */     requires: [
/* 13  */         'Ext.form.field.Date',
/* 14  */         'Ext.form.field.Time',
/* 15  */         'Ext.form.Label',
/* 16  */         'Ext.form.field.Checkbox',
/* 17  */         'Ext.layout.container.Column'
/* 18  */     ],
/* 19  */     
/* 20  */     /**
/* 21  *|      * @cfg {String} toText
/* 22  *|      * The text to display in between the date/time fields (defaults to 'to')
/* 23  *|      */
/* 24  */     toText: 'to',
/* 25  */     /**
/* 26  *|      * @cfg {String} allDayText
/* 27  *|      * The text to display as the label for the all day checkbox (defaults to 'All day')
/* 28  *|      */
/* 29  */     allDayText: 'All day',
/* 30  */     /**
/* 31  *|      * @cfg {String/Boolean} singleLine
/* 32  *|      * `true` to render the fields all on one line, `false` to break the start date/time and end date/time
/* 33  *|      * into two stacked rows of fields to preserve horizontal space (defaults to `true`).
/* 34  *|      */
/* 35  */     singleLine: true,
/* 36  */     /**
/* 37  *|      * @cfg {String} dateFormat
/* 38  *|      * The date display format used by the date fields (defaults to 'n/j/Y') 
/* 39  *|      */
/* 40  */     dateFormat: 'n/j/Y',
/* 41  */     /**
/* 42  *|      * @cfg {String} timeFormat
/* 43  *|      * The time display format used by the time fields. By default the DateRange uses the
/* 44  *|      * {@link Ext.Date.use24HourTime} setting and sets the format to 'g:i A' for 12-hour time (e.g., 1:30 PM) 
/* 45  *|      * or 'G:i' for 24-hour time (e.g., 13:30). This can also be overridden by a static format string if desired.
/* 46  *|      */
/* 47  */     timeFormat: Ext.Date.use24HourTime ? 'G:i' : 'g:i A',
/* 48  */     
/* 49  */     // private
/* 50  */     fieldLayout: 'hbox',

/* DateRange.js */

/* 51  */ 
/* 52  */     defaults: {
/* 53  */         margin: '0 5 0 0'
/* 54  */     },
/* 55  */ 
/* 56  */     // private
/* 57  */     initComponent: function() {
/* 58  */         var me = this;
/* 59  */         
/* 60  */         me.addCls('ext-dt-range');
/* 61  */         
/* 62  */         if (me.singleLine) {
/* 63  */             me.layout = me.fieldLayout;
/* 64  */             me.items = me.getFieldConfigs();
/* 65  */         }
/* 66  */         else {
/* 67  */             me.items = [{
/* 68  */                 xtype: 'container',
/* 69  */                 layout: me.fieldLayout,
/* 70  */                 items: [
/* 71  */                     me.getStartDateConfig(),
/* 72  */                     me.getStartTimeConfig(),
/* 73  */                     me.getDateSeparatorConfig()
/* 74  */                 ]
/* 75  */             },{
/* 76  */                 xtype: 'container',
/* 77  */                 layout: me.fieldLayout,
/* 78  */                 items: [
/* 79  */                     me.getEndDateConfig(),
/* 80  */                     me.getEndTimeConfig(),
/* 81  */                     me.getAllDayConfig()
/* 82  */                 ]
/* 83  */             }];
/* 84  */         }
/* 85  */         
/* 86  */         me.callParent(arguments);
/* 87  */         me.initRefs();
/* 88  */     },
/* 89  */     
/* 90  */     initRefs: function() {
/* 91  */         var me = this;
/* 92  */         me.startDate = me.down('#' + me.id + '-start-date');
/* 93  */         me.startTime = me.down('#' + me.id + '-start-time');
/* 94  */         me.endTime = me.down('#' + me.id + '-end-time');
/* 95  */         me.endDate = me.down('#' + me.id + '-end-date');
/* 96  */         me.allDay = me.down('#' + me.id + '-allday');
/* 97  */         me.toLabel = me.down('#' + me.id + '-to-label');
/* 98  */ 
/* 99  */         me.startDate.validateOnChange = me.endDate.validateOnChange = false;
/* 100 */ 

/* DateRange.js */

/* 101 */         me.startDate.isValid = me.endDate.isValid = function() {
/* 102 */                                     var me = this,
/* 103 */                                         valid = Ext.isDate(me.getValue());
/* 104 */                                     if (!valid) {
/* 105 */                                         me.focus();
/* 106 */                                     }
/* 107 */                                     return valid;
/* 108 */                                  };
/* 109 */     },
/* 110 */ 
/* 111 */     getFieldConfigs: function() {
/* 112 */         var me = this;
/* 113 */         return [
/* 114 */             me.getStartDateConfig(),
/* 115 */             me.getStartTimeConfig(),
/* 116 */             me.getDateSeparatorConfig(),
/* 117 */             me.getEndTimeConfig(),
/* 118 */             me.getEndDateConfig(),
/* 119 */             me.getAllDayConfig()
/* 120 */         ];
/* 121 */     },
/* 122 */     
/* 123 */     getStartDateConfig: function() {
/* 124 */         return {
/* 125 */             xtype: 'datefield',
/* 126 */             itemId: this.id + '-start-date',
/* 127 */             format: this.dateFormat,
/* 128 */             width: 100,
/* 129 */             listeners: {
/* 130 */                 'blur': {
/* 131 */                     fn: function(){
/* 132 */                         this.onFieldChange('date', 'start');
/* 133 */                     },
/* 134 */                     scope: this
/* 135 */                 }
/* 136 */             }
/* 137 */         };
/* 138 */     },
/* 139 */     
/* 140 */     getStartTimeConfig: function() {
/* 141 */         return {
/* 142 */             xtype: 'timefield',
/* 143 */             itemId: this.id + '-start-time',
/* 144 */             hidden: this.showTimes === false,
/* 145 */             labelWidth: 0,
/* 146 */             hideLabel: true,
/* 147 */             width: 90,
/* 148 */             format: this.timeFormat,
/* 149 */             listeners: {
/* 150 */                 'select': {

/* DateRange.js */

/* 151 */                     fn: function(){
/* 152 */                         this.onFieldChange('time', 'start');
/* 153 */                     },
/* 154 */                     scope: this
/* 155 */                 }
/* 156 */             }
/* 157 */         };
/* 158 */     },
/* 159 */     
/* 160 */     getEndDateConfig: function() {
/* 161 */         return {
/* 162 */             xtype: 'datefield',
/* 163 */             itemId: this.id + '-end-date',
/* 164 */             format: this.dateFormat,
/* 165 */             hideLabel: true,
/* 166 */             width: 100,
/* 167 */             listeners: {
/* 168 */                 'blur': {
/* 169 */                     fn: function(){
/* 170 */                         this.onFieldChange('date', 'end');
/* 171 */                     },
/* 172 */                     scope: this
/* 173 */                 }
/* 174 */             }
/* 175 */         };
/* 176 */     },
/* 177 */     
/* 178 */     getEndTimeConfig: function() {
/* 179 */         return {
/* 180 */             xtype: 'timefield',
/* 181 */             itemId: this.id + '-end-time',
/* 182 */             hidden: this.showTimes === false,
/* 183 */             labelWidth: 0,
/* 184 */             hideLabel: true,
/* 185 */             width: 90,
/* 186 */             format: this.timeFormat,
/* 187 */             listeners: {
/* 188 */                 'select': {
/* 189 */                     fn: function(){
/* 190 */                         this.onFieldChange('time', 'end');
/* 191 */                     },
/* 192 */                     scope: this
/* 193 */                 }
/* 194 */             }
/* 195 */         };
/* 196 */     },
/* 197 */ 
/* 198 */     getDuration: function() {
/* 199 */         var me = this,
/* 200 */             start = me.getDT('start'),

/* DateRange.js */

/* 201 */             end = me.getDT('end');
/* 202 */ 
/* 203 */         return end.getTime() - start.getTime();
/* 204 */     },
/* 205 */     
/* 206 */     getAllDayConfig: function() {
/* 207 */         return {
/* 208 */             xtype: 'checkbox',
/* 209 */             itemId: this.id + '-allday',
/* 210 */             hidden: this.showTimes === false || this.showAllDay === false,
/* 211 */             boxLabel: this.allDayText,
/* 212 */             margin: '2 5 0 0',
/* 213 */             handler: this.onAllDayChange,
/* 214 */             scope: this
/* 215 */         };
/* 216 */     },
/* 217 */     
/* 218 */     onAllDayChange: function(chk, checked) {
/* 219 */         Ext.suspendLayouts();
/* 220 */         this.startTime.setDisabled(checked).setVisible(!checked);
/* 221 */         this.endTime.setDisabled(checked).setVisible(!checked);
/* 222 */         Ext.resumeLayouts(true);
/* 223 */     },
/* 224 */     
/* 225 */     getDateSeparatorConfig: function() {
/* 226 */         return {
/* 227 */             xtype: 'label',
/* 228 */             itemId: this.id + '-to-label',
/* 229 */             text: this.toText,
/* 230 */             margin: '4 5 0 0'
/* 231 */         };
/* 232 */     },
/* 233 */     
/* 234 */     isSingleLine: function() {
/* 235 */         var me = this;
/* 236 */         
/* 237 */         if (me.calculatedSingleLine === undefined) {
/* 238 */             if(me.singleLine == 'auto'){
/* 239 */                 var ownerCtEl = me.ownerCt.getEl(),
/* 240 */                     w = me.ownerCt.getWidth() - ownerCtEl.getPadding('lr'),
/* 241 */                     el = ownerCtEl.down('.x-panel-body');
/* 242 */                     
/* 243 */                 if(el){
/* 244 */                     w -= el.getPadding('lr');
/* 245 */                 }
/* 246 */                 
/* 247 */                 el = ownerCtEl.down('.x-form-item-label');
/* 248 */                 if(el){
/* 249 */                     w -= el.getWidth() - el.getPadding('lr');
/* 250 */                 }

/* DateRange.js */

/* 251 */                 me.calculatedSingleLine = w <= me.singleLineMinWidth ? false : true;
/* 252 */             }
/* 253 */             else {
/* 254 */                 me.calculatedSingleLine = me.singleLine !== undefined ? me.singleLine : true;
/* 255 */             }
/* 256 */         }
/* 257 */         return me.calculatedSingleLine;
/* 258 */     },
/* 259 */ 
/* 260 */     // private
/* 261 */     onFieldChange: function(type, startend){
/* 262 */         this.checkDates(type, startend);
/* 263 */         this.fireEvent('change', this, this.getValue());
/* 264 */     },
/* 265 */         
/* 266 */     // private
/* 267 */     checkDates: function(type, startend){
/* 268 */         var me = this,
/* 269 */             startField = me.down('#' + me.id + '-start-' + type),
/* 270 */             endField = me.down('#' + me.id + '-end-' + type),
/* 271 */             startValue = me.getDT('start'),
/* 272 */             endValue = me.getDT('end');
/* 273 */ 
/* 274 */         if (!startValue || !endValue) {
/* 275 */             return;
/* 276 */         }
/* 277 */ 
/* 278 */         if(startValue > endValue){
/* 279 */             if(startend=='start'){
/* 280 */                 endField.setValue(startValue);
/* 281 */             }else{
/* 282 */                 startField.setValue(endValue);
/* 283 */                 me.checkDates(type, 'start');
/* 284 */             }
/* 285 */         }
/* 286 */         if(type=='date'){
/* 287 */             me.checkDates('time', startend);
/* 288 */         }
/* 289 */     },
/* 290 */     
/* 291 */     /**
/* 292 *|      * Returns an array containing the following values in order:<div class="mdetail-params"><ul>
/* 293 *|      * <li><b><code>DateTime</code></b> : <div class="sub-desc">The start date/time</div></li>
/* 294 *|      * <li><b><code>DateTime</code></b> : <div class="sub-desc">The end date/time</div></li>
/* 295 *|      * <li><b><code>Boolean</code></b> : <div class="sub-desc">True if the dates are all-day, false 
/* 296 *|      * if the time values should be used</div></li><ul></div>
/* 297 *|      * @return {Array} The array of return values
/* 298 *|      */
/* 299 */     getValue: function(){
/* 300 */         var eDate = Ext.calendar.util.Date,

/* DateRange.js */

/* 301 */             start = this.getDT('start'),
/* 302 */             end = this.getDT('end'),
/* 303 */             allDay = this.allDay.getValue();
/* 304 */         
/* 305 */         if (Ext.isDate(start) && Ext.isDate(end) && start.getTime() !== end.getTime()) {
/* 306 */             if (!allDay && eDate.isMidnight(start) && eDate.isMidnight(end)) {
/* 307 */                 // 12:00am -> 12:00am over n days, all day event
/* 308 */                 allDay = true;
/* 309 */                 end = eDate.add(end, {
/* 310 */                     days: -1
/* 311 */                 });
/* 312 */             }
/* 313 */         }
/* 314 */         
/* 315 */         return [
/* 316 */             start, 
/* 317 */             end,
/* 318 */             allDay
/* 319 */         ];
/* 320 */     },
/* 321 */     
/* 322 */     // private getValue helper
/* 323 */     getDT: function(startend){
/* 324 */         var time = this[startend+'Time'].getValue(),
/* 325 */             dt = this[startend+'Date'].getValue();
/* 326 */             
/* 327 */         if(Ext.isDate(dt)){
/* 328 */             dt = Ext.Date.format(dt, this[startend + 'Date'].format);
/* 329 */         }
/* 330 */         else{
/* 331 */             return null;
/* 332 */         }
/* 333 */         if(time && time !== ''){
/* 334 */             time = Ext.Date.format(time, this[startend+'Time'].format);
/* 335 */             var val = Ext.Date.parseDate(dt + ' ' + time, this[startend+'Date'].format + ' ' + this[startend+'Time'].format);
/* 336 */             return val;
/* 337 */             //return Ext.Date.parseDate(dt+' '+time, this[startend+'Date'].format+' '+this[startend+'Time'].format);
/* 338 */         }
/* 339 */         return Ext.Date.parseDate(dt, this[startend+'Date'].format);
/* 340 */         
/* 341 */     },
/* 342 */     
/* 343 */     /**
/* 344 *|      * Sets the values to use in the date range.
/* 345 *|      * @param {Array/Date/Object} v The value(s) to set into the field. Valid types are as follows:<div class="mdetail-params"><ul>
/* 346 *|      * <li><b><code>Array</code></b> : <div class="sub-desc">An array containing, in order, a start date, end date and all-day flag.
/* 347 *|      * This array should exactly match the return type as specified by {@link #getValue}.</div></li>
/* 348 *|      * <li><b><code>DateTime</code></b> : <div class="sub-desc">A single Date object, which will be used for both the start and
/* 349 *|      * end dates in the range.  The all-day flag will be defaulted to false.</div></li>
/* 350 *|      * <li><b><code>Object</code></b> : <div class="sub-desc">An object containing properties for StartDate, EndDate and IsAllDay

/* DateRange.js *|

/* 351 *|      * as defined in {@link Ext.calendar.data.EventMappings}.</div></li><ul></div>
/* 352 *|      */
/* 353 */     setValue: function(v){
/* 354 */         if(!v) {
/* 355 */             return;
/* 356 */         }
/* 357 */         if(Ext.isArray(v)){
/* 358 */             this.setDT(v[0], 'start');
/* 359 */             this.setDT(v[1], 'end');
/* 360 */             this.allDay.setValue(!!v[2]);
/* 361 */         }
/* 362 */         else if(Ext.isDate(v)){
/* 363 */             this.setDT(v, 'start');
/* 364 */             this.setDT(v, 'end');
/* 365 */             this.allDay.setValue(false);
/* 366 */         }
/* 367 */         else if(v[Ext.calendar.data.EventMappings.StartDate.name]){ //object
/* 368 */             this.setDT(v[Ext.calendar.data.EventMappings.StartDate.name], 'start');
/* 369 */             if(!this.setDT(v[Ext.calendar.data.EventMappings.EndDate.name], 'end')){
/* 370 */                 this.setDT(v[Ext.calendar.data.EventMappings.StartDate.name], 'end');
/* 371 */             }
/* 372 */             this.allDay.setValue(!!v[Ext.calendar.data.EventMappings.IsAllDay.name]);
/* 373 */         }
/* 374 */     },
/* 375 */     
/* 376 */     // private setValue helper
/* 377 */     setDT: function(dt, startend){
/* 378 */         if(dt && Ext.isDate(dt)){
/* 379 */             this[startend + 'Date'].setValue(dt);
/* 380 */             this[startend + 'Time'].setValue(Ext.Date.format(dt, this[startend + 'Time'].format));
/* 381 */             return true;
/* 382 */         }
/* 383 */     },
/* 384 */     
/* 385 */     // inherited docs
/* 386 */     isDirty: function(){
/* 387 */         var dirty = false;
/* 388 */         if(this.rendered && !this.disabled) {
/* 389 */             this.items.each(function(item){
/* 390 */                 if (item.isDirty()) {
/* 391 */                     dirty = true;
/* 392 */                     return false;
/* 393 */                 }
/* 394 */             });
/* 395 */         }
/* 396 */         return dirty;
/* 397 */     },
/* 398 */     
/* 399 */     // private
/* 400 */     onDisable : function(){

/* DateRange.js */

/* 401 */         this.delegateFn('disable');
/* 402 */     },
/* 403 */     
/* 404 */     // private
/* 405 */     onEnable : function(){
/* 406 */         this.delegateFn('enable');
/* 407 */     },
/* 408 */     
/* 409 */     // inherited docs
/* 410 */     reset : function(){
/* 411 */         this.delegateFn('reset');
/* 412 */     },
/* 413 */     
/* 414 */     // private
/* 415 */     delegateFn : function(fn){
/* 416 */         this.items.each(function(item){
/* 417 */             if (item[fn]) {
/* 418 */                 item[fn]();
/* 419 */             }
/* 420 */         });
/* 421 */     },
/* 422 */     
/* 423 */     // private
/* 424 */     beforeDestroy: function(){
/* 425 */         Ext.destroy(this.fieldCt);
/* 426 */         this.callParent(arguments);
/* 427 */     },
/* 428 */     
/* 429 */     /**
/* 430 *|      * @method getRawValue
/* 431 *|      * @hide
/* 432 *|      */
/* 433 */     getRawValue : Ext.emptyFn,
/* 434 */     /**
/* 435 *|      * @method setRawValue
/* 436 *|      * @hide
/* 437 *|      */
/* 438 */     setRawValue : Ext.emptyFn
/* 439 */ });

;
/* ReminderCombo.js */

/* 1  */ /**
/* 2  *|  * @class Ext.calendar.form.field.ReminderCombo
/* 3  *|  * @extends Ext.form.ComboBox
/* 4  *|  * <p>A custom combo used for choosing a reminder setting for an event.</p>
/* 5  *|  * <p>This is pretty much a standard combo that is simply pre-configured for the options needed by the
/* 6  *|  * calendar components. The default configs are as follows:<pre><code>
/* 7  *|     width: 200,
/* 8  *|     fieldLabel: 'Reminder',
/* 9  *|     queryMode: 'local',
/* 10 *|     triggerAction: 'all',
/* 11 *|     forceSelection: true,
/* 12 *|     displayField: 'desc',
/* 13 *|     valueField: 'value'
/* 14 *| </code></pre>
/* 15 *|  * @constructor
/* 16 *|  * @param {Object} config The config object
/* 17 *|  */
/* 18 */ Ext.define('Ext.calendar.form.field.ReminderCombo', {
/* 19 */     extend: 'Ext.form.field.ComboBox',
/* 20 */     alias: 'widget.reminderfield',
/* 21 */ 
/* 22 */     fieldLabel: 'Reminder',
/* 23 */     queryMode: 'local',
/* 24 */     triggerAction: 'all',
/* 25 */     forceSelection: true,
/* 26 */     displayField: 'desc',
/* 27 */     valueField: 'value',
/* 28 */ 
/* 29 */     // private
/* 30 */     initComponent: function() {
/* 31 */         this.store = this.store || new Ext.data.ArrayStore({
/* 32 */             fields: ['value', 'desc'],
/* 33 */             idIndex: 0,
/* 34 */             data: [
/* 35 */             ['', 'None'],
/* 36 */             ['0', 'At start time'],
/* 37 */             ['5', '5 minutes before start'],
/* 38 */             ['15', '15 minutes before start'],
/* 39 */             ['30', '30 minutes before start'],
/* 40 */             ['60', '1 hour before start'],
/* 41 */             ['90', '1.5 hours before start'],
/* 42 */             ['120', '2 hours before start'],
/* 43 */             ['180', '3 hours before start'],
/* 44 */             ['360', '6 hours before start'],
/* 45 */             ['720', '12 hours before start'],
/* 46 */             ['1440', '1 day before start'],
/* 47 */             ['2880', '2 days before start'],
/* 48 */             ['4320', '3 days before start'],
/* 49 */             ['5760', '4 days before start'],
/* 50 */             ['7200', '5 days before start'],

/* ReminderCombo.js */

/* 51 */             ['10080', '1 week before start'],
/* 52 */             ['20160', '2 weeks before start']
/* 53 */             ]
/* 54 */         });
/* 55 */ 
/* 56 */         this.callParent();
/* 57 */     },
/* 58 */ 
/* 59 */     // inherited docs
/* 60 */     initValue: function() {
/* 61 */         if (this.value !== undefined) {
/* 62 */             this.setValue(this.value);
/* 63 */         }
/* 64 */         else {
/* 65 */             this.setValue('');
/* 66 */         }
/* 67 */         this.originalValue = this.getValue();
/* 68 */     }
/* 69 */ });
/* 70 */ 

;
/* EventDetails.js */

/* 1   */ /**
/* 2   *|  * @class Ext.calendar.form.EventDetails
/* 3   *|  * @extends Ext.form.Panel
/* 4   *|  * <p>A custom form used for detailed editing of events.</p>
/* 5   *|  * <p>This is pretty much a standard form that is simply pre-configured for the options needed by the
/* 6   *|  * calendar components. It is also configured to automatically bind records of type {@link Ext.calendar.EventRecord}
/* 7   *|  * to and from the form.</p>
/* 8   *|  * <p>This form also provides custom events specific to the calendar so that other calendar components can be easily
/* 9   *|  * notified when an event has been edited via this component.</p>
/* 10  *|  * <p>The default configs are as follows:</p><pre><code>
/* 11  *|     fieldDefaults: {
/* 12  *|         msgTarget: 'side',
/* 13  *|         labelWidth: 65
/* 14  *|     },
/* 15  *|     title: 'Event Form',
/* 16  *|     titleTextAdd: 'Add Event',
/* 17  *|     titleTextEdit: 'Edit Event',
/* 18  *|     bodyStyle: 'background:transparent;padding:20px 20px 10px;',
/* 19  *|     border: false,
/* 20  *|     buttonAlign: 'center',
/* 21  *|     autoHeight: true,
/* 22  *|     cls: 'ext-evt-edit-form',
/* 23  *| </code></pre>
/* 24  *|  * @constructor
/* 25  *|  * @param {Object} config The config object
/* 26  *|  */
/* 27  */ Ext.define('Ext.calendar.form.EventDetails', {
/* 28  */     extend: 'Ext.form.Panel',
/* 29  */     alias: 'widget.eventeditform',
/* 30  */ 
/* 31  */     requires: [
/* 32  */         'Ext.calendar.form.field.DateRange',
/* 33  */         'Ext.calendar.form.field.ReminderCombo',
/* 34  */         'Ext.calendar.data.EventMappings',
/* 35  */         'Ext.calendar.form.field.CalendarCombo'
/* 36  */     ],
/* 37  */ 
/* 38  */     fieldDefaults: {
/* 39  */         msgTarget: 'side',
/* 40  */         labelWidth: 65
/* 41  */     },
/* 42  */     title: 'Event Form',
/* 43  */     titleTextAdd: 'Add Event',
/* 44  */     titleTextEdit: 'Edit Event',
/* 45  */     bodyStyle: 'background:transparent;padding:20px 20px 10px;',
/* 46  */     border: false,
/* 47  */     buttonAlign: 'center',
/* 48  */     autoHeight: true,
/* 49  */     // to allow for the notes field to autogrow
/* 50  */     cls: 'ext-evt-edit-form',

/* EventDetails.js */

/* 51  */ 
/* 52  */     // private properties:
/* 53  */     newId: 10000,
/* 54  */     layout: {
/* 55  */         type: 'hbox',
/* 56  */         align: 'stretch'
/* 57  */     },
/* 58  */ 
/* 59  */     /**
/* 60  *|      * @event eventadd
/* 61  *|      * Fires after a new event is added
/* 62  *|      * @param {Ext.calendar.form.EventDetails} this
/* 63  *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was added
/* 64  *|      */
/* 65  */ 
/* 66  */     /**
/* 67  *|      * @event eventupdate
/* 68  *|      * Fires after an existing event is updated
/* 69  *|      * @param {Ext.calendar.form.EventDetails} this
/* 70  *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was updated
/* 71  *|      */
/* 72  */ 
/* 73  */     /**
/* 74  *|      * @event eventdelete
/* 75  *|      * Fires after an event is deleted
/* 76  *|      * @param {Ext.calendar.form.EventDetails} this
/* 77  *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was deleted
/* 78  *|      */
/* 79  */ 
/* 80  */     /**
/* 81  *|      * @event eventcancel
/* 82  *|      * Fires after an event add/edit operation is canceled by the user and no store update took place
/* 83  *|      * @param {Ext.calendar.form.EventDetails} this
/* 84  *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was canceled
/* 85  *|      */
/* 86  */ 
/* 87  */     // private
/* 88  */     initComponent: function() {
/* 89  */         this.titleField = new Ext.form.Text({
/* 90  */             fieldLabel: 'Title',
/* 91  */             name: Ext.calendar.data.EventMappings.Title.name,
/* 92  */             emptyText: 'Event Title',
/* 93  */             allowBlank: false,
/* 94  */             anchor: '90%'
/* 95  */         });
/* 96  */         this.dateRangeField = new Ext.calendar.form.field.DateRange({
/* 97  */             fieldLabel: 'When',
/* 98  */             singleLine: false,
/* 99  */             anchor: '90%'
/* 100 */         });

/* EventDetails.js */

/* 101 */         this.reminderField = new Ext.calendar.form.field.ReminderCombo({
/* 102 */             name: 'Reminder',
/* 103 */             anchor: '70%'
/* 104 */         });
/* 105 */         this.notesField = new Ext.form.TextArea({
/* 106 */             fieldLabel: 'Notes',
/* 107 */             name: Ext.calendar.data.EventMappings.Notes.name,
/* 108 */             grow: true,
/* 109 */             growMax: 150,
/* 110 */             anchor: '100%'
/* 111 */         });
/* 112 */         this.locationField = new Ext.form.Text({
/* 113 */             fieldLabel: 'Location',
/* 114 */             name: Ext.calendar.data.EventMappings.Location.name,
/* 115 */             anchor: '100%'
/* 116 */         });
/* 117 */         this.urlField = new Ext.form.Text({
/* 118 */             fieldLabel: 'Web Link',
/* 119 */             name: Ext.calendar.data.EventMappings.Url.name,
/* 120 */             anchor: '100%'
/* 121 */         });
/* 122 */ 
/* 123 */         var leftFields = [this.titleField, this.dateRangeField, this.reminderField],
/* 124 */         rightFields = [this.notesField, this.locationField, this.urlField];
/* 125 */ 
/* 126 */         if (this.calendarStore) {
/* 127 */             this.calendarField = new Ext.calendar.form.field.CalendarCombo({
/* 128 */                 store: this.calendarStore,
/* 129 */                 anchor: '70%',
/* 130 */                 name: Ext.calendar.data.EventMappings.CalendarId.name
/* 131 */             });
/* 132 */             leftFields.splice(2, 0, this.calendarField);
/* 133 */         }
/* 134 */ 
/* 135 */         this.items = [{
/* 136 */             id: 'left-col',
/* 137 */             flex: 0.65,
/* 138 */             layout: 'anchor',
/* 139 */             border: false,
/* 140 */             items: leftFields
/* 141 */         },
/* 142 */         {
/* 143 */             id: 'right-col',
/* 144 */             flex: 0.35,
/* 145 */             layout: 'anchor',
/* 146 */             border: false,
/* 147 */             items: rightFields
/* 148 */         }];
/* 149 */ 
/* 150 */         this.fbar = [{

/* EventDetails.js */

/* 151 */             cls: 'ext-del-btn',
/* 152 */             itemId: this.id+'-del-btn',
/* 153 */             text: 'Delete Event',
/* 154 */             scope: this,
/* 155 */             handler: this.onDelete,
/* 156 */             minWidth: 150
/* 157 */         },
/* 158 */         {
/* 159 */             text: L.Save,
/* 160 */             scope: this,
/* 161 */             handler: this.onSave
/* 162 */         },
/* 163 */         {
/* 164 */             text: 'Cancel',
/* 165 */             scope: this,
/* 166 */             handler: this.onCancel
/* 167 */         }];
/* 168 */ 
/* 169 */         this.callParent(arguments);
/* 170 */     },
/* 171 */ 
/* 172 */     // inherited docs
/* 173 */     loadRecord: function(rec){
/* 174 */         this.form.reset().loadRecord.apply(this.form, arguments);
/* 175 */         this.activeRecord = rec;
/* 176 */         this.dateRangeField.setValue(rec.data);
/* 177 */ 
/* 178 */         if(this.calendarStore){
/* 179 */             this.form.setValues({
/* 180 */                 'calendar': rec.data[Ext.calendar.data.EventMappings.CalendarId.name]
/* 181 */             });
/* 182 */         }
/* 183 */ 
/* 184 */         if (rec.phantom) {
/* 185 */             this.setTitle(this.titleTextAdd);
/* 186 */             this.down('#' + this.id + '-del-btn').hide();
/* 187 */         }
/* 188 */         else {
/* 189 */             this.setTitle(this.titleTextEdit);
/* 190 */             this.down('#' + this.id + '-del-btn').show();
/* 191 */         }
/* 192 */         this.titleField.focus();
/* 193 */     },
/* 194 */ 
/* 195 */     // inherited docs
/* 196 */     updateRecord: function(){
/* 197 */         var dates = this.dateRangeField.getValue(),
/* 198 */             M = Ext.calendar.data.EventMappings,
/* 199 */             rec = this.activeRecord,
/* 200 */             fs = rec.fields,

/* EventDetails.js */

/* 201 */             dirty = false;
/* 202 */ 
/* 203 */         rec.beginEdit();
/* 204 */ 
/* 205 */         //TODO: This block is copied directly from BasicForm.updateRecord.
/* 206 */         // Unfortunately since that method internally calls begin/endEdit all
/* 207 */         // updates happen and the record dirty status is reset internally to
/* 208 */         // that call. We need the dirty status, plus currently the DateRangeField
/* 209 */         // does not map directly to the record values, so for now we'll duplicate
/* 210 */         // the setter logic here (we need to be able to pick up any custom-added
/* 211 */         // fields generically). Need to revisit this later and come up with a better solution.
/* 212 */         Ext.Array.each(fs, function(f){
/* 213 */             var field = this.form.findField(f.name);
/* 214 */             if(field){
/* 215 */                 var value = field.getValue();
/* 216 */                 if (value.getGroupValue) {
/* 217 */                     value = value.getGroupValue();
/* 218 */                 }
/* 219 */                 else if (field.eachItem) {
/* 220 */                     value = [];
/* 221 */                     field.eachItem(function(item){
/* 222 */                         value.push(item.getValue());
/* 223 */                     });
/* 224 */                 }
/* 225 */                 rec.set(f.name, value);
/* 226 */             }
/* 227 */         }, this);
/* 228 */ 
/* 229 */         rec.set(M.StartDate.name, dates[0]);
/* 230 */         rec.set(M.EndDate.name, dates[1]);
/* 231 */         rec.set(M.IsAllDay.name, dates[2]);
/* 232 */ 
/* 233 */         dirty = rec.dirty;
/* 234 */         rec.endEdit();
/* 235 */ 
/* 236 */         return dirty;
/* 237 */     },
/* 238 */ 
/* 239 */     setStartDate: function(d) {
/* 240 */         var me = this,
/* 241 */             duration = me.dateRangeField.getDuration();
/* 242 */ 
/* 243 */         me.dateRangeField.setDT(d, 'start');
/* 244 */ 
/* 245 */         // Set the end time to keep the duration the same
/* 246 */         me.dateRangeField.setDT(new Date(me.dateRangeField.getDT('start').getTime() + duration), 'end');
/* 247 */     },
/* 248 */ 
/* 249 */     setEndDate: function(d) {
/* 250 */         this.dateRangeField.setDT(d, 'end');

/* EventDetails.js */

/* 251 */     },
/* 252 */ 
/* 253 */     // private
/* 254 */     onCancel: function() {
/* 255 */         this.cleanup(true);
/* 256 */         this.fireEvent('eventcancel', this, this.activeRecord);
/* 257 */     },
/* 258 */ 
/* 259 */     // private
/* 260 */     cleanup: function(hide) {
/* 261 */         if (this.activeRecord && this.activeRecord.dirty) {
/* 262 */             this.activeRecord.reject();
/* 263 */         }
/* 264 */         delete this.activeRecord;
/* 265 */ 
/* 266 */         if (this.form.isDirty()) {
/* 267 */             this.form.reset();
/* 268 */         }
/* 269 */     },
/* 270 */ 
/* 271 */     // private
/* 272 */     onSave: function(){
/* 273 */         if(!this.form.isValid()){
/* 274 */             return;
/* 275 */         }
/* 276 */         if(!this.updateRecord()){
/* 277 */             this.onCancel();
/* 278 */             return;
/* 279 */         }
/* 280 */         this.fireEvent(this.activeRecord.phantom ? 'eventadd' : 'eventupdate', this, this.activeRecord);
/* 281 */     },
/* 282 */ 
/* 283 */     // private
/* 284 */     onDelete: function() {
/* 285 */         this.fireEvent('eventdelete', this, this.activeRecord);
/* 286 */     }
/* 287 */ });
/* 288 */ 

;
/* EventWindow.js */

/* 1   */ /**
/* 2   *|  * @class Ext.calendar.form.EventWindow
/* 3   *|  * @extends Ext.Window
/* 4   *|  * <p>A custom window containing a basic edit form used for quick editing of events.</p>
/* 5   *|  * <p>This window also provides custom events specific to the calendar so that other calendar components can be easily
/* 6   *|  * notified when an event has been edited via this component.</p>
/* 7   *|  * @constructor
/* 8   *|  * @param {Object} config The config object
/* 9   *|  */
/* 10  */ Ext.define('Ext.calendar.form.EventWindow', {
/* 11  */     extend: 'Ext.window.Window',
/* 12  */     alias: 'widget.eventeditwindow',
/* 13  */     
/* 14  */     requires: [
/* 15  */         'Ext.form.Panel',
/* 16  */         'Ext.calendar.util.Date',
/* 17  */         'Ext.calendar.data.EventModel',
/* 18  */         'Ext.calendar.data.EventMappings'
/* 19  */     ],
/* 20  */ 
/* 21  */     constructor: function(config) {
/* 22  */         var formPanelCfg = {
/* 23  */             xtype: 'form',
/* 24  */             fieldDefaults: {
/* 25  */                 msgTarget: 'side',
/* 26  */                 labelWidth: 65
/* 27  */             },
/* 28  */             frame: false,
/* 29  */             bodyStyle: 'background:transparent;padding:5px 10px 10px;',
/* 30  */             bodyBorder: false,
/* 31  */             border: false,
/* 32  */             items: [{
/* 33  */                 itemId: 'title',
/* 34  */                 name: Ext.calendar.data.EventMappings.Title.name,
/* 35  */                 fieldLabel: 'Title',
/* 36  */                 xtype: 'textfield',
/* 37  */                 allowBlank: false,
/* 38  */                 emptyText: 'Event Title',
/* 39  */                 anchor: '100%'
/* 40  */             },
/* 41  */             {
/* 42  */                 xtype: 'daterangefield',
/* 43  */                 itemId: 'date-range',
/* 44  */                 name: 'dates',
/* 45  */                 anchor: '100%',
/* 46  */                 fieldLabel: 'When'
/* 47  */             }]
/* 48  */         };
/* 49  */     
/* 50  */         if (config.calendarStore) {

/* EventWindow.js */

/* 51  */             this.calendarStore = config.calendarStore;
/* 52  */             delete config.calendarStore;
/* 53  */     
/* 54  */             formPanelCfg.items.push({
/* 55  */                 xtype: 'calendarpicker',
/* 56  */                 itemId: 'calendar',
/* 57  */                 name: Ext.calendar.data.EventMappings.CalendarId.name,
/* 58  */                 anchor: '100%',
/* 59  */                 store: this.calendarStore
/* 60  */             });
/* 61  */         }
/* 62  */     
/* 63  */         this.callParent([Ext.apply({
/* 64  */             titleTextAdd: 'Add Event',
/* 65  */             titleTextEdit: 'Edit Event',
/* 66  */             width: 600,
/* 67  */             autocreate: true,
/* 68  */             border: true,
/* 69  */             closeAction: 'hide',
/* 70  */             modal: false,
/* 71  */             resizable: false,
/* 72  */             buttonAlign: 'left',
/* 73  */             savingMessage: 'Saving changes...',
/* 74  */             deletingMessage: 'Deleting event...',
/* 75  */             layout: 'fit',
/* 76  */     
/* 77  */             defaultFocus: 'title',
/* 78  */             onEsc: function(key, event) {
/* 79  */                         event.target.blur(); // Remove the focus to avoid doing the validity checks when the window is shown again.
/* 80  */                         this.onCancel();
/* 81  */                     },
/* 82  */ 
/* 83  */             fbar: [{
/* 84  */                 xtype: 'tbtext',
/* 85  */                 text: '<a href="#" id="tblink">Edit Details...</a>'
/* 86  */             },
/* 87  */             '->',
/* 88  */             {
/* 89  */                 itemId: 'delete-btn',
/* 90  */                 text: 'Delete Event',
/* 91  */                 disabled: false,
/* 92  */                 handler: this.onDelete,
/* 93  */                 scope: this,
/* 94  */                 minWidth: 150,
/* 95  */                 hideMode: 'offsets'
/* 96  */             },
/* 97  */             {
/* 98  */                 text: 'Save',
/* 99  */                 disabled: false,
/* 100 */                 handler: this.onSave,

/* EventWindow.js */

/* 101 */                 scope: this
/* 102 */             },
/* 103 */             {
/* 104 */                 text: 'Cancel',
/* 105 */                 disabled: false,
/* 106 */                 handler: this.onCancel,
/* 107 */                 scope: this
/* 108 */             }],
/* 109 */             items: formPanelCfg
/* 110 */         },
/* 111 */         config)]);
/* 112 */     },
/* 113 */ 
/* 114 */     // private
/* 115 */     newId: 10000,
/* 116 */ 
/* 117 */     /**
/* 118 *|      * @event eventadd
/* 119 *|      * Fires after a new event is added
/* 120 *|      * @param {Ext.calendar.form.EventWindow} this
/* 121 *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was added
/* 122 *|      */
/* 123 */ 
/* 124 */     /**
/* 125 *|      * @event eventupdate
/* 126 *|      * Fires after an existing event is updated
/* 127 *|      * @param {Ext.calendar.form.EventWindow} this
/* 128 *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was updated
/* 129 *|      */
/* 130 */ 
/* 131 */     /**
/* 132 *|      * @event eventdelete
/* 133 *|      * Fires after an event is deleted
/* 134 *|      * @param {Ext.calendar.form.EventWindow} this
/* 135 *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was deleted
/* 136 *|      */
/* 137 */ 
/* 138 */     /**
/* 139 *|      * @event eventcancel
/* 140 *|      * Fires after an event add/edit operation is canceled by the user and no store update took place
/* 141 *|      * @param {Ext.calendar.form.EventWindow} this
/* 142 *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was canceled
/* 143 *|      */
/* 144 */ 
/* 145 */     /**
/* 146 *|      * @event editdetails
/* 147 *|      * Fires when the user selects the option in this window to continue editing in the detailed edit form
/* 148 *|      * (by default, an instance of {@link Ext.calendar.EventEditForm}. Handling code should hide this window
/* 149 *|      * and transfer the current event record to the appropriate instance of the detailed form by showing it
/* 150 *|      * and calling {@link Ext.calendar.EventEditForm#loadRecord loadRecord}.

/* EventWindow.js *|

/* 151 *|      * @param {Ext.calendar.form.EventWindow} this
/* 152 *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} that is currently being edited
/* 153 *|      */
/* 154 */ 
/* 155 */     // private
/* 156 */     initComponent: function() {
/* 157 */         this.callParent();
/* 158 */ 
/* 159 */         this.formPanel = this.items.items[0];
/* 160 */     },
/* 161 */ 
/* 162 */     // private
/* 163 */     afterRender: function() {
/* 164 */         this.callParent();
/* 165 */ 
/* 166 */         this.el.addCls('ext-cal-event-win');
/* 167 */ 
/* 168 */         Ext.get('tblink').on('click', this.onEditDetailsClick, this);
/* 169 */         
/* 170 */         this.titleField = this.down('#title');
/* 171 */         this.dateRangeField = this.down('#date-range');
/* 172 */         this.calendarField = this.down('#calendar');
/* 173 */         this.deleteButton = this.down('#delete-btn');
/* 174 */     },
/* 175 */     
/* 176 */     // private
/* 177 */     onEditDetailsClick: function(e){
/* 178 */         e.stopEvent();
/* 179 */         this.updateRecord(this.activeRecord, true);
/* 180 */         this.fireEvent('editdetails', this, this.activeRecord, this.animateTarget);
/* 181 */     },
/* 182 */ 
/* 183 */     /**
/* 184 *|      * Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
/* 185 *| 	 * @param {Ext.data.Record/Object} o Either a {@link Ext.data.Record} if showing the form
/* 186 *| 	 * for an existing event in edit mode, or a plain object containing a StartDate property (and 
/* 187 *| 	 * optionally an EndDate property) for showing the form in add mode. 
/* 188 *|      * @param {String/Element} animateTarget (optional) The target element or id from which the window should
/* 189 *|      * animate while opening (defaults to null with no animation)
/* 190 *|      * @return {Ext.Window} this
/* 191 *|      */
/* 192 */     show: function(o, animateTarget) {
/* 193 */         // Work around the CSS day cell height hack needed for initial render in IE8/strict:
/* 194 */         var me = this,
/* 195 */             anim = (Ext.isIE8 && Ext.isStrict) ? null: animateTarget,
/* 196 */             M = Ext.calendar.data.EventMappings,
/* 197 */             data = {};
/* 198 */ 
/* 199 */         this.callParent([anim, function(){
/* 200 */             me.titleField.focus(true);

/* EventWindow.js */

/* 201 */         }]);
/* 202 */         
/* 203 */         this.deleteButton[o.data && o.data[M.EventId.name] ? 'show': 'hide']();
/* 204 */ 
/* 205 */         var rec,
/* 206 */         f = this.formPanel.form;
/* 207 */ 
/* 208 */         if (o.data) {
/* 209 */             rec = o;
/* 210 */             this.setTitle(rec.phantom ? this.titleTextAdd : this.titleTextEdit);
/* 211 */             f.loadRecord(rec);
/* 212 */         }
/* 213 */         else {
/* 214 */             this.setTitle(this.titleTextAdd);
/* 215 */ 
/* 216 */             var start = o[M.StartDate.name],
/* 217 */                 end = o[M.EndDate.name] || Ext.calendar.util.Date.add(start, {hours: 1});
/* 218 */             
/* 219 */             data[M.StartDate.name] = start;
/* 220 */             data[M.EndDate.name] = end;
/* 221 */             data[M.IsAllDay.name] = !!o[M.IsAllDay.name] || start.getDate() != Ext.calendar.util.Date.add(end, {millis: 1}).getDate();
/* 222 */             rec = new Ext.calendar.data.EventModel(data);
/* 223 */ 
/* 224 */             f.reset();
/* 225 */             f.loadRecord(rec);
/* 226 */         }
/* 227 */ 
/* 228 */         if (this.calendarStore) {
/* 229 */             this.calendarField.setValue(rec.data[M.CalendarId.name]);
/* 230 */         }
/* 231 */         this.dateRangeField.setValue(rec.data);
/* 232 */         this.activeRecord = rec;
/* 233 */ 
/* 234 */         return this;
/* 235 */     },
/* 236 */ 
/* 237 */     // private
/* 238 */     roundTime: function(dt, incr) {
/* 239 */         incr = incr || 15;
/* 240 */         var m = parseInt(dt.getMinutes(), 10);
/* 241 */         return dt.add('mi', incr - (m % incr));
/* 242 */     },
/* 243 */ 
/* 244 */     // private
/* 245 */     onCancel: function() {
/* 246 */         this.cleanup(true);
/* 247 */         this.fireEvent('eventcancel', this);
/* 248 */     },
/* 249 */ 
/* 250 */     // private

/* EventWindow.js */

/* 251 */     cleanup: function(hide) {
/* 252 */         if (this.activeRecord && this.activeRecord.dirty) {
/* 253 */             this.activeRecord.reject();
/* 254 */         }
/* 255 */         delete this.activeRecord;
/* 256 */ 
/* 257 */         if (hide === true) {
/* 258 */             // Work around the CSS day cell height hack needed for initial render in IE8/strict:
/* 259 */             //var anim = afterDelete || (Ext.isIE8 && Ext.isStrict) ? null : this.animateTarget;
/* 260 */             this.hide();
/* 261 */         }
/* 262 */     },
/* 263 */ 
/* 264 */     // private
/* 265 */     updateRecord: function(record, keepEditing) {
/* 266 */         var fields = record.getFields(),
/* 267 */             values = this.formPanel.getForm().getValues(),
/* 268 */             name,
/* 269 */             M = Ext.calendar.data.EventMappings,
/* 270 */             obj = {};
/* 271 */ 
/* 272 */         Ext.Array.each(fields, function(f) {
/* 273 */             name = f.name;
/* 274 */             if (name in values) {
/* 275 */                 obj[name] = values[name];
/* 276 */             }
/* 277 */         });
/* 278 */         
/* 279 */         var dates = this.dateRangeField.getValue();
/* 280 */         obj[M.StartDate.name] = dates[0];
/* 281 */         obj[M.EndDate.name] = dates[1];
/* 282 */         obj[M.IsAllDay.name] = dates[2];
/* 283 */ 
/* 284 */         record.beginEdit();
/* 285 */         record.set(obj);
/* 286 */         
/* 287 */         if (!keepEditing) {
/* 288 */             record.endEdit();
/* 289 */         }
/* 290 */ 
/* 291 */         return this;
/* 292 */     },
/* 293 */     
/* 294 */     // private
/* 295 */     onSave: function(){
/* 296 */         if(!this.formPanel.form.isValid()){
/* 297 */             return;
/* 298 */         }
/* 299 */         if(!this.updateRecord(this.activeRecord)){
/* 300 */             this.onCancel();

/* EventWindow.js */

/* 301 */             return;
/* 302 */         }
/* 303 */         this.fireEvent(this.activeRecord.phantom ? 'eventadd' : 'eventupdate', this, this.activeRecord, this.animateTarget);
/* 304 */ 
/* 305 */         // Clear phantom and modified states.
/* 306 */         this.activeRecord.commit();
/* 307 */     },
/* 308 */     
/* 309 */     // private
/* 310 */     onDelete: function(){
/* 311 */         this.fireEvent('eventdelete', this, this.activeRecord, this.animateTarget);
/* 312 */     }
/* 313 */ });

;
/* BoxLayout.js */

/* 1   */ Ext.define('Ext.calendar.template.BoxLayout', {
/* 2   */     extend: 'Ext.XTemplate',
/* 3   */     
/* 4   */     requires: ['Ext.calendar.util.Date'],
/* 5   */     
/* 6   */     constructor: function(config){
/* 7   */         
/* 8   */         Ext.apply(this, config);
/* 9   */     
/* 10  */         var weekLinkTpl = this.showWeekLinks ? '<div id="{weekLinkId}" class="ext-cal-week-link">{weekNum}</div>' : '';
/* 11  */         
/* 12  */         this.callParent([
/* 13  */             '<tpl for="weeks">',
/* 14  */                 '<div id="{[this.id]}-wk-{[xindex-1]}" class="ext-cal-wk-ct" style="top:{[this.getRowTop(xindex, xcount)]}%; height:{[this.getRowHeight(xcount)]}%;">',
/* 15  */                     weekLinkTpl,
/* 16  */                     '<table class="ext-cal-bg-tbl" cellpadding="0" cellspacing="0">',
/* 17  */                         '<tbody>',
/* 18  */                             '<tr>',
/* 19  */                                 '<tpl for=".">',
/* 20  */                                      '<td id="{[this.id]}-day-{date:date("Ymd")}" class="{cellCls}">&#160;</td>',
/* 21  */                                 '</tpl>',
/* 22  */                             '</tr>',
/* 23  */                         '</tbody>',
/* 24  */                     '</table>',
/* 25  */                     '<table class="ext-cal-evt-tbl" cellpadding="0" cellspacing="0">',
/* 26  */                         '<tbody>',
/* 27  */                             '<tr>',
/* 28  */                                 '<tpl for=".">',
/* 29  */                                     '<td id="{[this.id]}-ev-day-{date:date("Ymd")}" class="{titleCls}"><div>{title}</div></td>',
/* 30  */                                 '</tpl>',
/* 31  */                             '</tr>',
/* 32  */                         '</tbody>',
/* 33  */                     '</table>',
/* 34  */                 '</div>',
/* 35  */             '</tpl>', {
/* 36  */                 getRowTop: function(i, ln){
/* 37  */                     return ((i-1)*(100/ln));
/* 38  */                 },
/* 39  */                 getRowHeight: function(ln){
/* 40  */                     return 100/ln;
/* 41  */                 }
/* 42  */             }
/* 43  */         ]);
/* 44  */     },
/* 45  */ 
/* 46  */     applyTemplate : function(o){
/* 47  */         
/* 48  */         Ext.apply(this, o);
/* 49  */         
/* 50  */         var w = 0, title = '', first = true, isToday = false, showMonth = false, prevMonth = false, nextMonth = false,

/* BoxLayout.js */

/* 51  */             weeks = [[]],
/* 52  */             dt = Ext.Date.clone(this.viewStart),
/* 53  */             thisMonth = this.startDate.getMonth();
/* 54  */         
/* 55  */         for(; w < this.weekCount || this.weekCount == -1; w++){
/* 56  */             if(dt > this.viewEnd){
/* 57  */                 break;
/* 58  */             }
/* 59  */             weeks[w] = [];
/* 60  */             
/* 61  */             for(var d = 0; d < this.dayCount; d++){
/* 62  */                 isToday = dt.getTime() === Ext.calendar.util.Date.today().getTime();
/* 63  */                 showMonth = first || (dt.getDate() == 1);
/* 64  */                 prevMonth = (dt.getMonth() < thisMonth) && this.weekCount == -1;
/* 65  */                 nextMonth = (dt.getMonth() > thisMonth) && this.weekCount == -1;
/* 66  */                 
/* 67  */                 if(dt.getDay() == 1){
/* 68  */                     // The ISO week format 'W' is relative to a Monday week start. If we
/* 69  */                     // make this check on Sunday the week number will be off.
/* 70  */                     weeks[w].weekNum = this.showWeekNumbers ? Ext.Date.format(dt, 'W') : '&#160;';
/* 71  */                     weeks[w].weekLinkId = 'ext-cal-week-'+Ext.Date.format(dt, 'Ymd');
/* 72  */                 }
/* 73  */                 
/* 74  */                 if(showMonth){
/* 75  */                     if(isToday){
/* 76  */                         title = this.getTodayText();
/* 77  */                     }
/* 78  */                     else{
/* 79  */                         title = Ext.Date.format(dt, this.dayCount == 1 ? 'l, F j, Y' : (first ? 'M j, Y' : 'M j'));
/* 80  */                     }
/* 81  */                 }
/* 82  */                 else{
/* 83  */                     var dayFmt = (w == 0 && this.showHeader !== true) ? 'D j' : 'j';
/* 84  */                     title = isToday ? this.getTodayText() : Ext.Date.format(dt, dayFmt);
/* 85  */                 }
/* 86  */                 
/* 87  */                 weeks[w].push({
/* 88  */                     title: title,
/* 89  */                     date: Ext.Date.clone(dt),
/* 90  */                     titleCls: 'ext-cal-dtitle ' + (isToday ? ' ext-cal-dtitle-today' : '') + 
/* 91  */                         (w==0 ? ' ext-cal-dtitle-first' : '') +
/* 92  */                         (prevMonth ? ' ext-cal-dtitle-prev' : '') + 
/* 93  */                         (nextMonth ? ' ext-cal-dtitle-next' : ''),
/* 94  */                     cellCls: 'ext-cal-day ' + (isToday ? ' ext-cal-day-today' : '') + 
/* 95  */                         (d==0 ? ' ext-cal-day-first' : '') +
/* 96  */                         (prevMonth ? ' ext-cal-day-prev' : '') +
/* 97  */                         (nextMonth ? ' ext-cal-day-next' : '')
/* 98  */                 });
/* 99  */                 dt = Ext.calendar.util.Date.add(dt, {days: 1});
/* 100 */                 first = false;

/* BoxLayout.js */

/* 101 */             }
/* 102 */         }
/* 103 */         
/* 104 */         return this.applyOut({
/* 105 */             weeks: weeks
/* 106 */         }, []).join('');
/* 107 */     },
/* 108 */     
/* 109 */     getTodayText : function(){
/* 110 */         var dt = Ext.Date.format(new Date(), 'l, F j, Y'),
/* 111 */             fmt,
/* 112 */             todayText = this.showTodayText !== false ? this.todayText : '',
/* 113 */             timeText = this.showTime !== false ? ' <span id="'+this.id+'-clock" class="ext-cal-dtitle-time">' + 
/* 114 */                     Ext.Date.format(new Date(), 'g:i a') + '</span>' : '',
/* 115 */             separator = todayText.length > 0 || timeText.length > 0 ? ' &mdash; ' : '';
/* 116 */         
/* 117 */         if(this.dayCount == 1){
/* 118 */             return dt + separator + todayText + timeText;
/* 119 */         }
/* 120 */         fmt = this.weekCount == 1 ? 'D j' : 'j';
/* 121 */         return todayText.length > 0 ? todayText + timeText : Ext.Date.format(new Date(), fmt) + timeText;
/* 122 */     }
/* 123 */ }, 
/* 124 */ function() {
/* 125 */     this.createAlias('apply', 'applyTemplate');
/* 126 */ });

;
/* DayBody.js */

/* 1  */ /**
/* 2  *|  * @class Ext.calendar.template.DayBody
/* 3  *|  * @extends Ext.XTemplate
/* 4  *|  * <p>This is the template used to render the scrolling body container used in {@link Ext.calendar.DayView DayView} and 
/* 5  *|  * {@link Ext.calendar.WeekView WeekView}. This template is automatically bound to the underlying event store by the 
/* 6  *|  * calendar components and expects records of type {@link Ext.calendar.EventRecord}.</p>
/* 7  *|  * <p>Note that this template would not normally be used directly. Instead you would use the {@link Ext.calendar.DayViewTemplate}
/* 8  *|  * that internally creates an instance of this template along with a {@link Ext.calendar.DayHeaderTemplate}.</p>
/* 9  *|  * @constructor
/* 10 *|  * @param {Object} config The config object
/* 11 *|  */
/* 12 */ Ext.define('Ext.calendar.template.DayBody', {
/* 13 */     extend: 'Ext.XTemplate',
/* 14 */     requires: [
/* 15 */         'Ext.calendar.util.Date'
/* 16 */     ],
/* 17 */     
/* 18 */     constructor: function(config){
/* 19 */         
/* 20 */         Ext.apply(this, config);
/* 21 */ 
/* 22 */         this.callParent([
/* 23 */             '<table class="ext-cal-bg-tbl" cellspacing="0" cellpadding="0">',
/* 24 */                 '<tbody>',
/* 25 */                     '<tr height="1">',
/* 26 */                         '<td class="ext-cal-gutter"></td>',
/* 27 */                         '<td colspan="{dayCount}">',
/* 28 */                             '<div class="ext-cal-bg-rows">',
/* 29 */                                 '<div class="ext-cal-bg-rows-inner">',
/* 30 */                                     '<tpl for="times">',
/* 31 */                                         '<div class="ext-cal-bg-row">',
/* 32 */                                             '<div class="ext-cal-bg-row-div ext-row-{[xindex]}"></div>',
/* 33 */                                         '</div>',
/* 34 */                                     '</tpl>',
/* 35 */                                 '</div>',
/* 36 */                             '</div>',
/* 37 */                         '</td>',
/* 38 */                     '</tr>',
/* 39 */                     '<tr>',
/* 40 */                         '<td class="ext-cal-day-times">',
/* 41 */                             '<tpl for="times">',
/* 42 */                                 '<div class="ext-cal-bg-row">',
/* 43 */                                     '<div class="ext-cal-day-time-inner">{.}</div>',
/* 44 */                                 '</div>',
/* 45 */                             '</tpl>',
/* 46 */                         '</td>',
/* 47 */                         '<tpl for="days">',
/* 48 */                             '<td class="ext-cal-day-col">',
/* 49 */                                 '<div class="ext-cal-day-col-inner">',
/* 50 */                                     '<div id="{[this.id]}-day-col-{.:date("Ymd")}" class="ext-cal-day-col-gutter"></div>',

/* DayBody.js */

/* 51 */                                 '</div>',
/* 52 */                             '</td>',
/* 53 */                         '</tpl>',
/* 54 */                     '</tr>',
/* 55 */                 '</tbody>',
/* 56 */             '</table>'
/* 57 */         ]);
/* 58 */     },
/* 59 */ 
/* 60 */     // private
/* 61 */     applyTemplate : function(o){
/* 62 */         this.today = Ext.calendar.util.Date.today();
/* 63 */         this.dayCount = this.dayCount || 1;
/* 64 */         
/* 65 */         var i = 0,
/* 66 */             days = [],
/* 67 */             dt = Ext.Date.clone(o.viewStart),
/* 68 */             times = [];
/* 69 */             
/* 70 */         for(; i<this.dayCount; i++){
/* 71 */             days[i] = Ext.calendar.util.Date.add(dt, {days: i});
/* 72 */         }
/* 73 */ 
/* 74 */         // use a fixed DST-safe date so times don't get skipped on DST boundaries
/* 75 */         dt = Ext.Date.clearTime(new Date('5/26/1972'));
/* 76 */         
/* 77 */         for(i=0; i<24; i++){
/* 78 */             times.push(Ext.Date.format(dt, 'ga'));
/* 79 */             dt = Ext.calendar.util.Date.add(dt, {hours: 1});
/* 80 */         }
/* 81 */         
/* 82 */         return this.applyOut({
/* 83 */             days: days,
/* 84 */             dayCount: days.length,
/* 85 */             times: times
/* 86 */         }, []).join('');
/* 87 */     },
/* 88 */     
/* 89 */     apply: function(values) {
/* 90 */         return this.applyTemplate.apply(this, arguments);
/* 91 */     }
/* 92 */ });

;
/* DayHeader.js */

/* 1  */ /**
/* 2  *|  * @class Ext.calendar.template.DayHeader
/* 3  *|  * @extends Ext.XTemplate
/* 4  *|  * <p>This is the template used to render the all-day event container used in {@link Ext.calendar.DayView DayView} and 
/* 5  *|  * {@link Ext.calendar.WeekView WeekView}. Internally the majority of the layout logic is deferred to an instance of
/* 6  *|  * {@link Ext.calendar.BoxLayoutTemplate}.</p> 
/* 7  *|  * <p>This template is automatically bound to the underlying event store by the 
/* 8  *|  * calendar components and expects records of type {@link Ext.calendar.EventRecord}.</p>
/* 9  *|  * <p>Note that this template would not normally be used directly. Instead you would use the {@link Ext.calendar.DayViewTemplate}
/* 10 *|  * that internally creates an instance of this template along with a {@link Ext.calendar.DayBodyTemplate}.</p>
/* 11 *|  * @constructor
/* 12 *|  * @param {Object} config The config object
/* 13 *|  */
/* 14 */ Ext.define('Ext.calendar.template.DayHeader', {
/* 15 */     extend: 'Ext.XTemplate',
/* 16 */     
/* 17 */     requires: ['Ext.calendar.template.BoxLayout'],
/* 18 */     
/* 19 */     constructor: function(config){
/* 20 */         
/* 21 */         Ext.apply(this, config);
/* 22 */         
/* 23 */         this.allDayTpl = new Ext.calendar.template.BoxLayout(config);
/* 24 */         this.allDayTpl.compile();
/* 25 */         
/* 26 */         this.callParent([
/* 27 */             '<div class="ext-cal-hd-ct">',
/* 28 */                 '<table class="ext-cal-hd-days-tbl" cellspacing="0" cellpadding="0">',
/* 29 */                     '<tbody>',
/* 30 */                         '<tr>',
/* 31 */                             '<td class="ext-cal-gutter"></td>',
/* 32 */                             '<td class="ext-cal-hd-days-td"><div class="ext-cal-hd-ad-inner">{allDayTpl}</div></td>',
/* 33 */                             '<td class="ext-cal-gutter-rt"></td>',
/* 34 */                         '</tr>',
/* 35 */                     '</tobdy>',
/* 36 */                 '</table>',
/* 37 */             '</div>'
/* 38 */         ]);
/* 39 */     },
/* 40 */ 
/* 41 */     applyTemplate : function(o){
/* 42 */         return this.applyOut({
/* 43 */             allDayTpl: this.allDayTpl.apply(o)
/* 44 */         }, []).join('');
/* 45 */     },
/* 46 */     
/* 47 */     apply: function(values) {
/* 48 */         return this.applyTemplate.apply(this, arguments);
/* 49 */     }
/* 50 */ });

;
/* Month.js */

/* 1  */ /**
/* 2  *|  * @class Ext.calendar.template.Month
/* 3  *|  * @extends Ext.XTemplate
/* 4  *|  * <p>This is the template used to render the {@link Ext.calendar.template.Month MonthView}. Internally this class defers to an
/* 5  *|  * instance of {@link Ext.calerndar.BoxLayoutTemplate} to handle the inner layout rendering and adds containing elements around
/* 6  *|  * that to form the month view.</p> 
/* 7  *|  * <p>This template is automatically bound to the underlying event store by the 
/* 8  *|  * calendar components and expects records of type {@link Ext.calendar.EventRecord}.</p>
/* 9  *|  * @constructor
/* 10 *|  * @param {Object} config The config object
/* 11 *|  */
/* 12 */ Ext.define('Ext.calendar.template.Month', {
/* 13 */     extend: 'Ext.XTemplate',
/* 14 */     
/* 15 */     requires: ['Ext.calendar.template.BoxLayout'],
/* 16 */     
/* 17 */     constructor: function(config){
/* 18 */         
/* 19 */         Ext.apply(this, config);
/* 20 */     
/* 21 */         this.weekTpl = new Ext.calendar.template.BoxLayout(config);
/* 22 */         this.weekTpl.compile();
/* 23 */         
/* 24 */         var weekLinkTpl = this.showWeekLinks ? '<div class="ext-cal-week-link-hd">&#160;</div>' : '';
/* 25 */         
/* 26 */         this.callParent([
/* 27 */             '<div class="ext-cal-inner-ct {extraClasses}">',
/* 28 */                 '<div class="ext-cal-hd-ct ext-cal-month-hd">',
/* 29 */                     weekLinkTpl,
/* 30 */                     '<table class="ext-cal-hd-days-tbl" cellpadding="0" cellspacing="0">',
/* 31 */                         '<tbody>',
/* 32 */                             '<tr>',
/* 33 */                                 '<tpl for="days">',
/* 34 */                                     '<th class="ext-cal-hd-day{[xindex==1 ? " ext-cal-day-first" : ""]}" title="{.:date("l, F j, Y")}">{.:date("D")}</th>',
/* 35 */                                 '</tpl>',
/* 36 */                             '</tr>',
/* 37 */                         '</tbody>',
/* 38 */                     '</table>',
/* 39 */                 '</div>',
/* 40 */                 '<div class="ext-cal-body-ct">{weeks}</div>',
/* 41 */             '</div>'
/* 42 */         ]);
/* 43 */     },
/* 44 */ 
/* 45 */     // private
/* 46 */     applyTemplate : function(o){
/* 47 */         var days = [],
/* 48 */             weeks = this.weekTpl.apply(o),
/* 49 */             dt = o.viewStart,
/* 50 */             D = Ext.calendar.util.Date;

/* Month.js */

/* 51 */         
/* 52 */         for(var i = 0; i < 7; i++){
/* 53 */             days.push(D.add(dt, {days: i}));
/* 54 */         }
/* 55 */         
/* 56 */         var extraClasses = this.showHeader === true ? '' : 'ext-cal-noheader';
/* 57 */         if(this.showWeekLinks){
/* 58 */             extraClasses += ' ext-cal-week-links';
/* 59 */         }
/* 60 */         
/* 61 */         return this.applyOut({
/* 62 */             days: days,
/* 63 */             weeks: weeks,
/* 64 */             extraClasses: extraClasses
/* 65 */         }, []).join('');
/* 66 */     },
/* 67 */     
/* 68 */     apply: function(values) {
/* 69 */         return this.applyTemplate.apply(this, arguments);
/* 70 */     }
/* 71 */ });

;
/* AbstractCalendar.js */

/* 1    */ /**
/* 2    *|  * @class Ext.calendar.view.AbstractCalendar
/* 3    *|  * @extends Ext.BoxComponent
/* 4    *|  * <p>This is an abstract class that serves as the base for other calendar views. This class is not
/* 5    *|  * intended to be directly instantiated.</p>
/* 6    *|  * <p>When extending this class to create a custom calendar view, you must provide an implementation
/* 7    *|  * for the <code>renderItems</code> method, as there is no default implementation for rendering events
/* 8    *|  * The rendering logic is totally dependent on how the UI structures its data, which
/* 9    *|  * is determined by the underlying UI template (this base class does not have a template).</p>
/* 10   *|  * @constructor
/* 11   *|  * @param {Object} config The config object
/* 12   *|  */
/* 13   */ Ext.define('Ext.calendar.view.AbstractCalendar', {
/* 14   */     extend: 'Ext.Component',
/* 15   */     alias: 'widget.calendarview',
/* 16   */     requires: [
/* 17   */         'Ext.calendar.util.Date',
/* 18   */         'Ext.calendar.data.EventMappings'
/* 19   */     ],
/* 20   */     /**
/* 21   *|      * @cfg {Number} startDay
/* 22   *|      * The 0-based index for the day on which the calendar week begins (0=Sunday, which is the default)
/* 23   *|      */
/* 24   */     startDay: 0,
/* 25   */     /**
/* 26   *|      * @cfg {Boolean} spansHavePriority
/* 27   *|      * Allows switching between two different modes of rendering events that span multiple days. When true,
/* 28   *|      * span events are always sorted first, possibly at the expense of start dates being out of order (e.g.,
/* 29   *|      * a span event that starts at 11am one day and spans into the next day would display before a non-spanning
/* 30   *|      * event that starts at 10am, even though they would not be in date order). This can lead to more compact
/* 31   *|      * layouts when there are many overlapping events. If false (the default), events will always sort by start date
/* 32   *|      * first which can result in a less compact, but chronologically consistent layout.
/* 33   *|      */
/* 34   */     spansHavePriority: false,
/* 35   */     /**
/* 36   *|      * @cfg {Boolean} trackMouseOver
/* 37   *|      * Whether or not the view tracks and responds to the browser mouseover event on contained elements (defaults to
/* 38   *|      * true). If you don't need mouseover event highlighting you can disable this.
/* 39   *|      */
/* 40   */     trackMouseOver: true,
/* 41   */     /**
/* 42   *|      * @cfg {Boolean} enableFx
/* 43   *|      * Determines whether or not visual effects for CRUD actions are enabled (defaults to true). If this is false
/* 44   *|      * it will override any values for {@link #enableAddFx}, {@link #enableUpdateFx} or {@link enableRemoveFx} and
/* 45   *|      * all animations will be disabled.
/* 46   *|      */
/* 47   */     enableFx: true,
/* 48   */     /**
/* 49   *|      * @cfg {Boolean} enableAddFx
/* 50   *|      * True to enable a visual effect on adding a new event (the default), false to disable it. Note that if

/* AbstractCalendar.js *|

/* 51   *|      * {@link #enableFx} is false it will override this value. The specific effect that runs is defined in the
/* 52   *|      * {@link #doAddFx} method.
/* 53   *|      */
/* 54   */     enableAddFx: true,
/* 55   */     /**
/* 56   *|      * @cfg {Boolean} enableUpdateFx
/* 57   *|      * True to enable a visual effect on updating an event, false to disable it (the default). Note that if
/* 58   *|      * {@link #enableFx} is false it will override this value. The specific effect that runs is defined in the
/* 59   *|      * {@link #doUpdateFx} method.
/* 60   *|      */
/* 61   */     enableUpdateFx: false,
/* 62   */     /**
/* 63   *|      * @cfg {Boolean} enableRemoveFx
/* 64   *|      * True to enable a visual effect on removing an event (the default), false to disable it. Note that if
/* 65   *|      * {@link #enableFx} is false it will override this value. The specific effect that runs is defined in the
/* 66   *|      * {@link #doRemoveFx} method.
/* 67   *|      */
/* 68   */     enableRemoveFx: true,
/* 69   */     /**
/* 70   *|      * @cfg {Boolean} enableDD
/* 71   *|      * True to enable drag and drop in the calendar view (the default), false to disable it
/* 72   *|      */
/* 73   */     enableDD: true,
/* 74   */     /**
/* 75   *|      * @cfg {Boolean} monitorResize
/* 76   *|      * True to monitor the browser's resize event (the default), false to ignore it. If the calendar view is rendered
/* 77   *|      * into a fixed-size container this can be set to false. However, if the view can change dimensions (e.g., it's in
/* 78   *|      * fit layout in a viewport or some other resizable container) it is very important that this config is true so that
/* 79   *|      * any resize event propagates properly to all subcomponents and layouts get recalculated properly.
/* 80   *|      */
/* 81   */     monitorResize: true,
/* 82   */     /**
/* 83   *|      * @cfg {String} ddCreateEventText
/* 84   *|      * The text to display inside the drag proxy while dragging over the calendar to create a new event (defaults to
/* 85   *|      * 'Create event for {0}' where {0} is a date range supplied by the view)
/* 86   *|      */
/* 87   */     ddCreateEventText: 'Create event for {0}',
/* 88   */     /**
/* 89   *|      * @cfg {String} ddMoveEventText
/* 90   *|      * The text to display inside the drag proxy while dragging an event to reposition it (defaults to
/* 91   *|      * 'Move event to {0}' where {0} is the updated event start date/time supplied by the view)
/* 92   *|      */
/* 93   */     ddMoveEventText: 'Move event to {0}',
/* 94   */     /**
/* 95   *|      * @cfg {String} ddResizeEventText
/* 96   *|      * The string displayed to the user in the drag proxy while dragging the resize handle of an event (defaults to
/* 97   *|      * 'Update event to {0}' where {0} is the updated event start-end range supplied by the view). Note that
/* 98   *|      * this text is only used in views
/* 99   *|      * that allow resizing of events.
/* 100  *|      */

/* AbstractCalendar.js */

/* 101  */     ddResizeEventText: 'Update event to {0}',
/* 102  */ 
/* 103  */     //private properties -- do not override:
/* 104  */     weekCount: 1,
/* 105  */     dayCount: 1,
/* 106  */     eventSelector: '.ext-cal-evt',
/* 107  */     eventOverClass: 'ext-evt-over',
/* 108  */     eventElIdDelimiter: '-evt-',
/* 109  */     dayElIdDelimiter: '-day-',
/* 110  */ 
/* 111  */     /**
/* 112  *|      * Returns a string of HTML template markup to be used as the body portion of the event template created
/* 113  *|      * by {@link #getEventTemplate}. This provdes the flexibility to customize what's in the body without
/* 114  *|      * having to override the entire XTemplate. This string can include any valid {@link Ext.Template} code, and
/* 115  *|      * any data tokens accessible to the containing event template can be referenced in this string.
/* 116  *|      * @return {String} The body template string
/* 117  *|      */
/* 118  */     getEventBodyMarkup: Ext.emptyFn,
/* 119  */     // must be implemented by a subclass
/* 120  */     /**
/* 121  *|      * <p>Returns the XTemplate that is bound to the calendar's event store (it expects records of type
/* 122  *|      * {@link Ext.calendar.EventRecord}) to populate the calendar views with events. Internally this method
/* 123  *|      * by default generates different markup for browsers that support CSS border radius and those that don't.
/* 124  *|      * This method can be overridden as needed to customize the markup generated.</p>
/* 125  *|      * <p>Note that this method calls {@link #getEventBodyMarkup} to retrieve the body markup for events separately
/* 126  *|      * from the surrounding container markup.  This provdes the flexibility to customize what's in the body without
/* 127  *|      * having to override the entire XTemplate. If you do override this method, you should make sure that your
/* 128  *|      * overridden version also does the same.</p>
/* 129  *|      * @return {Ext.XTemplate} The event XTemplate
/* 130  *|      */
/* 131  */     getEventTemplate: Ext.emptyFn,
/* 132  */ 
/* 133  */     /**
/* 134  *|      * @event eventsrendered
/* 135  *|      * Fires after events are finished rendering in the view
/* 136  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 137  *|      */
/* 138  */ 
/* 139  */     /**
/* 140  *|      * @event eventclick
/* 141  *|      * Fires after the user clicks on an event element
/* 142  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 143  *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that was clicked on
/* 144  *|      * @param {HTMLNode} el The DOM node that was clicked on
/* 145  *|      */
/* 146  */ 
/* 147  */     /**
/* 148  *|      * @event eventover
/* 149  *|      * Fires anytime the mouse is over an event element
/* 150  *|      * @param {Ext.calendar.view.AbstractCalendar} this

/* AbstractCalendar.js *|

/* 151  *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that the cursor is over
/* 152  *|      * @param {HTMLNode} el The DOM node that is being moused over
/* 153  *|      */
/* 154  */ 
/* 155  */     /**
/* 156  *|      * @event eventout
/* 157  *|      * Fires anytime the mouse exits an event element
/* 158  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 159  *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that the cursor exited
/* 160  *|      * @param {HTMLNode} el The DOM node that was exited
/* 161  *|      */
/* 162  */ 
/* 163  */     /**
/* 164  *|      * @event datechange
/* 165  *|      * Fires after the start date of the view changes
/* 166  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 167  *|      * @param {Date} startDate The start date of the view (as explained in {@link #getStartDate}
/* 168  *|      * @param {Date} viewStart The first displayed date in the view
/* 169  *|      * @param {Date} viewEnd The last displayed date in the view
/* 170  *|      */
/* 171  */ 
/* 172  */     /**
/* 173  *|      * @event rangeselect
/* 174  *|      * Fires after the user drags on the calendar to select a range of dates/times in which to create an event
/* 175  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 176  *|      * @param {Object} dates An object containing the start (StartDate property) and end (EndDate property) dates selected
/* 177  *|      * @param {Function} callback A callback function that MUST be called after the event handling is complete so that
/* 178  *|      * the view is properly cleaned up (shim elements are persisted in the view while the user is prompted to handle the
/* 179  *|      * range selection). The callback is already created in the proper scope, so it simply needs to be executed as a standard
/* 180  *|      * function call (e.g., callback()).
/* 181  *|      */
/* 182  */ 
/* 183  */     /**
/* 184  *|      * @event eventmove
/* 185  *|      * Fires after an event element is dragged by the user and dropped in a new position
/* 186  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 187  *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that was moved with
/* 188  *|      * updated start and end dates
/* 189  *|      */
/* 190  */ 
/* 191  */     /**
/* 192  *|      * @event initdrag
/* 193  *|      * Fires when a drag operation is initiated in the view
/* 194  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 195  *|      */
/* 196  */ 
/* 197  */     /**
/* 198  *|      * @event dayover
/* 199  *|      * Fires while the mouse is over a day element
/* 200  *|      * @param {Ext.calendar.view.AbstractCalendar} this

/* AbstractCalendar.js *|

/* 201  *|      * @param {Date} dt The date that is being moused over
/* 202  *|      * @param {Ext.core.Element} el The day Element that is being moused over
/* 203  *|      */
/* 204  */ 
/* 205  */     /**
/* 206  *|      * @event dayout
/* 207  *|      * Fires when the mouse exits a day element
/* 208  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 209  *|      * @param {Date} dt The date that is exited
/* 210  *|      * @param {Ext.core.Element} el The day Element that is exited
/* 211  *|      */
/* 212  */ 
/* 213  */     /*
/* 214  *|      * @event eventdelete
/* 215  *|      * Fires after an event element is deleted by the user. Not currently implemented directly at the view level -- currently
/* 216  *|      * deletes only happen from one of the forms.
/* 217  *|      * @param {Ext.calendar.view.AbstractCalendar} this
/* 218  *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that was deleted
/* 219  *|      */
/* 220  */ 
/* 221  */     // must be implemented by a subclass
/* 222  */     // private
/* 223  */     initComponent: function() {
/* 224  */         this.setStartDate(this.startDate || new Date());
/* 225  */ 
/* 226  */         this.callParent(arguments);
/* 227  */     },
/* 228  */ 
/* 229  */     // private
/* 230  */     afterRender: function() {
/* 231  */         this.callParent(arguments);
/* 232  */ 
/* 233  */         this.renderTemplate();
/* 234  */ 
/* 235  */         if (this.store) {
/* 236  */             this.setStore(this.store, true);
/* 237  */         }
/* 238  */ 
/* 239  */         this.el.on({
/* 240  */             'mouseover': this.onMouseOver,
/* 241  */             'mouseout': this.onMouseOut,
/* 242  */             'click': this.onClick,
/* 243  */             scope: this
/* 244  */         });
/* 245  */ 
/* 246  */         this.el.unselectable();
/* 247  */ 
/* 248  */         if (this.enableDD && this.initDD) {
/* 249  */             this.initDD();
/* 250  */         }

/* AbstractCalendar.js */

/* 251  */ 
/* 252  */         this.on('eventsrendered', this.forceSize);
/* 253  */         Ext.defer(this.forceSize, 100, this);
/* 254  */ 
/* 255  */     },
/* 256  */ 
/* 257  */     // private
/* 258  */     forceSize: function() {
/* 259  */         if (this.el && this.el.down) {
/* 260  */             var hd = this.el.down('.ext-cal-hd-ct'),
/* 261  */                 bd = this.el.down('.ext-cal-body-ct');
/* 262  */ 
/* 263  */             if (bd==null || hd==null) {
/* 264  */                 return;
/* 265  */             }
/* 266  */ 
/* 267  */             var headerHeight = hd.getHeight(),
/* 268  */                 sz = this.el.parent().getSize();
/* 269  */ 
/* 270  */             bd.setHeight(sz.height-headerHeight);
/* 271  */         }
/* 272  */     },
/* 273  */ 
/* 274  */     refresh: function() {
/* 275  */         this.prepareData();
/* 276  */         this.renderTemplate();
/* 277  */         this.renderItems();
/* 278  */     },
/* 279  */ 
/* 280  */     getWeekCount: function() {
/* 281  */         var days = Ext.calendar.util.Date.diffDays(this.viewStart, this.viewEnd);
/* 282  */         return Math.ceil(days / this.dayCount);
/* 283  */     },
/* 284  */ 
/* 285  */     // private
/* 286  */     prepareData: function() {
/* 287  */         var lastInMonth = Ext.Date.getLastDateOfMonth(this.startDate),
/* 288  */             w = 0, d,
/* 289  */             dt = Ext.Date.clone(this.viewStart),
/* 290  */             weeks = this.weekCount < 1 ? 6: this.weekCount;
/* 291  */ 
/* 292  */         this.eventGrid = [[]];
/* 293  */         this.allDayGrid = [[]];
/* 294  */         this.evtMaxCount = [];
/* 295  */ 
/* 296  */         var evtsInView = this.store.queryBy(function(rec) {
/* 297  */             return this.isEventVisible(rec.data);
/* 298  */         },
/* 299  */         this);
/* 300  */ 

/* AbstractCalendar.js */

/* 301  */         for (; w < weeks; w++) {
/* 302  */             this.evtMaxCount[w] = 0;
/* 303  */             if (this.weekCount == -1 && dt > lastInMonth) {
/* 304  */                 //current week is fully in next month so skip
/* 305  */                 break;
/* 306  */             }
/* 307  */             this.eventGrid[w] = this.eventGrid[w] || [];
/* 308  */             this.allDayGrid[w] = this.allDayGrid[w] || [];
/* 309  */ 
/* 310  */             for (d = 0; d < this.dayCount; d++) {
/* 311  */                 if (evtsInView.getCount() > 0) {
/* 312  */                     var evts = evtsInView.filterBy(function(rec) {
/* 313  */                         var startDt = Ext.Date.clearTime(rec.data[Ext.calendar.data.EventMappings.StartDate.name], true),
/* 314  */                             startsOnDate = dt.getTime() == startDt.getTime(),
/* 315  */                             spansFromPrevView = (w == 0 && d == 0 && (dt > rec.data[Ext.calendar.data.EventMappings.StartDate.name]));
/* 316  */ 
/* 317  */                         return startsOnDate || spansFromPrevView;
/* 318  */                     },
/* 319  */                     this);
/* 320  */ 
/* 321  */                     this.sortEventRecordsForDay(evts);
/* 322  */                     this.prepareEventGrid(evts, w, d);
/* 323  */                 }
/* 324  */                 dt = Ext.calendar.util.Date.add(dt, {days: 1});
/* 325  */             }
/* 326  */         }
/* 327  */         this.currentWeekCount = w;
/* 328  */     },
/* 329  */ 
/* 330  */     // private
/* 331  */     prepareEventGrid: function(evts, w, d) {
/* 332  */         var me = this,
/* 333  */             row = 0,
/* 334  */             max = me.maxEventsPerDay ? me.maxEventsPerDay: 999;
/* 335  */ 
/* 336  */         evts.each(function(evt) {
/* 337  */             var M = Ext.calendar.data.EventMappings,
/* 338  */             days = Ext.calendar.util.Date.diffDays(
/* 339  */             Ext.calendar.util.Date.max(me.viewStart, evt.data[M.StartDate.name]),
/* 340  */             Ext.calendar.util.Date.min(me.viewEnd, evt.data[M.EndDate.name])) + 1;
/* 341  */ 
/* 342  */             if (days > 1 || Ext.calendar.util.Date.diffDays(evt.data[M.StartDate.name], evt.data[M.EndDate.name]) > 1) {
/* 343  */                 me.prepareEventGridSpans(evt, me.eventGrid, w, d, days);
/* 344  */                 me.prepareEventGridSpans(evt, me.allDayGrid, w, d, days, true);
/* 345  */             } else {
/* 346  */                 row = me.findEmptyRowIndex(w, d);
/* 347  */                 me.eventGrid[w][d] = me.eventGrid[w][d] || [];
/* 348  */                 me.eventGrid[w][d][row] = evt;
/* 349  */ 
/* 350  */                 if (evt.data[M.IsAllDay.name]) {

/* AbstractCalendar.js */

/* 351  */                     row = me.findEmptyRowIndex(w, d, true);
/* 352  */                     me.allDayGrid[w][d] = me.allDayGrid[w][d] || [];
/* 353  */                     me.allDayGrid[w][d][row] = evt;
/* 354  */                 }
/* 355  */             }
/* 356  */ 
/* 357  */             if (me.evtMaxCount[w] < me.eventGrid[w][d].length) {
/* 358  */                 me.evtMaxCount[w] = Math.min(max + 1, me.eventGrid[w][d].length);
/* 359  */             }
/* 360  */             return true;
/* 361  */         });
/* 362  */     },
/* 363  */ 
/* 364  */     // private
/* 365  */     prepareEventGridSpans: function(evt, grid, w, d, days, allday) {
/* 366  */         // this event spans multiple days/weeks, so we have to preprocess
/* 367  */         // the events and store special span events as placeholders so that
/* 368  */         // the render routine can build the necessary TD spans correctly.
/* 369  */         var w1 = w,
/* 370  */         d1 = d,
/* 371  */         row = this.findEmptyRowIndex(w, d, allday),
/* 372  */         dt = Ext.Date.clone(this.viewStart);
/* 373  */ 
/* 374  */         var start = {
/* 375  */             event: evt,
/* 376  */             isSpan: true,
/* 377  */             isSpanStart: true,
/* 378  */             spanLeft: false,
/* 379  */             spanRight: (d == 6)
/* 380  */         };
/* 381  */         grid[w][d] = grid[w][d] || [];
/* 382  */         grid[w][d][row] = start;
/* 383  */ 
/* 384  */         while (--days) {
/* 385  */             dt = Ext.calendar.util.Date.add(dt, {days: 1});
/* 386  */             if (dt > this.viewEnd) {
/* 387  */                 break;
/* 388  */             }
/* 389  */             if (++d1 > 6) {
/* 390  */                 // reset counters to the next week
/* 391  */                 d1 = 0;
/* 392  */                 w1++;
/* 393  */                 row = this.findEmptyRowIndex(w1, 0);
/* 394  */             }
/* 395  */             grid[w1] = grid[w1] || [];
/* 396  */             grid[w1][d1] = grid[w1][d1] || [];
/* 397  */ 
/* 398  */             grid[w1][d1][row] = {
/* 399  */                 event: evt,
/* 400  */                 isSpan: true,

/* AbstractCalendar.js */

/* 401  */                 isSpanStart: (d1 == 0),
/* 402  */                 spanLeft: (w1 > w) && (d1 % 7 == 0),
/* 403  */                 spanRight: (d1 == 6) && (days > 1)
/* 404  */             };
/* 405  */         }
/* 406  */     },
/* 407  */ 
/* 408  */     // private
/* 409  */     findEmptyRowIndex: function(w, d, allday) {
/* 410  */         var grid = allday ? this.allDayGrid: this.eventGrid,
/* 411  */         day = grid[w] ? grid[w][d] || [] : [],
/* 412  */         i = 0,
/* 413  */         ln = day.length;
/* 414  */ 
/* 415  */         for (; i < ln; i++) {
/* 416  */             if (day[i] == null) {
/* 417  */                 return i;
/* 418  */             }
/* 419  */         }
/* 420  */         return ln;
/* 421  */     },
/* 422  */ 
/* 423  */     // private
/* 424  */     renderTemplate: function() {
/* 425  */         if (this.tpl) {
/* 426  */             this.el.select('*').destroy();
/* 427  */             this.tpl.overwrite(this.el, this.getParams());
/* 428  */             this.lastRenderStart = Ext.Date.clone(this.viewStart);
/* 429  */             this.lastRenderEnd = Ext.Date.clone(this.viewEnd);
/* 430  */         }
/* 431  */     },
/* 432  */ 
/* 433  */     disableStoreEvents: function() {
/* 434  */         this.monitorStoreEvents = false;
/* 435  */     },
/* 436  */ 
/* 437  */     enableStoreEvents: function(refresh) {
/* 438  */         this.monitorStoreEvents = true;
/* 439  */         if (refresh === true) {
/* 440  */             this.refresh();
/* 441  */         }
/* 442  */     },
/* 443  */ 
/* 444  */     // private
/* 445  */     onResize: function() {
/* 446  */         this.callParent(arguments);
/* 447  */         this.refresh();
/* 448  */     },
/* 449  */ 
/* 450  */     // private

/* AbstractCalendar.js */

/* 451  */     onInitDrag: function() {
/* 452  */         this.fireEvent('initdrag', this);
/* 453  */     },
/* 454  */ 
/* 455  */     // private
/* 456  */     onEventDrop: function(rec, dt) {
/* 457  */         if (Ext.calendar.util.Date.compare(rec.data[Ext.calendar.data.EventMappings.StartDate.name], dt) === 0) {
/* 458  */             // no changes
/* 459  */             return;
/* 460  */         }
/* 461  */         var diff = dt.getTime() - rec.data[Ext.calendar.data.EventMappings.StartDate.name].getTime();
/* 462  */         rec.set(Ext.calendar.data.EventMappings.StartDate.name, dt);
/* 463  */         rec.set(Ext.calendar.data.EventMappings.EndDate.name, Ext.calendar.util.Date.add(rec.data[Ext.calendar.data.EventMappings.EndDate.name], {millis: diff}));
/* 464  */ 
/* 465  */         this.fireEvent('eventmove', this, rec);
/* 466  */     },
/* 467  */ 
/* 468  */     // private
/* 469  */     onCalendarEndDrag: function(start, end, onComplete) {
/* 470  */         if (start && end) {
/* 471  */             // set this flag for other event handlers that might conflict while we're waiting
/* 472  */             this.dragPending = true;
/* 473  */ 
/* 474  */             // have to wait for the user to save or cancel before finalizing the dd interation
/* 475  */             var o = {};
/* 476  */             o[Ext.calendar.data.EventMappings.StartDate.name] = start;
/* 477  */             o[Ext.calendar.data.EventMappings.EndDate.name] = end;
/* 478  */ 
/* 479  */             this.fireEvent('rangeselect', this, o, Ext.bind(this.onCalendarEndDragComplete, this, [onComplete]));
/* 480  */         }
/* 481  */     },
/* 482  */ 
/* 483  */     // private
/* 484  */     onCalendarEndDragComplete: function(onComplete) {
/* 485  */         // callback for the drop zone to clean up
/* 486  */         onComplete();
/* 487  */         // clear flag for other events to resume normally
/* 488  */         this.dragPending = false;
/* 489  */     },
/* 490  */ 
/* 491  */     // private
/* 492  */     onUpdate: function(ds, rec, operation) {
/* 493  */         if (this.monitorStoreEvents === false) {
/* 494  */             return;
/* 495  */         }
/* 496  */         if (operation == Ext.data.Record.COMMIT) {
/* 497  */             this.refresh();
/* 498  */             if (this.enableFx && this.enableUpdateFx) {
/* 499  */                 this.doUpdateFx(this.getEventEls(rec.data[Ext.calendar.data.EventMappings.EventId.name]), {
/* 500  */                     scope: this

/* AbstractCalendar.js */

/* 501  */                 });
/* 502  */             }
/* 503  */         }
/* 504  */     },
/* 505  */ 
/* 506  */ 
/* 507  */     doUpdateFx: function(els, o) {
/* 508  */         this.highlightEvent(els, null, o);
/* 509  */     },
/* 510  */ 
/* 511  */     // private
/* 512  */     onAdd: function(ds, records, index) {
/* 513  */         if (this.monitorStoreEvents === false) {
/* 514  */             return;
/* 515  */         }
/* 516  */         var rec = records[0];
/* 517  */         this.tempEventId = rec.id;
/* 518  */         this.refresh();
/* 519  */ 
/* 520  */         if (this.enableFx && this.enableAddFx) {
/* 521  */             this.doAddFx(this.getEventEls(rec.data[Ext.calendar.data.EventMappings.EventId.name]), {
/* 522  */                 scope: this
/* 523  */             });
/* 524  */         }
/* 525  */     },
/* 526  */ 
/* 527  */     doAddFx: function(els, o) {
/* 528  */         els.fadeIn(Ext.apply(o, {
/* 529  */             duration: 2000
/* 530  */         }));
/* 531  */     },
/* 532  */ 
/* 533  */     // private
/* 534  */     onRemove: function(ds, recs) {
/* 535  */         var name = Ext.calendar.data.EventMappings.EventId.name,
/* 536  */             i, len, rec, els;
/* 537  */ 
/* 538  */         if (this.monitorStoreEvents === false) {
/* 539  */             return;
/* 540  */         }
/* 541  */ 
/* 542  */         for (i = 0, len = recs.length; i < len; i++) {
/* 543  */             rec = recs[i];
/* 544  */ 
/* 545  */             if (this.enableFx && this.enableRemoveFx) {
/* 546  */                 els = this.getEventEls(rec.get(name));
/* 547  */ 
/* 548  */                 if (els.getCount() > 0) {
/* 549  */                     this.doRemoveFx(els, {
/* 550  */                         remove: true,

/* AbstractCalendar.js */

/* 551  */                         scope: this,
/* 552  */                         callback: this.refresh
/* 553  */                     });
/* 554  */                 }
/* 555  */             }
/* 556  */             else {
/* 557  */                 this.getEventEls(rec.get(name)).remove();
/* 558  */                 this.refresh();
/* 559  */             }
/* 560  */         }
/* 561  */     },
/* 562  */ 
/* 563  */     doRemoveFx: function(els, o) {
/* 564  */         els.fadeOut(o);
/* 565  */     },
/* 566  */ 
/* 567  */     /**
/* 568  *|      * Visually highlights an event using {@link Ext.Fx#highlight} config options.
/* 569  *|      * If {@link #highlightEventActions} is false this method will have no effect.
/* 570  *|      * @param {Ext.CompositeElement} els The element(s) to highlight
/* 571  *|      * @param {Object} color (optional) The highlight color. Should be a 6 char hex
/* 572  *|      * color without the leading # (defaults to yellow: 'ffff9c')
/* 573  *|      * @param {Object} o (optional) Object literal with any of the {@link Ext.Fx} config
/* 574  *|      * options. See {@link Ext.Fx#highlight} for usage examples.
/* 575  *|      */
/* 576  */     highlightEvent: function(els, color, o) {
/* 577  */         if (this.enableFx) {
/* 578  */             var c;
/* 579  */             ! (Ext.isIE || Ext.isOpera) ?
/* 580  */             els.highlight(color, o) :
/* 581  */             // Fun IE/Opera handling:
/* 582  */             els.each(function(el) {
/* 583  */                 el.highlight(color, Ext.applyIf({
/* 584  */                     attr: 'color'
/* 585  */                 },
/* 586  */                 o));
/* 587  */                 c = el.down('.ext-cal-evm');
/* 588  */                 if (c) {
/* 589  */                     c.highlight(color, o);
/* 590  */                 }
/* 591  */             },
/* 592  */             this);
/* 593  */         }
/* 594  */     },
/* 595  */ 
/* 596  */     /**
/* 597  *|      * Retrieve an Event object's id from its corresponding node in the DOM.
/* 598  *|      * @param {String/Element/HTMLElement} el An {@link Ext.core.Element}, DOM node or id
/* 599  *|      */
/* 600  */     getEventIdFromEl: function(el) {

/* AbstractCalendar.js */

/* 601  */         el = Ext.get(el);
/* 602  */         var id = el.id.split(this.eventElIdDelimiter)[1],
/* 603  */             lastHypen = id.lastIndexOf('-');
/* 604  */ 
/* 605  */         // MUST look for last hyphen because autogenned record IDs can contain hyphens
/* 606  */         if (lastHypen > -1) {
/* 607  */             //This id has the index of the week it is rendered in as the suffix.
/* 608  */             //This allows events that span across weeks to still have reproducibly-unique DOM ids.
/* 609  */             id = id.substr(0, lastHypen);
/* 610  */         }
/* 611  */         return id;
/* 612  */     },
/* 613  */ 
/* 614  */     // private
/* 615  */     getEventId: function(eventId) {
/* 616  */         if (eventId === undefined && this.tempEventId) {
/* 617  */             eventId = this.tempEventId;
/* 618  */         }
/* 619  */         return eventId;
/* 620  */     },
/* 621  */ 
/* 622  */     /**
/* 623  *|      *
/* 624  *|      * @param {String} eventId
/* 625  *|      * @param {Boolean} forSelect
/* 626  *|      * @return {String} The selector class
/* 627  *|      */
/* 628  */     getEventSelectorCls: function(eventId, forSelect) {
/* 629  */         var prefix = forSelect ? '.': '';
/* 630  */         return prefix + this.id + this.eventElIdDelimiter + this.getEventId(eventId);
/* 631  */     },
/* 632  */ 
/* 633  */     /**
/* 634  *|      *
/* 635  *|      * @param {String} eventId
/* 636  *|      * @return {Ext.CompositeElement} The matching CompositeElement of nodes
/* 637  *|      * that comprise the rendered event.  Any event that spans across a view
/* 638  *|      * boundary will contain more than one internal Element.
/* 639  *|      */
/* 640  */     getEventEls: function(eventId) {
/* 641  */         var els = Ext.select(this.getEventSelectorCls(this.getEventId(eventId), true), false, this.el.dom);
/* 642  */         return new Ext.CompositeElement(els);
/* 643  */     },
/* 644  */ 
/* 645  */     /**
/* 646  *|      * Returns true if the view is currently displaying today's date, else false.
/* 647  *|      * @return {Boolean} True or false
/* 648  *|      */
/* 649  */     isToday: function() {
/* 650  */         var today = Ext.Date.clearTime(new Date()).getTime();

/* AbstractCalendar.js */

/* 651  */         return this.viewStart.getTime() <= today && this.viewEnd.getTime() >= today;
/* 652  */     },
/* 653  */ 
/* 654  */     // private
/* 655  */     onDataChanged: function(store) {
/* 656  */         this.refresh();
/* 657  */     },
/* 658  */ 
/* 659  */     // private
/* 660  */     isEventVisible: function(evt) {
/* 661  */         var M = Ext.calendar.data.EventMappings,
/* 662  */             data = evt.data || evt,
/* 663  */             start = this.viewStart.getTime(),
/* 664  */             end = this.viewEnd.getTime(),
/* 665  */             evStart = data[M.StartDate.name].getTime(),
/* 666  */             evEnd = data[M.EndDate.name].getTime();
/* 667  */             evEnd = Ext.calendar.util.Date.add(data[M.EndDate.name], {seconds: -1}).getTime();
/* 668  */ 
/* 669  */         return this.rangesOverlap(start, end, evStart, evEnd);
/* 670  */     },
/* 671  */ 
/* 672  */     rangesOverlap: function(start1, end1, start2, end2) {
/* 673  */         var startsInRange = (start1 >= start2 && start1 <= end2),
/* 674  */             endsInRange = (end1 >= start2 && end1 <= end2),
/* 675  */             spansRange = (start1 <= start2 && end1 >= end2);
/* 676  */ 
/* 677  */         return (startsInRange || endsInRange || spansRange);
/* 678  */     },
/* 679  */ 
/* 680  */     // private
/* 681  */     isOverlapping: function(evt1, evt2) {
/* 682  */         var ev1 = evt1.data ? evt1.data: evt1,
/* 683  */         ev2 = evt2.data ? evt2.data: evt2,
/* 684  */         M = Ext.calendar.data.EventMappings,
/* 685  */         start1 = ev1[M.StartDate.name].getTime(),
/* 686  */         end1 = Ext.calendar.util.Date.add(ev1[M.EndDate.name], {seconds: -1}).getTime(),
/* 687  */         start2 = ev2[M.StartDate.name].getTime(),
/* 688  */         end2 = Ext.calendar.util.Date.add(ev2[M.EndDate.name], {seconds: -1}).getTime();
/* 689  */ 
/* 690  */         if (end1 < start1) {
/* 691  */             end1 = start1;
/* 692  */         }
/* 693  */         if (end2 < start2) {
/* 694  */             end2 = start2;
/* 695  */         }
/* 696  */ 
/* 697  */         return (start1 <= end2 && end1 >= start2);
/* 698  */     },
/* 699  */ 
/* 700  */     getDayEl: function(dt) {

/* AbstractCalendar.js */

/* 701  */         return Ext.get(this.getDayId(dt));
/* 702  */     },
/* 703  */ 
/* 704  */     getDayId: function(dt) {
/* 705  */         if (Ext.isDate(dt)) {
/* 706  */             dt = Ext.Date.format(dt, 'Ymd');
/* 707  */         }
/* 708  */         return this.id + this.dayElIdDelimiter + dt;
/* 709  */     },
/* 710  */ 
/* 711  */     /**
/* 712  *|      * Returns the start date of the view, as set by {@link #setStartDate}. Note that this may not
/* 713  *|      * be the first date displayed in the rendered calendar -- to get the start and end dates displayed
/* 714  *|      * to the user use {@link #getViewBounds}.
/* 715  *|      * @return {Date} The start date
/* 716  *|      */
/* 717  */     getStartDate: function() {
/* 718  */         return this.startDate;
/* 719  */     },
/* 720  */ 
/* 721  */     /**
/* 722  *|      * Sets the start date used to calculate the view boundaries to display. The displayed view will be the
/* 723  *|      * earliest and latest dates that match the view requirements and contain the date passed to this function.
/* 724  *|      * @param {Date} dt The date used to calculate the new view boundaries
/* 725  *|      */
/* 726  */     setStartDate: function(start, refresh) {
/* 727  */         this.startDate = Ext.Date.clearTime(start);
/* 728  */         this.setViewBounds(start);
/* 729  */         this.store.load({
/* 730  */             params: {
/* 731  */                 start: Ext.Date.format(this.viewStart, 'm-d-Y'),
/* 732  */                 end: Ext.Date.format(this.viewEnd, 'm-d-Y')
/* 733  */             }
/* 734  */         });
/* 735  */         if (refresh === true) {
/* 736  */             this.refresh();
/* 737  */         }
/* 738  */         this.fireEvent('datechange', this, this.startDate, this.viewStart, this.viewEnd);
/* 739  */     },
/* 740  */ 
/* 741  */     // private
/* 742  */     setViewBounds: function(startDate) {
/* 743  */         var start = startDate || this.startDate,
/* 744  */             offset = start.getDay() - this.startDay,
/* 745  */             Dt = Ext.calendar.util.Date;
/* 746  */ 
/* 747  */         switch (this.weekCount) {
/* 748  */         case 0:
/* 749  */         case 1:
/* 750  */             this.viewStart = this.dayCount < 7 ? start: Dt.add(start, {days: -offset, clearTime: true});

/* AbstractCalendar.js */

/* 751  */             this.viewEnd = Dt.add(this.viewStart, {days: this.dayCount || 7});
/* 752  */             this.viewEnd = Dt.add(this.viewEnd, {seconds: -1});
/* 753  */             return;
/* 754  */ 
/* 755  */         case - 1:
/* 756  */             // auto by month
/* 757  */             start = Ext.Date.getFirstDateOfMonth(start);
/* 758  */             offset = start.getDay() - this.startDay;
/* 759  */ 
/* 760  */             this.viewStart = Dt.add(start, {days: -offset, clearTime: true});
/* 761  */ 
/* 762  */             // start from current month start, not view start:
/* 763  */             var end = Dt.add(start, {months: 1, seconds: -1});
/* 764  */             // fill out to the end of the week:
/* 765  */             this.viewEnd = Dt.add(end, {days: 6 - end.getDay()});
/* 766  */             return;
/* 767  */ 
/* 768  */         default:
/* 769  */             this.viewStart = Dt.add(start, {days: -offset, clearTime: true});
/* 770  */             this.viewEnd = Dt.add(this.viewStart, {days: this.weekCount * 7, seconds: -1});
/* 771  */         }
/* 772  */     },
/* 773  */ 
/* 774  */     // private
/* 775  */     getViewBounds: function() {
/* 776  */         return {
/* 777  */             start: this.viewStart,
/* 778  */             end: this.viewEnd
/* 779  */         };
/* 780  */     },
/* 781  */ 
/* 782  */     /* private
/* 783  *|      * Sort events for a single day for display in the calendar.  This sorts allday
/* 784  *|      * events first, then non-allday events are sorted either based on event start
/* 785  *|      * priority or span priority based on the value of {@link #spansHavePriority}
/* 786  *|      * (defaults to event start priority).
/* 787  *|      * @param {MixedCollection} evts A {@link Ext.util.MixedCollection MixedCollection}
/* 788  *|      * of {@link #Ext.calendar.EventRecord EventRecord} objects
/* 789  *|      */
/* 790  */     sortEventRecordsForDay: function(evts) {
/* 791  */         if (evts.length < 2) {
/* 792  */             return;
/* 793  */         }
/* 794  */         evts.sortBy(Ext.bind(function(evtA, evtB) {
/* 795  */             var a = evtA.data,
/* 796  */             b = evtB.data,
/* 797  */             M = Ext.calendar.data.EventMappings;
/* 798  */ 
/* 799  */             // Always sort all day events before anything else
/* 800  */             if (a[M.IsAllDay.name]) {

/* AbstractCalendar.js */

/* 801  */                 return - 1;
/* 802  */             }
/* 803  */             else if (b[M.IsAllDay.name]) {
/* 804  */                 return 1;
/* 805  */             }
/* 806  */             if (this.spansHavePriority) {
/* 807  */                 // This logic always weights span events higher than non-span events
/* 808  */                 // (at the possible expense of start time order). This seems to
/* 809  */                 // be the approach used by Google calendar and can lead to a more
/* 810  */                 // visually appealing layout in complex cases, but event order is
/* 811  */                 // not guaranteed to be consistent.
/* 812  */                 var diff = Ext.calendar.util.Date.diffDays;
/* 813  */                 if (diff(a[M.StartDate.name], a[M.EndDate.name]) > 0) {
/* 814  */                     if (diff(b[M.StartDate.name], b[M.EndDate.name]) > 0) {
/* 815  */                         // Both events are multi-day
/* 816  */                         if (a[M.StartDate.name].getTime() == b[M.StartDate.name].getTime()) {
/* 817  */                             // If both events start at the same time, sort the one
/* 818  */                             // that ends later (potentially longer span bar) first
/* 819  */                             return b[M.EndDate.name].getTime() - a[M.EndDate.name].getTime();
/* 820  */                         }
/* 821  */                         return a[M.StartDate.name].getTime() - b[M.StartDate.name].getTime();
/* 822  */                     }
/* 823  */                     return - 1;
/* 824  */                 }
/* 825  */                 else if (diff(b[M.StartDate.name], b[M.EndDate.name]) > 0) {
/* 826  */                     return 1;
/* 827  */                 }
/* 828  */                 return a[M.StartDate.name].getTime() - b[M.StartDate.name].getTime();
/* 829  */             }
/* 830  */             else {
/* 831  */                 // Doing this allows span and non-span events to intermingle but
/* 832  */                 // remain sorted sequentially by start time. This seems more proper
/* 833  */                 // but can make for a less visually-compact layout when there are
/* 834  */                 // many such events mixed together closely on the calendar.
/* 835  */                 return a[M.StartDate.name].getTime() - b[M.StartDate.name].getTime();
/* 836  */             }
/* 837  */         }, this));
/* 838  */     },
/* 839  */ 
/* 840  */     /**
/* 841  *|      * Updates the view to contain the passed date
/* 842  *|      * @param {Date} dt The date to display
/* 843  *|      * @return {Date} The new view start date
/* 844  *|      */
/* 845  */     moveTo: function(dt, noRefresh) {
/* 846  */         if (Ext.isDate(dt)) {
/* 847  */             this.setStartDate(dt);
/* 848  */             if (noRefresh !== false) {
/* 849  */                 this.refresh();
/* 850  */             }

/* AbstractCalendar.js */

/* 851  */             return this.startDate;
/* 852  */         }
/* 853  */         return dt;
/* 854  */     },
/* 855  */ 
/* 856  */     /**
/* 857  *|      * Updates the view to the next consecutive date(s)
/* 858  *|      * @return {Date} The new view start date
/* 859  *|      */
/* 860  */     moveNext: function(noRefresh) {
/* 861  */         return this.moveTo(Ext.calendar.util.Date.add(this.viewEnd, {days: 1}));
/* 862  */     },
/* 863  */ 
/* 864  */     /**
/* 865  *|      * Updates the view to the previous consecutive date(s)
/* 866  *|      * @return {Date} The new view start date
/* 867  *|      */
/* 868  */     movePrev: function(noRefresh) {
/* 869  */         var days = Ext.calendar.util.Date.diffDays(this.viewStart, this.viewEnd) + 1;
/* 870  */         return this.moveDays( - days, noRefresh);
/* 871  */     },
/* 872  */ 
/* 873  */     /**
/* 874  *|      * Shifts the view by the passed number of months relative to the currently set date
/* 875  *|      * @param {Number} value The number of months (positive or negative) by which to shift the view
/* 876  *|      * @return {Date} The new view start date
/* 877  *|      */
/* 878  */     moveMonths: function(value, noRefresh) {
/* 879  */         return this.moveTo(Ext.calendar.util.Date.add(this.startDate, {months: value}), noRefresh);
/* 880  */     },
/* 881  */ 
/* 882  */     /**
/* 883  *|      * Shifts the view by the passed number of weeks relative to the currently set date
/* 884  *|      * @param {Number} value The number of weeks (positive or negative) by which to shift the view
/* 885  *|      * @return {Date} The new view start date
/* 886  *|      */
/* 887  */     moveWeeks: function(value, noRefresh) {
/* 888  */         return this.moveTo(Ext.calendar.util.Date.add(this.startDate, {days: value * 7}), noRefresh);
/* 889  */     },
/* 890  */ 
/* 891  */     /**
/* 892  *|      * Shifts the view by the passed number of days relative to the currently set date
/* 893  *|      * @param {Number} value The number of days (positive or negative) by which to shift the view
/* 894  *|      * @return {Date} The new view start date
/* 895  *|      */
/* 896  */     moveDays: function(value, noRefresh) {
/* 897  */         return this.moveTo(Ext.calendar.util.Date.add(this.startDate, {days: value}), noRefresh);
/* 898  */     },
/* 899  */ 
/* 900  */     /**

/* AbstractCalendar.js *|

/* 901  *|      * Updates the view to show today
/* 902  *|      * @return {Date} Today's date
/* 903  *|      */
/* 904  */     moveToday: function(noRefresh) {
/* 905  */         return this.moveTo(new Date(), noRefresh);
/* 906  */     },
/* 907  */ 
/* 908  */     /**
/* 909  *|      * Sets the event store used by the calendar to display {@link Ext.calendar.EventRecord events}.
/* 910  *|      * @param {Ext.data.Store} store
/* 911  *|      */
/* 912  */     setStore: function(store, initial) {
/* 913  */         if (!initial && this.store) {
/* 914  */             this.store.un("datachanged", this.onDataChanged, this);
/* 915  */             this.store.un("add", this.onAdd, this);
/* 916  */             this.store.un("remove", this.onRemove, this);
/* 917  */             this.store.un("update", this.onUpdate, this);
/* 918  */             this.store.un("clear", this.refresh, this);
/* 919  */         }
/* 920  */         if (store) {
/* 921  */             store.on("datachanged", this.onDataChanged, this);
/* 922  */             store.on("add", this.onAdd, this);
/* 923  */             store.on("remove", this.onRemove, this);
/* 924  */             store.on("update", this.onUpdate, this);
/* 925  */             store.on("clear", this.refresh, this);
/* 926  */         }
/* 927  */         this.store = store;
/* 928  */         if (store && store.getCount() > 0) {
/* 929  */             this.refresh();
/* 930  */         }
/* 931  */     },
/* 932  */ 
/* 933  */     getEventRecord: function(id) {
/* 934  */         var idx = this.store.find(Ext.calendar.data.EventMappings.EventId.name, id);
/* 935  */         return this.store.getAt(idx);
/* 936  */     },
/* 937  */ 
/* 938  */     getEventRecordFromEl: function(el) {
/* 939  */         return this.getEventRecord(this.getEventIdFromEl(el));
/* 940  */     },
/* 941  */ 
/* 942  */     // private
/* 943  */     getParams: function() {
/* 944  */         return {
/* 945  */             viewStart: this.viewStart,
/* 946  */             viewEnd: this.viewEnd,
/* 947  */             startDate: this.startDate,
/* 948  */             dayCount: this.dayCount,
/* 949  */             weekCount: this.weekCount,
/* 950  */             title: this.getTitle()

/* AbstractCalendar.js */

/* 951  */         };
/* 952  */     },
/* 953  */ 
/* 954  */     getTitle: function() {
/* 955  */         return Ext.Date.format(this.startDate, 'F Y');
/* 956  */     },
/* 957  */ 
/* 958  */     /*
/* 959  *|      * Shared click handling.  Each specific view also provides view-specific
/* 960  *|      * click handling that calls this first.  This method returns true if it
/* 961  *|      * can handle the click (and so the subclass should ignore it) else false.
/* 962  *|      */
/* 963  */     onClick: function(e, t) {
/* 964  */         var el = e.getTarget(this.eventSelector, 5);
/* 965  */         if (el) {
/* 966  */             var id = this.getEventIdFromEl(el);
/* 967  */             this.fireEvent('eventclick', this, this.getEventRecord(id), el);
/* 968  */             return true;
/* 969  */         }
/* 970  */     },
/* 971  */ 
/* 972  */     // private
/* 973  */     onMouseOver: function(e, t) {
/* 974  */         if (this.trackMouseOver !== false && (this.dragZone == undefined || !this.dragZone.dragging)) {
/* 975  */             if (!this.handleEventMouseEvent(e, t, 'over')) {
/* 976  */                 this.handleDayMouseEvent(e, t, 'over');
/* 977  */             }
/* 978  */         }
/* 979  */     },
/* 980  */ 
/* 981  */     // private
/* 982  */     onMouseOut: function(e, t) {
/* 983  */         if (this.trackMouseOver !== false && (this.dragZone == undefined || !this.dragZone.dragging)) {
/* 984  */             if (!this.handleEventMouseEvent(e, t, 'out')) {
/* 985  */                 this.handleDayMouseEvent(e, t, 'out');
/* 986  */             }
/* 987  */         }
/* 988  */     },
/* 989  */ 
/* 990  */     // private
/* 991  */     handleEventMouseEvent: function(e, t, type) {
/* 992  */         var el = e.getTarget(this.eventSelector, 5, true),
/* 993  */             rel,
/* 994  */             els,
/* 995  */             evtId;
/* 996  */         if (el) {
/* 997  */             rel = Ext.get(e.getRelatedTarget());
/* 998  */             if (el == rel || el.contains(rel)) {
/* 999  */                 return true;
/* 1000 */             }

/* AbstractCalendar.js */

/* 1001 */ 
/* 1002 */             evtId = this.getEventIdFromEl(el);
/* 1003 */ 
/* 1004 */             if (this.eventOverClass) {
/* 1005 */                 els = this.getEventEls(evtId);
/* 1006 */                 els[type == 'over' ? 'addCls': 'removeCls'](this.eventOverClass);
/* 1007 */             }
/* 1008 */             this.fireEvent('event' + type, this, this.getEventRecord(evtId), el);
/* 1009 */             return true;
/* 1010 */         }
/* 1011 */         return false;
/* 1012 */     },
/* 1013 */ 
/* 1014 */     // private
/* 1015 */     getDateFromId: function(id, delim) {
/* 1016 */         var parts = id.split(delim);
/* 1017 */         return parts[parts.length - 1];
/* 1018 */     },
/* 1019 */ 
/* 1020 */     // private
/* 1021 */     handleDayMouseEvent: function(e, t, type) {
/* 1022 */         t = e.getTarget('td', 3);
/* 1023 */         if (t) {
/* 1024 */             if (t.id && t.id.indexOf(this.dayElIdDelimiter) > -1) {
/* 1025 */                 var dt = this.getDateFromId(t.id, this.dayElIdDelimiter),
/* 1026 */                 rel = Ext.get(e.getRelatedTarget()),
/* 1027 */                 relTD,
/* 1028 */                 relDate;
/* 1029 */ 
/* 1030 */                 if (rel) {
/* 1031 */                     relTD = rel.is('td') ? rel: rel.up('td', 3);
/* 1032 */                     relDate = relTD && relTD.id ? this.getDateFromId(relTD.id, this.dayElIdDelimiter) : '';
/* 1033 */                 }
/* 1034 */                 if (!rel || dt != relDate) {
/* 1035 */                     var el = this.getDayEl(dt);
/* 1036 */                     if (el && this.dayOverClass != '') {
/* 1037 */                         el[type == 'over' ? 'addCls': 'removeCls'](this.dayOverClass);
/* 1038 */                     }
/* 1039 */                     this.fireEvent('day' + type, this, Ext.Date.parseDate(dt, "Ymd"), el);
/* 1040 */                 }
/* 1041 */             }
/* 1042 */         }
/* 1043 */     },
/* 1044 */ 
/* 1045 */     // private
/* 1046 */     renderItems: function() {
/* 1047 */         throw 'This method must be implemented by a subclass';
/* 1048 */     },
/* 1049 */ 
/* 1050 */     // private

/* AbstractCalendar.js */

/* 1051 */     destroy: function(){
/* 1052 */         this.callParent(arguments);
/* 1053 */ 
/* 1054 */         if(this.el){
/* 1055 */             this.el.un('contextmenu', this.onContextMenu, this);
/* 1056 */         }
/* 1057 */         Ext.destroy(
/* 1058 */             this.editWin,
/* 1059 */             this.eventMenu,
/* 1060 */             this.dragZone,
/* 1061 */             this.dropZone
/* 1062 */         );
/* 1063 */     }
/* 1064 */ });
/* 1065 */ 

;
/* MonthDayDetail.js */

/* 1   */ /*
/* 2   *|  * This is the view used internally by the panel that displays overflow events in the
/* 3   *|  * month view. Anytime a day cell cannot display all of its events, it automatically displays
/* 4   *|  * a link at the bottom to view all events for that day. When clicked, a panel pops up that
/* 5   *|  * uses this view to display the events for that day.
/* 6   *|  */
/* 7   */ Ext.define('Ext.calendar.view.MonthDayDetail', {
/* 8   */     extend: 'Ext.Component',
/* 9   */     alias: 'widget.monthdaydetailview',
/* 10  */ 
/* 11  */     requires: [
/* 12  */         'Ext.XTemplate',
/* 13  */         'Ext.calendar.util.Date',
/* 14  */         'Ext.calendar.view.AbstractCalendar'
/* 15  */     ],
/* 16  */ 
/* 17  */     afterRender: function() {
/* 18  */         this.tpl = this.getTemplate();
/* 19  */ 
/* 20  */         this.callParent(arguments);
/* 21  */ 
/* 22  */         this.el.on({
/* 23  */             click: this.view.onClick,
/* 24  */             mouseover: this.view.onMouseOver,
/* 25  */             mouseout: this.view.onMouseOut,
/* 26  */             scope: this.view
/* 27  */         });
/* 28  */     },
/* 29  */ 
/* 30  */     getTemplate: function() {
/* 31  */         if (!this.tpl) {
/* 32  */             this.tpl = new Ext.XTemplate(
/* 33  */                 '<div class="ext-cal-mdv x-unselectable">',
/* 34  */                     '<table class="ext-cal-mvd-tbl" cellpadding="0" cellspacing="0">',
/* 35  */                         '<tbody>',
/* 36  */                             '<tpl for=".">',
/* 37  */                                 '<tr><td class="ext-cal-ev">{markup}</td></tr>',
/* 38  */                             '</tpl>',
/* 39  */                         '</tbody>',
/* 40  */                     '</table>',
/* 41  */                 '</div>'
/* 42  */             );
/* 43  */         }
/* 44  */         this.tpl.compile();
/* 45  */         return this.tpl;
/* 46  */     },
/* 47  */ 
/* 48  */     update: function(dt) {
/* 49  */         this.date = dt;
/* 50  */         this.refresh();

/* MonthDayDetail.js */

/* 51  */     },
/* 52  */ 
/* 53  */     refresh: function() {
/* 54  */         if (!this.rendered) {
/* 55  */             return;
/* 56  */         }
/* 57  */         var eventTpl = this.view.getEventTemplate(),
/* 58  */ 
/* 59  */         templateData = [],
/* 60  */ 
/* 61  */         evts = this.store.queryBy(function(rec) {
/* 62  */             var thisDt = Ext.Date.clearTime(this.date, true).getTime(),
/* 63  */                 recStart = Ext.Date.clearTime(rec.data[Ext.calendar.data.EventMappings.StartDate.name], true).getTime(),
/* 64  */                 startsOnDate = (thisDt == recStart),
/* 65  */                 spansDate = false;
/* 66  */ 
/* 67  */             if (!startsOnDate) {
/* 68  */                 var recEnd = Ext.Date.clearTime(rec.data[Ext.calendar.data.EventMappings.EndDate.name], true).getTime();
/* 69  */                 spansDate = recStart < thisDt && recEnd >= thisDt;
/* 70  */             }
/* 71  */             return startsOnDate || spansDate;
/* 72  */         },
/* 73  */         this);
/* 74  */ 
/* 75  */         evts.each(function(evt) {
/* 76  */             var item = evt.data,
/* 77  */             M = Ext.calendar.data.EventMappings;
/* 78  */ 
/* 79  */             item._renderAsAllDay = item[M.IsAllDay.name] || Ext.calendar.util.Date.diffDays(item[M.StartDate.name], item[M.EndDate.name]) > 0;
/* 80  */             item.spanLeft = Ext.calendar.util.Date.diffDays(item[M.StartDate.name], this.date) > 0;
/* 81  */             item.spanRight = Ext.calendar.util.Date.diffDays(this.date, item[M.EndDate.name]) > 0;
/* 82  */             item.spanCls = (item.spanLeft ? (item.spanRight ? 'ext-cal-ev-spanboth':
/* 83  */             'ext-cal-ev-spanleft') : (item.spanRight ? 'ext-cal-ev-spanright': ''));
/* 84  */ 
/* 85  */             templateData.push({
/* 86  */                 markup: eventTpl.apply(this.getTemplateEventData(item))
/* 87  */             });
/* 88  */         },
/* 89  */         this);
/* 90  */ 
/* 91  */         this.tpl.overwrite(this.el, templateData);
/* 92  */         this.fireEvent('eventsrendered', this, this.date, evts.getCount());
/* 93  */     },
/* 94  */ 
/* 95  */     getTemplateEventData: function(evt) {
/* 96  */         var data = this.view.getTemplateEventData(evt);
/* 97  */         data._elId = 'dtl-' + data._elId;
/* 98  */         return data;
/* 99  */     }
/* 100 */ });

/* MonthDayDetail.js */

/* 101 */ 

;
/* Month.js */

/* 1   */ /**
/* 2   *|  * @class Ext.calendar.view.Month
/* 3   *|  * @extends Ext.calendar.CalendarView
/* 4   *|  * <p>Displays a calendar view by month. This class does not usually need ot be used directly as you can
/* 5   *|  * use a {@link Ext.calendar.CalendarPanel CalendarPanel} to manage multiple calendar views at once including
/* 6   *|  * the month view.</p>
/* 7   *|  * @constructor
/* 8   *|  * @param {Object} config The config object
/* 9   *|  */
/* 10  */ Ext.define('Ext.calendar.view.Month', {
/* 11  */     extend: 'Ext.calendar.view.AbstractCalendar',
/* 12  */     alias: 'widget.monthview',
/* 13  */ 
/* 14  */     requires: [
/* 15  */         'Ext.XTemplate',
/* 16  */         'Ext.calendar.template.Month',
/* 17  */         'Ext.calendar.util.WeekEventRenderer',
/* 18  */         'Ext.calendar.view.MonthDayDetail'
/* 19  */     ],
/* 20  */ 
/* 21  */     /**
/* 22  *|      * @cfg {Boolean} showTime
/* 23  *|      * True to display the current time in today's box in the calendar, false to not display it (defautls to true)
/* 24  *|      */
/* 25  */     showTime: true,
/* 26  */     /**
/* 27  *|      * @cfg {Boolean} showTodayText
/* 28  *|      * True to display the {@link #todayText} string in today's box in the calendar, false to not display it (defautls to true)
/* 29  *|      */
/* 30  */     showTodayText: true,
/* 31  */     /**
/* 32  *|      * @cfg {String} todayText
/* 33  *|      * The text to display in the current day's box in the calendar when {@link #showTodayText} is true (defaults to 'Today')
/* 34  *|      */
/* 35  */     todayText: 'Today',
/* 36  */     /**
/* 37  *|      * @cfg {Boolean} showHeader
/* 38  *|      * True to display a header beneath the navigation bar containing the week names above each week's column, false not to
/* 39  *|      * show it and instead display the week names in the first row of days in the calendar (defaults to false).
/* 40  *|      */
/* 41  */     showHeader: false,
/* 42  */     /**
/* 43  *|      * @cfg {Boolean} showWeekLinks
/* 44  *|      * True to display an extra column before the first day in the calendar that links to the {@link Ext.calendar.WeekView view}
/* 45  *|      * for each individual week, false to not show it (defaults to false). If true, the week links can also contain the week
/* 46  *|      * number depending on the value of {@link #showWeekNumbers}.
/* 47  *|      */
/* 48  */     showWeekLinks: false,
/* 49  */     /**
/* 50  *|      * @cfg {Boolean} showWeekNumbers

/* Month.js *|

/* 51  *|      * True to show the week number for each week in the calendar in the week link column, false to show nothing (defaults to false).
/* 52  *|      * Note that if {@link #showWeekLinks} is false this config will have no affect even if true.
/* 53  *|      */
/* 54  */     showWeekNumbers: false,
/* 55  */     /**
/* 56  *|      * @cfg {String} weekLinkOverClass
/* 57  *|      * The CSS class name applied when the mouse moves over a week link element (only applies when {@link #showWeekLinks} is true,
/* 58  *|      * defaults to 'ext-week-link-over').
/* 59  *|      */
/* 60  */     weekLinkOverClass: 'ext-week-link-over',
/* 61  */ 
/* 62  */     //private properties -- do not override:
/* 63  */     daySelector: '.ext-cal-day',
/* 64  */     moreSelector: '.ext-cal-ev-more',
/* 65  */     weekLinkSelector: '.ext-cal-week-link',
/* 66  */     weekCount: -1,
/* 67  */     // defaults to auto by month
/* 68  */     dayCount: 7,
/* 69  */     moreElIdDelimiter: '-more-',
/* 70  */     weekLinkIdDelimiter: 'ext-cal-week-',
/* 71  */ 
/* 72  */     // See EXTJSIV-11407.
/* 73  */     operaLT11: Ext.isOpera && (parseInt(Ext.operaVersion) < 11),
/* 74  */ 
/* 75  */     /**
/* 76  *|      * @event dayclick
/* 77  *|      * Fires after the user clicks within the view container and not on an event element
/* 78  *|      * @param {Ext.calendar.view.Month} this
/* 79  *|      * @param {Date} dt The date/time that was clicked on
/* 80  *|      * @param {Boolean} allday True if the day clicked on represents an all-day box, else false. Clicks within the
/* 81  *|      * MonthView always return true for this param.
/* 82  *|      * @param {Ext.core.Element} el The Element that was clicked on
/* 83  *|      */
/* 84  */ 
/* 85  */     /**
/* 86  *|      * @event weekclick
/* 87  *|      * Fires after the user clicks within a week link (when {@link #showWeekLinks is true)
/* 88  *|      * @param {Ext.calendar.view.Month} this
/* 89  *|      * @param {Date} dt The start date of the week that was clicked on
/* 90  *|      */
/* 91  */ 
/* 92  */     // inherited docs
/* 93  */     //dayover: true,
/* 94  */     // inherited docs
/* 95  */     //dayout: true
/* 96  */ 
/* 97  */     // private
/* 98  */     initDD: function() {
/* 99  */         var cfg = {
/* 100 */             view: this,

/* Month.js */

/* 101 */             createText: this.ddCreateEventText,
/* 102 */             moveText: this.ddMoveEventText,
/* 103 */             ddGroup: 'MonthViewDD'
/* 104 */         };
/* 105 */ 
/* 106 */         this.dragZone = new Ext.calendar.dd.DragZone(this.el, cfg);
/* 107 */         this.dropZone = new Ext.calendar.dd.DropZone(this.el, cfg);
/* 108 */     },
/* 109 */ 
/* 110 */     // private
/* 111 */     onDestroy: function() {
/* 112 */         Ext.destroy(this.ddSelector);
/* 113 */         Ext.destroy(this.dragZone);
/* 114 */         Ext.destroy(this.dropZone);
/* 115 */ 
/* 116 */         this.callParent(arguments);
/* 117 */     },
/* 118 */ 
/* 119 */     // private
/* 120 */     afterRender: function() {
/* 121 */         if (!this.tpl) {
/* 122 */             this.tpl = new Ext.calendar.template.Month({
/* 123 */                 id: this.id,
/* 124 */                 showTodayText: this.showTodayText,
/* 125 */                 todayText: this.todayText,
/* 126 */                 showTime: this.showTime,
/* 127 */                 showHeader: this.showHeader,
/* 128 */                 showWeekLinks: this.showWeekLinks,
/* 129 */                 showWeekNumbers: this.showWeekNumbers
/* 130 */             });
/* 131 */         }
/* 132 */         this.tpl.compile();
/* 133 */         this.addCls('ext-cal-monthview ext-cal-ct');
/* 134 */ 
/* 135 */         this.callParent(arguments);
/* 136 */     },
/* 137 */ 
/* 138 */     // private
/* 139 */     onResize: function() {
/* 140 */         var me = this;
/* 141 */         me.callParent(arguments);
/* 142 */         me.maxEventsPerDay = me.getMaxEventsPerDay();
/* 143 */         if (me.monitorResize) {
/* 144 */             me.refresh();
/* 145 */         }
/* 146 */     },
/* 147 */ 
/* 148 */     // private
/* 149 */     forceSize: function() {
/* 150 */         // Compensate for the week link gutter width if visible

/* Month.js */

/* 151 */         if(this.showWeekLinks && this.el){
/* 152 */             var hd = this.el.down('.ext-cal-hd-days-tbl'),
/* 153 */                 bgTbl = this.el.select('.ext-cal-bg-tbl'),
/* 154 */                 evTbl = this.el.select('.ext-cal-evt-tbl'),
/* 155 */                 wkLinkW = this.el.down('.ext-cal-week-link').getWidth(),
/* 156 */                 w = this.el.getWidth()-wkLinkW;
/* 157 */ 
/* 158 */             hd.setWidth(w);
/* 159 */             bgTbl.setWidth(w);
/* 160 */             evTbl.setWidth(w);
/* 161 */         }
/* 162 */         this.callParent(arguments);
/* 163 */     },
/* 164 */ 
/* 165 */     //private
/* 166 */     initClock: function() {
/* 167 */         if (Ext.fly(this.id + '-clock') !== null) {
/* 168 */             this.prevClockDay = new Date().getDay();
/* 169 */             if (this.clockTask) {
/* 170 */                 Ext.TaskManager.stop(this.clockTask);
/* 171 */             }
/* 172 */             this.clockTask = Ext.TaskManager.start({
/* 173 */                 run: function() {
/* 174 */                     var el = Ext.fly(this.id + '-clock'),
/* 175 */                     t = new Date();
/* 176 */ 
/* 177 */                     if (t.getDay() == this.prevClockDay) {
/* 178 */                         if (el) {
/* 179 */                             el.update(Ext.Date.format(t, 'g:i a'));
/* 180 */                         }
/* 181 */                     }
/* 182 */                     else {
/* 183 */                         this.prevClockDay = t.getDay();
/* 184 */                         this.moveTo(t);
/* 185 */                     }
/* 186 */                 },
/* 187 */                 scope: this,
/* 188 */                 interval: 1000
/* 189 */             });
/* 190 */         }
/* 191 */     },
/* 192 */ 
/* 193 */     // inherited docs
/* 194 */     getEventBodyMarkup: function() {
/* 195 */         if (!this.eventBodyMarkup) {
/* 196 */             this.eventBodyMarkup = ['{Title}',
/* 197 */             '<tpl if="_isReminder">',
/* 198 */                 '<i class="ext-cal-ic ext-cal-ic-rem">&#160;</i>',
/* 199 */             '</tpl>',
/* 200 */             '<tpl if="_isRecurring">',

/* Month.js */

/* 201 */                 '<i class="ext-cal-ic ext-cal-ic-rcr">&#160;</i>',
/* 202 */             '</tpl>',
/* 203 */             '<tpl if="spanLeft">',
/* 204 */                 '<i class="ext-cal-spl">&#160;</i>',
/* 205 */             '</tpl>',
/* 206 */             '<tpl if="spanRight">',
/* 207 */                 '<i class="ext-cal-spr">&#160;</i>',
/* 208 */             '</tpl>'
/* 209 */             ].join('');
/* 210 */         }
/* 211 */         return this.eventBodyMarkup;
/* 212 */     },
/* 213 */ 
/* 214 */     // inherited docs
/* 215 */     getEventTemplate: function() {
/* 216 */         if (!this.eventTpl) {
/* 217 */             var tpl,
/* 218 */             body = this.getEventBodyMarkup();
/* 219 */ 
/* 220 */             tpl = !(Ext.isIE7m || this.operaLT11) ?
/* 221 */             new Ext.XTemplate(
/* 222 */                 '<div id="{_elId}" class="{_selectorCls} {_colorCls} {spanCls} ext-cal-evt ext-cal-evr {cls}" style="{style}">',
/* 223 */                     body,
/* 224 */                 '</div>'
/* 225 */             )
/* 226 */             : new Ext.XTemplate(
/* 227 */                 '<tpl if="_renderAsAllDay">',
/* 228 */                     '<div id="{_elId}" class="{_selectorCls} {spanCls} {_colorCls} {_operaLT11} ext-cal-evo {cls}" style="{style}">',
/* 229 */                         '<div class="ext-cal-evm">',
/* 230 */                             '<div class="ext-cal-evi">',
/* 231 */                 '</tpl>',
/* 232 */                 '<tpl if="!_renderAsAllDay">',
/* 233 */                     '<div id="{_elId}" class="{_selectorCls} {_colorCls} {_operaLT11} ext-cal-evt ext-cal-evr {cls}" style="{style}">',
/* 234 */                 '</tpl>',
/* 235 */                     body,
/* 236 */                 '<tpl if="_renderAsAllDay">',
/* 237 */                             '</div>',
/* 238 */                         '</div>',
/* 239 */                 '</tpl>',
/* 240 */                     '</div>'
/* 241 */             );
/* 242 */             tpl.compile();
/* 243 */             this.eventTpl = tpl;
/* 244 */         }
/* 245 */         return this.eventTpl;
/* 246 */     },
/* 247 */ 
/* 248 */     // private
/* 249 */     getTemplateEventData: function(evt) {
/* 250 */         var M = Ext.calendar.data.EventMappings,

/* Month.js */

/* 251 */         selector = this.getEventSelectorCls(evt[M.EventId.name]),
/* 252 */         title = evt[M.Title.name];
/* 253 */ 
/* 254 */         return Ext.applyIf({
/* 255 */             _selectorCls: selector,
/* 256 */             _colorCls: 'ext-color-' + (evt[M.CalendarId.name] ?
/* 257 */             evt[M.CalendarId.name] : 'default') + (evt._renderAsAllDay ? '-ad': ''),
/* 258 */             _elId: selector + '-' + evt._weekIndex,
/* 259 */             _isRecurring: evt.Recurrence && evt.Recurrence != '',
/* 260 */             _isReminder: evt[M.Reminder.name] && evt[M.Reminder.name] != '',
/* 261 */             Title: (evt[M.IsAllDay.name] ? '' : Ext.Date.format(evt[M.StartDate.name], 'g:ia ')) + (!title || title.length == 0 ? '(No title)' : title),
/* 262 */             _operaLT11: this.operaLT11 ? 'ext-operaLT11' : ''
/* 263 */         },
/* 264 */         evt);
/* 265 */     },
/* 266 */ 
/* 267 */     // private
/* 268 */     refresh: function() {
/* 269 */         if (this.detailPanel) {
/* 270 */             this.detailPanel.hide();
/* 271 */         }
/* 272 */         this.callParent(arguments);
/* 273 */ 
/* 274 */         if (this.showTime !== false) {
/* 275 */             this.initClock();
/* 276 */         }
/* 277 */     },
/* 278 */ 
/* 279 */     // private
/* 280 */     renderItems: function() {
/* 281 */         Ext.calendar.util.WeekEventRenderer.render({
/* 282 */             eventGrid: this.allDayOnly ? this.allDayGrid: this.eventGrid,
/* 283 */             viewStart: this.viewStart,
/* 284 */             tpl: this.getEventTemplate(),
/* 285 */             maxEventsPerDay: this.getMaxEventsPerDay(),
/* 286 */             id: this.id,
/* 287 */             templateDataFn: Ext.bind(this.getTemplateEventData, this),
/* 288 */             evtMaxCount: this.evtMaxCount,
/* 289 */             weekCount: this.weekCount,
/* 290 */             dayCount: this.dayCount
/* 291 */         });
/* 292 */         this.fireEvent('eventsrendered', this);
/* 293 */     },
/* 294 */ 
/* 295 */     // private
/* 296 */     getDayEl: function(dt) {
/* 297 */         return Ext.get(this.getDayId(dt));
/* 298 */     },
/* 299 */ 
/* 300 */     // private

/* Month.js */

/* 301 */     getDayId: function(dt) {
/* 302 */         if (Ext.isDate(dt)) {
/* 303 */             dt = Ext.Date.format(dt, 'Ymd');
/* 304 */         }
/* 305 */         return this.id + this.dayElIdDelimiter + dt;
/* 306 */     },
/* 307 */ 
/* 308 */     // private
/* 309 */     getWeekIndex: function(dt) {
/* 310 */         var el = this.getDayEl(dt).up('.ext-cal-wk-ct');
/* 311 */         return parseInt(el.id.split('-wk-')[1], 10);
/* 312 */     },
/* 313 */ 
/* 314 */     // private
/* 315 */     getDaySize : function(contentOnly){
/* 316 */         var box = this.el.getBox(),
/* 317 */             padding = this.getViewPadding(),
/* 318 */             w = (box.width - padding.width) / this.dayCount,
/* 319 */             h = (box.height - padding.height) / this.getWeekCount();
/* 320 */ 
/* 321 */         if(contentOnly){
/* 322 */             // measure last row instead of first in case text wraps in first row
/* 323 */             var hd = this.el.select('.ext-cal-dtitle').last().parent('tr');
/* 324 */             h = hd ? h-hd.getHeight(true) : h;
/* 325 */         }
/* 326 */         return {height: h, width: w};
/* 327 */     },
/* 328 */ 
/* 329 */     // private
/* 330 */     getEventHeight : function() {
/* 331 */         if (!this.eventHeight) {
/* 332 */             var evt = this.el.select('.ext-cal-evt').first();
/* 333 */             if(evt){
/* 334 */                 this.eventHeight = evt.parent('td').getHeight();
/* 335 */             }
/* 336 */             else {
/* 337 */                 return 16; // no events rendered, so try setting this.eventHeight again later
/* 338 */             }
/* 339 */         }
/* 340 */         return this.eventHeight;
/* 341 */     },
/* 342 */ 
/* 343 */     // private
/* 344 */     getMaxEventsPerDay : function(){
/* 345 */         var dayHeight = this.getDaySize(true).height,
/* 346 */             eventHeight = this.getEventHeight(),
/* 347 */             max = Math.max(Math.floor((dayHeight - eventHeight) / eventHeight), 0);
/* 348 */ 
/* 349 */         return max;
/* 350 */     },

/* Month.js */

/* 351 */ 
/* 352 */     // private
/* 353 */     getViewPadding: function(sides) {
/* 354 */         sides = sides || 'tlbr';
/* 355 */ 
/* 356 */         var top = sides.indexOf('t') > -1,
/* 357 */             left = sides.indexOf('l') > -1,
/* 358 */             right = sides.indexOf('r') > -1,
/* 359 */             height = this.showHeader && top ? this.el.select('.ext-cal-hd-days-tbl').first().getHeight() : 0,
/* 360 */             width = 0;
/* 361 */ 
/* 362 */         if (this.isHeaderView) {
/* 363 */             if (left) {
/* 364 */                 width = this.el.select('.ext-cal-gutter').first().getWidth();
/* 365 */             }
/* 366 */             if (right) {
/* 367 */                 width += this.el.select('.ext-cal-gutter-rt').first().getWidth();
/* 368 */             }
/* 369 */         }
/* 370 */         else if (this.showWeekLinks && left) {
/* 371 */             width = this.el.select('.ext-cal-week-link').first().getWidth();
/* 372 */         }
/* 373 */ 
/* 374 */         return {
/* 375 */             height: height,
/* 376 */             width: width
/* 377 */         }
/* 378 */     },
/* 379 */ 
/* 380 */     // private
/* 381 */     getDayAt: function(x, y) {
/* 382 */         var box = this.el.getBox(),
/* 383 */             daySize = this.getDaySize(),
/* 384 */             dayL = Math.floor(((x - box.x) / daySize.width)),
/* 385 */             dayT = Math.floor(((y - box.y) / daySize.height)),
/* 386 */             days = (dayT * 7) + dayL,
/* 387 */             dt = Ext.calendar.util.Date.add(this.viewStart, {days: days});
/* 388 */         return {
/* 389 */             date: dt,
/* 390 */             el: this.getDayEl(dt)
/* 391 */         };
/* 392 */     },
/* 393 */ 
/* 394 */     // inherited docs
/* 395 */     moveNext: function() {
/* 396 */         return this.moveMonths(1);
/* 397 */     },
/* 398 */ 
/* 399 */     // inherited docs
/* 400 */     movePrev: function() {

/* Month.js */

/* 401 */         return this.moveMonths( - 1);
/* 402 */     },
/* 403 */ 
/* 404 */     // private
/* 405 */     onInitDrag: function() {
/* 406 */         this.callParent(arguments);
/* 407 */ 
/* 408 */         if (this.dayOverClass) {
/* 409 */             Ext.select(this.daySelector).removeCls(this.dayOverClass);
/* 410 */         }
/* 411 */         if (this.detailPanel) {
/* 412 */             this.detailPanel.hide();
/* 413 */         }
/* 414 */     },
/* 415 */ 
/* 416 */     // private
/* 417 */     onMoreClick: function(dt) {
/* 418 */         if (!this.detailPanel) {
/* 419 */             this.detailPanel = Ext.create('Ext.Panel', {
/* 420 */                 id: this.id + '-details-panel',
/* 421 */                 title: Ext.Date.format(dt, 'F j'),
/* 422 */                 layout: 'fit',
/* 423 */                 floating: true,
/* 424 */                 renderTo: Ext.getBody(),
/* 425 */                 tools: [{
/* 426 */                     type: 'close',
/* 427 */                     handler: function(e, t, p) {
/* 428 */                         p.ownerCt.hide();
/* 429 */                     }
/* 430 */                 }],
/* 431 */                 items: {
/* 432 */                     xtype: 'monthdaydetailview',
/* 433 */                     id: this.id + '-details-view',
/* 434 */                     date: dt,
/* 435 */                     view: this,
/* 436 */                     store: this.store,
/* 437 */                     listeners: {
/* 438 */                         'eventsrendered': Ext.bind(this.onDetailViewUpdated, this)
/* 439 */                     }
/* 440 */                 }
/* 441 */             });
/* 442 */         }
/* 443 */         else {
/* 444 */             this.detailPanel.setTitle(Ext.Date.format(dt, 'F j'));
/* 445 */         }
/* 446 */         this.detailPanel.getComponent(this.id + '-details-view').update(dt);
/* 447 */     },
/* 448 */ 
/* 449 */     // private
/* 450 */     onDetailViewUpdated : function(view, dt, numEvents){

/* Month.js */

/* 451 */         var p = this.detailPanel,
/* 452 */             dayEl = this.getDayEl(dt),
/* 453 */             box = dayEl.getBox();
/* 454 */ 
/* 455 */         p.setWidth(Math.max(box.width, 220));
/* 456 */         p.show();
/* 457 */         p.getEl().alignTo(dayEl, 't-t?');
/* 458 */     },
/* 459 */ 
/* 460 */     // private
/* 461 */     onHide: function() {
/* 462 */         this.callParent(arguments);
/* 463 */ 
/* 464 */         if (this.detailPanel) {
/* 465 */             this.detailPanel.hide();
/* 466 */         }
/* 467 */     },
/* 468 */ 
/* 469 */     // private
/* 470 */     onClick: function(e, t) {
/* 471 */         if (this.detailPanel) {
/* 472 */             this.detailPanel.hide();
/* 473 */         }
/* 474 */         if (Ext.calendar.view.Month.superclass.onClick.apply(this, arguments)) {
/* 475 */             // The superclass handled the click already so exit
/* 476 */             return;
/* 477 */         }
/* 478 */         if (this.dropZone) {
/* 479 */             this.dropZone.clearShims();
/* 480 */         }
/* 481 */         var el = e.getTarget(this.weekLinkSelector, 3),
/* 482 */             dt,
/* 483 */             parts;
/* 484 */         if (el) {
/* 485 */             dt = el.id.split(this.weekLinkIdDelimiter)[1];
/* 486 */             this.fireEvent('weekclick', this, Ext.Date.parseDate(dt, 'Ymd'));
/* 487 */             return;
/* 488 */         }
/* 489 */         el = e.getTarget(this.moreSelector, 3);
/* 490 */         if (el) {
/* 491 */             dt = el.id.split(this.moreElIdDelimiter)[1];
/* 492 */             this.onMoreClick(Ext.Date.parseDate(dt, 'Ymd'));
/* 493 */             return;
/* 494 */         }
/* 495 */         el = e.getTarget('td', 3);
/* 496 */         if (el) {
/* 497 */             if (el.id && el.id.indexOf(this.dayElIdDelimiter) > -1) {
/* 498 */                 parts = el.id.split(this.dayElIdDelimiter);
/* 499 */                 dt = parts[parts.length - 1];
/* 500 */ 

/* Month.js */

/* 501 */                 this.fireEvent('dayclick', this, Ext.Date.parseDate(dt, 'Ymd'), false, Ext.get(this.getDayId(dt)));
/* 502 */                 return;
/* 503 */             }
/* 504 */         }
/* 505 */     },
/* 506 */ 
/* 507 */     // private
/* 508 */     handleDayMouseEvent: function(e, t, type) {
/* 509 */         var el = e.getTarget(this.weekLinkSelector, 3, true);
/* 510 */         if (el && this.weekLinkOverClass) {
/* 511 */             el[type == 'over' ? 'addCls': 'removeCls'](this.weekLinkOverClass);
/* 512 */             return;
/* 513 */         }
/* 514 */         this.callParent(arguments);
/* 515 */     }
/* 516 */ });
/* 517 */ 

;
/* DayHeader.js */

/* 1   */ /**
/* 2   *|  * @class Ext.calendar.view.DayHeader
/* 3   *|  * @extends Ext.calendar.MonthView
/* 4   *|  * <p>This is the header area container within the day and week views where all-day events are displayed.
/* 5   *|  * Normally you should not need to use this class directly -- instead you should use {@link Ext.calendar.DayView DayView}
/* 6   *|  * which aggregates this class and the {@link Ext.calendar.DayBodyView DayBodyView} into the single unified view
/* 7   *|  * presented by {@link Ext.calendar.CalendarPanel CalendarPanel}.</p>
/* 8   *|  * @constructor
/* 9   *|  * @param {Object} config The config object
/* 10  *|  */
/* 11  */ Ext.define('Ext.calendar.view.DayHeader', {
/* 12  */     extend: 'Ext.calendar.view.Month',
/* 13  */     alias: 'widget.dayheaderview',
/* 14  */ 
/* 15  */     requires: [
/* 16  */         'Ext.calendar.template.DayHeader'
/* 17  */     ],
/* 18  */     
/* 19  */     // private configs
/* 20  */     weekCount: 1,
/* 21  */     dayCount: 1,
/* 22  */     allDayOnly: true,
/* 23  */     monitorResize: false,
/* 24  */ 
/* 25  */     /**
/* 26  *|      * @event dayclick
/* 27  *|      * Fires after the user clicks within the day view container and not on an event element
/* 28  *|      * @param {Ext.calendar.DayBodyView} this
/* 29  *|      * @param {Date} dt The date/time that was clicked on
/* 30  *|      * @param {Boolean} allday True if the day clicked on represents an all-day box, else false. Clicks within the 
/* 31  *|      * DayHeaderView always return true for this param.
/* 32  *|      * @param {Ext.core.Element} el The Element that was clicked on
/* 33  *|      */
/* 34  */ 
/* 35  */     // private
/* 36  */     afterRender: function() {
/* 37  */         if (!this.tpl) {
/* 38  */             this.tpl = new Ext.calendar.template.DayHeader({
/* 39  */                 id: this.id,
/* 40  */                 showTodayText: this.showTodayText,
/* 41  */                 todayText: this.todayText,
/* 42  */                 showTime: this.showTime
/* 43  */             });
/* 44  */         }
/* 45  */         this.tpl.compile();
/* 46  */         this.addCls('ext-cal-day-header');
/* 47  */ 
/* 48  */         this.callParent(arguments);
/* 49  */     },
/* 50  */ 

/* DayHeader.js */

/* 51  */     // private
/* 52  */     forceSize: Ext.emptyFn,
/* 53  */ 
/* 54  */     // private
/* 55  */     refresh: function() {
/* 56  */         this.callParent(arguments);
/* 57  */         this.recalcHeaderBox();
/* 58  */     },
/* 59  */ 
/* 60  */     // private
/* 61  */     recalcHeaderBox : function(){
/* 62  */         var tbl = this.el.down('.ext-cal-evt-tbl'),
/* 63  */             h = tbl.getHeight();
/* 64  */         
/* 65  */         this.el.setHeight(h+7);
/* 66  */         
/* 67  */         // These should be auto-height, but since that does not work reliably
/* 68  */         // across browser / doc type, we have to size them manually
/* 69  */         this.el.down('.ext-cal-hd-ad-inner').setHeight(h+5);
/* 70  */         this.el.down('.ext-cal-bg-tbl').setHeight(h+5);
/* 71  */     },
/* 72  */ 
/* 73  */     // private
/* 74  */     moveNext: function(noRefresh) {
/* 75  */         return this.moveDays(this.dayCount, noRefresh);
/* 76  */     },
/* 77  */ 
/* 78  */     // private
/* 79  */     movePrev: function(noRefresh) {
/* 80  */         return this.moveDays( - this.dayCount, noRefresh);
/* 81  */     },
/* 82  */ 
/* 83  */     // private
/* 84  */     onClick: function(e, t) {
/* 85  */         var el = e.getTarget('td', 3),
/* 86  */             parts,
/* 87  */             dt;
/* 88  */         if (el) {
/* 89  */             if (el.id && el.id.indexOf(this.dayElIdDelimiter) > -1) {
/* 90  */                 parts = el.id.split(this.dayElIdDelimiter);
/* 91  */                 dt = parts[parts.length - 1];
/* 92  */ 
/* 93  */                 this.fireEvent('dayclick', this, Ext.Date.parseDate(dt, 'Ymd'), true, Ext.get(this.getDayId(dt)));
/* 94  */                 return;
/* 95  */             }
/* 96  */         }
/* 97  */         this.callParent(arguments);
/* 98  */     }
/* 99  */ });
/* 100 */ 

;
/* DayBody.js */

/* 1   */ /**S
/* 2   *|  * @class Ext.calendar.view.DayBody
/* 3   *|  * @extends Ext.calendar.view.AbstractCalendar
/* 4   *|  * <p>This is the scrolling container within the day and week views where non-all-day events are displayed.
/* 5   *|  * Normally you should not need to use this class directly -- instead you should use {@link Ext.calendar.DayView DayView}
/* 6   *|  * which aggregates this class and the {@link Ext.calendar.DayHeaderView DayHeaderView} into the single unified view
/* 7   *|  * presented by {@link Ext.calendar.CalendarPanel CalendarPanel}.</p>
/* 8   *|  * @constructor
/* 9   *|  * @param {Object} config The config object
/* 10  *|  */
/* 11  */ Ext.define('Ext.calendar.view.DayBody', {
/* 12  */     extend: 'Ext.calendar.view.AbstractCalendar',
/* 13  */     alias: 'widget.daybodyview',
/* 14  */ 
/* 15  */     requires: [
/* 16  */         'Ext.XTemplate',
/* 17  */         'Ext.calendar.template.DayBody',
/* 18  */         'Ext.calendar.data.EventMappings',
/* 19  */         'Ext.calendar.dd.DayDragZone',
/* 20  */         'Ext.calendar.dd.DayDropZone'
/* 21  */     ],
/* 22  */ 
/* 23  */     //private
/* 24  */     dayColumnElIdDelimiter: '-day-col-',
/* 25  */ 
/* 26  */     /**
/* 27  *|      * @event eventresize
/* 28  *|      * Fires after the user drags the resize handle of an event to resize it
/* 29  *|      * @param {Ext.calendar.view.DayBody} this
/* 30  *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that was resized
/* 31  *|      * containing the updated start and end dates
/* 32  *|      */
/* 33  */ 
/* 34  */     /**
/* 35  *|      * @event dayclick
/* 36  *|      * Fires after the user clicks within the day view container and not on an event element
/* 37  *|      * @param {Ext.calendar.view.DayBody} this
/* 38  *|      * @param {Date} dt The date/time that was clicked on
/* 39  *|      * @param {Boolean} allday True if the day clicked on represents an all-day box, else false. Clicks within the
/* 40  *|      * DayBodyView always return false for this param.
/* 41  *|      * @param {Ext.core.Element} el The Element that was clicked on
/* 42  *|      */
/* 43  */ 
/* 44  */     //private
/* 45  */     initDD: function() {
/* 46  */         var cfg = {
/* 47  */             createText: this.ddCreateEventText,
/* 48  */             moveText: this.ddMoveEventText,
/* 49  */             resizeText: this.ddResizeEventText
/* 50  */         };

/* DayBody.js */

/* 51  */ 
/* 52  */         this.el.ddScrollConfig = {
/* 53  */             // scrolling is buggy in IE/Opera for some reason.  A larger vthresh
/* 54  */             // makes it at least functional if not perfect
/* 55  */             vthresh: Ext.isIE || Ext.isOpera ? 100: 40,
/* 56  */             hthresh: -1,
/* 57  */             frequency: 50,
/* 58  */             increment: 100,
/* 59  */             ddGroup: 'DayViewDD'
/* 60  */         };
/* 61  */         this.dragZone = new Ext.calendar.dd.DayDragZone(this.el, Ext.apply({
/* 62  */             view: this,
/* 63  */             containerScroll: true
/* 64  */         },
/* 65  */         cfg));
/* 66  */ 
/* 67  */         this.dropZone = new Ext.calendar.dd.DayDropZone(this.el, Ext.apply({
/* 68  */             view: this
/* 69  */         },
/* 70  */         cfg));
/* 71  */     },
/* 72  */ 
/* 73  */     //private
/* 74  */     refresh: function() {
/* 75  */         var top = this.el.getScroll().top;
/* 76  */         this.prepareData();
/* 77  */         this.renderTemplate();
/* 78  */         this.renderItems();
/* 79  */ 
/* 80  */         // skip this if the initial render scroll position has not yet been set.
/* 81  */         // necessary since IE/Opera must be deferred, so the first refresh will
/* 82  */         // override the initial position by default and always set it to 0.
/* 83  */         if (this.scrollReady) {
/* 84  */             this.scrollTo(top);
/* 85  */         }
/* 86  */     },
/* 87  */ 
/* 88  */     /**
/* 89  *|      * Scrolls the container to the specified vertical position. If the view is large enough that
/* 90  *|      * there is no scroll overflow then this method will have no effect.
/* 91  *|      * @param {Number} y The new vertical scroll position in pixels
/* 92  *|      * @param {Boolean} defer (optional) <p>True to slightly defer the call, false to execute immediately.</p>
/* 93  *|      * <p>This method will automatically defer itself for IE and Opera (even if you pass false) otherwise
/* 94  *|      * the scroll position will not update in those browsers. You can optionally pass true, however, to
/* 95  *|      * force the defer in all browsers, or use your own custom conditions to determine whether this is needed.</p>
/* 96  *|      * <p>Note that this method should not generally need to be called directly as scroll position is managed internally.</p>
/* 97  *|      */
/* 98  */     scrollTo: function(y, defer) {
/* 99  */         defer = defer || (Ext.isIE || Ext.isOpera);
/* 100 */         if (defer) {

/* DayBody.js */

/* 101 */             Ext.defer(function() {
/* 102 */                 this.el.scrollTo('top', y, true);
/* 103 */                 this.scrollReady = true;
/* 104 */             }, 10, this);
/* 105 */         }
/* 106 */         else {
/* 107 */             this.el.scrollTo('top', y, true);
/* 108 */             this.scrollReady = true;
/* 109 */         }
/* 110 */     },
/* 111 */ 
/* 112 */     // private
/* 113 */     afterRender: function() {
/* 114 */         if (!this.tpl) {
/* 115 */             this.tpl = new Ext.calendar.template.DayBody({
/* 116 */                 id: this.id,
/* 117 */                 dayCount: this.dayCount,
/* 118 */                 showTodayText: this.showTodayText,
/* 119 */                 todayText: this.todayText,
/* 120 */                 showTime: this.showTime
/* 121 */             });
/* 122 */         }
/* 123 */         this.tpl.compile();
/* 124 */ 
/* 125 */         this.addCls('ext-cal-body-ct');
/* 126 */ 
/* 127 */         this.callParent(arguments);
/* 128 */ 
/* 129 */         // default scroll position to 7am:
/* 130 */         this.scrollTo(7 * 42);
/* 131 */     },
/* 132 */ 
/* 133 */     // private
/* 134 */     forceSize: Ext.emptyFn,
/* 135 */ 
/* 136 */     // private
/* 137 */     onEventResize: function(rec, data) {
/* 138 */         var D = Ext.calendar.util.Date,
/* 139 */         start = Ext.calendar.data.EventMappings.StartDate.name,
/* 140 */         end = Ext.calendar.data.EventMappings.EndDate.name;
/* 141 */ 
/* 142 */         if (D.compare(rec.data[start], data.StartDate) === 0 &&
/* 143 */         D.compare(rec.data[end], data.EndDate) === 0) {
/* 144 */             // no changes
/* 145 */             return;
/* 146 */         }
/* 147 */         rec.set(start, data.StartDate);
/* 148 */         rec.set(end, data.EndDate);
/* 149 */ 
/* 150 */         this.fireEvent('eventresize', this, rec);

/* DayBody.js */

/* 151 */     },
/* 152 */ 
/* 153 */     // inherited docs
/* 154 */     getEventBodyMarkup: function() {
/* 155 */         if (!this.eventBodyMarkup) {
/* 156 */             this.eventBodyMarkup = ['{Title}',
/* 157 */             '<tpl if="_isReminder">',
/* 158 */             '<i class="ext-cal-ic ext-cal-ic-rem">&#160;</i>',
/* 159 */             '</tpl>',
/* 160 */             '<tpl if="_isRecurring">',
/* 161 */             '<i class="ext-cal-ic ext-cal-ic-rcr">&#160;</i>',
/* 162 */             '</tpl>'
/* 163 */             //                '<tpl if="spanLeft">',
/* 164 */             //                    '<i class="ext-cal-spl">&#160;</i>',
/* 165 */             //                '</tpl>',
/* 166 */             //                '<tpl if="spanRight">',
/* 167 */             //                    '<i class="ext-cal-spr">&#160;</i>',
/* 168 */             //                '</tpl>'
/* 169 */             ].join('');
/* 170 */         }
/* 171 */         return this.eventBodyMarkup;
/* 172 */     },
/* 173 */ 
/* 174 */     // inherited docs
/* 175 */     getEventTemplate: function() {
/* 176 */         if (!this.eventTpl) {
/* 177 */             this.eventTpl = !(Ext.isIE || Ext.isOpera) ?
/* 178 */             new Ext.XTemplate(
/* 179 */                 '<div id="{_elId}" class="{_selectorCls} {_colorCls} ext-cal-evt ext-cal-evr {cls}" style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;{style}">',
/* 180 */                 '<div class="ext-evt-bd">', this.getEventBodyMarkup(), '</div>',
/* 181 */                 '<div class="ext-evt-rsz"><div class="ext-evt-rsz-h">&#160;</div></div>',
/* 182 */                 '</div>'
/* 183 */             )
/* 184 */             : new Ext.XTemplate(
/* 185 */                 '<div id="{_elId}" class="ext-cal-evt {_selectorCls} {_colorCls}-x {cls}" style="left: {_left}%; width: {_width}%; top: {_top}px;{style}">',
/* 186 */                 '<div class="ext-cal-evb">&#160;</div>',
/* 187 */                 '<dl style="height: {_height}px;" class="ext-cal-evdm">',
/* 188 */                 '<dd class="ext-evt-bd">',
/* 189 */                 this.getEventBodyMarkup(),
/* 190 */                 '</dd>',
/* 191 */                 '<div class="ext-evt-rsz"><div class="ext-evt-rsz-h">&#160;</div></div>',
/* 192 */                 '</dl>',
/* 193 */                 '<div class="ext-cal-evb">&#160;</div>',
/* 194 */                 '</div>'
/* 195 */             );
/* 196 */             this.eventTpl.compile();
/* 197 */         }
/* 198 */         return this.eventTpl;
/* 199 */     },
/* 200 */ 

/* DayBody.js */

/* 201 */     /**
/* 202 *|      * <p>Returns the XTemplate that is bound to the calendar's event store (it expects records of type
/* 203 *|      * {@link Ext.calendar.EventRecord}) to populate the calendar views with <strong>all-day</strong> events.
/* 204 *|      * Internally this method by default generates different markup for browsers that support CSS border radius
/* 205 *|      * and those that don't. This method can be overridden as needed to customize the markup generated.</p>
/* 206 *|      * <p>Note that this method calls {@link #getEventBodyMarkup} to retrieve the body markup for events separately
/* 207 *|      * from the surrounding container markup.  This provdes the flexibility to customize what's in the body without
/* 208 *|      * having to override the entire XTemplate. If you do override this method, you should make sure that your
/* 209 *|      * overridden version also does the same.</p>
/* 210 *|      * @return {Ext.XTemplate} The event XTemplate
/* 211 *|      */
/* 212 */     getEventAllDayTemplate: function() {
/* 213 */         if (!this.eventAllDayTpl) {
/* 214 */             var tpl,
/* 215 */             body = this.getEventBodyMarkup();
/* 216 */ 
/* 217 */             tpl = !(Ext.isIE || Ext.isOpera) ?
/* 218 */             new Ext.XTemplate(
/* 219 */                 '<div id="{_elId}" class="{_selectorCls} {_colorCls} {spanCls} ext-cal-evt ext-cal-evr" style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">',
/* 220 */                 body,
/* 221 */                 '</div>'
/* 222 */             )
/* 223 */             : new Ext.XTemplate(
/* 224 */                 '<div id="{_elId}" class="ext-cal-evt" style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">',
/* 225 */                 '<div class="{_selectorCls} {spanCls} {_colorCls} ext-cal-evo">',
/* 226 */                 '<div class="ext-cal-evm">',
/* 227 */                 '<div class="ext-cal-evi">',
/* 228 */                 body,
/* 229 */                 '</div>',
/* 230 */                 '</div>',
/* 231 */                 '</div></div>'
/* 232 */             );
/* 233 */             tpl.compile();
/* 234 */             this.eventAllDayTpl = tpl;
/* 235 */         }
/* 236 */         return this.eventAllDayTpl;
/* 237 */     },
/* 238 */ 
/* 239 */     // private
/* 240 */     getTemplateEventData: function(evt) {
/* 241 */         var selector = this.getEventSelectorCls(evt[Ext.calendar.data.EventMappings.EventId.name]),
/* 242 */             data = {},
/* 243 */             M = Ext.calendar.data.EventMappings;
/* 244 */ 
/* 245 */         this.getTemplateEventBox(evt);
/* 246 */ 
/* 247 */         data._selectorCls = selector;
/* 248 */         data._colorCls = 'ext-color-' + (evt[M.CalendarId.name] || '0') + (evt._renderAsAllDay ? '-ad': '');
/* 249 */         data._elId = selector + (evt._weekIndex ? '-' + evt._weekIndex: '');
/* 250 */         data._isRecurring = evt.Recurrence && evt.Recurrence != '';

/* DayBody.js */

/* 251 */         data._isReminder = evt[M.Reminder.name] && evt[M.Reminder.name] != '';
/* 252 */         var title = evt[M.Title.name];
/* 253 */         data.Title = (evt[M.IsAllDay.name] ? '': Ext.Date.format(evt[M.StartDate.name], 'g:ia ')) + (!title || title.length == 0 ? '(No title)': title);
/* 254 */ 
/* 255 */         return Ext.applyIf(data, evt);
/* 256 */     },
/* 257 */ 
/* 258 */     // private
/* 259 */     getTemplateEventBox: function(evt) {
/* 260 */         var heightFactor = 0.7,
/* 261 */             start = evt[Ext.calendar.data.EventMappings.StartDate.name],
/* 262 */             end = evt[Ext.calendar.data.EventMappings.EndDate.name],
/* 263 */             startMins = start.getHours() * 60 + start.getMinutes(),
/* 264 */             endMins = end.getHours() * 60 + end.getMinutes(),
/* 265 */             diffMins = endMins - startMins;
/* 266 */ 
/* 267 */         evt._left = 0;
/* 268 */         evt._width = 100;
/* 269 */         evt._top = Math.round(startMins * heightFactor);
/* 270 */         evt._height = Math.max((diffMins * heightFactor), 15);
/* 271 */     },
/* 272 */ 
/* 273 */     // private
/* 274 */     renderItems: function() {
/* 275 */         var day = 0,
/* 276 */             evts = [],
/* 277 */             ev,
/* 278 */             d,
/* 279 */             ct,
/* 280 */             item,
/* 281 */             i,
/* 282 */             j,
/* 283 */             l,
/* 284 */             emptyCells, skipped,
/* 285 */             evt,
/* 286 */             evt2,
/* 287 */             overlapCols,
/* 288 */             prevCol,
/* 289 */             colWidth,
/* 290 */             evtWidth,
/* 291 */             markup,
/* 292 */             target;
/* 293 */         for (; day < this.dayCount; day++) {
/* 294 */             ev = emptyCells = skipped = 0;
/* 295 */             d = this.eventGrid[0][day];
/* 296 */             ct = d ? d.length: 0;
/* 297 */ 
/* 298 */             for (; ev < ct; ev++) {
/* 299 */                 evt = d[ev];
/* 300 */                 if (!evt) {

/* DayBody.js */

/* 301 */                     continue;
/* 302 */                 }
/* 303 */                 item = evt.data || evt.event.data;
/* 304 */                 if (item._renderAsAllDay) {
/* 305 */                     continue;
/* 306 */                 }
/* 307 */                 Ext.apply(item, {
/* 308 */                     cls: 'ext-cal-ev',
/* 309 */                     _positioned: true
/* 310 */                 });
/* 311 */                 evts.push({
/* 312 */                     data: this.getTemplateEventData(item),
/* 313 */                     date: Ext.calendar.util.Date.add(this.viewStart, {days: day})
/* 314 */                 });
/* 315 */             }
/* 316 */         }
/* 317 */ 
/* 318 */         // overlapping event pre-processing loop
/* 319 */         i = j = overlapCols = prevCol = 0;
/* 320 */         l = evts.length;
/* 321 */         for (; i < l; i++) {
/* 322 */             evt = evts[i].data;
/* 323 */             evt2 = null;
/* 324 */             prevCol = overlapCols;
/* 325 */             for (j = 0; j < l; j++) {
/* 326 */                 if (i == j) {
/* 327 */                     continue;
/* 328 */                 }
/* 329 */                 evt2 = evts[j].data;
/* 330 */                 if (this.isOverlapping(evt, evt2)) {
/* 331 */                     evt._overlap = evt._overlap == undefined ? 1: evt._overlap + 1;
/* 332 */                     if (i < j) {
/* 333 */                         if (evt._overcol === undefined) {
/* 334 */                             evt._overcol = 0;
/* 335 */                         }
/* 336 */                         evt2._overcol = evt._overcol + 1;
/* 337 */                         overlapCols = Math.max(overlapCols, evt2._overcol);
/* 338 */                     }
/* 339 */                 }
/* 340 */             }
/* 341 */         }
/* 342 */ 
/* 343 */         // rendering loop
/* 344 */         for (i = 0; i < l; i++) {
/* 345 */             evt = evts[i].data;
/* 346 */             if (evt._overlap !== undefined) {
/* 347 */                 colWidth = 100 / (overlapCols + 1);
/* 348 */                 evtWidth = 100 - (colWidth * evt._overlap);
/* 349 */ 
/* 350 */                 evt._width = colWidth;

/* DayBody.js */

/* 351 */                 evt._left = colWidth * evt._overcol;
/* 352 */             }
/* 353 */             markup = this.getEventTemplate().apply(evt);
/* 354 */             target = this.id + '-day-col-' + Ext.Date.format(evts[i].date, 'Ymd');
/* 355 */             Ext.get(target).select('*').destroy();
/* 356 */ 
/* 357 */             Ext.core.DomHelper.append(target, markup);
/* 358 */         }
/* 359 */ 
/* 360 */         this.fireEvent('eventsrendered', this);
/* 361 */     },
/* 362 */ 
/* 363 */     // private
/* 364 */     getDayEl: function(dt) {
/* 365 */         return Ext.get(this.getDayId(dt));
/* 366 */     },
/* 367 */ 
/* 368 */     // private
/* 369 */     getDayId: function(dt) {
/* 370 */         if (Ext.isDate(dt)) {
/* 371 */             dt = Ext.Date.format(dt, 'Ymd');
/* 372 */         }
/* 373 */         return this.id + this.dayColumnElIdDelimiter + dt;
/* 374 */     },
/* 375 */ 
/* 376 */     // private
/* 377 */     getDaySize: function() {
/* 378 */         var box = this.el.down('.ext-cal-day-col-inner').getBox();
/* 379 */         return {
/* 380 */             height: box.height,
/* 381 */             width: box.width
/* 382 */         };
/* 383 */     },
/* 384 */ 
/* 385 */     // private
/* 386 */     getDayAt: function(x, y) {
/* 387 */         var xoffset = this.el.down('.ext-cal-day-times').getWidth(),
/* 388 */             viewBox = this.el.getBox(),
/* 389 */             daySize = this.getDaySize(false),
/* 390 */             relX = x - viewBox.x - xoffset,
/* 391 */             dayIndex = Math.floor(relX / daySize.width),
/* 392 */             // clicked col index
/* 393 */             scroll = this.el.getScroll(),
/* 394 */             row = this.el.down('.ext-cal-bg-row'),
/* 395 */             // first avail row, just to calc size
/* 396 */             rowH = row.getHeight() / 2,
/* 397 */             // 30 minute increment since a row is 60 minutes
/* 398 */             relY = y - viewBox.y - rowH + scroll.top,
/* 399 */             rowIndex = Math.max(0, Math.ceil(relY / rowH)),
/* 400 */             mins = rowIndex * 30,

/* DayBody.js */

/* 401 */             dt = Ext.calendar.util.Date.add(this.viewStart, {days: dayIndex, minutes: mins}),
/* 402 */             el = this.getDayEl(dt),
/* 403 */             timeX = x;
/* 404 */ 
/* 405 */         if (el) {
/* 406 */             timeX = el.getX();
/* 407 */         }
/* 408 */ 
/* 409 */         return {
/* 410 */             date: dt,
/* 411 */             el: el,
/* 412 */             // this is the box for the specific time block in the day that was clicked on:
/* 413 */             timeBox: {
/* 414 */                 x: timeX,
/* 415 */                 y: (rowIndex * 21) + viewBox.y - scroll.top,
/* 416 */                 width: daySize.width,
/* 417 */                 height: rowH
/* 418 */             }
/* 419 */         };
/* 420 */     },
/* 421 */ 
/* 422 */     // private
/* 423 */     onClick: function(e, t) {
/* 424 */         if (this.dragPending || Ext.calendar.view.DayBody.superclass.onClick.apply(this, arguments)) {
/* 425 */             // The superclass handled the click already so exit
/* 426 */             return;
/* 427 */         }
/* 428 */         if (e.getTarget('.ext-cal-day-times', 3) !== null) {
/* 429 */             // ignore clicks on the times-of-day gutter
/* 430 */             return;
/* 431 */         }
/* 432 */         var el = e.getTarget('td', 3);
/* 433 */         if (el) {
/* 434 */             if (el.id && el.id.indexOf(this.dayElIdDelimiter) > -1) {
/* 435 */                 var dt = this.getDateFromId(el.id, this.dayElIdDelimiter);
/* 436 */                 this.fireEvent('dayclick', this, Ext.Date.parseDate(dt, 'Ymd'), true, Ext.get(this.getDayId(dt, true)));
/* 437 */                 return;
/* 438 */             }
/* 439 */         }
/* 440 */         var day = this.getDayAt(e.getX(), e.getY());
/* 441 */         if (day && day.date) {
/* 442 */             this.fireEvent('dayclick', this, day.date, false, null);
/* 443 */         }
/* 444 */     }
/* 445 */ });
/* 446 */ 

;
/* Day.js */

/* 1   */ /**
/* 2   *|  * @class Ext.calendar.view.Day
/* 3   *|  * @extends Ext.container.Container
/* 4   *|  * <p>Unlike other calendar views, is not actually a subclass of {@link Ext.calendar.view.AbstractCalendar AbstractCalendar}.
/* 5   *|  * Instead it is a {@link Ext.container.Container Container} subclass that internally creates and manages the layouts of
/* 6   *|  * a {@link Ext.calendar.DayHeaderView DayHeaderView} and a {@link Ext.calendar.DayBodyView DayBodyView}. As such
/* 7   *|  * DayView accepts any config values that are valid for DayHeaderView and DayBodyView and passes those through
/* 8   *|  * to the contained views. It also supports the interface required of any calendar view and in turn calls methods
/* 9   *|  * on the contained views as necessary.</p>
/* 10  *|  * @constructor
/* 11  *|  * @param {Object} config The config object
/* 12  *|  */
/* 13  */ Ext.define('Ext.calendar.view.Day', {
/* 14  */     extend: 'Ext.container.Container',
/* 15  */     alias: 'widget.dayview',
/* 16  */     
/* 17  */     requires: [
/* 18  */         'Ext.calendar.view.AbstractCalendar',
/* 19  */         'Ext.calendar.view.DayHeader',
/* 20  */         'Ext.calendar.view.DayBody'
/* 21  */     ],
/* 22  */     
/* 23  */     /**
/* 24  *|      * @cfg {Boolean} showTime
/* 25  *|      * True to display the current time in today's box in the calendar, false to not display it (defautls to true)
/* 26  *|      */
/* 27  */     showTime: true,
/* 28  */     /**
/* 29  *|      * @cfg {Boolean} showTodayText
/* 30  *|      * True to display the {@link #todayText} string in today's box in the calendar, false to not display it (defautls to true)
/* 31  *|      */
/* 32  */     showTodayText: true,
/* 33  */     /**
/* 34  *|      * @cfg {String} todayText
/* 35  *|      * The text to display in the current day's box in the calendar when {@link #showTodayText} is true (defaults to 'Today')
/* 36  *|      */
/* 37  */     todayText: 'Today',
/* 38  */     /**
/* 39  *|      * @cfg {String} ddCreateEventText
/* 40  *|      * The text to display inside the drag proxy while dragging over the calendar to create a new event (defaults to 
/* 41  *|      * 'Create event for {0}' where {0} is a date range supplied by the view)
/* 42  *|      */
/* 43  */     ddCreateEventText: 'Create event for {0}',
/* 44  */     /**
/* 45  *|      * @cfg {String} ddMoveEventText
/* 46  *|      * The text to display inside the drag proxy while dragging an event to reposition it (defaults to 
/* 47  *|      * 'Move event to {0}' where {0} is the updated event start date/time supplied by the view)
/* 48  *|      */
/* 49  */     ddMoveEventText: 'Move event to {0}',
/* 50  */     /**

/* Day.js *|

/* 51  *|      * @cfg {Number} dayCount
/* 52  *|      * The number of days to display in the view (defaults to 1)
/* 53  *|      */
/* 54  */     dayCount: 1,
/* 55  */     
/* 56  */     // private
/* 57  */     initComponent : function(){
/* 58  */         // rendering more than 7 days per view is not supported
/* 59  */         this.dayCount = this.dayCount > 7 ? 7 : this.dayCount;
/* 60  */         
/* 61  */         var cfg = Ext.apply({}, this.initialConfig);
/* 62  */         cfg.showTime = this.showTime;
/* 63  */         cfg.showTodatText = this.showTodayText;
/* 64  */         cfg.todayText = this.todayText;
/* 65  */         cfg.dayCount = this.dayCount;
/* 66  */         cfg.wekkCount = 1; 
/* 67  */         
/* 68  */         var header = Ext.applyIf({
/* 69  */             xtype: 'dayheaderview',
/* 70  */             id: this.id+'-hd'
/* 71  */         }, cfg);
/* 72  */         
/* 73  */         var body = Ext.applyIf({
/* 74  */             xtype: 'daybodyview',
/* 75  */             id: this.id+'-bd'
/* 76  */         }, cfg);
/* 77  */         
/* 78  */         this.items = [header, body];
/* 79  */         this.addCls('ext-cal-dayview ext-cal-ct');
/* 80  */         
/* 81  */         this.callParent(arguments);
/* 82  */     },
/* 83  */     
/* 84  */     // private
/* 85  */     afterRender : function(){
/* 86  */         this.callParent(arguments);
/* 87  */         
/* 88  */         this.header = Ext.getCmp(this.id+'-hd');
/* 89  */         this.body = Ext.getCmp(this.id+'-bd');
/* 90  */         this.body.on('eventsrendered', this.forceSize, this);
/* 91  */     },
/* 92  */     
/* 93  */     // private
/* 94  */     refresh : function(){
/* 95  */         this.header.refresh();
/* 96  */         this.body.refresh();
/* 97  */     },
/* 98  */     
/* 99  */     // private
/* 100 */     forceSize: function(){

/* Day.js */

/* 101 */         // The defer call is mainly for good ol' IE, but it doesn't hurt in
/* 102 */         // general to make sure that the window resize is good and done first
/* 103 */         // so that we can properly calculate sizes.
/* 104 */         Ext.defer(function(){
/* 105 */             var ct = this.el.up('.x-panel-body'),
/* 106 */                 hd = this.el.down('.ext-cal-day-header'),
/* 107 */                 h = ct.getHeight() - hd.getHeight();
/* 108 */             
/* 109 */             this.el.down('.ext-cal-body-ct').setHeight(h);
/* 110 */         }, 10, this);
/* 111 */     },
/* 112 */     
/* 113 */     // private
/* 114 */     onResize : function() {
/* 115 */         this.callParent(arguments);
/* 116 */         this.forceSize();
/* 117 */     },
/* 118 */     
/* 119 */     // private
/* 120 */     getViewBounds : function(){
/* 121 */         return this.header.getViewBounds();
/* 122 */     },
/* 123 */     
/* 124 */     /**
/* 125 *|      * Returns the start date of the view, as set by {@link #setStartDate}. Note that this may not 
/* 126 *|      * be the first date displayed in the rendered calendar -- to get the start and end dates displayed
/* 127 *|      * to the user use {@link #getViewBounds}.
/* 128 *|      * @return {Date} The start date
/* 129 *|      */
/* 130 */     getStartDate : function(){
/* 131 */         return this.header.getStartDate();
/* 132 */     },
/* 133 */ 
/* 134 */     /**
/* 135 *|      * Sets the start date used to calculate the view boundaries to display. The displayed view will be the 
/* 136 *|      * earliest and latest dates that match the view requirements and contain the date passed to this function.
/* 137 *|      * @param {Date} dt The date used to calculate the new view boundaries
/* 138 *|      */
/* 139 */     setStartDate: function(dt){
/* 140 */         this.header.setStartDate(dt, true);
/* 141 */         this.body.setStartDate(dt, true);
/* 142 */     },
/* 143 */ 
/* 144 */     // private
/* 145 */     renderItems: function(){
/* 146 */         this.header.renderItems();
/* 147 */         this.body.renderItems();
/* 148 */     },
/* 149 */     
/* 150 */     /**

/* Day.js *|

/* 151 *|      * Returns true if the view is currently displaying today's date, else false.
/* 152 *|      * @return {Boolean} True or false
/* 153 *|      */
/* 154 */     isToday : function(){
/* 155 */         return this.header.isToday();
/* 156 */     },
/* 157 */     
/* 158 */     /**
/* 159 *|      * Updates the view to contain the passed date
/* 160 *|      * @param {Date} dt The date to display
/* 161 *|      * @return {Date} The new view start date
/* 162 *|      */
/* 163 */     moveTo : function(dt, noRefresh){
/* 164 */         this.header.moveTo(dt, noRefresh);
/* 165 */         return this.body.moveTo(dt, noRefresh);
/* 166 */     },
/* 167 */     
/* 168 */     /**
/* 169 *|      * Updates the view to the next consecutive date(s)
/* 170 *|      * @return {Date} The new view start date
/* 171 *|      */
/* 172 */     moveNext : function(noRefresh){
/* 173 */         this.header.moveNext(noRefresh);
/* 174 */         return this.body.moveNext(noRefresh);
/* 175 */     },
/* 176 */     
/* 177 */     /**
/* 178 *|      * Updates the view to the previous consecutive date(s)
/* 179 *|      * @return {Date} The new view start date
/* 180 *|      */
/* 181 */     movePrev : function(noRefresh){
/* 182 */         this.header.movePrev(noRefresh);
/* 183 */         return this.body.movePrev(noRefresh);
/* 184 */     },
/* 185 */ 
/* 186 */     /**
/* 187 *|      * Shifts the view by the passed number of days relative to the currently set date
/* 188 *|      * @param {Number} value The number of days (positive or negative) by which to shift the view
/* 189 *|      * @return {Date} The new view start date
/* 190 *|      */
/* 191 */     moveDays : function(value, noRefresh){
/* 192 */         this.header.moveDays(value, noRefresh);
/* 193 */         return this.body.moveDays(value, noRefresh);
/* 194 */     },
/* 195 */     
/* 196 */     /**
/* 197 *|      * Updates the view to show today
/* 198 *|      * @return {Date} Today's date
/* 199 *|      */
/* 200 */     moveToday : function(noRefresh){

/* Day.js */

/* 201 */         this.header.moveToday(noRefresh);
/* 202 */         return this.body.moveToday(noRefresh);
/* 203 */     }
/* 204 */ });
/* 205 */ 

;
/* Week.js */

/* 1  */ /**
/* 2  *|  * @class Ext.calendar.view.Week
/* 3  *|  * @extends Ext.calendar.DayView
/* 4  *|  * <p>Displays a calendar view by week. This class does not usually need ot be used directly as you can
/* 5  *|  * use a {@link Ext.calendar.CalendarPanel CalendarPanel} to manage multiple calendar views at once including
/* 6  *|  * the week view.</p>
/* 7  *|  * @constructor
/* 8  *|  * @param {Object} config The config object
/* 9  *|  */
/* 10 */ Ext.define('Ext.calendar.view.Week', {
/* 11 */     extend: 'Ext.calendar.view.Day',
/* 12 */     alias: 'widget.weekview',
/* 13 */     
/* 14 */     /**
/* 15 *|      * @cfg {Number} dayCount
/* 16 *|      * The number of days to display in the view (defaults to 7)
/* 17 *|      */
/* 18 */     dayCount: 7
/* 19 */ });
/* 20 */ 

;
/* CalendarPanel.js */

/* 1   */ /**
/* 2   *|  * @class Ext.calendar.CalendarPanel
/* 3   *|  * @extends Ext.Panel
/* 4   *|  * <p>This is the default container for Ext calendar views. It supports day, week and month views as well
/* 5   *|  * as a built-in event edit form. The only requirement for displaying a calendar is passing in a valid
/* 6   *|  * {@link #calendarStore} config containing records of type {@link Ext.calendar.EventRecord EventRecord}. In order
/* 7   *|  * to make the calendar interactive (enable editing, drag/drop, etc.) you can handle any of the various
/* 8   *|  * events fired by the underlying views and exposed through the CalendarPanel.</p>
/* 9   *|  * {@link #layoutConfig} option if needed.</p>
/* 10  *|  * @constructor
/* 11  *|  * @param {Object} config The config object
/* 12  *|  * @xtype calendarpanel
/* 13  *|  */
/* 14  */ Ext.define('Ext.calendar.CalendarPanel', {
/* 15  */     extend: 'Ext.panel.Panel',
/* 16  */     alias: 'widget.calendarpanel',
/* 17  */     
/* 18  */     requires: [
/* 19  */         'Ext.layout.container.Card',
/* 20  */         'Ext.calendar.view.Day',
/* 21  */         'Ext.calendar.view.Week',
/* 22  */         'Ext.calendar.view.Month',
/* 23  */         'Ext.calendar.form.EventDetails',
/* 24  */         'Ext.calendar.data.EventMappings'
/* 25  */     ],
/* 26  */     
/* 27  */     /**
/* 28  *|      * @cfg {Boolean} showDayView
/* 29  *|      * True to include the day view (and toolbar button), false to hide them (defaults to true).
/* 30  *|      */
/* 31  */     showDayView: true,
/* 32  */     /**
/* 33  *|      * @cfg {Boolean} showWeekView
/* 34  *|      * True to include the week view (and toolbar button), false to hide them (defaults to true).
/* 35  *|      */
/* 36  */     showWeekView: true,
/* 37  */     /**
/* 38  *|      * @cfg {Boolean} showMonthView
/* 39  *|      * True to include the month view (and toolbar button), false to hide them (defaults to true).
/* 40  *|      * If the day and week views are both hidden, the month view will show by default even if
/* 41  *|      * this config is false.
/* 42  *|      */
/* 43  */     showMonthView: true,
/* 44  */     /**
/* 45  *|      * @cfg {Boolean} showNavBar
/* 46  *|      * True to display the calendar navigation toolbar, false to hide it (defaults to true). Note that
/* 47  *|      * if you hide the default navigation toolbar you'll have to provide an alternate means of navigating the calendar.
/* 48  *|      */
/* 49  */     showNavBar: true,
/* 50  */     /**

/* CalendarPanel.js *|

/* 51  *|      * @cfg {String} todayText
/* 52  *|      * Alternate text to use for the 'Today' nav bar button.
/* 53  *|      */
/* 54  */     todayText: 'Today',
/* 55  */     /**
/* 56  *|      * @cfg {Boolean} showTodayText
/* 57  *|      * True to show the value of {@link #todayText} instead of today's date in the calendar's current day box,
/* 58  *|      * false to display the day number(defaults to true).
/* 59  *|      */
/* 60  */     showTodayText: true,
/* 61  */     /**
/* 62  *|      * @cfg {Boolean} showTime
/* 63  *|      * True to display the current time next to the date in the calendar's current day box, false to not show it 
/* 64  *|      * (defaults to true).
/* 65  *|      */
/* 66  */     showTime: true,
/* 67  */     /**
/* 68  *|      * @cfg {String} dayText
/* 69  *|      * Alternate text to use for the 'Day' nav bar button.
/* 70  *|      */
/* 71  */     dayText: 'Day',
/* 72  */     /**
/* 73  *|      * @cfg {String} weekText
/* 74  *|      * Alternate text to use for the 'Week' nav bar button.
/* 75  *|      */
/* 76  */     weekText: 'Week',
/* 77  */     /**
/* 78  *|      * @cfg {String} monthText
/* 79  *|      * Alternate text to use for the 'Month' nav bar button.
/* 80  *|      */
/* 81  */     monthText: 'Month',
/* 82  */     
/* 83  */     layout: 'card',
/* 84  */ 
/* 85  */     // private property
/* 86  */     startDate: new Date(),
/* 87  */ 
/* 88  */     /**
/* 89  *|      * @event eventadd
/* 90  *|      * Fires after a new event is added to the underlying store
/* 91  *|      * @param {Ext.calendar.CalendarPanel} this
/* 92  *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was added
/* 93  *|      */
/* 94  */ 
/* 95  */     /**
/* 96  *|      * @event eventupdate
/* 97  *|      * Fires after an existing event is updated
/* 98  *|      * @param {Ext.calendar.CalendarPanel} this
/* 99  *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was updated
/* 100 *|      */

/* CalendarPanel.js */

/* 101 */ 
/* 102 */     /**
/* 103 *|      * @event eventdelete
/* 104 *|      * Fires after an event is removed from the underlying store
/* 105 *|      * @param {Ext.calendar.CalendarPanel} this
/* 106 *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was removed
/* 107 *|      */
/* 108 */ 
/* 109 */     /**
/* 110 *|      * @event eventcancel
/* 111 *|      * Fires after an event add/edit operation is canceled by the user and no store update took place
/* 112 *|      * @param {Ext.calendar.CalendarPanel} this
/* 113 *|      * @param {Ext.calendar.EventRecord} rec The new {@link Ext.calendar.EventRecord record} that was canceled
/* 114 *|      */
/* 115 */ 
/* 116 */     /**
/* 117 *|      * @event viewchange
/* 118 *|      * Fires after a different calendar view is activated (but not when the event edit form is activated)
/* 119 *|      * @param {Ext.calendar.CalendarPanel} this
/* 120 *|      * @param {Ext.Ext.calendar.view.AbstractCalendar} view The view being activated (any valid {@link Ext.calendar.view.AbstractCalendar AbstractCalendar} subclass)
/* 121 *|      * @param {Object} info Extra information about the newly activated view. This is a plain object 
/* 122 *|      * with following properties:<div class="mdetail-params"><ul>
/* 123 *|      * <li><b><code>activeDate</code></b> : <div class="sub-desc">The currently-selected date</div></li>
/* 124 *|      * <li><b><code>viewStart</code></b> : <div class="sub-desc">The first date in the new view range</div></li>
/* 125 *|      * <li><b><code>viewEnd</code></b> : <div class="sub-desc">The last date in the new view range</div></li>
/* 126 *|      * </ul></div>
/* 127 *|      */
/* 128 */ 
/* 129 */ 
/* 130 */     //
/* 131 */     // NOTE: CalendarPanel also relays the following events from contained views as if they originated from this:
/* 132 */     //
/* 133 */     /**
/* 134 *|      * @event eventsrendered
/* 135 *|      * Fires after events are finished rendering in the view
/* 136 *|      * @param {Ext.calendar.CalendarPanel} this 
/* 137 *|      */
/* 138 */     /**
/* 139 *|      * @event eventclick
/* 140 *|      * Fires after the user clicks on an event element
/* 141 *|      * @param {Ext.calendar.CalendarPanel} this
/* 142 *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that was clicked on
/* 143 *|      * @param {HTMLNode} el The DOM node that was clicked on
/* 144 *|      */
/* 145 */     /**
/* 146 *|      * @event eventover
/* 147 *|      * Fires anytime the mouse is over an event element
/* 148 *|      * @param {Ext.calendar.CalendarPanel} this
/* 149 *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that the cursor is over
/* 150 *|      * @param {HTMLNode} el The DOM node that is being moused over

/* CalendarPanel.js *|

/* 151 *|      */
/* 152 */     /**
/* 153 *|      * @event eventout
/* 154 *|      * Fires anytime the mouse exits an event element
/* 155 *|      * @param {Ext.calendar.CalendarPanel} this
/* 156 *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that the cursor exited
/* 157 *|      * @param {HTMLNode} el The DOM node that was exited
/* 158 *|      */
/* 159 */     /**
/* 160 *|      * @event datechange
/* 161 *|      * Fires after the start date of the view changes
/* 162 *|      * @param {Ext.calendar.CalendarPanel} this
/* 163 *|      * @param {Date} startDate The start date of the view (as explained in {@link #getStartDate}
/* 164 *|      * @param {Date} viewStart The first displayed date in the view
/* 165 *|      * @param {Date} viewEnd The last displayed date in the view
/* 166 *|      */
/* 167 */     /**
/* 168 *|      * @event rangeselect
/* 169 *|      * Fires after the user drags on the calendar to select a range of dates/times in which to create an event
/* 170 *|      * @param {Ext.calendar.CalendarPanel} this
/* 171 *|      * @param {Object} dates An object containing the start (StartDate property) and end (EndDate property) dates selected
/* 172 *|      * @param {Function} callback A callback function that MUST be called after the event handling is complete so that
/* 173 *|      * the view is properly cleaned up (shim elements are persisted in the view while the user is prompted to handle the
/* 174 *|      * range selection). The callback is already created in the proper scope, so it simply needs to be executed as a standard
/* 175 *|      * function call (e.g., callback()).
/* 176 *|      */
/* 177 */     /**
/* 178 *|      * @event eventmove
/* 179 *|      * Fires after an event element is dragged by the user and dropped in a new position
/* 180 *|      * @param {Ext.calendar.CalendarPanel} this
/* 181 *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that was moved with
/* 182 *|      * updated start and end dates
/* 183 *|      */
/* 184 */     /**
/* 185 *|      * @event initdrag
/* 186 *|      * Fires when a drag operation is initiated in the view
/* 187 *|      * @param {Ext.calendar.CalendarPanel} this
/* 188 *|      */
/* 189 */     /**
/* 190 *|      * @event eventresize
/* 191 *|      * Fires after the user drags the resize handle of an event to resize it
/* 192 *|      * @param {Ext.calendar.CalendarPanel} this
/* 193 *|      * @param {Ext.calendar.EventRecord} rec The {@link Ext.calendar.EventRecord record} for the event that was resized
/* 194 *|      * containing the updated start and end dates
/* 195 *|      */
/* 196 */     /**
/* 197 *|      * @event dayclick
/* 198 *|      * Fires after the user clicks within a day/week view container and not on an event element
/* 199 *|      * @param {Ext.calendar.CalendarPanel} this
/* 200 *|      * @param {Date} dt The date/time that was clicked on

/* CalendarPanel.js *|

/* 201 *|      * @param {Boolean} allday True if the day clicked on represents an all-day box, else false.
/* 202 *|      * @param {Ext.core.Element} el The Element that was clicked on
/* 203 *|      */
/* 204 */ 
/* 205 */     // private
/* 206 */     initComponent: function() {
/* 207 */         this.tbar = {
/* 208 */             cls: 'ext-cal-toolbar',
/* 209 */             border: true,
/* 210 */             items: ['->',{
/* 211 */                 id: this.id + '-tb-prev',
/* 212 */                 handler: this.onPrevClick,
/* 213 */                 scope: this,
/* 214 */                 iconCls: 'x-tbar-page-prev'
/* 215 */             }]
/* 216 */         };
/* 217 */ 
/* 218 */         this.viewCount = 0;
/* 219 */ 
/* 220 */         if (this.showDayView) {
/* 221 */             this.tbar.items.push({
/* 222 */                 id: this.id + '-tb-day',
/* 223 */                 text: this.dayText,
/* 224 */                 handler: this.onDayClick,
/* 225 */                 scope: this,
/* 226 */                 toggleGroup: 'tb-views'
/* 227 */             });
/* 228 */             this.viewCount++;
/* 229 */         }
/* 230 */         if (this.showWeekView) {
/* 231 */             this.tbar.items.push({
/* 232 */                 id: this.id + '-tb-week',
/* 233 */                 text: this.weekText,
/* 234 */                 handler: this.onWeekClick,
/* 235 */                 scope: this,
/* 236 */                 toggleGroup: 'tb-views'
/* 237 */             });
/* 238 */             this.viewCount++;
/* 239 */         }
/* 240 */         if (this.showMonthView || this.viewCount == 0) {
/* 241 */             this.tbar.items.push({
/* 242 */                 id: this.id + '-tb-month',
/* 243 */                 text: this.monthText,
/* 244 */                 handler: this.onMonthClick,
/* 245 */                 scope: this,
/* 246 */                 toggleGroup: 'tb-views'
/* 247 */             });
/* 248 */             this.viewCount++;
/* 249 */             this.showMonthView = true;
/* 250 */         }

/* CalendarPanel.js */

/* 251 */         this.tbar.items.push({
/* 252 */             id: this.id + '-tb-next',
/* 253 */             handler: this.onNextClick,
/* 254 */             scope: this,
/* 255 */             iconCls: 'x-tbar-page-next'
/* 256 */         });
/* 257 */         this.tbar.items.push('->');
/* 258 */ 
/* 259 */         var idx = this.viewCount - 1;
/* 260 */         this.activeItem = this.activeItem === undefined ? idx: (this.activeItem > idx ? idx: this.activeItem);
/* 261 */ 
/* 262 */         if (this.showNavBar === false) {
/* 263 */             delete this.tbar;
/* 264 */             this.addCls('x-calendar-nonav');
/* 265 */         }
/* 266 */ 
/* 267 */         this.callParent();
/* 268 */ 
/* 269 */         // do not allow override
/* 270 */         if (this.showDayView) {
/* 271 */             var day = Ext.apply({
/* 272 */                 xtype: 'dayview',
/* 273 */                 title: this.dayText,
/* 274 */                 showToday: this.showToday,
/* 275 */                 showTodayText: this.showTodayText,
/* 276 */                 showTime: this.showTime
/* 277 */             },
/* 278 */             this.dayViewCfg);
/* 279 */ 
/* 280 */             day.id = this.id + '-day';
/* 281 */             day.store = day.store || this.eventStore;
/* 282 */             this.initEventRelay(day);
/* 283 */             this.add(day);
/* 284 */         }
/* 285 */         if (this.showWeekView) {
/* 286 */             var wk = Ext.applyIf({
/* 287 */                 xtype: 'weekview',
/* 288 */                 title: this.weekText,
/* 289 */                 showToday: this.showToday,
/* 290 */                 showTodayText: this.showTodayText,
/* 291 */                 showTime: this.showTime
/* 292 */             },
/* 293 */             this.weekViewCfg);
/* 294 */ 
/* 295 */             wk.id = this.id + '-week';
/* 296 */             wk.store = wk.store || this.eventStore;
/* 297 */             this.initEventRelay(wk);
/* 298 */             this.add(wk);
/* 299 */         }
/* 300 */         if (this.showMonthView) {

/* CalendarPanel.js */

/* 301 */             var month = Ext.applyIf({
/* 302 */                 xtype: 'monthview',
/* 303 */                 title: this.monthText,
/* 304 */                 showToday: this.showToday,
/* 305 */                 showTodayText: this.showTodayText,
/* 306 */                 showTime: this.showTime,
/* 307 */                 listeners: {
/* 308 */                     'weekclick': {
/* 309 */                         fn: function(vw, dt) {
/* 310 */                             this.showWeek(dt);
/* 311 */                         },
/* 312 */                         scope: this
/* 313 */                     }
/* 314 */                 }
/* 315 */             },
/* 316 */             this.monthViewCfg);
/* 317 */ 
/* 318 */             month.id = this.id + '-month';
/* 319 */             month.store = month.store || this.eventStore;
/* 320 */             this.initEventRelay(month);
/* 321 */             this.add(month);
/* 322 */         }
/* 323 */ 
/* 324 */         this.add(Ext.applyIf({
/* 325 */             xtype: 'eventeditform',
/* 326 */             id: this.id + '-edit',
/* 327 */             calendarStore: this.calendarStore,
/* 328 */             listeners: {
/* 329 */                 'eventadd': {
/* 330 */                     scope: this,
/* 331 */                     fn: this.onEventAdd
/* 332 */                 },
/* 333 */                 'eventupdate': {
/* 334 */                     scope: this,
/* 335 */                     fn: this.onEventUpdate
/* 336 */                 },
/* 337 */                 'eventdelete': {
/* 338 */                     scope: this,
/* 339 */                     fn: this.onEventDelete
/* 340 */                 },
/* 341 */                 'eventcancel': {
/* 342 */                     scope: this,
/* 343 */                     fn: this.onEventCancel
/* 344 */                 }
/* 345 */             }
/* 346 */         },
/* 347 */         this.editViewCfg));
/* 348 */     },
/* 349 */ 
/* 350 */     // private

/* CalendarPanel.js */

/* 351 */     initEventRelay: function(cfg) {
/* 352 */         cfg.listeners = cfg.listeners || {};
/* 353 */         cfg.listeners.afterrender = {
/* 354 */             fn: function(c) {
/* 355 */                 // relay the view events so that app code only has to handle them in one place
/* 356 */                 this.relayEvents(c, ['eventsrendered', 'eventclick', 'eventover', 'eventout', 'dayclick',
/* 357 */                 'eventmove', 'datechange', 'rangeselect', 'eventdelete', 'eventresize', 'initdrag']);
/* 358 */             },
/* 359 */             scope: this,
/* 360 */             single: true
/* 361 */         };
/* 362 */     },
/* 363 */ 
/* 364 */     // private
/* 365 */     afterRender: function() {
/* 366 */         this.callParent(arguments);
/* 367 */         
/* 368 */         this.body.addCls('x-cal-body');
/* 369 */         
/* 370 */         Ext.defer(function() {
/* 371 */             this.updateNavState();
/* 372 */             this.fireViewChange();
/* 373 */         }, 10, this);
/* 374 */     },
/* 375 */ 
/* 376 */     // private
/* 377 */     onLayout: function() {
/* 378 */         this.callParent();
/* 379 */         if (!this.navInitComplete) {
/* 380 */             this.updateNavState();
/* 381 */             this.navInitComplete = true;
/* 382 */         }
/* 383 */     },
/* 384 */ 
/* 385 */     // private
/* 386 */     onEventAdd: function(form, rec) {
/* 387 */         rec.data[Ext.calendar.data.EventMappings.IsNew.name] = false;
/* 388 */         this.hideEditForm();
/* 389 */         this.eventStore.add(rec);
/* 390 */         this.eventStore.sync();
/* 391 */         this.fireEvent('eventadd', this, rec);
/* 392 */     },
/* 393 */ 
/* 394 */     // private
/* 395 */     onEventUpdate: function(form, rec) {
/* 396 */         this.hideEditForm();
/* 397 */         rec.commit();
/* 398 */         this.eventStore.sync();
/* 399 */         this.fireEvent('eventupdate', this, rec);
/* 400 */     },

/* CalendarPanel.js */

/* 401 */ 
/* 402 */     // private
/* 403 */     onEventDelete: function(form, rec) {
/* 404 */         this.hideEditForm();
/* 405 */         this.eventStore.remove(rec);
/* 406 */         this.eventStore.sync();
/* 407 */         this.fireEvent('eventdelete', this, rec);
/* 408 */     },
/* 409 */ 
/* 410 */     // private
/* 411 */     onEventCancel: function(form, rec) {
/* 412 */         this.hideEditForm();
/* 413 */         this.fireEvent('eventcancel', this, rec);
/* 414 */     },
/* 415 */ 
/* 416 */     /**
/* 417 *|      * Shows the built-in event edit form for the passed in event record.  This method automatically
/* 418 *|      * hides the calendar views and navigation toolbar.  To return to the calendar, call {@link #hideEditForm}.
/* 419 *|      * @param {Ext.calendar.EventRecord} record The event record to edit
/* 420 *|      * @return {Ext.calendar.CalendarPanel} this
/* 421 *|      */
/* 422 */     showEditForm: function(rec) {
/* 423 */         this.preEditView = this.layout.getActiveItem().id;
/* 424 */         this.setActiveView(this.id + '-edit');
/* 425 */         this.layout.getActiveItem().loadRecord(rec);
/* 426 */         return this;
/* 427 */     },
/* 428 */ 
/* 429 */     /**
/* 430 *|      * Hides the built-in event edit form and returns to the previous calendar view. If the edit form is
/* 431 *|      * not currently visible this method has no effect.
/* 432 *|      * @return {Ext.calendar.CalendarPanel} this
/* 433 *|      */
/* 434 */     hideEditForm: function() {
/* 435 */         if (this.preEditView) {
/* 436 */             this.setActiveView(this.preEditView);
/* 437 */             delete this.preEditView;
/* 438 */         }
/* 439 */         return this;
/* 440 */     },
/* 441 */ 
/* 442 */     // private
/* 443 */     setActiveView: function(id){
/* 444 */         var l = this.layout,
/* 445 */             tb = this.getDockedItems('toolbar')[0];
/* 446 */         
/* 447 */         // show/hide the toolbar first so that the layout will calculate the correct item size
/* 448 */         if (tb) {
/* 449 */             tb[id === this.id+'-edit' ? 'hide' : 'show']();
/* 450 */         }

/* CalendarPanel.js */

/* 451 */ 
/* 452 */         Ext.suspendLayouts();
/* 453 */ 
/* 454 */         l.setActiveItem(id);
/* 455 */         this.activeView = l.getActiveItem();
/* 456 */         
/* 457 */         if(id !== this.id+'-edit'){
/* 458 */            if(id !== this.preEditView){
/* 459 */                 l.activeItem.setStartDate(this.startDate, true);
/* 460 */             }
/* 461 */            this.updateNavState();
/* 462 */         }
/* 463 */         Ext.resumeLayouts(true);
/* 464 */ 
/* 465 */         this.fireViewChange();
/* 466 */     },
/* 467 */ 
/* 468 */     // private
/* 469 */     fireViewChange: function() {
/* 470 */         if (this.layout && this.layout.getActiveItem) {
/* 471 */             var view = this.layout.getActiveItem();
/* 472 */             if (view && view.getViewBounds) {
/* 473 */                 var vb = view.getViewBounds();
/* 474 */                 var info = {
/* 475 */                     activeDate: view.getStartDate(),
/* 476 */                     viewStart: vb.start,
/* 477 */                     viewEnd: vb.end
/* 478 */                 };
/* 479 */             }
/* 480 */             this.fireEvent('viewchange', this, view, info);
/* 481 */         }
/* 482 */     },
/* 483 */ 
/* 484 */     // private
/* 485 */     updateNavState: function() {
/* 486 */         if (this.showNavBar !== false) {
/* 487 */             var item = this.layout.activeItem,
/* 488 */                 suffix = item.id.split(this.id + '-')[1],
/* 489 */                 btn = Ext.getCmp(this.id + '-tb-' + suffix);
/* 490 */ 
/* 491 */             if (btn) {
/* 492 */                 btn.toggle(true);
/* 493 */             }
/* 494 */         }
/* 495 */     },
/* 496 */ 
/* 497 */     /**
/* 498 *|      * Sets the start date for the currently-active calendar view.
/* 499 *|      * @param {Date} dt
/* 500 *|      */

/* CalendarPanel.js */

/* 501 */     setStartDate: function(dt) {
/* 502 */         this.layout.activeItem.setStartDate(dt, true);
/* 503 */         this.updateNavState();
/* 504 */         this.fireViewChange();
/* 505 */     },
/* 506 */ 
/* 507 */     // private
/* 508 */     showWeek: function(dt) {
/* 509 */         this.setActiveView(this.id + '-week');
/* 510 */         this.setStartDate(dt);
/* 511 */     },
/* 512 */ 
/* 513 */     // private
/* 514 */     onPrevClick: function() {
/* 515 */         this.startDate = this.layout.activeItem.movePrev();
/* 516 */         this.updateNavState();
/* 517 */         this.fireViewChange();
/* 518 */     },
/* 519 */ 
/* 520 */     // private
/* 521 */     onNextClick: function() {
/* 522 */         this.startDate = this.layout.activeItem.moveNext();
/* 523 */         this.updateNavState();
/* 524 */         this.fireViewChange();
/* 525 */     },
/* 526 */ 
/* 527 */     // private
/* 528 */     onDayClick: function() {
/* 529 */         this.setActiveView(this.id + '-day');
/* 530 */     },
/* 531 */ 
/* 532 */     // private
/* 533 */     onWeekClick: function() {
/* 534 */         this.setActiveView(this.id + '-week');
/* 535 */     },
/* 536 */ 
/* 537 */     // private
/* 538 */     onMonthClick: function() {
/* 539 */         this.setActiveView(this.id + '-month');
/* 540 */     },
/* 541 */ 
/* 542 */     /**
/* 543 *|      * Return the calendar view that is currently active, which will be a subclass of
/* 544 *|      * {@link Ext.calendar.view.AbstractCalendar AbstractCalendar}.
/* 545 *|      * @return {Ext.calendar.view.AbstractCalendar} The active view
/* 546 *|      */
/* 547 */     getActiveView: function() {
/* 548 */         return this.layout.activeItem;
/* 549 */     }
/* 550 */ });

/* CalendarPanel.js */

/* 551 */ 

;
/* CB.Login.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.Login', {
/* 4   */     extend: 'Ext.Window'
/* 5   */     ,title: L.Authorization
/* 6   */     ,plain: true
/* 7   */     ,closable: false
/* 8   */     ,iconCls: 'icon-key'
/* 9   */     ,id: 'CBLoginWindow'
/* 10  */     ,modal: true
/* 11  */     ,frame: true
/* 12  */     ,autoHeight: true
/* 13  */     ,width: 315
/* 14  */     ,closeAction: 'close'
/* 15  */     ,border: false
/* 16  */     ,resizable: false
/* 17  */     ,buttonAlign: 'center'
/* 18  */ 
/* 19  */     ,initComponent: function() {
/* 20  */         Ext.apply(this,{
/* 21  */             items : [{
/* 22  */                 xtype: 'form'
/* 23  */                 ,border: false
/* 24  */                 ,layout: 'table'
/* 25  */                 ,layoutConfig: {columns: 2, padding: 0}
/* 26  */                 ,autoHeight: true
/* 27  */                 ,monitorValid: true
/* 28  */                 ,items: [{  html: '<img id="logo" style="padding-top: -15px" src="css/i/CaseBox-Logo_briefcase.png"/>'
/* 29  */                     ,cls: 'taC'
/* 30  */                     ,border: false
/* 31  */                     ,width: 130
/* 32  */                 },{
/* 33  */                     xtype: 'fieldset'
/* 34  */                     ,border: false
/* 35  */                     ,defaults:{ width: 150 }
/* 36  */                     ,padding: 0
/* 37  */                     ,defaultType: 'textfield'
/* 38  */                     ,labelAlign: 'top'
/* 39  */                     ,bodyStyle: 'padding: 10px 5px 0 5px'
/* 40  */                     ,items:[{
/* 41  */                             name: 'username'
/* 42  */                             ,fieldLabel: L.User
/* 43  */                         },{
/* 44  */                             name: 'password'
/* 45  */                             ,fieldLabel: L.Password
/* 46  */                             ,inputType: 'password'
/* 47  */                         }
/* 48  */                     ]
/* 49  */                 },{
/* 50  */                     border: false

/* CB.Login.js */

/* 51  */                     ,colspan: 2
/* 52  */                     ,cls: 'taC fwB cR'
/* 53  */                     ,html:'&nbsp;'
/* 54  */                     ,name: 'infoPanel'
/* 55  */                     ,xtype: 'panel'
/* 56  */                 }
/* 57  */                 ]
/* 58  */                 ,buttons: [{text: L.Login, handler: this.doLogin, scope: this, formBind: true} ]
/* 59  */             }
/* 60  */             ]
/* 61  */             ,keys: [{key: 13, fn: this.doLogin, scope: this}]
/* 62  */         });
/* 63  */         this.on('afterrender', this.doShow);
/* 64  */ 
/* 65  */         this.callParent(arguments);
/* 66  */     }
/* 67  */ 
/* 68  */     ,doShow: function(w) {
/* 69  */         var lku = Ext.util.Cookies.get('lastUser');
/* 70  */         var user = w.down('[name="username"]');
/* 71  */         var pass = w.down('[name="password"]');
/* 72  */ 
/* 73  */         user.setValue(lku);
/* 74  */         pass.reset();
/* 75  */ 
/* 76  */         if(Ext.isEmpty(lku)) {
/* 77  */             user.focus(true, 550);
/* 78  */         } else {
/* 79  */             pass.focus(true, 550);
/* 80  */         }
/* 81  */     }
/* 82  */ 
/* 83  */     ,doLogin: function(){
/* 84  */         var user = this.child('[name="username"]')
/* 85  */             ,pass = this.child('[name="password"]');
/* 86  */ 
/* 87  */         if(!user.isValid() || !pass.isValid()) {
/* 88  */             return false;
/* 89  */         }
/* 90  */ 
/* 91  */         CB_User.login(user.getValue(), pass.getValue(), this.processLoginResponse);
/* 92  */     }
/* 93  */ 
/* 94  */     ,processLoginResponse: function(response, e){
/* 95  */         var lw = Ext.getCmp('CBLoginWindow')
/* 96  */             ,r = e.result;
/* 97  */ 
/* 98  */         if (r && (r.success === true)) {
/* 99  */             if (App.loginData && (App.loginData.id != response.user.id)) {
/* 100 */                 return window.location.reload();

/* CB.Login.js */

/* 101 */             }
/* 102 */             App.config = response.config;
/* 103 */             App.loginData = response.user;
/* 104 */             lw.close();
/* 105 */ 
/* 106 */         } else {
/* 107 */             ip = lw.child('[name="infoPanel"]');
/* 108 */             ip.body.update(response.msg);
/* 109 */         }
/* 110 */      }
/* 111 */ 
/* 112 */ });
/* 113 */ 
/* 114 */ 
/* 115 */ Ext.define('CB.VerifyPassword', {
/* 116 */     extend: 'Ext.Window'
/* 117 */ 
/* 118 */     ,title: L.Verify
/* 119 */     ,plain: true
/* 120 */     ,iconCls: 'icon-key'
/* 121 */     ,modal: true
/* 122 */     ,frame: true
/* 123 */     ,autoHeight: true
/* 124 */     ,width: 320
/* 125 */     ,closeAction: 'close'
/* 126 */     ,border: false
/* 127 */     ,resizable: false
/* 128 */     ,buttonAlign: 'center'
/* 129 */ 
/* 130 */     ,initComponent: function() {
/* 131 */         Ext.apply(this,{
/* 132 */             items : [{
/* 133 */                 xtype: 'form'
/* 134 */                 ,border: false
/* 135 */                 ,autoHeight: true
/* 136 */                 ,monitorValid: true
/* 137 */                 ,items: [{
/* 138 */                     xtype: 'fieldset'
/* 139 */                     ,border: false
/* 140 */                     ,defaults: {anchor: '100%'}
/* 141 */                     ,layout: 'anchor'
/* 142 */                     ,defaultType: 'textfield'
/* 143 */                     ,labelAlign: 'left'
/* 144 */                     ,bodyStyle: 'padding: 10px 5px 0 5px'
/* 145 */                     ,items:[{
/* 146 */                             name: 'username'
/* 147 */                             ,fieldLabel: L.User
/* 148 */                             ,xtype: 'displayfield'
/* 149 */                             ,value: getUserDisplayName()
/* 150 */                         },{

/* CB.Login.js */

/* 151 */                             name: 'password'
/* 152 */                             ,fieldLabel: L.Password
/* 153 */                             ,inputType: 'password'
/* 154 */                             ,enableKeyEvents: true
/* 155 */                             ,keys: [{key: 13, fn: this.doVerify, scope: this}]
/* 156 */                             ,listeners: {
/* 157 */                                 afterrender: function() {
/* 158 */                                     this.focus();
/* 159 */                                 }
/* 160 */                             }
/* 161 */                         }
/* 162 */                     ]
/* 163 */                 },{
/* 164 */                     border: false
/* 165 */                     ,bodyCls: 'taC fwB cR'
/* 166 */                     ,html:'&nbsp;'
/* 167 */                     ,name: 'infoPanel'
/* 168 */                     ,xtype: 'panel'
/* 169 */                     ,hidden: true
/* 170 */                     ,bodyStyle: 'padding:5px'
/* 171 */                 }
/* 172 */                 ]
/* 173 */                 ,buttons: [{
/* 174 */                     text: L.Verify
/* 175 */                     ,handler: this.doVerify
/* 176 */                     ,scope: this
/* 177 */                     ,formBind: true
/* 178 */                 }]
/* 179 */             }
/* 180 */             ]
/* 181 */ 
/* 182 */             ,listeners: {
/* 183 */                 scope: this
/* 184 */                 ,afterrender: function() {
/* 185 */                     var nav = Ext.create('Ext.util.KeyNav', this.getEl(), {
/* 186 */                         scope: this,
/* 187 */                         enter: this.doVerify
/* 188 */                     });
/* 189 */ 
/* 190 */                 }
/* 191 */             }
/* 192 */         });
/* 193 */ 
/* 194 */         this.on('show', this.doShow, this);
/* 195 */ 
/* 196 */         this.callParent(arguments);
/* 197 */     }
/* 198 */ 
/* 199 */     ,doShow: function(w) {
/* 200 */         var pass = this.down('[name="password"]');

/* CB.Login.js */

/* 201 */         pass.reset();
/* 202 */         // pass.focus(true, 1850);
/* 203 */     }
/* 204 */ 
/* 205 */     ,doVerify: function(){
/* 206 */         var pass = this.down('[name="password"]');
/* 207 */ 
/* 208 */         if(!pass.isValid()) {
/* 209 */             return false;
/* 210 */         }
/* 211 */ 
/* 212 */         CB_User.verifyPassword( pass.getValue(), this.processVerifyResponse, this);
/* 213 */     }
/* 214 */ 
/* 215 */     ,processVerifyResponse: function(response, e){
/* 216 */         var r = e.result
/* 217 */             ,ip
/* 218 */             ,pass;
/* 219 */ 
/* 220 */         if(r && (r.success === true)) {
/* 221 */             this.success = true;
/* 222 */             this.close();
/* 223 */ 
/* 224 */         } else {
/* 225 */             ip = this.down('[name="infoPanel"]');
/* 226 */             ip.show();
/* 227 */             ip.body.update(response.msg);
/* 228 */ 
/* 229 */             pass = this.down('[name="password"]');
/* 230 */             pass.reset();
/* 231 */             pass.focus(true, 550);
/* 232 */         }
/* 233 */      }
/* 234 */ });
/* 235 */ 

;
/* CB.GenericForm.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ /*
/* 3   *|     An api should be defined for read and submitting form
/* 4   *|     for locking mechanism there should be specified lockEdit and unlockEdit functions.
/* 5   *|     unlockEdit should call doClose or destroy the form at the end of unlock process
/* 6   *| 
/* 7   *| */
/* 8   */ Ext.define('CB.GenericForm', {
/* 9   */     extend: 'Ext.FormPanel'
/* 10  */     ,scrollable: false
/* 11  */     ,closable: true
/* 12  */     ,border: false
/* 13  */     ,bodyStyle: 'padding: 10px'
/* 14  */     ,title: 'Generic window'
/* 15  */     ,monitorValid: true
/* 16  */     ,data: {}
/* 17  */ 
/* 18  */     ,initComponent: function(){
/* 19  */         this.callParent(arguments);
/* 20  */ 
/* 21  */         this.enableBubble('savesuccess');
/* 22  */ 
/* 23  */         this.on('beforeclose', this.onBeforeClose, this);
/* 24  */         this.on('afterrender', this.loadData, this);
/* 25  */         this.on('change', this.setDirty, this);
/* 26  */     }
/* 27  */ 
/* 28  */     ,setDirty: function(isDirty){
/* 29  */         this._isDirty = (isDirty !== false);
/* 30  */     }
/* 31  */ 
/* 32  */     ,_lockEdit: function(){
/* 33  */         if(this.lockEdit) {
/* 34  */             return this.lockEdit();
/* 35  */         }
/* 36  */     }
/* 37  */ 
/* 38  */     ,_unlockEdit: function(){
/* 39  */         if(this.unlockEdit) {
/* 40  */             return this.unlockEdit();
/* 41  */         }
/* 42  */         this.doClose();
/* 43  */     }
/* 44  */ 
/* 45  */     ,onBeforeClose: function(){
/* 46  */         if(this._confirmedClosing || !this._isDirty){
/* 47  */             this.getEl().mask(L.Closing + ' ...', 'x-mask-loading');
/* 48  */             if(!Ext.isNumber(this.data.id)) {
/* 49  */                 this.doClose();
/* 50  */             } else {

/* CB.GenericForm.js */

/* 51  */                 this._unlockEdit();
/* 52  */             }
/* 53  */ 
/* 54  */             return false;
/* 55  */         }
/* 56  */         Ext.Msg.show({
/* 57  */             title:  L.Confirmation
/* 58  */             ,msg:   L.SavingChangedDataMessage
/* 59  */             ,icon:  Ext.Msg.QUESTION
/* 60  */             ,buttons: Ext.Msg.YESNOCANCEL
/* 61  */             ,scope: this
/* 62  */             ,fn: function(b, text, opt){
/* 63  */                 switch(b){
/* 64  */                 case 'yes':
/* 65  */                     this._confirmedClosing = true;
/* 66  */                     this.saveForm();
/* 67  */                     break;
/* 68  */                 case 'no':
/* 69  */                     this._confirmedClosing = true;
/* 70  */                     this._unlockEdit();
/* 71  */                     break;
/* 72  */                 }
/* 73  */             }
/* 74  */         });
/* 75  */         return false;
/* 76  */     }
/* 77  */ 
/* 78  */     ,doClose: function(){
/* 79  */         // this.clearListeners();
/* 80  */         // this.suspendEvents(false);
/* 81  */         Ext.destroy(this);
/* 82  */     }
/* 83  */ 
/* 84  */     ,loadData: function(){
/* 85  */         if(isNaN(this.data.id)){
/* 86  */             this.data.id = Ext.isEmpty(this.data.id) ? Ext.id(): this.data.id;
/* 87  */             this._setFormValues();
/* 88  */             this.setDirty(true); // because it's a new form and needs to be saved
/* 89  */             this.getEl().unmask();
/* 90  */             return;
/* 91  */         }
/* 92  */ 
/* 93  */         this.getForm().load({
/* 94  */             params: {
/* 95  */                 id: this.data.id
/* 96  */             }
/* 97  */             ,scope: this
/* 98  */             ,success: this.processLoadResponse
/* 99  */             ,failure: this.processLoadResponse.bind(this)
/* 100 */         });

/* CB.GenericForm.js */

/* 101 */     }
/* 102 */ 
/* 103 */     ,getTitle: function(){
/* 104 */         var rez = '<'+L.noName+'>';
/* 105 */         if(!Ext.isEmpty(this.data.name)) {
/* 106 */             rez = this.data.name;
/* 107 */         } else if(!isNaN(this.data.id)) {
/* 108 */             rez = '<'+L.noName+'> (id: ' + this.data.id + ')';
/* 109 */         }
/* 110 */ 
/* 111 */         return Ext.util.Format.htmlEncode(rez);
/* 112 */     }
/* 113 */ 
/* 114 */     ,updateFormTitle: function(){
/* 115 */         var t = '';
/* 116 */         if(this.data && !Ext.isEmpty(this.data.date_start)) {
/* 117 */             t = Ext.Date.format(Date.parse(this.data.date_start.substr(0, 10), 'Y-m-d'), App.dateFormat) + '. ';
/* 118 */         }
/* 119 */         t += this.data.new_title
/* 120 */             ? Ext.util.Format.htmlEncode(this.data.new_title)
/* 121 */             : this.getTitle();
/* 122 */ 
/* 123 */         this.setTitle(App.shortenString(t, 35));
/* 124 */ 
/* 125 */         var i = Ext.valueFrom(this.data.iconCls, Ext.valueFrom(this.iconCls, ''));
/* 126 */         if(i === 'icon-loading') {
/* 127 */             i = '';
/* 128 */         }
/* 129 */         if(Ext.isEmpty(i) && this.getIconClass ) {
/* 130 */             i = this.getIconClass();
/* 131 */         }
/* 132 */ 
/* 133 */         this.setIconCls(i);
/* 134 */     }
/* 135 */ 
/* 136 */     ,getIconClass: Ext.emptyFn // this function should be redefined for child classes to return a corresponding icon for the window
/* 137 */ 
/* 138 */     ,processLoadResponse: function(f, e){
/* 139 */         this.getEl().unmask();
/* 140 */ 
/* 141 */         var r = e.result;
/* 142 */ 
/* 143 */         if (!r || (r.success !== true)) {
/* 144 */             if(App.hideFailureAlerts){
/* 145 */                 this.doClose();
/* 146 */                 return;
/* 147 */             }
/* 148 */ 
/* 149 */             Ext.Msg.confirm(
/* 150 */                 L.Error

/* CB.GenericForm.js */

/* 151 */                 ,Ext.valueFrom(e.msg, L.readDataErrorMessage)
/* 152 */                 ,function(b) {
/* 153 */                     if(b === 'yes') {
/* 154 */                         this.loadData();
/* 155 */                     } else {
/* 156 */                         this.doClose();
/* 157 */                     }
/* 158 */                 }
/* 159 */                 ,this
/* 160 */             );
/* 161 */ 
/* 162 */             return;
/* 163 */         }
/* 164 */ 
/* 165 */         if(!Ext.isDefined(r.data)) {
/* 166 */             return;
/* 167 */         }
/* 168 */ 
/* 169 */         this.data = r.data;
/* 170 */ 
/* 171 */         if(this.onFormLoaded) {
/* 172 */             this.onFormLoaded(f, e);
/* 173 */         }
/* 174 */ 
/* 175 */         if(Ext.isDefined(this.data.already_opened_by)){
/* 176 */             Ext.Msg.show({
/* 177 */                 title: L.ActionOpeningConfirmation
/* 178 */                 ,msg: this.data.already_opened_by
/* 179 */                 ,buttons: Ext.Msg.YESNO
/* 180 */                 ,fn: function(b) {
/* 181 */                     if (b === 'yes') {
/* 182 */                         this.enable();
/* 183 */                         this._setFormValues();
/* 184 */                         this._lockEdit();
/* 185 */                     } else {
/* 186 */                         this._unlockEdit();
/* 187 */                     }
/* 188 */                 }
/* 189 */                 ,scope: this
/* 190 */                 ,animEl: this.getEl()
/* 191 */                 ,icon: Ext.MessageBox.QUESTION
/* 192 */             });
/* 193 */             return;
/* 194 */         }
/* 195 */         this._setFormValues();
/* 196 */     }
/* 197 */ 
/* 198 */     ,_setFormValues: function(){
/* 199 */         this.updateFormTitle();
/* 200 */ 

/* CB.GenericForm.js */

/* 201 */         if(this.setFormValues) {
/* 202 */             this.setFormValues();
/* 203 */         }
/* 204 */ 
/* 205 */         this.setDirty(false);
/* 206 */     }
/* 207 */ 
/* 208 */     ,_getFormValues: function(){
/* 209 */         if(this.getFormValues) {
/* 210 */             this.getFormValues();
/* 211 */         }
/* 212 */     }
/* 213 */ 
/* 214 */     ,saveForm: function(){
/* 215 */         if(!this.getForm().isValid()) {
/* 216 */             return ;
/* 217 */         }
/* 218 */         this.getEl().mask(L.SavingChanges + ' ...', 'x-mask-loading');
/* 219 */         this._getFormValues();
/* 220 */         this.getForm().submit({
/* 221 */             clientValidation: true
/* 222 */             ,params: {
/* 223 */                 data: Ext.encode(this.data)
/* 224 */                 ,close: this._confirmedClosing
/* 225 */                 ,forcedSave: this._forcedSave
/* 226 */             }
/* 227 */             ,scope: this
/* 228 */             ,success: this.onSaveSuccess
/* 229 */             ,failure: this.onSaveFailure
/* 230 */         });
/* 231 */     }
/* 232 */ 
/* 233 */     ,onSaveSuccess: function(f, a){
/* 234 */         if (Ext.isDefined(a.result.data)) {
/* 235 */             this.data = a.result.data;
/* 236 */         }
/* 237 */ 
/* 238 */         if (this.onFormLoaded) {
/* 239 */             this.onFormLoaded(f, a);
/* 240 */         }
/* 241 */ 
/* 242 */         if (Ext.isDefined(a.result.title)) {
/* 243 */             this.title = a.result.title;
/* 244 */         }
/* 245 */ 
/* 246 */         this._setFormValues();
/* 247 */ 
/* 248 */         this.fireEvent('savesuccess', this, a);
/* 249 */ 
/* 250 */         if(this._confirmedClosing) {

/* CB.GenericForm.js */

/* 251 */             return this.doClose();
/* 252 */         }
/* 253 */ 
/* 254 */         this.getEl().unmask();
/* 255 */     }
/* 256 */ 
/* 257 */     ,onSaveFailure: function(form, action){
/* 258 */         this.getEl().unmask();
/* 259 */         if(Ext.isDefined(action.result.already_opened_by)){
/* 260 */             Ext.Msg.show({
/* 261 */             title: L.SavingDataConfirmation
/* 262 */             ,msg: action.result.already_opened_by
/* 263 */             ,buttons: Ext.Msg.YESNO
/* 264 */             ,fn: function(b){
/* 265 */                 if(b === 'yes'){
/* 266 */                     this._forcedSave = 1;
/* 267 */                     this.saveForm();
/* 268 */                 } else {
/* 269 */                     this.getEl().unmask();
/* 270 */                     this._confirmedClosing = 0;
/* 271 */                 }
/* 272 */             }
/* 273 */             ,scope: this
/* 274 */             ,animEl: this.getEl()
/* 275 */             ,icon: Ext.MessageBox.QUESTION
/* 276 */             });
/* 277 */         }else{
/* 278 */             this.fireEvent('savefail', this, action);
/* 279 */             App.formSubmitFailure(form, action);
/* 280 */         }
/* 281 */     }
/* 282 */ });
/* 283 */ 

;
/* CB.ObjectsField.js */

/* 1    */ //ObjectsComboField
/* 2    */ //ObjectsTriggerField
/* 3    */     //ObjectsSelectionForm
/* 4    */     //ObjectsSelectionPopupList
/* 5    */ 
/* 6    */ CB.ObjectsFieldCommonFunctions = {
/* 7    */     detectStore: function(){
/* 8    */         var source = Ext.isEmpty(this.cfg.source) ? 'tree': this.cfg.source;
/* 9    */ 
/* 10   */         switch(source){
/* 11   */             case 'thesauri':
/* 12   */                 this.store = this.getThesauriStore();
/* 13   */                 break;
/* 14   */             case 'users':
/* 15   */             case 'groups':
/* 16   */             case 'usersgroups':
/* 17   */                 this.store = CB.DB.usersGroupsSearchStore;
/* 18   */                 break;
/* 19   */             default:
/* 20   */                 //try to access object window to locate objects store
/* 21   */                 this.objectsStore = this.getObjectsStore();
/* 22   */ 
/* 23   */                 this.store = new Ext.data.DirectStore({
/* 24   */                     autoLoad: false //true
/* 25   */                     ,autoDestroy: true
/* 26   */                     ,restful: false
/* 27   */                     ,remoteSort: true
/* 28   */                     ,model: 'FieldObjects'
/* 29   */                     ,pageSize: Ext.valueFrom(this.cfg.rows, 50)
/* 30   */                     ,proxy: {
/* 31   */                         type: 'direct'
/* 32   */                         ,paramsAsHash: true
/* 33   */                         ,api: { read: CB_Browser.getObjectsForField }
/* 34   */                         ,reader: {
/* 35   */                             type: 'json'
/* 36   */                             ,successProperty: 'success'
/* 37   */                             ,rootProperty: 'data'
/* 38   */                             ,messageProperty: 'msg'
/* 39   */                         }
/* 40   */                         ,listeners:{
/* 41   */                             load: function(proxy, obj, opt){
/* 42   */                                 for (var i = 0; i < obj.result.data.length; i++) {
/* 43   */                                     obj.result.data[i].date = date_ISO_to_local_date(obj.result.data[i].date);
/* 44   */                                 }
/* 45   */                             }
/* 46   */                         }
/* 47   */                     }
/* 48   */ 
/* 49   */                     ,sortInfo: {
/* 50   */                         field: 'name'

/* CB.ObjectsField.js */

/* 51   */                         ,direction: 'ASC'
/* 52   */                     }
/* 53   */ 
/* 54   */                     ,listeners: {
/* 55   */                         scope: this
/* 56   */                         ,beforeload: function(store, o ){
/* 57   */                             if(this.data){
/* 58   */                                 if (!Ext.isEmpty(this.data.fieldRecord)) {
/* 59   */                                     store.proxy.extraParams.fieldId = this.data.fieldRecord.get('id');
/* 60   */                                 }
/* 61   */ 
/* 62   */                                 if (!Ext.isEmpty(this.data.objectId)) {
/* 63   */                                     store.proxy.extraParams.objectId = this.data.objectId;
/* 64   */                                 }
/* 65   */ 
/* 66   */                                 if (!Ext.isEmpty(this.data.pidValue)) {
/* 67   */                                     store.proxy.extraParams.pidValue = this.data.pidValue;
/* 68   */                                 }
/* 69   */ 
/* 70   */                                 if (!Ext.isEmpty(this.data.path)) {
/* 71   */                                     store.proxy.extraParams.path = this.data.path;
/* 72   */                                 }
/* 73   */ 
/* 74   */                                 store.proxy.extraParams.objFields = this.data.objFields;
/* 75   */                             }
/* 76   */                         }
/* 77   */                         ,load:  function(store, recs, options) {
/* 78   */                             Ext.each(
/* 79   */                                 recs
/* 80   */                                 ,function(r){
/* 81   */                                     r.set('iconCls', getItemIcon(r.data));
/* 82   */                                 }
/* 83   */                                 ,this
/* 84   */                             );
/* 85   */                         }
/* 86   */                     }
/* 87   */                 });
/* 88   */         }
/* 89   */ 
/* 90   */         if(Ext.isEmpty(this.store)) {
/* 91   */             this.store = new Ext.data.ArrayStore({
/* 92   */                 idIndex: 0
/* 93   */                 ,model: 'Generic'
/* 94   */                 ,data:  []
/* 95   */             });
/* 96   */         }
/* 97   */         if(Ext.isEmpty(this.store.getTexts)) {
/* 98   */             this.store.getTexts = getStoreNames;
/* 99   */         }
/* 100  */ 

/* CB.ObjectsField.js */

/* 101  */         if(this.cfg.sort){
/* 102  */             var field = 'order'
/* 103  */                 ,dir = 'asc';
/* 104  */ 
/* 105  */             switch(this.cfg.sort){
/* 106  */                 case 'asc':
/* 107  */                     field = 'name';
/* 108  */                     break;
/* 109  */                 case 'desc':
/* 110  */                     field = 'name';
/* 111  */                     dir = 'desc';
/* 112  */                     break;
/* 113  */             }
/* 114  */             this.store.sort(field, dir);
/* 115  */         }
/* 116  */     }
/* 117  */ 
/* 118  */     ,getObjectsStore: function(){
/* 119  */         if(this.cfg.source === 'thesauri') {
/* 120  */             return this.getThesauriStore();
/* 121  */         }
/* 122  */ 
/* 123  */         if(Ext.isEmpty(this.data)) {
/* 124  */             return;
/* 125  */         }
/* 126  */ 
/* 127  */         if(this.data.ownerCt) {
/* 128  */             return this.data.ownerCt.objectsStore;
/* 129  */         }
/* 130  */ 
/* 131  */         if(this.data.grid) {
/* 132  */             var a = this.data.grid.refOwner || this.data.grid.findParentByType(CB.Objects);
/* 133  */             if(!Ext.isEmpty(a)) {
/* 134  */                 return a.objectsStore;
/* 135  */             }
/* 136  */         }
/* 137  */     }
/* 138  */     ,getThesauriStore: function(){
/* 139  */         var thesauriId = this.cfg.thesauriId;
/* 140  */ 
/* 141  */         if(this.cfg.thesauriId === 'dependent'){
/* 142  */             fieldName = this.data.record.store.fields.findIndex('name', 'field_id');
/* 143  */             fieldName = (fieldName < 0) ? 'id': 'field_id';
/* 144  */ 
/* 145  */             var pri = this.data.record.store.findBy(
/* 146  */                 function(r){
/* 147  */                     return ( (r.get(fieldName) == this.data.record.get('pid')) && (r.get('duplicate_id') == this.data.record.get('duplicate_id')) );
/* 148  */                 }
/* 149  */                 ,this
/* 150  */             );

/* CB.ObjectsField.js */

/* 151  */ 
/* 152  */             if(pri > -1) {
/* 153  */                 thesauriId = this.data.pidValue;
/* 154  */             }
/* 155  */         }
/* 156  */ 
/* 157  */         if(!isNaN(thesauriId)) {
/* 158  */             return getThesauriStore(thesauriId);
/* 159  */         }
/* 160  */     }
/* 161  */ 
/* 162  */ };
/* 163  */ 
/* 164  */ Ext.define('CB.ObjectsComboField', {
/* 165  */     extend: 'Ext.form.ComboBox'
/* 166  */     ,forceSelection: true
/* 167  */     ,triggerAction: 'all'
/* 168  */     ,lazyRender: true
/* 169  */     ,queryMode: 'remote'
/* 170  */     ,editable: true
/* 171  */     ,displayField: 'name'
/* 172  */     ,valueField: 'id'
/* 173  */     ,minChars: 3
/* 174  */ 
/* 175  */     ,constructor: function(config) {
/* 176  */         this.data = Ext.valueFrom(config.data, {});
/* 177  */ 
/* 178  */         this.cfg = this.data.fieldRecord
/* 179  */             ? Ext.apply({}, Ext.valueFrom(this.data.fieldRecord.data.cfg, {}))
/* 180  */             : Ext.valueFrom(this.config.config, {});
/* 181  */ 
/* 182  */         this.store = [];
/* 183  */ 
/* 184  */         Ext.apply(this, CB.ObjectsFieldCommonFunctions);
/* 185  */ 
/* 186  */         this.detectStore();
/* 187  */ 
/* 188  */         //set template for item list
/* 189  */         switch(this.cfg.renderer) {
/* 190  */             case 'listObjIcons':
/* 191  */                 this.tpl = Ext.create('Ext.XTemplate',
/* 192  */                     '<tpl for=".">'
/* 193  */                     ,'<div class="x-boundlist-item icon-padding {iconCls} bgpLT">{name}</div>'
/* 194  */                     ,'</tpl>'
/* 195  */                 );
/* 196  */ 
/* 197  */                 break;
/* 198  */ 
/* 199  */             case 'listGreenIcons':
/* 200  */                 this.tpl = Ext.create('Ext.XTemplate',

/* CB.ObjectsField.js */

/* 201  */                     '<tpl for=".">'
/* 202  */                     ,'<div class="x-boundlist-item icon-padding {[ values.id ? \'icon-element\': \'\' ]}">{name}</div>'
/* 203  */                     ,'</tpl>'
/* 204  */                 );
/* 205  */ 
/* 206  */                 break;
/* 207  */         }
/* 208  */ 
/* 209  */         this.callParent(arguments);
/* 210  */     }
/* 211  */ 
/* 212  */     ,initComponent: function(){
/* 213  */         var mode = 'local';
/* 214  */ 
/* 215  */         if(this.store.proxy){
/* 216  */             mode = 'remote';
/* 217  */ 
/* 218  */             this.store.proxy.extraParams = Ext.clone(this.cfg);
/* 219  */ 
/* 220  */             if(!Ext.isEmpty(this.data.objectId)) {
/* 221  */                 this.store.proxy.extraParams.objectId = this.data.objectId;
/* 222  */             }
/* 223  */ 
/* 224  */             if(!Ext.isEmpty(this.data.pidValue)) {
/* 225  */                 this.store.proxy.extraParams.pidValue = this.data.pidValue;
/* 226  */             }
/* 227  */ 
/* 228  */             if(!Ext.isEmpty(this.data.path)) {
/* 229  */                 this.store.proxy.extraParams.path = this.data.path;
/* 230  */             }
/* 231  */ 
/* 232  */             this.store.on('beforeload', this.onBeforeLoadStore, this);
/* 233  */             this.store.on('load', this.onStoreLoad, this);
/* 234  */             this.store.load();
/* 235  */         }
/* 236  */         var customIcon = (this.cfg.renderer === 'listGreenIcons') ? 'icon-element' : '';
/* 237  */         var plugins = [];
/* 238  */ 
/* 239  */         Ext.apply(this, {
/* 240  */             mode: mode
/* 241  */             ,store: this.store
/* 242  */             ,iconClsField: 'iconCls'
/* 243  */             ,customIcon: customIcon
/* 244  */ 
/* 245  */             ,listeners: {
/* 246  */                 scope: this
/* 247  */                 ,beforeselect: function(combo, record, index){
/* 248  */                     if(Ext.isEmpty(this.objectsStore)) {
/* 249  */                         return;
/* 250  */                     }

/* CB.ObjectsField.js */

/* 251  */                     this.objectsStore.checkRecordExistance(record.data);
/* 252  */                 }
/* 253  */                 // ,blur: function(field){
/* 254  */                 //     this.setValue(this.value);
/* 255  */                 // }
/* 256  */                 ,beforedestroy: function(){
/* 257  */                     this.store.un('beforeload', this.onBeforeLoadStore, this);
/* 258  */                     this.store.un('load', this.onStoreLoad, this);
/* 259  */                 }
/* 260  */                 ,expand: function(c){
/* 261  */                     // var idx = c.store.findExact('id', c.getValue()) -1;
/* 262  */                     // c.select(idx, true);
/* 263  */                 }
/* 264  */             }
/* 265  */         });
/* 266  */ 
/* 267  */         this.callParent(arguments);
/* 268  */     }
/* 269  */ 
/* 270  */     ,onBeforeLoadStore: function(st, options){
/* 271  */         options.params = Ext.apply({}, this.cfg, options.params);
/* 272  */     }
/* 273  */ 
/* 274  */     ,setValue: function(v){
/* 275  */         var value, values = Ext.Array.from(v);
/* 276  */ 
/* 277  */         if(v == this.nullRecord) {
/* 278  */             this.callParent([null]);
/* 279  */             return;
/* 280  */         }
/* 281  */ 
/* 282  */         v = [];
/* 283  */         for (var i = 0; i < values.length; i++) {
/* 284  */             if(!Ext.isEmpty(values[i])) {
/* 285  */                 value = (values[i] && values[i].isModel)
/* 286  */                     ? values[i].get(this.valueField)
/* 287  */                     : values[i];
/* 288  */                 v.push(value);
/* 289  */             }
/* 290  */         }
/* 291  */ 
/* 292  */         this.callParent([v]);
/* 293  */         var text = this.store.getTexts(v);
/* 294  */ 
/* 295  */         //delete this.customIcon;
/* 296  */         if(Ext.isEmpty(text) && this.objectsStore){
/* 297  */             var r = this.objectsStore.findRecord('id', v, 0, false, false, true);
/* 298  */ 
/* 299  */             if(r){
/* 300  */                 if(this.icon) {

/* CB.ObjectsField.js */

/* 301  */                     this.icon.className = 'ux-icon-combo-icon ' + r.get('iconCls');
/* 302  */                 }
/* 303  */                 text = this.objectsStore.getTexts(v);
/* 304  */             }
/* 305  */         }
/* 306  */ 
/* 307  */         this.setRawValue(text);
/* 308  */     }
/* 309  */ 
/* 310  */     ,onStoreLoad: function(store, recs, options) {
/* 311  */         Ext.each(
/* 312  */             recs
/* 313  */             ,function(r){
/* 314  */                 r.set('iconCls', getItemIcon(r.data));
/* 315  */             }
/* 316  */             ,this
/* 317  */         );
/* 318  */ 
/* 319  */         this.nullRecord = Ext.create(
/* 320  */             store.getModel().getName()
/* 321  */             ,{
/* 322  */                 id: 0
/* 323  */                 ,name: ''
/* 324  */             }
/* 325  */         );
/* 326  */ 
/* 327  */         store.insert(
/* 328  */             0
/* 329  */             ,this.nullRecord
/* 330  */         );
/* 331  */ 
/* 332  */         if(Ext.isEmpty(this.lastQuery) && !Ext.isEmpty(this.value)) {
/* 333  */             this.setValue(this.value);
/* 334  */         }
/* 335  */     }
/* 336  */ 
/* 337  */     ,updateStore: function(){
/* 338  */         var oldStore = this.store;
/* 339  */         this.detectStore();
/* 340  */         this.bindStore(this.store);
/* 341  */         if(oldStore && oldStore.autoDestroy) {
/* 342  */             oldStore.destroy();
/* 343  */         }
/* 344  */     }
/* 345  */ });
/* 346  */ 
/* 347  */ //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* 348  */ Ext.define('CB.ObjectsTriggerField', {
/* 349  */     extend: 'Ext.Panel'
/* 350  */     ,bodyStyle: 'border: 1px solid #b5b8c8'

/* CB.ObjectsField.js */

/* 351  */     ,cls: 'x-form-field'
/* 352  */     ,isFormField: true
/* 353  */     ,delimiter: '<br />'
/* 354  */ 
/* 355  */     ,initComponent: function(){
/* 356  */         if(Ext.isEmpty(this.config)) {
/* 357  */             this.config = {};
/* 358  */         }
/* 359  */ 
/* 360  */         this.cfg = this.data.fieldRecord
/* 361  */             ? Ext.apply({}, Ext.valueFrom(this.data.fieldRecord.data.cfg, {}))
/* 362  */             : Ext.valueFrom(this.config.config, {});
/* 363  */ 
/* 364  */         this.triggerIconCls = 'icon-element';
/* 365  */         var tpl = '<tpl for=".">{[ (xindex == 0) ? "" : "'+this.delimiter+'"]}{name}</tpl>';
/* 366  */ 
/* 367  */         switch(this.cfg.renderer){
/* 368  */             case 'listGreenIcons':
/* 369  */                     tpl = '<ul><tpl for="."><li class="icon-padding16 icon-element">{name}</li></tpl></ul>';
/* 370  */                     this.triggerIconCls = 'icon-element';
/* 371  */                     break;
/* 372  */             case 'listObjIcons':
/* 373  */                     tpl = '<ul><tpl for="."><li class="icon-padding16 {iconCls}">{name}</li></tpl></ul>';
/* 374  */                     this.triggerIconCls = 'icon-arrow-split-090';
/* 375  */                     break;
/* 376  */         }
/* 377  */ 
/* 378  */         Ext.apply(this, CB.ObjectsFieldCommonFunctions);
/* 379  */ 
/* 380  */         this.trigger = new Ext.Button({
/* 381  */             iconCls: this.triggerIconCls
/* 382  */             ,cls:'fr '
/* 383  */             ,style: 'margin:-1px -2px '
/* 384  */             ,scope: this
/* 385  */             ,handler: this.onTriggerClick
/* 386  */         });
/* 387  */ 
/* 388  */ 
/* 389  */         this.dataView = new Ext.DataView({
/* 390  */             emptyText: L.empty
/* 391  */             ,overItemCls: 'field-over'
/* 392  */             ,itemSelector: 'li'
/* 393  */             ,style: 'margin: 3px; white-space: normal'
/* 394  */             ,tpl: tpl
/* 395  */             ,data: []
/* 396  */         });
/* 397  */ 
/* 398  */         Ext.apply(this, {
/* 399  */             items: [this.trigger, this.dataView]
/* 400  */             ,listeners:{

/* CB.ObjectsField.js */

/* 401  */                 scope: this
/* 402  */                 ,afterrender: this.afterrender
/* 403  */             }
/* 404  */         });
/* 405  */ 
/* 406  */         this.callParent(arguments);
/* 407  */     }
/* 408  */     ,afterrender: function(){
/* 409  */         this.setValue(this.value);
/* 410  */     }
/* 411  */     ,setValue: function(v){
/* 412  */         this.value = [];
/* 413  */ 
/* 414  */         var store = this.getObjectsStore()
/* 415  */             ,data = []
/* 416  */             ,i;
/* 417  */ 
/* 418  */         if(!Ext.isEmpty(v)){
/* 419  */             if(!Ext.isArray(v)) {
/* 420  */                 v = String(v).split(',');
/* 421  */             }
/* 422  */ 
/* 423  */             for(i = 0; i < v.length; i++) {
/* 424  */                 this.value.push(v[i]);
/* 425  */             }
/* 426  */         }
/* 427  */ 
/* 428  */         //check if store is set cause it could not be determined due to field configuration errors
/* 429  */         if(store) {
/* 430  */             for (i = 0; i < this.value.length; i++) {
/* 431  */                 var r = store.findRecord('id', this.value[i], 0, false, false, true);
/* 432  */                 if(r){
/* 433  */                     data.push(r.data);
/* 434  */                 }
/* 435  */             }
/* 436  */         }
/* 437  */ 
/* 438  */         if(this.dataView.rendered) {
/* 439  */             this.dataView.update(data);
/* 440  */         } else {
/* 441  */             this.dataView.data = data;
/* 442  */         }
/* 443  */     }
/* 444  */ 
/* 445  */     ,getValue: function(){
/* 446  */         return this.value.join(',');
/* 447  */     }
/* 448  */ 
/* 449  */     ,onTriggerClick: function(e){
/* 450  */         if(this.cfg.source === 'thesauri'){

/* CB.ObjectsField.js */

/* 451  */             this.form = new CB.ObjectsSelectionPopupList({
/* 452  */                 data: this.data
/* 453  */                 ,value: this.getValue()
/* 454  */                 ,listeners:{
/* 455  */                     scope: this
/* 456  */                     ,setvalue : this.onSetValue
/* 457  */                 }
/* 458  */             });
/* 459  */         } else {
/* 460  */             this.form = new CB.ObjectsSelectionForm({
/* 461  */                 data: this.data
/* 462  */                 ,value: this.getValue()
/* 463  */                 ,listeners:{
/* 464  */                     scope: this
/* 465  */                     ,setvalue : this.onSetValue
/* 466  */                 }
/* 467  */             });
/* 468  */         }
/* 469  */         this.form.show();
/* 470  */     }
/* 471  */ 
/* 472  */     ,onSetValue: function(data){
/* 473  */         if(!Ext.isString(data)){
/* 474  */             var selectedValue = [];
/* 475  */             Ext.each( data, function(i){
/* 476  */                 selectedValue.push(i.id);
/* 477  */             }, this );
/* 478  */             data = selectedValue.join(',');
/* 479  */ 
/* 480  */         }
/* 481  */ 
/* 482  */         var oldValue = this.getValue();
/* 483  */         if(data == oldValue) {
/* 484  */             return;
/* 485  */         }
/* 486  */         this.setValue(data);
/* 487  */         this.fireEvent('change', data, oldValue);
/* 488  */     }
/* 489  */ });
/* 490  */ 
/* 491  */ //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* 492  */ Ext.define('CB.ObjectsSelectionForm', {
/* 493  */     extend: 'Ext.Window'
/* 494  */     ,height: 400
/* 495  */     ,width: 500
/* 496  */     ,modal: true
/* 497  */     ,layout: 'border'
/* 498  */     ,title: L.Associate
/* 499  */ 
/* 500  */     ,constructor: function(config) {

/* CB.ObjectsField.js */

/* 501  */         this.data = config.data;
/* 502  */         this.cfg = this.data.fieldRecord
/* 503  */             ? Ext.apply({}, Ext.valueFrom(this.data.fieldRecord.data.cfg, {}))
/* 504  */             : Ext.applyIf(Ext.valueFrom(config.config, {}), { multiValued: false });
/* 505  */ 
/* 506  */         this.callParent(arguments);
/* 507  */     }
/* 508  */ 
/* 509  */     ,initComponent: function(){
/* 510  */ 
/* 511  */         Ext.apply(this, CB.ObjectsFieldCommonFunctions);
/* 512  */         this.detectStore();
/* 513  */ 
/* 514  */         //set title
/* 515  */         if(this.data.fieldRecord) {
/* 516  */             this.title = Ext.valueFrom(
/* 517  */                 this.data.fieldRecord.get('title')
/* 518  */                 ,this.title
/* 519  */             );
/* 520  */         }
/* 521  */ 
/* 522  */         var sm = new Ext.selection.CheckboxModel({
/* 523  */             injectCheckbox: 'first'
/* 524  */             ,checkOnly: true
/* 525  */             ,toggleOnClick: true
/* 526  */             ,mode: (this.cfg.multiValued ? 'SIMPLE': 'SINGLE')
/* 527  */             ,listeners: {
/* 528  */                 scope: this
/* 529  */                 ,select: this.onRowSelect
/* 530  */                 ,deselect: this.onRowDeselect
/* 531  */             }
/* 532  */         });
/* 533  */ 
/* 534  */         var columns = [
/* 535  */             {   dataIndex: 'name'
/* 536  */                 ,header: L.Name
/* 537  */                 ,width: 300
/* 538  */                 ,scope: this
/* 539  */ 
/* 540  */                 ,renderer: function(v, m, r, ri, ci, s){
/* 541  */                     var selected = !Ext.isEmpty(this.resultPanel.config.store.findRecord('id', r.get('id'), 0, false, false, true));
/* 542  */                     switch(this.cfg.renderer){
/* 543  */                         case 'listGreenIcons':
/* 544  */                             m.css = 'icon-grid-column ' + ((!selected) ? 'icon-element-off' : 'icon-element');
/* 545  */                             break;
/* 546  */                         case 'listObjIcons':
/* 547  */                             m.css = 'icon-grid-column ' + r.get('iconCls');
/* 548  */                             break;
/* 549  */                     }
/* 550  */ 

/* CB.ObjectsField.js */

/* 551  */                     return v;
/* 552  */                 }
/* 553  */             }
/* 554  */         ];
/* 555  */ 
/* 556  */         if(!Ext.isEmpty(this.cfg.fields)){
/* 557  */             if(!Ext.isArray(this.cfg.fields)) {
/* 558  */                 this.cfg.fields = this.cfg.fields.split(',');
/* 559  */             }
/* 560  */             for (var i = 0; i < this.cfg.fields.length; i++) {
/* 561  */                 var fieldName = this.cfg.fields[i].trim();
/* 562  */                 switch(fieldName){
/* 563  */                     case 'name': break;
/* 564  */                     case 'date':
/* 565  */                         columns.push( {
/* 566  */                             header: L.Date
/* 567  */                             ,width: 120
/* 568  */                             ,dataIndex: 'date'
/* 569  */                             ,format: App.dateFormat + ' ' + App.timeFormat
/* 570  */                             ,renderer: App.customRenderers.datetime
/* 571  */                         });
/* 572  */                         this.width += 120;
/* 573  */                         break;
/* 574  */                     case 'path':
/* 575  */                         columns.push({
/* 576  */                             header: L.Path
/* 577  */                             ,width: 150
/* 578  */                             ,dataIndex: 'path'
/* 579  */                             ,renderer: App.customRenderers.titleAttribute
/* 580  */                         });
/* 581  */                         this.width += 150;
/* 582  */                         break;
/* 583  */                     case 'project':
/* 584  */                         columns.push({
/* 585  */                             header: L.Project
/* 586  */                             ,width: 150
/* 587  */                             ,dataIndex: 'case'
/* 588  */                             ,renderer: App.customRenderers.titleAttribute
/* 589  */                         });
/* 590  */                         break;
/* 591  */                     case 'size':
/* 592  */                         columns.push({ header: L.Size, width: 80, dataIndex: 'size', renderer: App.customRenderers.filesize});
/* 593  */                         this.width += 80;
/* 594  */                         break;
/* 595  */                     case 'cid':
/* 596  */                         columns.push({ header: L.Creator, width: 200, dataIndex: 'cid', renderer: App.customRenderers.userName});
/* 597  */                         this.width += 200;
/* 598  */                         break;
/* 599  */                     case 'oid':
/* 600  */                         columns.push({ header: L.Owner, width: 200, dataIndex: 'oid', renderer: App.customRenderers.userName});

/* CB.ObjectsField.js */

/* 601  */                         this.width += 200;
/* 602  */                         break;
/* 603  */                     case 'cdate':
/* 604  */                         columns.push({ header: L.CreatedDate, width: 120, dataIndex: 'cdate', xtype: 'datecolumn', format: App.dateFormat+' '+App.timeFormat});
/* 605  */                         this.width += 120;
/* 606  */                         break;
/* 607  */                     case 'udate':
/* 608  */                         columns.push({ header: L.UpdatedDate, width: 120, dataIndex: 'udate', xtype: 'datecolumn', format: App.dateFormat+' '+App.timeFormat});
/* 609  */                         this.width += 120;
/* 610  */                         break;
/* 611  */                 }
/* 612  */             }
/* 613  */         }
/* 614  */         this.width = Math.min(this.width, 1024);
/* 615  */ 
/* 616  */         if(this.cfg.showDate === true) {
/* 617  */             columns.push({dataIndex: 'date', width: 50, renderer: App.customRenderers.datetime});
/* 618  */         }
/* 619  */ 
/* 620  */         this.grid = new Ext.grid.GridPanel({
/* 621  */             region: 'center'
/* 622  */             ,border: false
/* 623  */             ,store: this.store
/* 624  */             ,scrollable: true
/* 625  */             ,columns: columns
/* 626  */             // ,colModel: new Ext.grid.ColumnModel({
/* 627  */             //     defaults: { sortable: true }
/* 628  */             // })
/* 629  */             ,viewConfig: {
/* 630  */                 markDirty: false
/* 631  */                 ,stripeRows: false
/* 632  */             }
/* 633  */             ,selModel: sm
/* 634  */             ,listeners: {
/* 635  */                 scope: this
/* 636  */                 ,rowclick: this.onRowClick
/* 637  */                 ,rowdblclick: this.onRowDblClick
/* 638  */             }
/* 639  */             ,bbar: new Ext.PagingToolbar({
/* 640  */                 store: this.store       // grid and PagingToolbar using same store
/* 641  */                 ,displayInfo: true
/* 642  */                 ,hidden: true
/* 643  */             })
/* 644  */         });
/* 645  */ 
/* 646  */         this.resultPanel = new Ext.DataView({
/* 647  */             region: 'south'
/* 648  */             ,border: false
/* 649  */             ,cls: 'bgcW btg p10'
/* 650  */             ,autoHeight: true

/* CB.ObjectsField.js */

/* 651  */             ,hidden: !this.cfg.multiValued
/* 652  */             ,tpl: new Ext.XTemplate(
/* 653  */                 '<span class="fwB">'+L.Value+':</span><ul class="clean"><tpl for=".">'
/* 654  */                 ,'<li class="lh20 icon-padding16 '+ ((this.cfg.renderer === 'listGreenIcons') ? 'icon-element' : '{iconCls}') + '"> &nbsp; {name} <span style="display: inline-block; width: 14px"><span class="buttons"><a href="#" class="icon-close-light" style="display:inline-block; width: 20px;text-decoration: none" title="'+L.Remove+'">&nbsp; &nbsp;</a></span></span></li>'
/* 655  */                 ,'</tpl></ul>'
/* 656  */                 ,{compiled: true}
/* 657  */             )
/* 658  */             ,store: new Ext.data.JsonStore({
/* 659  */                 model: 'Generic'
/* 660  */                 ,proxy: {
/* 661  */                     type: 'memory'
/* 662  */                     ,reader: {
/* 663  */                         type: 'json'
/* 664  */                     }
/* 665  */                 }
/* 666  */             })
/* 667  */             ,itemSelector: 'li'
/* 668  */             ,overItemCls:'item-over'
/* 669  */             ,listeners: {
/* 670  */                 scope: this
/* 671  */                 ,itemclick: this.onRemoveItemClick
/* 672  */             }
/* 673  */         });
/* 674  */ 
/* 675  */         Ext.apply(this, {
/* 676  */             defaults: {border: false}
/* 677  */             ,border: false
/* 678  */             ,buttonAlign: 'left'
/* 679  */             ,items:[
/* 680  */                 { xtype: 'panel'
/* 681  */                     ,region: 'center'
/* 682  */                     ,layout: 'border'
/* 683  */                     ,items: [
/* 684  */                         {
/* 685  */                             xtype: 'panel'
/* 686  */                             ,region: 'north'
/* 687  */                             ,height: 22
/* 688  */                             ,layout: 'hbox'
/* 689  */                             ,border: false
/* 690  */                             ,items: [
/* 691  */                                 {
/* 692  */                                     xtype: 'textfield'
/* 693  */                                     ,anchor: '100%'
/* 694  */                                     ,flex: 1
/* 695  */                                     ,emptyText: L.Search
/* 696  */                                     ,triggerClass: 'x-form-search-trigger'
/* 697  */                                     ,enableKeyEvents: true
/* 698  */                                     ,scope: this
/* 699  */                                     ,onTriggerClick: function(){
/* 700  */                                         this.scope.onGridReloadTask();

/* CB.ObjectsField.js */

/* 701  */                                     }
/* 702  */                                     ,listeners: {
/* 703  */                                         scope: this
/* 704  */                                         ,specialkey: function(ed, ev){
/* 705  */                                             if(ev.getKey() == ev.ENTER) {
/* 706  */                                                 this.onGridReloadTask();
/* 707  */                                             }
/* 708  */                                         }
/* 709  */                                     }
/* 710  */                                 }
/* 711  */                             ]
/* 712  */                         }
/* 713  */                         ,this.grid
/* 714  */                         ,this.resultPanel
/* 715  */                     ]
/* 716  */                 }
/* 717  */             ]
/* 718  */             ,listeners: {
/* 719  */                 scope: this
/* 720  */ 
/* 721  */                 ,show: function(){
/* 722  */                     this.store.removeAll();
/* 723  */                     if((!Ext.isDefined(this.cfg.autoLoad)) || (this.cfg.autoLoad === true)) {
/* 724  */                         this.onGridReloadTask();
/* 725  */                     }
/* 726  */                     this.triggerField.focus(false, 400);
/* 727  */                 }
/* 728  */ 
/* 729  */                 ,facetchange: function(o, ev){
/* 730  */                     ev.stopPropagation();
/* 731  */                     this.onGridReloadTask();
/* 732  */                 }
/* 733  */ 
/* 734  */                 ,beforedestroy: function(){
/* 735  */                     if(this.qt) this.qt.destroy();
/* 736  */                 }
/* 737  */             }
/* 738  */             ,buttons:[
/* 739  */                 '->'
/* 740  */                 ,{text: Ext.MessageBox.buttonText.ok, iconCls: 'icon-tick', scope: this, handler: this.onOkClick}
/* 741  */                 ,{text: L.Cancel, iconCls: 'icon-cancel', scope: this, handler: this.destroy}]
/* 742  */         });
/* 743  */ 
/* 744  */         this.callParent(arguments);
/* 745  */ 
/* 746  */         this.store.on('load', this.onLoad, this);
/* 747  */ 
/* 748  */         this.triggerField = this.query('textfield')[0];
/* 749  */     }
/* 750  */ 

/* CB.ObjectsField.js */

/* 751  */     ,onGridReloadTask: function(){
/* 752  */         if(!this.gridReloadTask) {
/* 753  */             this.gridReloadTask = new Ext.util.DelayedTask(this.processGridReload, this);
/* 754  */         }
/* 755  */         this.gridReloadTask.delay(500);
/* 756  */     }
/* 757  */ 
/* 758  */     ,processGridReload: function(){
/* 759  */         this.store.proxy.extraParams = this.getSearchParams();
/* 760  */         this.store.reload(this.store.extraParams);
/* 761  */     }
/* 762  */ 
/* 763  */     ,onBeforeLoad: function(store, records, options){
/* 764  */         // options = this.getSearchParams();
/* 765  */         // store.extraParams = options
/* 766  */     }
/* 767  */ 
/* 768  */     ,getSearchParams: function(){
/* 769  */         var result = Ext.clone(this.cfg);
/* 770  */ 
/* 771  */         result.query = this.triggerField.getValue();
/* 772  */ 
/* 773  */         if(!Ext.isEmpty(this.data.objectId)) {
/* 774  */             result.objectId = this.data.objectId;
/* 775  */         }
/* 776  */ 
/* 777  */         if(!Ext.isEmpty(this.data.path)) {
/* 778  */             result.path = this.data.path;
/* 779  */         }
/* 780  */ 
/* 781  */         return result;
/* 782  */     }
/* 783  */ 
/* 784  */     ,onLoad: function(store, records, options){
/* 785  */         var el = this.getEl();
/* 786  */ 
/* 787  */         if(Ext.isEmpty(records)) {
/* 788  */             this.grid.getEl().mask(L.noData);
/* 789  */         } else {
/* 790  */             el = this.grid.getEl();
/* 791  */             if(el) {
/* 792  */                 this.grid.getEl().unmask();
/* 793  */             }
/* 794  */ 
/* 795  */             var currentValue = this.getValue();
/* 796  */             var selectedRecords = [];
/* 797  */             this.selectValueOnLoad = true;
/* 798  */             currentValue = currentValue.split(',');
/* 799  */             Ext.each(
/* 800  */                 records

/* CB.ObjectsField.js */

/* 801  */                 ,function(r){
/* 802  */                     r.set('iconCls', getItemIcon(r.data));
/* 803  */                     if(currentValue.indexOf(r.get('id')+'') >= 0) {
/* 804  */                         selectedRecords.push(r);
/* 805  */                     }
/* 806  */                 }
/* 807  */                 ,this
/* 808  */             );
/* 809  */             if(!Ext.isEmpty(selectedRecords)) {
/* 810  */                 this.grid.getSelectionModel().select(selectedRecords);
/* 811  */             }
/* 812  */             this.selectValueOnLoad = false;
/* 813  */         }
/* 814  */         // this.triggerField.setValue(options.params.query);
/* 815  */         // this.grid.getBottomToolbar().setVisible(store.reader.jsonData.total > store.reader.jsonData.data.length);
/* 816  */     }
/* 817  */ 
/* 818  */     ,onSelectionChange: function(sm, selection){
/* 819  */         //this.buttons[0].setDisabled(!sm.hasSelection());
/* 820  */     }
/* 821  */ 
/* 822  */     ,onRowClick: function(g, record, tr, ri, e, eOpts){ //g, ri, e
/* 823  */         var el = Ext.get(e.getTarget());
/* 824  */         if(!el || !el.hasCls('open-object')) {
/* 825  */             return;
/* 826  */         }
/* 827  */ 
/* 828  */         var r = g.getStore().getAt(ri);
/* 829  */ 
/* 830  */         if(!this.qt) {
/* 831  */             this.qt = new Ext.QuickTip({
/* 832  */                 autoHeight: true
/* 833  */                 ,autoWidth: true
/* 834  */                 ,autoHide: true
/* 835  */                 ,dismissDelay: 0
/* 836  */                 ,closable: true
/* 837  */                 ,draggable: true
/* 838  */                 ,target: this
/* 839  */                 ,cls: 'fs11'
/* 840  */                 ,iconCls: r.get('iconCls')
/* 841  */                 ,headerCfg:{
/* 842  */                     cls: 'icon-padding'
/* 843  */                     ,style:'height:20px'
/* 844  */                 }
/* 845  */                 ,title: r.get('name')
/* 846  */                 ,html: '<span class="icon-padding icon-loading">' + L.LoadingData + '</span>'
/* 847  */             });
/* 848  */ 
/* 849  */         } else {
/* 850  */             this.qt.hide();

/* CB.ObjectsField.js */

/* 851  */             this.qt.setTitle(r.get('name'), r.get('iconCls'));
/* 852  */             if(this.qt.contact_id != r.get('id')) {
/* 853  */                 this.qt.update('<span class="icon-padding icon-loading">'+L.LoadingData+'</span>');
/* 854  */             }
/* 855  */         }
/* 856  */ 
/* 857  */         this.qt.showAt(e.getXY());
/* 858  */     }
/* 859  */ 
/* 860  */     ,onRowDblClick: function(g, record, tr, ri, e, eOpts){ //g, ri, e
/* 861  */ 
/* 862  */         var sm = this.grid.getSelectionModel();
/* 863  */         if(sm.isSelected(record)) {
/* 864  */             sm.deselect(record);
/* 865  */         } else {
/* 866  */             sm.select(ri, this.cfg.multiValued);
/* 867  */         }
/* 868  */     }
/* 869  */     ,onRowSelect: function (sm, record, index, eOpts) { //sm, ri, r
/* 870  */         if(!this.selectValueOnLoad) {
/* 871  */             this.resultPanel.config.store.loadData([record.data], true);
/* 872  */         }
/* 873  */     }
/* 874  */     ,onRowDeselect: function (sm, record, index, eOpts) {//sm, ri, r
/* 875  */         var r = this.resultPanel.config.store.findRecord('id', record.get('id'), 0, false, false, true);
/* 876  */ 
/* 877  */         if(r) {
/* 878  */             this.resultPanel.config.store.remove(r);
/* 879  */         }
/* 880  */     }
/* 881  */ 
/* 882  */     ,onRemoveItemClick: function(cmp, record, item, index, e, eOpts){//b, idx, oel, e
/* 883  */         var el = Ext.get(e.getTarget());
/* 884  */         if(!el.dom.classList.contains('icon-close-light')) {
/* 885  */             return;
/* 886  */         }
/* 887  */         var r = this.resultPanel.config.store.getAt(index)
/* 888  */             ,gridRecord = this.grid.store.findRecord('id', r.get('id'), 0, false, false, true);
/* 889  */ 
/* 890  */         this.resultPanel.config.store.removeAt(index);
/* 891  */         if(gridRecord) {
/* 892  */             this.grid.getSelectionModel().deselect([gridRecord]);
/* 893  */         }
/* 894  */     }
/* 895  */ 
/* 896  */     ,getValue: function(){
/* 897  */         var rez = [];
/* 898  */         if(this.resultPanel && this.resultPanel.config.store) {
/* 899  */             this.resultPanel.config.store.each(
/* 900  */                 function(r){

/* CB.ObjectsField.js */

/* 901  */                     rez.push(r.data.id);
/* 902  */                 }
/* 903  */                 ,this
/* 904  */             );
/* 905  */         }
/* 906  */         return rez.join(',');
/* 907  */     }
/* 908  */ 
/* 909  */     ,setData: function(data){
/* 910  */         if(!this.cfg.multiValued) {
/* 911  */             return;
/* 912  */         }
/* 913  */         if(Ext.isEmpty(data)) {
/* 914  */             data = [];
/* 915  */         }
/* 916  */         if(this.resultPanel) {
/* 917  */             this.resultPanel.config.store.removeAll();
/* 918  */             Ext.each(data, function(d){
/* 919  */                 d.id = parseInt(d.id, 10);
/* 920  */                 var u = Ext.create(
/* 921  */                     this.resultPanel.config.store.getModel().getName()
/* 922  */                     ,d
/* 923  */                 );
/* 924  */                 this.resultPanel.config.store.add(u);
/* 925  */             }, this);
/* 926  */         }
/* 927  */ 
/* 928  */         // if(this.rendered) {
/* 929  */         //     this.items.last().syncSize();
/* 930  */         // }
/* 931  */     }
/* 932  */     ,getData: function(){
/* 933  */         var rez = [];
/* 934  */         this.resultPanel.config.store.each(
/* 935  */             function(r){
/* 936  */                 rez.push(r.data);
/* 937  */             }
/* 938  */             ,this
/* 939  */         );
/* 940  */ 
/* 941  */         return rez;
/* 942  */     }
/* 943  */     ,onOkClick: function(){
/* 944  */         if(!this.cfg.multiValued){
/* 945  */             this.resultPanel.config.store.removeAll();
/* 946  */             var s = this.grid.getSelectionModel().getSelection();
/* 947  */ 
/* 948  */             if(s && (s.length > 0)){
/* 949  */                 var r = s[0]
/* 950  */                     ,u = Ext.create(

/* CB.ObjectsField.js */

/* 951  */                         this.resultPanel.config.store.getModel().getName()
/* 952  */                         ,r.data
/* 953  */                     );
/* 954  */ 
/* 955  */                 this.resultPanel.config.store.add(u);
/* 956  */             }
/* 957  */         }
/* 958  */ 
/* 959  */         var newValue = this.getData();
/* 960  */         var objStore = this.getObjectsStore();
/* 961  */         if(objStore) {
/* 962  */             Ext.each(
/* 963  */                 newValue
/* 964  */                 ,function(d){
/* 965  */                     objStore.checkRecordExistance(d);
/* 966  */                 }
/* 967  */                 ,this
/* 968  */             );
/* 969  */         }
/* 970  */         this.fireEvent('setvalue', newValue, this);
/* 971  */         this.close();
/* 972  */     }
/* 973  */ });
/* 974  */ 
/* 975  */ //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* 976  */ Ext.define('CB.ObjectsSelectionPopupList', {
/* 977  */     extend: 'Ext.Window'
/* 978  */     ,bodyBorder: false
/* 979  */     ,closable: true
/* 980  */     ,closeAction: 'destroy'
/* 981  */     ,hideCollapseTool: true
/* 982  */     ,layout: 'fit'
/* 983  */     ,maximizable: false
/* 984  */     ,minimizable: false
/* 985  */     ,modal: true
/* 986  */     ,plain: true
/* 987  */     ,stateful: true
/* 988  */     ,value: []
/* 989  */     ,title: L.ChooseValues
/* 990  */     ,store: new Ext.data.ArrayStore({
/* 991  */         autoDestory: true
/* 992  */         ,idIndex: 0
/* 993  */         ,model: 'Generic2'
/* 994  */         ,data: []
/* 995  */     })
/* 996  */     ,minWidth: 350
/* 997  */     ,minHeight: 250
/* 998  */     ,height: 350
/* 999  */ 
/* 1000 */     ,initComponent: function(){

/* CB.ObjectsField.js */

/* 1001 */         if(Ext.isEmpty(this.config.config)) {
/* 1002 */             this.config.config = {};
/* 1003 */         }
/* 1004 */ 
/* 1005 */         this.data = this.config.data;
/* 1006 */ 
/* 1007 */         this.cfg = this.data.fieldRecord
/* 1008 */             ? Ext.apply({}, Ext.valueFrom(this.data.fieldRecord.data.cfg, {}))
/* 1009 */             : this.config.config;
/* 1010 */ 
/* 1011 */         Ext.apply(this, CB.ObjectsFieldCommonFunctions);
/* 1012 */         this.detectStore();
/* 1013 */         this.cm = [{
/* 1014 */                 header:' '
/* 1015 */                 ,dataIndex: 'id'
/* 1016 */                 ,width: 15
/* 1017 */                 ,fixed: true
/* 1018 */                 ,resizable: false
/* 1019 */                 ,scope: this
/* 1020 */                 ,renderer: function(value, metaData, record, rowIndex, colIndex, store){
/* 1021 */                     if(record.get('header_row') == 1) return;
/* 1022 */                     metaData.css = (this.value.indexOf(value+'') >= 0)
/* 1023 */                         ? 'icon-element'
/* 1024 */                         : 'icon-element-off';
/* 1025 */                 }
/* 1026 */             },{
/* 1027 */                 header: L.Value
/* 1028 */                 ,dataIndex: 'name'
/* 1029 */                 ,width: 270
/* 1030 */                 ,renderer: function(value, metaData, record, rowIndex, colIndex, store) {
/* 1031 */                     metaData.css = 'wsn '+ (record.get('icon') ? record.get('icon') + ' icon-padding' : '');
/* 1032 */                     return value;
/* 1033 */                 }
/* 1034 */             }
/* 1035 */         ];
/* 1036 */         if(!Ext.isEmpty(this.cfg.showDate))
/* 1037 */             this.cm.push({
/* 1038 */                 header: L.Date
/* 1039 */                 ,width: 60
/* 1040 */                 ,dataIndex: this.cfg.showDate
/* 1041 */                 ,format: App.dateFormat
/* 1042 */                 ,renderer: App.customRenderers.date
/* 1043 */             });
/* 1044 */ 
/* 1045 */         this.trigger = new Ext.form.field.Text({
/* 1046 */                 triggerClass: 'x-form-search-trigger'
/* 1047 */                 ,border: false
/* 1048 */                 ,emptyText: L.Filter
/* 1049 */                 ,enableKeyEvents: true
/* 1050 */                 ,onTriggerClick: function(e){

/* CB.ObjectsField.js */

/* 1051 */                     this.doFilter(e);
/* 1052 */                 }.bind(this)
/* 1053 */                 ,tabIndex: 1
/* 1054 */                 ,listeners: {
/* 1055 */                     scope: this
/* 1056 */                     ,keyup: function(f,e){
/* 1057 */                         this.doFilter(e);
/* 1058 */                     }
/* 1059 */                     ,specialkey: function(f,e){
/* 1060 */                         switch(e.getKey()){
/* 1061 */                             case e.DOWN:
/* 1062 */                             case e.TAB: this.focusGrid(); break;
/* 1063 */                             case e.ENTER:  f.onTriggerClick();
/* 1064 */                         }
/* 1065 */                     }
/* 1066 */                 }
/* 1067 */             });
/* 1068 */ 
/* 1069 */         this.grid = new Ext.grid.GridPanel({
/* 1070 */             border: false
/* 1071 */             ,style: 'background-color: white'
/* 1072 */             ,stripeRows: true
/* 1073 */             ,store: this.store
/* 1074 */             ,minColumnWidth: 5
/* 1075 */             ,columns: this.cm
/* 1076 */             ,tbar: [this.trigger]
/* 1077 */             ,viewConfig: {
/* 1078 */                 forceFit: true
/* 1079 */                 ,enableRowBody: true
/* 1080 */                 ,getRowClass: function(r, rowIndex, rp, ds){
/* 1081 */                     rp.body = (r.get('header_row') == 1) ? r.get('name') : '';
/* 1082 */                     return (rp.body ? 'x-grid3-row-with-body' : '');
/* 1083 */                 }
/* 1084 */             }
/* 1085 */             ,hideHeaders: true
/* 1086 */             ,selModel: new Ext.selection.RowModel({singleSelect: true})
/* 1087 */             ,tabIndex: 2
/* 1088 */             ,listeners:{
/* 1089 */                 scope: this
/* 1090 */                 ,rowclick: this.toggleElementSelection
/* 1091 */                 ,keypress: function(e){
/* 1092 */                     if( (e.getKey() == e.SPACE) && (!e.hasModifier())){
/* 1093 */                         e.stopPropagation();
/* 1094 */                         this.toggleElementSelection();
/* 1095 */                     }
/* 1096 */                 }
/* 1097 */             }
/* 1098 */          });
/* 1099 */ 
/* 1100 */         Ext.apply(this, {

/* CB.ObjectsField.js */

/* 1101 */             buttonAlign: 'left'
/* 1102 */             ,items: this.grid
/* 1103 */             ,keys:[{
/* 1104 */                     key: "\r\n"
/* 1105 */                     ,fn: this.doSubmit
/* 1106 */                     ,scope: this
/* 1107 */                 },{
/* 1108 */                     key: Ext.event.Event.ESC
/* 1109 */                     ,fn: this.doClose
/* 1110 */                     ,scope: this
/* 1111 */                 }
/* 1112 */             ]
/* 1113 */             ,buttons: [
/* 1114 */                 {text: L.ClearSelection, handler: this.doClearSelection, scope: this, tabIndex: 6}
/* 1115 */                 ,'->'
/* 1116 */                 ,{text: Ext.MessageBox.buttonText.ok, handler: this.doSubmit, scope: this, tabIndex: 3}
/* 1117 */                 ,{text: L.Cancel, handler: this.doClose, scope: this, tabIndex: 4}
/* 1118 */             ]
/* 1119 */         });
/* 1120 */ 
/* 1121 */         this.callParent(arguments);
/* 1122 */ 
/* 1123 */         this.on('beforeshow', this.onBeforeShowEvent, this);
/* 1124 */         this.on('resize', function(win, w, h){this.trigger.setWidth(w - 17);});
/* 1125 */     }
/* 1126 */ 
/* 1127 */     ,focusGrid: function(){
/* 1128 */         this.grid.focus();
/* 1129 */         if(this.grid.getStore().getCount() > 0){
/* 1130 */             var r = this.grid.getSelectionModel().getSelected();
/* 1131 */             if(!r) {
/* 1132 */                 r = this.grid.getStore().getAt(0);
/* 1133 */             }
/* 1134 */             this.grid.getSelectionModel().select([r]);
/* 1135 */             this.grid.getView().focusRow(this.grid.getStore().indexOf(r));
/* 1136 */         }
/* 1137 */     }
/* 1138 */ 
/* 1139 */     ,toggleElementSelection: function(g, ri, e){
/* 1140 */         var r = this.grid.getSelectionModel().getSelected();
/* 1141 */ 
/* 1142 */         if(!r || (r.get('header_row') == 1)) {
/* 1143 */             return;
/* 1144 */         }
/* 1145 */ 
/* 1146 */         var id = r.get('id') + '';
/* 1147 */         if(this.value.indexOf(id) < 0) {
/* 1148 */             this.value.push(id);
/* 1149 */         } else {
/* 1150 */             this.value.remove(id);

/* CB.ObjectsField.js */

/* 1151 */         }
/* 1152 */ 
/* 1153 */         this.grid.getView().refresh(false);
/* 1154 */         this.grid.getView().focusRow(this.grid.getStore().indexOf(r));
/* 1155 */     }
/* 1156 */ 
/* 1157 */     ,onBeforeShowEvent: function(){
/* 1158 */         this.trigger.setValue('');
/* 1159 */         this.trigger.focus(true, 350);
/* 1160 */         if(!Ext.isArray(this.value)) this.value = Ext.isEmpty(this.value) ? [] : String(this.value).split(',');
/* 1161 */         this.doFilter();
/* 1162 */         this.setTitle(this.title);
/* 1163 */         if(this.iconCls)  this.setIconCls(this.iconCls);
/* 1164 */         this.width = 350 + (this.grid.getColumnModel().getColumnCount() - 2) * 100;
/* 1165 */         this.setWidth(this.width);
/* 1166 */     }
/* 1167 */ 
/* 1168 */     ,doFilter: function(e){
/* 1169 */         var criterias = [
/* 1170 */             {
/* 1171 */                 fn: function(rec){
/* 1172 */                     return !Ext.isEmpty(rec.get('id'));
/* 1173 */                 }
/* 1174 */                 ,scope: this
/* 1175 */             }
/* 1176 */         ]
/* 1177 */         ,v = this.trigger.getValue();
/* 1178 */ 
/* 1179 */         if(!Ext.isEmpty(v)) {
/* 1180 */             criterias.push({ property: 'name', value: v, anyMatch: true, caseSensitive: false });
/* 1181 */         }
/* 1182 */ 
/* 1183 */         if(Ext.isEmpty(criterias)) {
/* 1184 */             this.grid.store.clearFilter();
/* 1185 */         } else {
/* 1186 */             this.grid.store.filter(criterias);
/* 1187 */         }
/* 1188 */     }
/* 1189 */ 
/* 1190 */     ,doClearSelection: function(){
/* 1191 */         this.value = [];
/* 1192 */         this.grid.getView().refresh(false);
/* 1193 */     }
/* 1194 */ 
/* 1195 */     ,doSubmit: function(){
/* 1196 */         this.grid.store.clearFilter();
/* 1197 */         var newValue = this.value.join(',');
/* 1198 */         this.fireEvent('setvalue', newValue, this);
/* 1199 */         this.close();
/* 1200 */     }

/* CB.ObjectsField.js */

/* 1201 */ });
/* 1202 */ 

;
/* Actions.js */

/* 1  */ 
/* 2  */ Ext.namespace('CB.browser');
/* 3  */ /**
/* 4  *|  * generic methods that could be used from anywere to avoid code duplication
/* 5  *|  * @type {Object}
/* 6  *|  */
/* 7  */ 
/* 8  */ CB.browser.Actions = {
/* 9  */ 
/* 10 */     deleteSelection: function(selection, callback, scope) {
/* 11 */         if(Ext.isEmpty(selection) || !Ext.isArray(selection)) {
/* 12 */             plog('Wrong slection given for deleteSelection', selection);
/* 13 */             return;
/* 14 */         }
/* 15 */ 
/* 16 */         this.lastArguments = arguments;
/* 17 */ 
/* 18 */         Ext.Msg.confirm(
/* 19 */             L.DeleteConfirmation
/* 20 */             ,(selection.length == 1)
/* 21 */                 ? L.DeleteConfirmationMessage + ' "' + selection[0].name + '"?'
/* 22 */                 : L.DeleteSelectedConfirmationMessage
/* 23 */             ,this.onDeleteSelection
/* 24 */             ,this
/* 25 */         );
/* 26 */     }
/* 27 */ 
/* 28 */     ,onDeleteSelection: function (btn, e) {
/* 29 */         if(btn !== 'yes') {
/* 30 */             this.processDelete(false, e);
/* 31 */             return;
/* 32 */         }
/* 33 */ 
/* 34 */         var selection = this.lastArguments[0];
/* 35 */         if(Ext.isEmpty(selection)) {
/* 36 */             return;
/* 37 */         }
/* 38 */ 
/* 39 */         var ids = [];
/* 40 */         for (var i = 0; i < selection.length; i++) {
/* 41 */             ids.push(Ext.valueFrom(selection[i].nid, selection[i].id));
/* 42 */         }
/* 43 */         CB_BrowserView['delete'](ids, this.processDelete, this);
/* 44 */     }
/* 45 */ 
/* 46 */     ,processDelete: function(r, e) {
/* 47 */         var args = this.lastArguments
/* 48 */             ,callback = args[1]
/* 49 */             ,scope = args[2];
/* 50 */ 

/* Actions.js */

/* 51 */         if(callback) {
/* 52 */             if(scope) {
/* 53 */                 callback = Ext.Function.bind(callback, scope);
/* 54 */             }
/* 55 */             callback(r, e);
/* 56 */         }
/* 57 */ 
/* 58 */         if(r && (r.success === true)) {
/* 59 */             App.mainViewPort.fireEvent('objectsdeleted', r.ids, e);
/* 60 */         }
/* 61 */     }
/* 62 */ 
/* 63 */ };
/* 64 */ 

;
/* Tree.js */

/* 1   */ 
/* 2   */ Ext.namespace('CB.browser');
/* 3   */ 
/* 4   */ Ext.define('CB.browser.Tree', {
/* 5   */     extend: 'Ext.tree.TreePanel'
/* 6   */     ,alias: 'widget.CBBrowserTree'
/* 7   */ 
/* 8   */     ,rootVisible: false
/* 9   */     ,scrollable: true
/* 10  */     ,containerScroll: true
/* 11  */     ,animate: false
/* 12  */     ,lines: false
/* 13  */     ,useArrows: true
/* 14  */     // ,showFoldersContent: false
/* 15  */     ,border: false
/* 16  */     ,bodyBoder: false
/* 17  */     ,style: {
/* 18  */         border: '0'
/* 19  */     }
/* 20  */     ,bodyStyle: {
/* 21  */         border: '0'
/* 22  */     }
/* 23  */     ,hideToolbar: true
/* 24  */     ,stateful: false
/* 25  */     ,stateId: 'btree' //browser tree
/* 26  */ 
/* 27  */     ,initComponent: function(){
/* 28  */         if(Ext.isEmpty(this.data)) {
/* 29  */             this.data = {};
/* 30  */         }
/* 31  */ 
/* 32  */         this.actions = {
/* 33  */             edit: new Ext.Action({
/* 34  */                 text: L.Edit
/* 35  */                 ,scope: this
/* 36  */                 ,handler: this.onEditClick
/* 37  */             })
/* 38  */ 
/* 39  */             ,expand: new Ext.Action({
/* 40  */                 text: L.Expand
/* 41  */                 ,scope: this
/* 42  */                 ,handler: this.onExpandClick
/* 43  */             })
/* 44  */ 
/* 45  */             ,collapse: new Ext.Action({
/* 46  */                 text: L.Collapse
/* 47  */                 ,scope: this
/* 48  */                 ,handler: this.onCollapseClick
/* 49  */             })
/* 50  */ 

/* Tree.js */

/* 51  */             ,cut: new Ext.Action({
/* 52  */                 text: L.Cut
/* 53  */                 ,scope: this
/* 54  */                 ,disabled: true
/* 55  */                 ,handler: this.onCutClick
/* 56  */             })
/* 57  */ 
/* 58  */             ,copy: new Ext.Action({
/* 59  */                 text: L.Copy
/* 60  */                 ,scope: this
/* 61  */                 ,disabled: true
/* 62  */                 ,handler: this.onCopyClick
/* 63  */             })
/* 64  */ 
/* 65  */             ,paste: new Ext.Action({
/* 66  */                 text: L.Paste
/* 67  */                 ,scope: this
/* 68  */                 ,disabled: true
/* 69  */                 ,handler: this.onPasteClick
/* 70  */             })
/* 71  */ 
/* 72  */             ,pasteShortcut: new Ext.Action({
/* 73  */                 text: L.PasteShortcut
/* 74  */                 ,scope: this
/* 75  */                 ,disabled: true
/* 76  */                 ,handler: this.onPasteShortcutClick
/* 77  */             })
/* 78  */ 
/* 79  */             ,reload: new Ext.Action({
/* 80  */                 iconCls: 'icon-refresh'
/* 81  */                 ,text: L.Reload
/* 82  */                 ,disabled: true
/* 83  */                 ,scope: this
/* 84  */                 ,handler: this.onReloadClick
/* 85  */             })
/* 86  */ 
/* 87  */             ,'delete': new Ext.Action({
/* 88  */                 text: L.Delete
/* 89  */                 ,iconCls: 'i-trash'
/* 90  */                 ,disabled: true
/* 91  */                 ,scope: this
/* 92  */                 ,handler: this.onDeleteClick
/* 93  */             })
/* 94  */ 
/* 95  */             ,rename: new Ext.Action({
/* 96  */                 text: L.Rename
/* 97  */                 ,disabled: true
/* 98  */                 ,scope: this
/* 99  */                 ,handler: this.onRenameClick
/* 100 */             })

/* Tree.js */

/* 101 */ 
/* 102 */             ,star: new Ext.Action({
/* 103 */                 iconCls: 'i-star'
/* 104 */                 ,text: L.Star
/* 105 */                 ,scope: this
/* 106 */                 ,handler: this.onStarClick
/* 107 */             })
/* 108 */ 
/* 109 */             ,unstar: new Ext.Action({
/* 110 */                 iconCls: 'i-unstar'
/* 111 */                 ,text: L.Unstar
/* 112 */                 ,scope: this
/* 113 */                 ,handler: this.onUnstarClick
/* 114 */             })
/* 115 */ 
/* 116 */             ,permissions: new Ext.Action({
/* 117 */                 text: L.Permissions
/* 118 */                 ,iconCls: 'icon-key'
/* 119 */                 ,scope: this
/* 120 */                 ,disabled: true
/* 121 */                 ,handler: this.onPermissionsClick
/* 122 */             })
/* 123 */ 
/* 124 */         };
/* 125 */ 
/* 126 */         //context menu item for create new items menu
/* 127 */         this.createItem = new Ext.menu.Item({
/* 128 */             text: L.Create
/* 129 */             ,hideOnClick: false
/* 130 */             ,menu:[]
/* 131 */         });
/* 132 */ 
/* 133 */         this.editor = new Ext.Editor({
/* 134 */             field: {
/* 135 */                 xtype: 'textfield'
/* 136 */                 ,allowBlank: false
/* 137 */                 ,selectOnFocus: true
/* 138 */             }
/* 139 */         });
/* 140 */ 
/* 141 */         this.editor.on('beforecomplete', this.onBeforeEditComplete, this);
/* 142 */ 
/* 143 */         var rootConfig = Ext.valueFrom(this.config.data.rootNode, {});
/* 144 */         rootConfig = Ext.apply(
/* 145 */             {
/* 146 */                 nid: Ext.valueFrom(this.rootId, '')
/* 147 */                 ,expanded: true
/* 148 */                 ,editable: false
/* 149 */                 ,leaf: false
/* 150 */                 ,iconCls:'icon-folder'

/* Tree.js */

/* 151 */             }
/* 152 */             ,rootConfig
/* 153 */         );
/* 154 */         rootConfig.text = Ext.valueFrom(rootConfig.text, rootConfig.name);
/* 155 */ 
/* 156 */         this.store = Ext.create('Ext.data.TreeStore', {
/* 157 */             root: rootConfig
/* 158 */             ,proxy: {
/* 159 */                 type: 'direct'
/* 160 */                 ,directFn: CB_BrowserTree.getChildren
/* 161 */                 ,paramsAsHash: true
/* 162 */                 ,extraParams: {
/* 163 */                     from: 'tree'
/* 164 */                 }
/* 165 */             }
/* 166 */             ,listeners: {
/* 167 */                 scope: this
/* 168 */                 ,beforeload: function(store, record, eOpts) {
/* 169 */                     var path = record.config.node
/* 170 */                         ? record.config.node.getPath('nid')
/* 171 */                         : '';
/* 172 */ 
/* 173 */                     var p = {
/* 174 */                         path: path
/* 175 */                         // ,showFoldersContent: this.showFoldersContent
/* 176 */                     };
/* 177 */                     Ext.apply(store.proxy.extraParams, p);
/* 178 */                 }
/* 179 */             }
/* 180 */         });
/* 181 */ 
/* 182 */ 
/* 183 */         Ext.apply(this, {
/* 184 */             header: false
/* 185 */             ,hideHeaders: true
/* 186 */             ,viewConfig: {
/* 187 */                 cls: 'browser-tree'
/* 188 */                 ,border: false
/* 189 */                 ,bodyBoder: false
/* 190 */                 ,scrollable: true
/* 191 */                 ,idProperty: 'nid'
/* 192 */                 ,loadMask: false
/* 193 */                 ,plugins: {
/* 194 */                     ptype: 'CBDDTree'
/* 195 */                     ,idProperty: 'nid'
/* 196 */                 }
/* 197 */             }
/* 198 */             ,columns: {
/* 199 */                 items: [
/* 200 */                     {

/* Tree.js */

/* 201 */                         xtype: 'treecolumn'
/* 202 */                         ,dataIndex: 'text'
/* 203 */ 
/* 204 */                         ,renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
/* 205 */                             metaData.tdCls = record.get('cls') + ' x-grid-item-gray';
/* 206 */                             return value;
/* 207 */                         }
/* 208 */                     }
/* 209 */                 ],
/* 210 */                 defaults: {
/* 211 */                     flex: 1
/* 212 */                 }
/* 213 */             }
/* 214 */             ,listeners:{
/* 215 */                 scope: this
/* 216 */                 ,afterrender: this.restoreTreeState
/* 217 */                 ,beforeitemappend: this.onBeforeNodeAppend
/* 218 */                 // ,load: function(node){ this.sortNode(node); }
/* 219 */                 ,dblclick: this.onDblClick
/* 220 */                 ,itemcontextmenu: this.onContextMenu
/* 221 */                 ,beforedestroy: this.onBeforeDestroy
/* 222 */                 ,itemkeydown: this.onItemKeyDown
/* 223 */             }
/* 224 */             ,selModel: new Ext.selection.TreeModel({
/* 225 */                 allowDeselect: false
/* 226 */                 ,listeners: {
/* 227 */                     scope: this
/* 228 */                     ,focuschange: this.onNodeFocusChange
/* 229 */                     ,selectionchange: this.onSelectionChange
/* 230 */                 }
/* 231 */             })
/* 232 */             // ,plugins: [ new CB.DD.Tree({idProperty: 'nid'}) ]
/* 233 */         });
/* 234 */ 
/* 235 */         this.callParent(arguments);
/* 236 */ 
/* 237 */         if(!isNaN(this.rootId)) {
/* 238 */             CB_BrowserTree.getRootProperties(
/* 239 */                 this.rootId
/* 240 */                 ,function(r, e){
/* 241 */                     Ext.apply(this.getRootNode().data, r.data);
/* 242 */                     this.onBeforeNodeAppend(this, null, this.getRootNode());
/* 243 */             }, this);
/* 244 */         }
/* 245 */ 
/* 246 */         this.enableBubble(['createobject']);
/* 247 */ 
/* 248 */         App.clipboard.on('pasted', this.onClipboardAction, this);
/* 249 */         App.mainViewPort.on('savesuccess', this.onObjectsSaved, this);
/* 250 */         App.mainViewPort.on('fileuploaded', this.onObjectsSaved, this);

/* Tree.js */

/* 251 */         App.mainViewPort.on('taskupdated', this.onObjectsSaved, this);
/* 252 */         App.mainViewPort.on('taskcreated', this.onObjectsSaved, this);
/* 253 */         App.mainViewPort.on('objectsdeleted', this.onObjectsDeleted, this);
/* 254 */         App.on('objectchanged', this.onObjectsSaved, this);
/* 255 */     }
/* 256 */ 
/* 257 */     ,onItemKeyDown: function(tree, record, item, index, e, eOpts){
/* 258 */         switch(e.getKey()) {
/* 259 */             case e.X:
/* 260 */                 if(e.ctrlKey && !e.shiftKey && !e.altKey) {
/* 261 */                     e.stopEvent();
/* 262 */                     this.onCutClick();
/* 263 */                 }
/* 264 */                 break;
/* 265 */ 
/* 266 */             case e.C:
/* 267 */                 if(e.ctrlKey && !e.shiftKey && !e.altKey) {
/* 268 */                     e.stopEvent();
/* 269 */                     this.onCopyClick();
/* 270 */                 }
/* 271 */                 break;
/* 272 */ 
/* 273 */             case e.V:
/* 274 */                 if(e.ctrlKey && !e.shiftKey && !e.altKey) {
/* 275 */                     e.stopEvent();
/* 276 */                     this.onPasteClick();
/* 277 */                 } else if(e.ctrlKey && !e.shiftKey && e.altKey) {
/* 278 */                     e.stopEvent();
/* 279 */                     this.onPasteShortcutClick();
/* 280 */                 }
/* 281 */                 break;
/* 282 */ 
/* 283 */             case e.DELETE:
/* 284 */                 if(!e.ctrlKey && !e.shiftKey && !e.altKey) {
/* 285 */                     e.stopEvent();
/* 286 */                     this.onDeleteClick();
/* 287 */                 }
/* 288 */                 break;
/* 289 */ 
/* 290 */             case e.F2:
/* 291 */                 if(!e.ctrlKey && !e.shiftKey && !e.altKey) {
/* 292 */                     e.stopEvent();
/* 293 */                     this.onRenameClick();
/* 294 */                 }
/* 295 */                 break;
/* 296 */ 
/* 297 */             case e.R:
/* 298 */             case e.F2:
/* 299 */                 if((!e.ctrlKey && !e.altKey) ||
/* 300 */                     (e.ctrlKey && (e.getKey() == e.R))

/* Tree.js */

/* 301 */                 ) {
/* 302 */                     e.stopEvent();
/* 303 */                     this.onReloadClick();
/* 304 */                 }
/* 305 */                 break;
/* 306 */         }
/* 307 */     }
/* 308 */ 
/* 309 */     ,onBeforeNodeAppend: function(parent, node){
/* 310 */         // node.setId(Ext.id());
/* 311 */ 
/* 312 */         // node id could be literal, so we cannot eval it to int
/* 313 */         // node.data.nid = Ext.Number.from(node.data.nid, null);
/* 314 */ 
/* 315 */         node.data.system = Ext.Number.from(node.data.system, 0);
/* 316 */         node.set('text', node.data.name);
/* 317 */ 
/* 318 */         if(Ext.isEmpty(node.data.iconCls)) {
/* 319 */             if(node.data.cfg && node.data.cfg.iconCls){
/* 320 */                 node.set('iconCls', node.data.cfg.iconCls );
/* 321 */             } else {
/* 322 */                 node.set('iconCls', getItemIcon(node.data) );
/* 323 */             }
/* 324 */         }
/* 325 */ 
/* 326 */         node.data.editable = false;
/* 327 */         node.draggable = (node.data.system === 0);
/* 328 */         if(node.data.acl_count > 0) {
/* 329 */             node.set('cls', 'node-has-acl');
/* 330 */         }
/* 331 */     }
/* 332 */ 
/* 333 */     ,onBeforeDestroy: function(p){
/* 334 */         App.clipboard.un('pasted', this.onClipboardAction, this);
/* 335 */         App.mainViewPort.un('objectsdeleted', this.onObjectsDeleted, this);
/* 336 */     }
/* 337 */ 
/* 338 */     ,onClipboardAction: function(pids){
/* 339 */         this.getRootNode().cascadeBy({
/* 340 */             before: function(n){
/* 341 */                 if(pids.indexOf(n.data.nid) >= 0 ) {
/* 342 */                     this.store.reload({node: n});
/* 343 */                     // n.reload();
/* 344 */                 }
/* 345 */             }
/* 346 */             ,scope: this
/* 347 */         });
/* 348 */     }
/* 349 */ 
/* 350 */     ,onObjectsSaved: function(form, e){

/* Tree.js */

/* 351 */         if(!this.rendered) {
/* 352 */             return;
/* 353 */         }
/* 354 */ 
/* 355 */         var n = this.getRootNode()
/* 356 */             ,data = form.pid
/* 357 */                 ? form
/* 358 */                 : form.data;
/* 359 */         data = Ext.valueFrom(data, {});
/* 360 */ 
/* 361 */         if(n) {
/* 362 */             n.cascadeBy({
/* 363 */                 before: function(n){
/* 364 */                     if(n.data.nid == data.pid) {
/* 365 */                         this.store.reload({node: n});
/* 366 */                     }
/* 367 */                 }
/* 368 */                 ,scope: this
/* 369 */             });
/* 370 */         }
/* 371 */     }
/* 372 */ 
/* 373 */     ,onNodeFocusChange: function (sm, oldR, newR, eOpts) {
/* 374 */         this.lastFocusedRecord = Ext.valueFrom(newR, oldR);
/* 375 */     }
/* 376 */ 
/* 377 */     ,onSelectionChange: function (sm, selection, ev) {
/* 378 */         var node = Ext.isEmpty(selection)
/* 379 */             ? null
/* 380 */             : selection[0];
/* 381 */ 
/* 382 */         if(Ext.isEmpty(node)){
/* 383 */             this.actions.edit.setHidden(true);
/* 384 */             this.actions.cut.setDisabled(true);
/* 385 */             this.actions.copy.setDisabled(true);
/* 386 */             this.actions.paste.setDisabled(true);
/* 387 */             this.actions.pasteShortcut.setDisabled(true);
/* 388 */             this.actions['delete'].setDisabled(true);
/* 389 */             this.actions.rename.setDisabled(true);
/* 390 */             this.actions.reload.setDisabled(true);
/* 391 */             this.actions.permissions.setDisabled(true);
/* 392 */ 
/* 393 */         } else {
/* 394 */             var canOpen = true;
/* 395 */             this.actions.edit.setHidden(!canOpen);
/* 396 */ 
/* 397 */             var canExpand = (!node.isExpanded() && ((!node.loaded) || node.hasChildNodes()));
/* 398 */             this.actions.expand.setHidden(!canExpand);
/* 399 */ 
/* 400 */             var canCollapse = node.isExpanded() && node.hasChildNodes();

/* Tree.js */

/* 401 */             this.actions.collapse.setHidden(!canCollapse);
/* 402 */             if(this.contextMenu) {
/* 403 */                 this.contextMenu.items.getAt(3).setVisible(canOpen || canExpand || canCollapse);
/* 404 */             }
/* 405 */ 
/* 406 */             var canCopy = (node.data.system === 0);
/* 407 */             this.actions.cut.setDisabled(!canCopy);
/* 408 */             this.actions.copy.setDisabled(!canCopy);
/* 409 */ 
/* 410 */             var canPaste = !App.clipboard.isEmpty()
/* 411 */                 && App.clipboard.containShortcutsOnly()
/* 412 */                 && ( node.data.system === 0 );
/* 413 */             this.actions.paste.setDisabled(!canPaste);
/* 414 */ 
/* 415 */             var canPasteShortcut = !App.clipboard.isEmpty()
/* 416 */                 && !App.clipboard.containShortcutsOnly()
/* 417 */                 && ( node.data.system === 0 );
/* 418 */             this.actions.pasteShortcut.setDisabled(!canPasteShortcut);
/* 419 */ 
/* 420 */             var canDelete = (node.data.system === 0);
/* 421 */             this.actions['delete'].setDisabled(!canDelete) ;
/* 422 */ 
/* 423 */             var canRename = (node.data.system === 0);
/* 424 */             this.actions.rename.setDisabled(!canRename) ;
/* 425 */ 
/* 426 */             this.actions.reload.setDisabled(false) ;
/* 427 */ 
/* 428 */             this.actions.permissions.setDisabled(!Ext.isNumeric(node.data.nid) || (node.data.nid < 1));
/* 429 */         }
/* 430 */ 
/* 431 */         this.fireEvent('selectionchanged');
/* 432 */     }
/* 433 */ 
/* 434 */     ,onContextMenu: function (tree, record, item, index, e, eOpts) {
/* 435 */         if(Ext.isEmpty(this.contextMenu)){/* create context menu if not aleready created */
/* 436 */             this.contextMenu = new Ext.menu.Menu({
/* 437 */                 items: [
/* 438 */                 this.actions.edit
/* 439 */                 ,'-'
/* 440 */                 ,this.actions.cut
/* 441 */                 ,this.actions.copy
/* 442 */                 ,this.actions.paste
/* 443 */                 ,this.actions.pasteShortcut
/* 444 */                 ,'-'
/* 445 */                 ,this.actions.reload
/* 446 */                 ,this.actions['delete']
/* 447 */                 ,this.actions.rename
/* 448 */                 ,this.actions.star
/* 449 */                 ,this.actions.unstar
/* 450 */                 ,'-'

/* Tree.js */

/* 451 */                 ,this.createItem
/* 452 */                 ,'-'
/* 453 */                 ,this.actions.permissions
/* 454 */                 ]
/* 455 */             });
/* 456 */ 
/* 457 */         }
/* 458 */         // node.select();
/* 459 */         e.stopEvent();
/* 460 */         this.contextMenu.node = record;
/* 461 */ 
/* 462 */         var canStar = !App.Favorites.isStarred(record.data.nid);
/* 463 */         this.actions.star.setHidden(!canStar) ;
/* 464 */         this.actions.unstar.setHidden(canStar) ;
/* 465 */ 
/* 466 */         this.contextMenu.showAt(e.getXY());
/* 467 */     }
/* 468 */ 
/* 469 */     ,updateCreateMenu: function (menuConfig) {
/* 470 */         updateMenu(
/* 471 */             this.createItem
/* 472 */             ,menuConfig
/* 473 */             ,this.onCreateObjectClick
/* 474 */             ,this
/* 475 */         );
/* 476 */     }
/* 477 */ 
/* 478 */     ,onCreateObjectClick: function(b, e) {
/* 479 */         var data = Ext.clone(b.config.data);
/* 480 */         data.pid = this.contextMenu.node.data.nid;
/* 481 */         data.path = this.contextMenu.node.getPath('nid');
/* 482 */         data.pathtext = this.contextMenu.node.getPath('text');
/* 483 */ 
/* 484 */         var tr = CB.DB.templates.getById(data.template_id);
/* 485 */ 
/* 486 */         if(tr && (Ext.valueFrom(tr.get('cfg').editMethod, tr.get('cfg').createMethod) === 'inline')) {
/* 487 */             CB_Objects.create(data, this.processCreateInlineObject, this);
/* 488 */         } else {
/* 489 */             this.fireEvent('createobject', data, e);
/* 490 */         }
/* 491 */     }
/* 492 */ 
/* 493 */     ,processCreateInlineObject: function(r, e){
/* 494 */         this.getEl().unmask();
/* 495 */         if(!r || (r.success !== true)) {
/* 496 */             return;
/* 497 */         }
/* 498 */ 
/* 499 */         r.data.nid = Ext.valueFrom(r.data.nid, r.data.id);
/* 500 */         delete r.data.id;

/* Tree.js */

/* 501 */         this.root.cascadeBy({
/* 502 */             before: function(node){
/* 503 */                 //find parent node
/* 504 */                 if(node.data.nid == r.data.pid){
/* 505 */                     if(!node.loaded){
/* 506 */                         if(node.isSelected()) {
/* 507 */                             node.expand(
/* 508 */                                 false
/* 509 */                                 ,false
/* 510 */                                 ,function(pn){
/* 511 */                                     var n = pn.findChild('nid', r.data.nid);
/* 512 */                                     if(n) {
/* 513 */                                         this.startEditing(n);
/* 514 */                                     }
/* 515 */                                 }
/* 516 */                                 ,this
/* 517 */                             );
/* 518 */                         }
/* 519 */                     } else {
/* 520 */                         r.data.loaded = true;
/* 521 */                         node.expand();
/* 522 */                         n = node.appendChild(r.data);
/* 523 */                         this.startEditing(n);
/* 524 */                     }
/* 525 */                 }
/* 526 */             }
/* 527 */             ,scope: this
/* 528 */         });
/* 529 */     }
/* 530 */ 
/* 531 */     ,onDblClick: function(b, e){
/* 532 */         var n = this.getSelectionModel().getSelection()[0];
/* 533 */ 
/* 534 */         if(Ext.isEmpty(n)) {
/* 535 */             return;
/* 536 */         }
/* 537 */ 
/* 538 */         if(App.isFolder(n.data.template_id)) {
/* 539 */             return;
/* 540 */         }
/* 541 */ 
/* 542 */         this.onEditClick(b, e);
/* 543 */     }
/* 544 */ 
/* 545 */     ,onEditClick: function (b, e) {
/* 546 */         var n = this.getSelectionModel().getSelection()[0];
/* 547 */         if(Ext.isEmpty(n)) {
/* 548 */             return;
/* 549 */         }
/* 550 */ 

/* Tree.js */

/* 551 */         var tab = App.activateBrowserTab();
/* 552 */ 
/* 553 */         tab.editObject(
/* 554 */             {
/* 555 */                 id: n.data.nid
/* 556 */                 ,template_id: n.data.template_id
/* 557 */             }
/* 558 */         );
/* 559 */     }
/* 560 */ 
/* 561 */     ,onExpandClick: function (b, e) {
/* 562 */         var n = this.getSelectionModel().getSelection()[0];
/* 563 */         n.expand(
/* 564 */             false
/* 565 */             ,false
/* 566 */             ,function(n){
/* 567 */                 // this.onSelectionChange(this.sm, n);
/* 568 */             }
/* 569 */             ,this
/* 570 */         );
/* 571 */     }
/* 572 */ 
/* 573 */     ,onCollapseClick: function (b, e) {
/* 574 */         var n = this.getSelectionModel().getSelection()[0];
/* 575 */         n.collapse();
/* 576 */         // this.onSelectionChange(this.sm, n);
/* 577 */     }
/* 578 */ 
/* 579 */     // ,onShowFoldersChildsClick: function(b, e){
/* 580 */     //     this.showFoldersContent = !b.checked;
/* 581 */ 
/* 582 */     //     this.fireEvent('savestate');
/* 583 */ 
/* 584 */     //     this.store.reload({
/* 585 */     //         node: this.getRootNode()
/* 586 */     //         ,scope: this
/* 587 */     //         ,callback: this.restoreTreeState
/* 588 */     //     });
/* 589 */     // }
/* 590 */ 
/* 591 */     ,getState: function () {
/* 592 */         var rez = {
/* 593 */             paths: []
/* 594 */         };
/* 595 */ 
/* 596 */         if(this.collapsed) {
/* 597 */             rez.collapsed = true;
/* 598 */         }
/* 599 */ 
/* 600 */         rez.width = this.getWidth();

/* Tree.js */

/* 601 */ 
/* 602 */         var p, ok
/* 603 */             ,s = this.getSelectionModel().getSelection()
/* 604 */             ,n = Ext.isEmpty(s)
/* 605 */                 ? this.lastFocusedRecord
/* 606 */                 : s[0];
/* 607 */ 
/* 608 */         if(!Ext.isEmpty(n) && this.allParentsExpanded(n)) {
/* 609 */             rez.selected = n.getPath('nid');
/* 610 */         }
/* 611 */ 
/* 612 */         this.getRootNode().cascadeBy({
/* 613 */             before: function(n){
/* 614 */                 if(n.isExpanded() && this.allParentsExpanded(n)) {
/* 615 */                     rez.paths.push(n.getPath('nid'));
/* 616 */                 }
/* 617 */             }
/* 618 */             ,scope: this
/* 619 */         });
/* 620 */ 
/* 621 */         return rez;
/* 622 */     }
/* 623 */ 
/* 624 */     //check if all parents are expanded
/* 625 */     ,allParentsExpanded: function(node) {
/* 626 */         var rez = true
/* 627 */             ,p = node.parentNode;
/* 628 */ 
/* 629 */         while(!Ext.isEmpty(p) && rez) {
/* 630 */             rez = p.isExpanded();
/* 631 */             p = p.parentNode;
/* 632 */         }
/* 633 */ 
/* 634 */         return rez;
/* 635 */     }
/* 636 */ 
/* 637 */     ,restoreTreeState: function() {
/* 638 */         var state = this.deferredState
/* 639 */             ? this.deferredState
/* 640 */             : Ext.state.Manager.getProvider().get(this.stateId);
/* 641 */ 
/* 642 */         //check if nodeContainer ready
/* 643 */         if(this.getView().getNodeContainer()) {
/* 644 */             this.applyState(state);
/* 645 */             delete this.deferredState;
/* 646 */         } else {
/* 647 */             //delay by one sec
/* 648 */             this.deferredState = state;
/* 649 */             Ext.Function.defer(this.restoreTreeState, 1000, this);
/* 650 */         }

/* Tree.js */

/* 651 */     }
/* 652 */ 
/* 653 */     ,applyState: function (state) {
/* 654 */         if(!this.rendered || Ext.isEmpty(state)){
/* 655 */             return;
/* 656 */         }
/* 657 */ 
/* 658 */         if(!Ext.isEmpty(state.paths)) {
/* 659 */             this.expandPaths(state.paths);
/* 660 */         }
/* 661 */ 
/* 662 */         if(!Ext.isEmpty(state.selected) && (state.selected !== '/0')) {
/* 663 */             this.selectPath(
/* 664 */                 state.selected
/* 665 */                 ,'nid'
/* 666 */                 ,'/'
/* 667 */                 ,function(success, lastNode) {
/* 668 */                     //sometimes the path selection desnt succeed, probably because of non numeric ids
/* 669 */                     if(!success) {
/* 670 */                         var nid = state.selected.split('/').pop()
/* 671 */                             ,r = this.store.findRecord('nid', nid, 0, false, false, true);
/* 672 */                         if(r) {
/* 673 */                             this.getSelectionModel().select([r]);
/* 674 */                         }
/* 675 */                     }
/* 676 */                 }
/* 677 */                 ,this
/* 678 */             );
/* 679 */         }
/* 680 */     }
/* 681 */ 
/* 682 */     ,expandPaths: function(paths) {
/* 683 */         this.expandingPath = true;
/* 684 */         var expandIds = [];
/* 685 */         for (var i = 0; i < paths.length; i++) {
/* 686 */             var ids = paths[i].split('/');
/* 687 */             for (var j = 0; j < ids.length; j++) {
/* 688 */                 if(!Ext.isEmpty(ids[j]) && (expandIds.indexOf(ids[j]) < 0)) {
/* 689 */                     expandIds.push(ids[j]);
/* 690 */                 }
/* 691 */             }
/* 692 */         }
/* 693 */ 
/* 694 */         if(!Ext.isEmpty(expandIds)) {
/* 695 */             this.expandingIds = expandIds;
/* 696 */             this.recursiveExpandIds();
/* 697 */         } else {
/* 698 */             delete this.expandingPath;
/* 699 */         }
/* 700 */     }

/* Tree.js */

/* 701 */ 
/* 702 */     ,recursiveExpandIds: function() {
/* 703 */         if(Ext.isEmpty(this.expandingIds)) {
/* 704 */             delete this.expandingPath;
/* 705 */             this.enableStateSave();
/* 706 */             return;
/* 707 */         }
/* 708 */ 
/* 709 */         var id = this.expandingIds.shift()
/* 710 */             ,rec = this.store.findRecord('nid', id, 0, false, false, true);
/* 711 */             node = rec ? this.store.getNodeById(rec.get('id')) : null;
/* 712 */         if(node) {
/* 713 */             node.expand(
/* 714 */                 false
/* 715 */                 ,this.recursiveExpandIds
/* 716 */                 ,this
/* 717 */             );
/* 718 */         } else {
/* 719 */             this.recursiveExpandIds();
/* 720 */         }
/* 721 */     }
/* 722 */ 
/* 723 */     ,enableStateSave: function() {
/* 724 */         this.stateful = true;
/* 725 */         this.addStateEvents([
/* 726 */             'afteritemexpand'
/* 727 */             ,'afteritemcollapse'
/* 728 */             ,'beforedestroy'
/* 729 */             ,'selectionchange'
/* 730 */             ,'savestate'
/* 731 */         ]);
/* 732 */     }
/* 733 */ 
/* 734 */     ,onCutClick: function(b, e) {
/* 735 */         if(this.actions.cut.isDisabled()) {
/* 736 */             return;
/* 737 */         }
/* 738 */         this.onCopyClick(b, e);
/* 739 */         App.clipboard.setAction('move');
/* 740 */     }
/* 741 */ 
/* 742 */     ,onCopyClick: function(b, e) {
/* 743 */         var n = this.selModel.getSelection()[0];
/* 744 */         if(Ext.isEmpty(n) || this.actions.copy.isDisabled()) {
/* 745 */             return;
/* 746 */         }
/* 747 */ 
/* 748 */         App.clipboard.set(
/* 749 */             {
/* 750 */                 id: n.data.nid

/* Tree.js */

/* 751 */                 ,name: n.data.name
/* 752 */                 ,system: n.data.system
/* 753 */                 ,type: n.data.type
/* 754 */                 ,iconCls: n.data.iconCls
/* 755 */             }
/* 756 */             ,'copy'
/* 757 */         );
/* 758 */     }
/* 759 */     ,onPasteClick: function(b, e){
/* 760 */         var n = this.selModel.getSelection()[0];
/* 761 */         if(Ext.isEmpty(n) || this.actions.paste.isDisabled()) {
/* 762 */             return;
/* 763 */         }
/* 764 */         App.clipboard.paste(n.data.nid);
/* 765 */     }
/* 766 */ 
/* 767 */     ,onPasteShortcutClick: function(b, e){
/* 768 */         var n = this.selModel.getSelection()[0];
/* 769 */         if(Ext.isEmpty(n) || this.actions.pasteShortcut.isDisabled()) {
/* 770 */             return;
/* 771 */         }
/* 772 */         App.clipboard.paste(n.data.nid, 'shortcut');
/* 773 */     }
/* 774 */ 
/* 775 */     ,onPermissionsClick: function(b, e){
/* 776 */         var n = this.selModel.getSelection()[0];
/* 777 */         if(Ext.isEmpty(n) || this.actions.permissions.isDisabled()) {
/* 778 */             return;
/* 779 */         }
/* 780 */         App.mainViewPort.openPermissions(n.data.nid);
/* 781 */     }
/* 782 */ 
/* 783 */     ,onRenameClick: function(b, e){
/* 784 */         this.startEditing(this.getSelectionModel().getSelection()[0]);
/* 785 */     }
/* 786 */ 
/* 787 */     ,onReloadClick: function(b, e){
/* 788 */         var node = this.getSelectionModel().getSelection()[0];
/* 789 */         if(node && !node.isExpanded()) {
/* 790 */             node.expand();
/* 791 */         } else {
/* 792 */             this.store.reload({
/* 793 */                 node: node
/* 794 */             });
/* 795 */         }
/* 796 */     }
/* 797 */ 
/* 798 */     ,startEditing: function(node) {
/* 799 */         Ext.Function.defer(
/* 800 */             function(){

/* Tree.js */

/* 801 */                 this.editor.editNode = node;
/* 802 */                 this.editor.startEdit(
/* 803 */                     this.getView().getNode(node)
/* 804 */                     ,Ext.util.Format.htmlDecode(node.data.name)
/* 805 */                 );
/* 806 */             }
/* 807 */             ,10
/* 808 */             ,this
/* 809 */         );
/* 810 */     }
/* 811 */ 
/* 812 */     ,onBeforeEditComplete: function(editor, newVal, oldVal) {
/* 813 */         var n = editor.editNode;
/* 814 */         n.set('text', Ext.util.Format.htmlEncode(newVal));
/* 815 */         if(newVal === oldVal) {
/* 816 */             return;
/* 817 */         }
/* 818 */         editor.cancelEdit();
/* 819 */         this.getEl().mask(L.Processing, 'x-mask-loading');
/* 820 */ 
/* 821 */         CB_BrowserTree.rename(
/* 822 */             {
/* 823 */                 path: n.getPath('nid')
/* 824 */                 ,name: newVal
/* 825 */             }
/* 826 */             ,this.processRename
/* 827 */             ,this
/* 828 */         );
/* 829 */ 
/* 830 */         return false;
/* 831 */     }
/* 832 */ 
/* 833 */     ,processRename: function(r, e){
/* 834 */         this.getEl().unmask();
/* 835 */         if(!r || (r.success !== true)) {
/* 836 */             return;
/* 837 */         }
/* 838 */ 
/* 839 */         this.getRootNode().cascadeBy({
/* 840 */             before: function (n){
/* 841 */                 if(n.data.nid == r.data.id){
/* 842 */                     n.data.name = r.data.newName;
/* 843 */                     n.set('text', r.data.newName);
/* 844 */                 }
/* 845 */             }
/* 846 */             ,scope: this
/* 847 */         });
/* 848 */         this.fireEvent('afterrename', this, r, e);
/* 849 */     }
/* 850 */ 

/* Tree.js */

/* 851 */     ,onDeleteClick: function(b, e){
/* 852 */         Ext.Msg.confirm(
/* 853 */             L.DeleteConfirmation
/* 854 */             ,L.DeleteConfirmationMessage + ' "' + this.getSelectionModel().getSelection()[0].data.text + '"?'
/* 855 */             ,this.onDelete
/* 856 */             ,this
/* 857 */         );
/* 858 */     }
/* 859 */ 
/* 860 */     ,onDelete: function (btn) {
/* 861 */         if(btn !== 'yes') {
/* 862 */             return;
/* 863 */         }
/* 864 */ 
/* 865 */         this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 866 */         CB_BrowserTree['delete'](
/* 867 */             this.getSelectionModel().getSelection()[0].getPath('nid')
/* 868 */             ,this.processDelete
/* 869 */             ,this
/* 870 */         );
/* 871 */     }
/* 872 */ 
/* 873 */     ,processDelete: function(r, e){
/* 874 */         this.getEl().unmask();
/* 875 */         App.mainViewPort.onProcessObjectsDeleted(r, e);
/* 876 */     }
/* 877 */ 
/* 878 */     ,onObjectsDeleted: function(ids){
/* 879 */         var sm = this.getSelectionModel()
/* 880 */             ,deleteNodes = [];
/* 881 */ 
/* 882 */         this.getRootNode().cascadeBy({
/* 883 */             before: function(n){
/* 884 */                 if(ids.indexOf(n.data.nid) >= 0){
/* 885 */                     if(sm.isSelected(n)){
/* 886 */                         var nn = n.isLast()
/* 887 */                             ? (
/* 888 */                                 n.isFirst()
/* 889 */                                 ? n.parentNode
/* 890 */                                 : n.previousSibling
/* 891 */                             )
/* 892 */                             : n.nextSibling;
/* 893 */                         sm.select([nn]);
/* 894 */                     }
/* 895 */                     deleteNodes.push(n);
/* 896 */                 }
/* 897 */             }
/* 898 */             ,scope: this
/* 899 */         });
/* 900 */ 

/* Tree.js */

/* 901 */         for (var i = 0; i < deleteNodes.length; i++) {
/* 902 */             deleteNodes[i].remove(true);
/* 903 */         }
/* 904 */         /* TODO: also delete all visible nodes(links) that are links to the deleted node or any its child */
/* 905 */     }
/* 906 */ 
/* 907 */     ,onStarClick: function(b, e) {
/* 908 */         var n = this.contextMenu.node
/* 909 */             ,d = n.data
/* 910 */             ,data = {
/* 911 */                 id: d.nid
/* 912 */                 ,name: d.name
/* 913 */                 ,iconCls: d.iconCls
/* 914 */                 ,pathText: d.path
/* 915 */                 ,path: n.getPath('nid', '/')
/* 916 */             };
/* 917 */ 
/* 918 */         App.Favorites.setStarred(data);
/* 919 */     }
/* 920 */ 
/* 921 */     ,onUnstarClick: function(b, e) {
/* 922 */         App.Favorites.setUnstarred(this.contextMenu.node.data.nid);
/* 923 */     }
/* 924 */ });
/* 925 */ 

;
/* ViewContainer.js */

/* 1    */ Ext.namespace('CB.browser');
/* 2    */ 
/* 3    */ Ext.define('CB.browser.ViewContainer', {
/* 4    */     extend: 'Ext.Panel'
/* 5    */ 
/* 6    */     ,xtype: 'CBBrowserViewContainer'
/* 7    */ 
/* 8    */     ,title: 'Browser'
/* 9    */     ,iconCls: 'icon-folder'
/* 10   */     ,closable: true
/* 11   */     ,border: false
/* 12   */     ,layout:'fit'
/* 13   */     ,params: {
/* 14   */         descendants: false
/* 15   */     }
/* 16   */ 
/* 17   */     ,defaultToolbarItems: [
/* 18   */         '->'
/* 19   */         ,'reload'
/* 20   */         ,'apps'
/* 21   */         ,'-'
/* 22   */         ,'more'
/* 23   */     ]
/* 24   */ 
/* 25   */     ,initComponent: function(){
/* 26   */         var pageSize = Ext.valueFrom(App.loginData.cfg.max_rows, 50);
/* 27   */         this.instanceId = Ext.id();
/* 28   */ 
/* 29   */         this.actions = {
/* 30   */             edit: new Ext.Action({
/* 31   */                 text: L.Edit
/* 32   */                 ,itemId: 'edit'
/* 33   */                 ,scope: this
/* 34   */                 ,handler: this.onEditClick
/* 35   */             })
/* 36   */ 
/* 37   */             ,reload: new Ext.Action({
/* 38   */                 iconCls: 'im-refresh'
/* 39   */                 ,itemId: 'reload'
/* 40   */                 ,scale: 'medium'
/* 41   */                 ,tooltip: L.Reload
/* 42   */                 ,scope: this
/* 43   */                 ,handler: this.onReloadClick
/* 44   */             })
/* 45   */ 
/* 46   */             ,contextReload: new Ext.Action({
/* 47   */                 iconCls: 'icon-refresh'
/* 48   */                 ,text: L.Reload
/* 49   */                 ,scope: this
/* 50   */                 ,handler: this.onReloadClick

/* ViewContainer.js */

/* 51   */             })
/* 52   */ 
/* 53   */             ,upload: new Ext.Action({
/* 54   */                 text: L.Upload
/* 55   */                 ,itemId: 'upload'
/* 56   */                 ,scale: 'medium'
/* 57   */                 ,iconCls: 'im-upload'
/* 58   */                 ,scope: this
/* 59   */                 ,handler: this.onUploadClick
/* 60   */             })
/* 61   */ 
/* 62   */             ,download: new Ext.Action({
/* 63   */                 text: L.Download
/* 64   */                 ,itemId: 'download'
/* 65   */                 ,scale: 'medium'
/* 66   */                 ,iconCls: 'im-download'
/* 67   */                 ,hidden: true
/* 68   */                 ,disabled: true
/* 69   */                 ,hideParent: false
/* 70   */                 ,scope: this
/* 71   */                 ,handler: this.onDownloadClick
/* 72   */             })
/* 73   */ 
/* 74   */             ,contextDownload: new Ext.Action({
/* 75   */                 text: L.Download
/* 76   */                 ,iconCls: 'i-download'
/* 77   */                 ,hidden: true
/* 78   */                 ,scope: this
/* 79   */                 ,handler: this.onDownloadClick
/* 80   */             })
/* 81   */ 
/* 82   */             ,contextPreview: new Ext.Action({
/* 83   */                 text: L.Preview
/* 84   */                 ,hidden: true
/* 85   */                 ,scope: this
/* 86   */                 ,handler: this.onContextPreviewClick
/* 87   */             })
/* 88   */ 
/* 89   */             ,cut: new Ext.Action({
/* 90   */                 text: L.Cut
/* 91   */                 ,itemId: 'cut'
/* 92   */                 ,scope: this
/* 93   */                 ,disabled: true
/* 94   */                 ,handler: this.onCutClick
/* 95   */             })
/* 96   */ 
/* 97   */             ,copy: new Ext.Action({
/* 98   */                 text: L.Copy
/* 99   */                 ,itemId: 'copy'
/* 100  */                 ,scope: this

/* ViewContainer.js */

/* 101  */                 ,disabled: true
/* 102  */                 ,handler: this.onCopyClick
/* 103  */             })
/* 104  */ 
/* 105  */             ,paste: new Ext.Action({
/* 106  */                 text: L.Paste
/* 107  */                 ,itemId: 'paste'
/* 108  */                 ,scope: this
/* 109  */                 ,disabled: true
/* 110  */                 ,handler: this.onPasteClick
/* 111  */             })
/* 112  */ 
/* 113  */             ,pasteShortcut: new Ext.Action({
/* 114  */                 text: L.PasteShortcut
/* 115  */                 ,itemId: 'pasteshortcut'
/* 116  */                 ,scope: this
/* 117  */                 ,disabled: true
/* 118  */                 ,handler: this.onPasteShortcutClick
/* 119  */             })
/* 120  */ 
/* 121  */             ,'delete': new Ext.Action({
/* 122  */                 qtip: L.Delete
/* 123  */                 ,text: L.Delete
/* 124  */                 ,itemId: 'delete'
/* 125  */                 ,iconCls: 'im-trash'
/* 126  */                 ,scale: 'medium'
/* 127  */                 ,hidden: true
/* 128  */                 ,disabled: true
/* 129  */                 ,hideParent: false
/* 130  */                 ,scope: this
/* 131  */                 ,handler: this.onDeleteClick
/* 132  */             })
/* 133  */ 
/* 134  */             ,contextDelete: new Ext.Action({
/* 135  */                 text: L.Delete
/* 136  */                 ,iconCls: 'i-trash'
/* 137  */                 ,disabled: true
/* 138  */                 ,hideParent: false
/* 139  */                 ,scope: this
/* 140  */                 ,handler: this.onDeleteClick
/* 141  */             })
/* 142  */ 
/* 143  */             ,contextRename: new Ext.Action({
/* 144  */                 text: L.Rename
/* 145  */                 ,iconCls: 'i-rename'
/* 146  */                 ,scope: this
/* 147  */                 ,handler: this.onRenameClick
/* 148  */             })
/* 149  */ 
/* 150  */             ,contextExport: new Ext.Action({

/* ViewContainer.js */

/* 151  */                 iconCls: 'i-table-export'
/* 152  */                 ,text: L.Export
/* 153  */                 ,scope: this
/* 154  */                 ,handler: this.onExportClick
/* 155  */             })
/* 156  */ 
/* 157  */             ,star: new Ext.Action({
/* 158  */                 iconCls: 'i-star'
/* 159  */                 ,text: L.Star
/* 160  */                 ,scope: this
/* 161  */                 ,handler: this.onStarClick
/* 162  */             })
/* 163  */ 
/* 164  */             ,unstar: new Ext.Action({
/* 165  */                 iconCls: 'i-unstar'
/* 166  */                 ,text: L.Unstar
/* 167  */                 ,scope: this
/* 168  */                 ,handler: this.onUnstarClick
/* 169  */             })
/* 170  */ 
/* 171  */             ,restore: new Ext.Action({
/* 172  */                 text: L.Restore
/* 173  */                 ,itemId: 'restore'
/* 174  */                 ,iconCls: 'im-restore'
/* 175  */                 ,scale: 'medium'
/* 176  */                 ,hidden: true
/* 177  */                 ,disabled: true
/* 178  */                 ,hideParent: false
/* 179  */                 ,scope: this
/* 180  */                 ,handler: this.onRestoreClick
/* 181  */             })
/* 182  */ 
/* 183  */             ,permissions: new Ext.Action({
/* 184  */                 text: L.Permissions
/* 185  */                 ,itemId: 'permissions'
/* 186  */                 ,iconCls: 'icon-key'
/* 187  */                 ,scope: this
/* 188  */                 ,disabled: true
/* 189  */                 ,handler: this.onPermissionsClick
/* 190  */             })
/* 191  */ 
/* 192  */             ,preview: new Ext.Action({
/* 193  */                 itemId: 'preview'
/* 194  */                 ,scale: 'medium'
/* 195  */                 ,iconCls: 'im-preview'
/* 196  */                 ,scope: this
/* 197  */                 ,hidden: true
/* 198  */                 ,disabled: true
/* 199  */                 ,handler: this.onPreviewClick
/* 200  */             })

/* ViewContainer.js */

/* 201  */ 
/* 202  */             ,webdavlink: new Ext.Action({
/* 203  */                 text: L.WebDAVLink
/* 204  */                 ,itemId: 'webdavlink'
/* 205  */                 ,scope: this
/* 206  */                 ,handler: this.onWebDAVLinkClick
/* 207  */             })
/* 208  */ 
/* 209  */             ,permalink: new Ext.Action({
/* 210  */                 text: L.Permalink
/* 211  */                 ,itemId: 'permalink'
/* 212  */                 ,scope: this
/* 213  */                 ,handler: this.onPermalinkClick
/* 214  */             })
/* 215  */         };
/* 216  */ 
/* 217  */         this.descendantsCheckItem = Ext.create({
/* 218  */             xtype: 'menucheckitem'
/* 219  */             ,text: L.Descendants
/* 220  */             ,checked: (this.params.descendants === true)
/* 221  */             ,listeners: {
/* 222  */                 scope: this
/* 223  */                 ,checkchange: this.onDescendantsCheckChange
/* 224  */             }
/* 225  */         });
/* 226  */ 
/* 227  */         this.tbarMoreMenu = new Ext.menu.Menu({
/* 228  */             items: [
/* 229  */                 {
/* 230  */                     text: L.Rows
/* 231  */                     ,menu: [
/* 232  */                         {
/* 233  */                             xtype: 'menucheckitem'
/* 234  */                             ,text: 25
/* 235  */                             ,group: 'gvrc' //grid view row count
/* 236  */                             ,checked: (pageSize == 25)
/* 237  */                             ,scope: this
/* 238  */                             ,handler: this.onRowCountChangeClick
/* 239  */                         },{
/* 240  */                             xtype: 'menucheckitem'
/* 241  */                             ,text: 50
/* 242  */                             ,group: 'gvrc'
/* 243  */                             ,checked: (pageSize == 50)
/* 244  */                             ,scope: this
/* 245  */                             ,handler: this.onRowCountChangeClick
/* 246  */                         },{
/* 247  */                             xtype: 'menucheckitem'
/* 248  */                             ,text: 100
/* 249  */                             ,group: 'gvrc'
/* 250  */                             ,checked: (pageSize == 100)

/* ViewContainer.js */

/* 251  */                             ,scope: this
/* 252  */                             ,handler: this.onRowCountChangeClick
/* 253  */                         },{
/* 254  */                             xtype: 'menucheckitem'
/* 255  */                             ,text: 200
/* 256  */                             ,group: 'gvrc'
/* 257  */                             ,checked: (pageSize == 200)
/* 258  */                             ,scope: this
/* 259  */                             ,handler: this.onRowCountChangeClick
/* 260  */                         }
/* 261  */                     ]
/* 262  */                 }
/* 263  */                 ,this.descendantsCheckItem
/* 264  */                 ,this.actions.contextExport
/* 265  */             ]
/* 266  */         });
/* 267  */ 
/* 268  */         this.buttonCollection = new Ext.util.MixedCollection();
/* 269  */ 
/* 270  */         this.buttonCollection.addAll([
/* 271  */             new Ext.Button({
/* 272  */                 qtip: L.Views
/* 273  */                 ,itemId: 'apps'
/* 274  */                 ,arrowVisible: false
/* 275  */                 ,iconCls: 'im-apps'
/* 276  */                 ,scale: 'medium'
/* 277  */                 ,menu: []
/* 278  */             })
/* 279  */             ,new Ext.Button({
/* 280  */                 qtip: L.New
/* 281  */                 ,text: L.New
/* 282  */                 ,itemId: 'create'
/* 283  */                 ,iconCls: 'im-create'
/* 284  */                 ,disabled: true
/* 285  */                 ,scale: 'medium'
/* 286  */                 ,menu: [
/* 287  */                 ]
/* 288  */             })
/* 289  */             ,new Ext.Button(this.actions.reload)
/* 290  */             ,new Ext.Button(this.actions.upload)
/* 291  */             ,new Ext.Button(this.actions.download)
/* 292  */             ,new Ext.Button({
/* 293  */                 text: L.Clipboard
/* 294  */                 ,itemId: 'edit'
/* 295  */                 ,iconCls: 'im-assignment'
/* 296  */                 ,scale: 'medium'
/* 297  */                 ,menu: [
/* 298  */                     this.actions.cut
/* 299  */                     ,this.actions.copy
/* 300  */                     ,this.actions.paste

/* ViewContainer.js */

/* 301  */                     ,this.actions.pasteShortcut
/* 302  */                 ]
/* 303  */             })
/* 304  */             ,new Ext.Button(this.actions.preview)
/* 305  */             ,new Ext.Button(this.actions.restore)
/* 306  */             ,new Ext.Button(this.actions['delete'])
/* 307  */             ,new Ext.Button({
/* 308  */                 qtip: L.More
/* 309  */                 ,itemId: 'more'
/* 310  */                 ,arrowVisible: false
/* 311  */                 ,iconCls: 'im-points'
/* 312  */                 ,scale: 'medium'
/* 313  */                 ,menu: this.tbarMoreMenu
/* 314  */             })
/* 315  */         ]);
/* 316  */ 
/* 317  */         this.viewToolbar = new Ext.Toolbar({
/* 318  */             border: false
/* 319  */             ,style: 'background: #ffffff'
/* 320  */             ,defaults: {
/* 321  */                 scale: 'medium'
/* 322  */             }
/* 323  */             //each view should define it's custom buttons in buttonCollection
/* 324  */             //and specify buttons for diplay
/* 325  */             ,items: []
/* 326  */             ,listeners: {
/* 327  */                 scope: this
/* 328  */                 ,afterlayout: function(c) {
/* 329  */                     var ic = c.items.getCount();
/* 330  */                     for (var i = 0; i < ic; i++) {
/* 331  */                         if(c.items.getAt(i).disabled) {
/* 332  */                             c.items.getAt(i).hide();
/* 333  */                         }
/* 334  */                     }
/* 335  */                 }
/* 336  */             }
/* 337  */         });
/* 338  */ 
/* 339  */         this.objectPanel = new CB.object.ViewContainer({
/* 340  */             region: 'east'
/* 341  */             ,header: false
/* 342  */             ,width: 250
/* 343  */ 
/* 344  */             ,split: {
/* 345  */                 size: 2
/* 346  */                 ,collapsible: false
/* 347  */                 ,style: 'background-color: #dfe8f6'
/* 348  */             }
/* 349  */             ,collapsible: true
/* 350  */             ,collapseMode: 'mini'

/* ViewContainer.js */

/* 351  */ 
/* 352  */             ,stateful: true
/* 353  */             ,stateId: 'mopp' //main object properties panel
/* 354  */ 
/* 355  */             ,listeners: {
/* 356  */                 scope: this
/* 357  */                 // update right panel view on expand
/* 358  */                 // because it doesnt load anything when collapsed
/* 359  */                 ,expand: function() {
/* 360  */                     this.actions.preview.setDisabled(true);
/* 361  */                     this.actions.preview.setHidden(true);
/* 362  */                     // this.updatePreview();
/* 363  */                 }
/* 364  */                 ,collapse: function() {
/* 365  */                     this.actions.preview.setDisabled(false);
/* 366  */                     this.actions.preview.setHidden(false);
/* 367  */                 }
/* 368  */             }
/* 369  */ 
/* 370  */             ,onCloseClick: Ext.Function.bind(this.onCloseRightPanelClick, this)
/* 371  */         });
/* 372  */ 
/* 373  */ 
/* 374  */         this.store = new Ext.data.DirectStore({
/* 375  */             autoLoad: false
/* 376  */             ,autoDestroy: true
/* 377  */             ,remoteSort: true
/* 378  */             ,sortOnLoad: false
/* 379  */             ,extraParams: {}
/* 380  */             ,pageSize: pageSize
/* 381  */             ,model: 'Items'
/* 382  */             ,proxy: new  Ext.data.DirectProxy({
/* 383  */                 paramsAsHash: true
/* 384  */                 ,directFn: CB_BrowserView.getChildren
/* 385  */                 ,reader: {
/* 386  */                     type: 'json'
/* 387  */                     ,successProperty: 'success'
/* 388  */                     ,idProperty: 'nid'
/* 389  */                     ,rootProperty: 'data'
/* 390  */                     ,messageProperty: 'msg'
/* 391  */                 }
/* 392  */             })
/* 393  */ 
/* 394  */             ,loadPage: function(page, options) {
/* 395  */                 var store = this.store,
/* 396  */                 size = store.getPageSize();
/* 397  */ 
/* 398  */                 store.currentPage = page;
/* 399  */ 
/* 400  */                 // Clone options

/* ViewContainer.js */

/* 401  */                 options = Ext.apply({
/* 402  */                     page: page,
/* 403  */                     start: (page - 1) * size,
/* 404  */                     rows: size,
/* 405  */                 }, options);
/* 406  */ 
/* 407  */                 this.changeSomeParams(options);
/* 408  */             }.bind(this)
/* 409  */ 
/* 410  */             ,listeners: {
/* 411  */                 scope: this
/* 412  */                 ,beforeload: this.onBeforeStoreLoad
/* 413  */                 ,load: this.onStoreLoad
/* 414  */             }
/* 415  */         });
/* 416  */ 
/* 417  */         this.store.proxy.reader.readRecords = Ext.Function.createInterceptor(this.store.proxy.reader.readRecords, CB.DB.convertJsonReaderDates);
/* 418  */ 
/* 419  */         var getPropertyHandler = this.getProperty.bind(this);
/* 420  */ 
/* 421  */         this.cardContainer = new Ext.Panel({
/* 422  */             layout: 'card'
/* 423  */             ,activeItem: 0
/* 424  */             ,border: false
/* 425  */             // ,region: 'center'
/* 426  */             ,tbar: this.viewToolbar
/* 427  */             ,items: [
/* 428  */                 new CB.browser.view.Grid({
/* 429  */                     border: false
/* 430  */                     ,refOwner: this
/* 431  */                     ,store: this.store
/* 432  */                     ,showObjectPropertiesPanel: true
/* 433  */                     ,getProperty: getPropertyHandler
/* 434  */                 })
/* 435  */                 ,new CB.browser.view.Calendar({
/* 436  */                     border: false
/* 437  */                     ,refOwner: this
/* 438  */                     ,store: this.store
/* 439  */                     ,showFilterPanel: true
/* 440  */                     ,getProperty: getPropertyHandler
/* 441  */                     ,listeners: {
/* 442  */                         scope: this
/* 443  */                         ,openobject: this.onObjectsOpenEvent
/* 444  */                     }
/* 445  */                 })
/* 446  */                 ,new CB.browser.view.Charts({
/* 447  */                     border: false
/* 448  */                     ,refOwner: this
/* 449  */                     ,addDivider: true // forr atdding a divider in menu before this view element
/* 450  */                     ,store: this.store

/* ViewContainer.js */

/* 451  */                     ,getProperty: getPropertyHandler
/* 452  */                 })
/* 453  */                 ,new CB.browser.view.Pivot({
/* 454  */                     refOwner: this
/* 455  */                     ,border: false
/* 456  */                     ,store: this.store
/* 457  */                     ,getProperty: getPropertyHandler
/* 458  */                 })
/* 459  */                 ,new CB.browser.view.ActivityStream({
/* 460  */                     border: false
/* 461  */                     ,refOwner: this
/* 462  */                     ,store: this.store
/* 463  */                     ,showObjectPropertiesPanel: true
/* 464  */                     ,getProperty: getPropertyHandler
/* 465  */                 })
/* 466  */                 ,new CB.browser.view.Map({
/* 467  */                     border: false
/* 468  */                     ,refOwner: this
/* 469  */                     ,store: this.store
/* 470  */                     ,showObjectPropertiesPanel: false
/* 471  */                     ,getProperty: getPropertyHandler
/* 472  */                 })
/* 473  */                 ,new CB.browser.view.Dashboard({
/* 474  */                     border: false
/* 475  */                     ,refOwner: this
/* 476  */                     ,store: this.store
/* 477  */                     ,showObjectPropertiesPanel: false
/* 478  */                     ,getProperty: getPropertyHandler
/* 479  */                 })
/* 480  */             ]
/* 481  */             ,listeners: {
/* 482  */                 scope: this
/* 483  */                 ,add: function(o, c, idx) {
/* 484  */                     if(c.isXType('CBBrowserViewInterface')) {
/* 485  */                         var b = this.buttonCollection.get('apps');
/* 486  */                         if(c.addDivider === true) {
/* 487  */                             b.menu.add('-');
/* 488  */                         }
/* 489  */                         b.menu.add({
/* 490  */                             text: c.title
/* 491  */                             ,iconCls: c.iconCls
/* 492  */                             ,scope: this
/* 493  */                             ,viewIndex: idx
/* 494  */                             ,handler: this.onCardItemChangeClick
/* 495  */                         });
/* 496  */                     }
/* 497  */                 }
/* 498  */                 ,selectionchange: this.onObjectsSelectionChange
/* 499  */                 ,objectopen: this.onObjectsOpenEvent
/* 500  */             }

/* ViewContainer.js */

/* 501  */         });
/* 502  */ 
/* 503  */         this.notificationsView = new CB.notifications.View({
/* 504  */ 
/* 505  */         });
/* 506  */ 
/* 507  */         this.loadParamsTask = new Ext.util.DelayedTask(this.loadParams, this);
/* 508  */ 
/* 509  */         App.fireEvent('browserinit', this);
/* 510  */ 
/* 511  */         Ext.apply(this, {
/* 512  */             cls: 'x-panel-white'
/* 513  */             ,items: [{
/* 514  */                 layout: 'border'
/* 515  */                 ,border: false
/* 516  */                 ,tbarCssClass: 'x-panel-gray'
/* 517  */                 ,items: [
/* 518  */                     {
/* 519  */                         layout: 'card'
/* 520  */                         ,activeItem: 0
/* 521  */                         ,itemId: 'containersPanel'
/* 522  */                         ,border: false
/* 523  */                         ,region: 'center'
/* 524  */                         ,items: [
/* 525  */                             this.cardContainer
/* 526  */                             ,this.notificationsView
/* 527  */                         ]
/* 528  */                     }
/* 529  */                     ,this.objectPanel
/* 530  */                 ]
/* 531  */             }]
/* 532  */ 
/* 533  */             ,listeners: {
/* 534  */                 scope: this
/* 535  */ 
/* 536  */                 ,render: function() {
/* 537  */                     this.onSetToolbarItems(null);
/* 538  */                 }
/* 539  */ 
/* 540  */                 ,changeparams: this.changeSomeParams
/* 541  */ 
/* 542  */                 ,settoolbaritems: this.onSetToolbarItems
/* 543  */ 
/* 544  */                 ,reload: this.onReloadClick
/* 545  */ 
/* 546  */                 ,itemcontextmenu: this.onItemContextMenu
/* 547  */             }
/* 548  */         });
/* 549  */ 
/* 550  */         this.callParent(arguments);

/* ViewContainer.js */

/* 551  */ 
/* 552  */         this.containersPanel = this.items.getAt(0).items.getAt(0);
/* 553  */         this.notificationsView = this.containersPanel.items.getAt(1);
/* 554  */ 
/* 555  */         this.enableBubble([
/* 556  */             'viewloaded'
/* 557  */             ,'fileupload'
/* 558  */             ,'filedownload'
/* 559  */             ,'createobject'
/* 560  */         ]);
/* 561  */ 
/* 562  */         App.mainViewPort.on('objectsdeleted', this.onObjectsDeleted, this);
/* 563  */ 
/* 564  */         App.clipboard.on('change', this.onClipboardChange, this);
/* 565  */         App.clipboard.on('pasted', this.onClipboardAction, this);
/* 566  */ 
/* 567  */         App.on('objectsaction', this.onObjectsAction, this);
/* 568  */         App.on('objectchanged', this.onObjectChanged, this);
/* 569  */         App.on('filesuploaded', this.onClipboardAction, this);
/* 570  */     }
/* 571  */ 
/* 572  */     ,onBeforeDestroy: function(p){
/* 573  */         App.clipboard.un('change', this.onClipboardChange, this);
/* 574  */         App.clipboard.un('pasted', this.onClipboardAction, this);
/* 575  */ 
/* 576  */         App.un('objectsaction', this.onObjectsAction, this);
/* 577  */         App.un('filesuploaded', this.onClipboardAction, this);
/* 578  */     }
/* 579  */ 
/* 580  */     ,getProperty: function(propertyName){
/* 581  */         if(propertyName === 'nid') {
/* 582  */             propertyName = 'id';
/* 583  */         }
/* 584  */ 
/* 585  */         if(this.folderProperties && this.folderProperties[propertyName]) {
/* 586  */             return this.folderProperties[propertyName];
/* 587  */         }
/* 588  */ 
/* 589  */         return null;
/* 590  */     }
/* 591  */ 
/* 592  */     /**
/* 593  *|      * set tollbar items
/* 594  *|      * @param  array|null buttonsArray array of button ids, separator or spacer.
/* 595  *|      *                                 Set to null to just hide all buttons in toolbar.
/* 596  *|      * @return void
/* 597  *|      */
/* 598  */     ,onSetToolbarItems: function(buttonsArray) {
/* 599  */         if(!this.getEl().isVisible(true)) {
/* 600  */             return;

/* ViewContainer.js */

/* 601  */         }
/* 602  */         var i, b;
/* 603  */ 
/* 604  */         //suspend toolbar layout
/* 605  */         this.viewToolbar.suspendLayout = true;
/* 606  */ 
/* 607  */         //hide all buttons and remove separators
/* 608  */         while(this.viewToolbar.items.getCount() > 0) {
/* 609  */             b = this.viewToolbar.items.getAt(0);
/* 610  */             b.hide();
/* 611  */             this.viewToolbar.remove(b, b.isXType('tbseparator'));
/* 612  */         }
/* 613  */ 
/* 614  */         if(buttonsArray === null) {
/* 615  */             buttonsArray = this.defaultToolbarItems;
/* 616  */         }
/* 617  */         //add more button
/* 618  */         if(buttonsArray.indexOf('more') < 0) {
/* 619  */             buttonsArray.push('more');
/* 620  */         }
/* 621  */ 
/* 622  */         //add apps button if not present
/* 623  */         if(buttonsArray.indexOf('apps') < 0) {
/* 624  */             buttonsArray.push('apps');
/* 625  */         }
/* 626  */ 
/* 627  */         //add preview button if not present
/* 628  */         if(buttonsArray.indexOf('preview') < 0) {
/* 629  */             buttonsArray.push('preview');
/* 630  */         }
/* 631  */ 
/* 632  */         buttonsArray.splice(1, 0, 'restore');
/* 633  */ 
/* 634  */         //add plugin buttons if defined right after spacer
/* 635  */         var idx = buttonsArray.indexOf('->');
/* 636  */         if(!Ext.isEmpty(this.pluginButtons)) {
/* 637  */             for (i = 0; i < this.pluginButtons.length; i++) {
/* 638  */                 buttonsArray.splice(++idx, 0, this.pluginButtons[i]);
/* 639  */             }
/* 640  */             //add a divider
/* 641  */             buttonsArray.splice(++idx, 0, '-');
/* 642  */         }
/* 643  */ 
/* 644  */         for (i = 0; i < buttonsArray.length; i++) {
/* 645  */             if((buttonsArray[i] === '-') || (buttonsArray[i] === '->')) {
/* 646  */                 this.viewToolbar.add(buttonsArray[i]);
/* 647  */             } else {
/* 648  */                 b = this.buttonCollection.get(buttonsArray[i]);
/* 649  */                 if(b) {
/* 650  */                     this.viewToolbar.add(b);

/* ViewContainer.js */

/* 651  */                     if(!b.disabled) {
/* 652  */                         b.show();
/* 653  */                     }
/* 654  */                 }
/* 655  */             }
/* 656  */         }
/* 657  */ 
/* 658  */         this.updateToolbarButtons();
/* 659  */         this.viewToolbar.hideInutilSeparators();
/* 660  */ 
/* 661  */         //resume toolbar layout
/* 662  */         this.viewToolbar.suspendLayout = false;
/* 663  */ 
/* 664  */         this.viewToolbar.doLayout();
/* 665  */     }
/* 666  */ 
/* 667  */     ,onCardItemChangeClick: function(b, e) {
/* 668  */         delete this.params.view;
/* 669  */         delete this.params.start;
/* 670  */         delete this.params.page;
/* 671  */ 
/* 672  */         this.onSetToolbarItems(null);
/* 673  */ 
/* 674  */         this.setActiveView(b.viewIndex);
/* 675  */ 
/* 676  */         //set a flag that user have set the view and dont change the view on store load
/* 677  */         this.userViewSet = true;
/* 678  */ 
/* 679  */         this.store.clearing = true;
/* 680  */         this.store.removeAll();
/* 681  */ 
/* 682  */         this.onReloadClick();
/* 683  */     }
/* 684  */ 
/* 685  */     ,onReloadClick: function(){
/* 686  */         var av = this.getActiveView();
/* 687  */ 
/* 688  */         if(av.onContainerReloadClick) {
/* 689  */             av.onContainerReloadClick(this.params);
/* 690  */         }
/* 691  */ 
/* 692  */         if(Ext.isEmpty(this.reloadTask)) {
/* 693  */             this.reloadTask = new Ext.util.DelayedTask(this.reloadView, this);
/* 694  */         }
/* 695  */         this.reloadTask.delay(100);
/* 696  */     }
/* 697  */ 
/* 698  */     ,getActiveView: function() {
/* 699  */         return this.cardContainer.getLayout().activeItem;
/* 700  */     }

/* ViewContainer.js */

/* 701  */ 
/* 702  */     /**
/* 703  *|      * change active view
/* 704  *|      * @param variant indexOrName
/* 705  *|      *
/* 706  *|      * @return activated component
/* 707  *|      */
/* 708  */     ,setActiveView: function(indexOrName, viewParams) {
/* 709  */         var layout = this.cardContainer.getLayout()
/* 710  */             ,rez = null;
/* 711  */ 
/* 712  */         if(Ext.isNumeric(indexOrName)) {
/* 713  */             rez = this.cardContainer.items.getAt(indexOrName);
/* 714  */ 
/* 715  */         } else {
/* 716  */             var viewName = 'CBBrowserView' + Ext.util.Format.capitalize(indexOrName);
/* 717  */ 
/* 718  */             this.cardContainer.items.each(
/* 719  */                 function(i, idx) {
/* 720  */                     if(i.getXType() == viewName) {
/* 721  */                         rez = i;
/* 722  */                     }
/* 723  */                 }
/* 724  */                 ,this
/* 725  */             );
/* 726  */         }
/* 727  */ 
/* 728  */         if(!Ext.isEmpty(rez)) {
/* 729  */             if(rez !== layout.activeItem) {
/* 730  */                 if(viewParams) {
/* 731  */                     rez.viewParams = viewParams;
/* 732  */                 }
/* 733  */ 
/* 734  */                 rez = layout.setActiveItem(rez);
/* 735  */ 
/* 736  */                 //check if need to show objectPanel for selected view
/* 737  */                 var showObjPanel = (
/* 738  */                         rez &&
/* 739  */                         (rez.showObjectPropertiesPanel === true)
/* 740  */                     )
/* 741  */                     ,showPreviewButton = showObjPanel && (this.objectPanel.getCollapsed() !== false);
/* 742  */ 
/* 743  */                 this.actions.preview.setDisabled(!showPreviewButton);
/* 744  */                 this.actions.preview.setHidden(!showPreviewButton);
/* 745  */                 this.objectPanel.setVisible(showObjPanel);
/* 746  */ 
/* 747  */                 App.mainViewPort.onToggleFilterPanelClick({
/* 748  */                     pressed: (rez.showFilterPanel === true)
/* 749  */                 });
/* 750  */             }

/* ViewContainer.js */

/* 751  */         }
/* 752  */ 
/* 753  */         return rez;
/* 754  */     }
/* 755  */ 
/* 756  */     ,reloadView: function(){
/* 757  */         this.store.load(this.params);
/* 758  */     }
/* 759  */ 
/* 760  */     ,processLoadedParams: function () {
/* 761  */         var result = Ext.valueFrom(this.store.proxy.reader.rawData, {});
/* 762  */         var ep = this.store.proxy.extraParams;
/* 763  */ 
/* 764  */         this.path = ep.path;
/* 765  */         this.folderProperties = Ext.apply({}, result.folderProperties);
/* 766  */ 
/* 767  */         this.folderProperties.system = parseInt(this.folderProperties.system, 10);
/* 768  */         this.folderProperties.type = parseInt(this.folderProperties.type, 10);
/* 769  */         this.folderProperties.pathtext = result.pathtext;
/* 770  */ 
/* 771  */         //switch from NotificationView if active
/* 772  */         if(!this.isRequestFromObjectChange) {
/* 773  */             this.containersPanel.setActiveItem(this.cardContainer);
/* 774  */             var proxy = this.store.proxy;
/* 775  */             App.controller.onVCViewLoaded(
/* 776  */                 proxy
/* 777  */                 ,Ext.valueFrom(proxy.reader.rawData, {})
/* 778  */                 ,proxy.extraParams
/* 779  */             );
/* 780  */         } else {
/* 781  */             delete this.isRequestFromObjectChange;
/* 782  */         }
/* 783  */ 
/* 784  */         this.descendantsCheckItem.setChecked(ep.descendants === true, true);
/* 785  */ 
/* 786  */         /* change view if set in params */
/* 787  */         if(!this.userViewSet) {
/* 788  */             //view came from laoded data
/* 789  */             if(!Ext.isEmpty(result.view)) {
/* 790  */                 if(Ext.isPrimitive(result.view)) {
/* 791  */                     result.view = {type: result.view};
/* 792  */                 }
/* 793  */                 this.setActiveView(result.view.type, result.view);
/* 794  */             } else {
/* 795  */                 // check if view not set on client params
/* 796  */                 if(this.params && this.params.view) {
/* 797  */                     this.setActiveView(this.params.view);
/* 798  */                 } else {
/* 799  */                     this.setActiveView('grid');
/* 800  */                 }

/* ViewContainer.js */

/* 801  */             }
/* 802  */         }
/* 803  */ 
/* 804  */         /* end of change view if set in loaded params */
/* 805  */ 
/* 806  */         this.fireEvent('viewloaded', this.store.proxy, result, ep);
/* 807  */ 
/* 808  */         this.updateCreateMenuItems(this.buttonCollection.get('create'));
/* 809  */ 
/* 810  */         this.updateToolbarButtons();
/* 811  */ 
/* 812  */         var showPreviewButton = (
/* 813  */                 (this.objectPanel.getCollapsed() !== false) &&
/* 814  */                 (this.getActiveView().showObjectPropertiesPanel === true)
/* 815  */             )
/* 816  */             ,pa = this.actions.preview;
/* 817  */ 
/* 818  */         pa.setDisabled(!showPreviewButton);
/* 819  */         pa.setHidden(!showPreviewButton);
/* 820  */ 
/* 821  */         if(App.mainFilterPanel) {
/* 822  */             App.mainFilterPanel.updateFacets(result.facets, ep);
/* 823  */         }
/* 824  */     }
/* 825  */ 
/* 826  */     ,onBeforeStoreLoad: function(store, operation, eOpts) {
/* 827  */         var options = {facets: 'general'};
/* 828  */ 
/* 829  */         Ext.apply(options, Ext.valueFrom(this.params, {}));
/* 830  */ 
/* 831  */         //dont load calendar view when view bound are not set
/* 832  */         var vp = this.getActiveView().getViewParams(options);
/* 833  */         if ((vp === false) ||
/* 834  */             (
/* 835  */                 !Ext.isEmpty(vp) && (vp.from === 'calendar') &&
/* 836  */                 (Ext.isEmpty(vp.dateStart) || Ext.isEmpty(vp.dateEnd))
/* 837  */         )) {
/* 838  */             return false;
/* 839  */         }
/* 840  */ 
/* 841  */         Ext.apply(options, vp);
/* 842  */ 
/* 843  */         //workaround to set from param for search by template
/* 844  */         if(this.params && this.params.from && (this.params.from !== 'tree')) {
/* 845  */             options.from = this.params.from;
/* 846  */         }
/* 847  */ 
/* 848  */ 
/* 849  */         //reset userViewSet flag if loaded id changed
/* 850  */         var ep = store.proxy.extraParams

/* ViewContainer.js */

/* 851  */             ,lastSearchId = false
/* 852  */             ,currentSearchId = false;
/* 853  */ 
/* 854  */         if(ep.search && ep.search.template_id) {
/* 855  */             lastSearchId = ep.search.template_id;
/* 856  */         }
/* 857  */ 
/* 858  */         if(options.search && options.search.template_id) {
/* 859  */             currentSearchId = options.search.template_id;
/* 860  */         }
/* 861  */ 
/* 862  */         if((ep.id != options.id) ||
/* 863  */             (lastSearchId != currentSearchId)
/* 864  */         ) {
/* 865  */             delete this.userViewSet;
/* 866  */ 
/* 867  */             //delete also calendar view bounds
/* 868  */             delete options.dateStart;
/* 869  */             delete options.dateEnd;
/* 870  */ 
/* 871  */         } else if(this.userViewSet) {
/* 872  */             options.userViewChange = true;
/* 873  */         }
/* 874  */ 
/* 875  */         var page = Ext.valueFrom(options.page, 1);
/* 876  */         store.currentPage = page;
/* 877  */         options.page = page;
/* 878  */ 
/* 879  */         if(!Ext.isDefined(options.start)) {
/* 880  */             options.start = (page - 1) * store.pageSize;
/* 881  */         }
/* 882  */ 
/* 883  */         store.proxy.extraParams = options;
/* 884  */     }
/* 885  */ 
/* 886  */     ,onStoreLoad: function(store, recs, options) {
/* 887  */         this.getEl().unmask();
/* 888  */ 
/* 889  */         delete store.clearing;
/* 890  */ 
/* 891  */         delete this.params.setMaxRows;
/* 892  */ 
/* 893  */         //update interface according to loaded params
/* 894  */         this.processLoadedParams();
/* 895  */ 
/* 896  */         //set icons for all records
/* 897  */         Ext.each(
/* 898  */             recs
/* 899  */             ,function(r){
/* 900  */                 var cfg = Ext.valueFrom(r.get('cfg'), {});

/* ViewContainer.js */

/* 901  */                 r.data.iconCls = Ext.isEmpty(cfg.iconCls)
/* 902  */                     ? getItemIcon(r.data)
/* 903  */                     : cfg.iconCls;
/* 904  */             }
/* 905  */             ,this
/* 906  */         );
/* 907  */     }
/* 908  */ 
/* 909  */     ,sameParams: function(params1, params2){
/* 910  */         if(Ext.isEmpty(params1) && Ext.isEmpty(params2)) {
/* 911  */             return true;
/* 912  */         }
/* 913  */ 
/* 914  */         if(Ext.isEmpty(params1)) {
/* 915  */             params1 = {};
/* 916  */         }
/* 917  */ 
/* 918  */         if(Ext.isEmpty(params2)) {
/* 919  */             params2 = {};
/* 920  */         }
/* 921  */ 
/* 922  */         var path1 = Ext.valueFrom(params1.path, '')
/* 923  */             ,path2 = Ext.valueFrom(params2.path, '');
/* 924  */ 
/* 925  */         while ((path1.length > 0) && (path1[0] === '/')) {
/* 926  */             path1 = path1.substr(1);
/* 927  */         }
/* 928  */ 
/* 929  */         while ((path2.length > 0) && (path2[0] === '/')) {
/* 930  */             path2 = path2.substr(1);
/* 931  */         }
/* 932  */ 
/* 933  */         if ((params1.path != params2.path) || !Ext.isDefined(params1.path) ) {
/* 934  */             return false;
/* 935  */         }
/* 936  */ 
/* 937  */         if ((Ext.Number.from(params1.start, 0) != Ext.Number.from(params2.start, 0))) {
/* 938  */             return false;
/* 939  */         }
/* 940  */ 
/* 941  */         if ((Ext.Number.from(params1.page, 0) != Ext.Number.from(params2.page, 0))) {
/* 942  */             return false;
/* 943  */         }
/* 944  */ 
/* 945  */         if ((!Ext.isEmpty(params1.descendants) || !Ext.isEmpty(params2.descendants)) && (params1.descendants != params2.descendants)) {
/* 946  */             return false;
/* 947  */         }
/* 948  */ 
/* 949  */         if ((!Ext.isEmpty(params1.query) || !Ext.isEmpty(params2.query)) && (params1.query != params2.query)) {
/* 950  */             return false;

/* ViewContainer.js */

/* 951  */         }
/* 952  */ 
/* 953  */         if ((!Ext.isEmpty(params1.filters) || !Ext.isEmpty(params2.filters)) && (params1.filters != params2.filters)) {
/* 954  */             return false;
/* 955  */         }
/* 956  */ 
/* 957  */         if ((!Ext.isEmpty(params1.dateStart) || !Ext.isEmpty(params2.dateStart)) && (params1.dateStart != params2.dateStart)) {
/* 958  */             return false;
/* 959  */         }
/* 960  */ 
/* 961  */         if ((!Ext.isEmpty(params1.dateEnd) || !Ext.isEmpty(params2.dateEnd)) && (params1.dateEnd != params2.dateEnd)) {
/* 962  */             return false;
/* 963  */         }
/* 964  */ 
/* 965  */         if ((!Ext.isEmpty(params1.view) || !Ext.isEmpty(params2.view)) && (params1.view != params2.view)) {
/* 966  */             return false;
/* 967  */         }
/* 968  */ 
/* 969  */         if ((!Ext.isEmpty(params1.search) || !Ext.isEmpty(params2.search)) && (Ext.encode(params1.search) != Ext.encode(params2.search))) {
/* 970  */             return false;
/* 971  */         }
/* 972  */ 
/* 973  */         return true;
/* 974  */     }
/* 975  */ 
/* 976  */     // fired by internal view
/* 977  */     ,changeParams: function(params, e){
/* 978  */         if(e && e.stopPropagation) {
/* 979  */             e.stopPropagation();
/* 980  */         }
/* 981  */ 
/* 982  */         this.setParams(params);
/* 983  */     }
/* 984  */ 
/* 985  */     ,changeSomeParams: function(paramsSubset){
/* 986  */         var p = Ext.apply({}, this.params);
/* 987  */ 
/* 988  */         if(!Ext.isDefined(paramsSubset.start)) {
/* 989  */             if(Ext.isDefined(paramsSubset.page)) {
/* 990  */                 paramsSubset.start = (paramsSubset.page -1) * this.store.pageSize;
/* 991  */             } else {
/* 992  */                 paramsSubset.page = 1;
/* 993  */                 paramsSubset.start = 0;
/* 994  */             }
/* 995  */         }
/* 996  */ 
/* 997  */         //reset userViewSet flag if a view is given
/* 998  */         if(!Ext.isEmpty(paramsSubset.view)) {
/* 999  */             delete this.userViewSet;
/* 1000 */         }

/* ViewContainer.js */

/* 1001 */ 
/* 1002 */         Ext.apply(p, paramsSubset);
/* 1003 */         this.setParams(p);
/* 1004 */     }
/* 1005 */ 
/* 1006 */     ,setParams: function(params){
/* 1007 */         while(!Ext.isEmpty(params.path) && (params.path[0] === '/')) {
/* 1008 */             params.path = params.path.substr(1);
/* 1009 */         }
/* 1010 */ 
/* 1011 */         while(!Ext.isEmpty(params.path) && (params.path[params.path.length -1] === '/')) {
/* 1012 */             params.path = params.path.substr(0, params.path.length -1);
/* 1013 */         }
/* 1014 */ 
/* 1015 */         if(Ext.isEmpty(params.path)) {
/* 1016 */             params.path = '/';
/* 1017 */         }
/* 1018 */ 
/* 1019 */         if(!Ext.isEmpty(this.params.query)) {
/* 1020 */             params.lastQuery = this.params.query;
/* 1021 */         } else if(!Ext.isEmpty(this.params.search)) {
/* 1022 */             params.lastQuery = this.params.search;
/* 1023 */         }
/* 1024 */ 
/* 1025 */         var newParams = Ext.decode(Ext.encode(params));
/* 1026 */         var sameParams = this.sameParams(
/* 1027 */             this.params
/* 1028 */             ,newParams
/* 1029 */         );
/* 1030 */ 
/* 1031 */         this.loadParamsTask.cancel();
/* 1032 */ 
/* 1033 */         this.requestParams = newParams;
/* 1034 */ 
/* 1035 */         this.loadParamsTask.delay(100);
/* 1036 */     }
/* 1037 */ 
/* 1038 */     ,loadParams: function(){
/* 1039 */         //check if not same params as previous request
/* 1040 */         if(Ext.isEmpty(this.requestParams.forceLoad) && this.sameParams(this.params, this.requestParams)) {
/* 1041 */             this.containersPanel.setActiveItem(this.cardContainer);
/* 1042 */             return;
/* 1043 */         }
/* 1044 */ 
/* 1045 */         this.params = Ext.clone(this.requestParams);
/* 1046 */ 
/* 1047 */         delete this.requestParams;
/* 1048 */ 
/* 1049 */         delete this.params.forceLoad;
/* 1050 */ 

/* ViewContainer.js */

/* 1051 */         this.reloadView();
/* 1052 */     }
/* 1053 */ 
/* 1054 */     ,updateCreateMenuItems: function(menuButton) {
/* 1055 */         var menu = this.folderProperties
/* 1056 */             ? this.folderProperties.menu
/* 1057 */             : [];
/* 1058 */ 
/* 1059 */         updateMenu(
/* 1060 */             menuButton
/* 1061 */             ,menu
/* 1062 */             ,this.onCreateObjectClick
/* 1063 */             ,this
/* 1064 */         );
/* 1065 */ 
/* 1066 */         menuButton.setDisabled(menuButton.menu.items.getCount() < 1);
/* 1067 */     }
/* 1068 */ 
/* 1069 */     ,updateToolbarButtons: function() {
/* 1070 */         var ai = this.getActiveView()
/* 1071 */             ,selection = ai.getSelectedItems
/* 1072 */                 ? ai.getSelectedItems()
/* 1073 */                 : []
/* 1074 */             ,fp = Ext.valueFrom(this.folderProperties, {})
/* 1075 */             ,acceptChildren = CB.DB.templates.acceptChildren(fp.template_id)
/* 1076 */             ,inRecycleBin = this.inRecycleBin()
/* 1077 */             ,inGridView = ai.isXType('CBBrowserViewGrid')
/* 1078 */             ,inSearchMode = !Ext.isEmpty(this.params.query);
/* 1079 */ 
/* 1080 */         this.actions.restore.setHidden(!inRecycleBin || !inGridView);
/* 1081 */         this.actions.restore.setDisabled(!inRecycleBin || !inGridView || Ext.isEmpty(selection));
/* 1082 */ 
/* 1083 */         this.actions.upload.setHidden(
/* 1084 */             !acceptChildren ||
/* 1085 */             inRecycleBin ||
/* 1086 */             !inGridView ||
/* 1087 */             inSearchMode
/* 1088 */         );
/* 1089 */         this.buttonCollection.get(
/* 1090 */             'create'
/* 1091 */         ).setVisible(!inRecycleBin && inGridView);
/* 1092 */ 
/* 1093 */         this.buttonCollection.get(
/* 1094 */             'edit'
/* 1095 */         ).setVisible(!inRecycleBin && inGridView);
/* 1096 */ 
/* 1097 */         this.buttonCollection.get(
/* 1098 */             'more'
/* 1099 */         ).setVisible(inGridView);
/* 1100 */ 

/* ViewContainer.js */

/* 1101 */         if(Ext.isEmpty(selection)) {
/* 1102 */             this.actions.edit.setDisabled(true);
/* 1103 */             this.actions.cut.setDisabled(true);
/* 1104 */             this.actions.copy.setDisabled(true);
/* 1105 */ 
/* 1106 */             this.actions.download.setDisabled(true);
/* 1107 */             this.actions.download.hide();
/* 1108 */             this.actions.contextPreview.setDisabled(true);
/* 1109 */             this.actions.contextPreview.hide();
/* 1110 */             this.actions.contextDownload.setDisabled(true);
/* 1111 */             this.actions.contextDownload.hide();
/* 1112 */ 
/* 1113 */             this.actions['delete'].setDisabled(true);
/* 1114 */             this.actions['delete'].hide();
/* 1115 */             this.actions.contextDelete.setDisabled(true);
/* 1116 */ 
/* 1117 */             this.actions.webdavlink.setDisabled(true);
/* 1118 */             this.actions.webdavlink.hide();
/* 1119 */ 
/* 1120 */             this.actions.permalink.setDisabled(true);
/* 1121 */             this.actions.permalink.hide();
/* 1122 */ 
/* 1123 */             this.actions.restore.setDisabled(true);
/* 1124 */             this.actions.restore.hide();
/* 1125 */             this.actions.permissions.setDisabled(isNaN(fp.id));
/* 1126 */ 
/* 1127 */         } else {
/* 1128 */             var firstObjId = Ext.valueFrom(selection[0].nid, selection[0].id)
/* 1129 */                 ,firstObjType = CB.DB.templates.getType(selection[0].template_id)
/* 1130 */                 ,firstFileEditor = (firstObjType === 'file')
/* 1131 */                     ? detectFileEditor(selection[0].name)
/* 1132 */                     : false;
/* 1133 */ 
/* 1134 */             this.actions.cut.setDisabled(false);
/* 1135 */             this.actions.copy.setDisabled(false);
/* 1136 */ 
/* 1137 */             this.actions.edit.setDisabled(
/* 1138 */                 (firstObjType === 'file') &&
/* 1139 */                 (firstFileEditor === false)
/* 1140 */             );
/* 1141 */ 
/* 1142 */             this.actions.contextPreview.setDisabled(false);
/* 1143 */             this.actions.contextPreview.show();
/* 1144 */ 
/* 1145 */             var canDownload = true;
/* 1146 */             for (var i = 0; i < selection.length; i++) {
/* 1147 */                 if(CB.DB.templates.getType(selection[i].template_id) !== 'file') {
/* 1148 */                     canDownload = false;
/* 1149 */                 }
/* 1150 */             }

/* ViewContainer.js */

/* 1151 */ 
/* 1152 */             this.actions.download.setDisabled(!canDownload);
/* 1153 */             this.actions.contextDownload.setDisabled(!canDownload);
/* 1154 */ 
/* 1155 */             if(canDownload) {
/* 1156 */                 this.actions.download.show();
/* 1157 */                 this.actions.contextDownload.show();
/* 1158 */             } else {
/* 1159 */                 this.actions.download.hide();
/* 1160 */                 this.actions.contextDownload.hide();
/* 1161 */             }
/* 1162 */ 
/* 1163 */             this.actions['delete'].setDisabled(inRecycleBin);
/* 1164 */             this.actions.contextDelete.setDisabled(inRecycleBin);
/* 1165 */ 
/* 1166 */             this.actions.webdavlink.setDisabled(firstObjType !== 'file');
/* 1167 */             this.actions.webdavlink.setHidden(firstObjType !== 'file' || (firstFileEditor !== 'webdav'));
/* 1168 */ 
/* 1169 */             if(!inRecycleBin && inGridView) {
/* 1170 */                 this.actions['delete'].show();
/* 1171 */             }
/* 1172 */ 
/* 1173 */             this.actions.permissions.setDisabled(isNaN(firstObjId));
/* 1174 */         }
/* 1175 */ 
/* 1176 */         this.viewToolbar.hideInutilSeparators();
/* 1177 */     }
/* 1178 */ 
/* 1179 */     ,onRowCountChangeClick: function(b, e) {
/* 1180 */         // b.setChecked(true);
/* 1181 */ 
/* 1182 */         this.params.setMaxRows = true;
/* 1183 */         this.params.rows = b.text;
/* 1184 */         this.store.setPageSize(b.text);
/* 1185 */         this.store.reload();
/* 1186 */     }
/* 1187 */ 
/* 1188 */     /**
/* 1189 *|      * return current vew selection
/* 1190 *|      * @return array | null
/* 1191 *|      */
/* 1192 */     ,getSelection: function() {
/* 1193 */         return this.getActiveView().currentSelection;
/* 1194 */     }
/* 1195 */ 
/* 1196 */     ,getSelectionIds: function() {
/* 1197 */         var rez = []
/* 1198 */             ,selection = this.getSelection();
/* 1199 */ 
/* 1200 */         if(!Ext.isEmpty(selection)) {

/* ViewContainer.js */

/* 1201 */             for (var i = 0; i < selection.length; i++) {
/* 1202 */                 rez.push(selection[i].nid);
/* 1203 */             }
/* 1204 */         }
/* 1205 */ 
/* 1206 */         return rez;
/* 1207 */     }
/* 1208 */ 
/* 1209 */     ,onObjectsSelectionChange: function(objectsDataArray){
/* 1210 */         this.getActiveView().currentSelection = objectsDataArray;
/* 1211 */         this.updateToolbarButtons();
/* 1212 */     }
/* 1213 */ 
/* 1214 */     /**
/* 1215 *|      * detect if current loaded path is in recycle bin
/* 1216 *|      * @return boolean
/* 1217 *|      */
/* 1218 */     ,inRecycleBin: function() {
/* 1219 */         return (String(Ext.valueFrom(this.folderProperties, {}).path).indexOf('-recycleBin') > -1);
/* 1220 */     }
/* 1221 */ 
/* 1222 */     ,editObject: function(objectData) {
/* 1223 */         this.objectPanel.edit(objectData);
/* 1224 */     }
/* 1225 */ 
/* 1226 */     ,onObjectsOpenEvent: function(objectData, e) {
/* 1227 */         if(e && e.stopEvent) {
/* 1228 */             e.stopEvent();
/* 1229 */         }
/* 1230 */ 
/* 1231 */         var data = Ext.apply({}, objectData)
/* 1232 */             ,templateType = CB.DB.templates.getType(data.template_id);
/* 1233 */ 
/* 1234 */         if(!Ext.isEmpty(data.nid)) {
/* 1235 */             data.id = data.nid;
/* 1236 */         }
/* 1237 */ 
/* 1238 */         if(templateType === 'file') {
/* 1239 */             switch(detectFileEditor(data.name)) {
/* 1240 */                 case 'text':
/* 1241 */                 case 'html':
/* 1242 */                     // open directly in edit mode
/* 1243 */                     data.view = 'edit';
/* 1244 */ 
/* 1245 */                 default:
/* 1246 */                     App.openObjectWindow(data);
/* 1247 */                     break;
/* 1248 */             }
/* 1249 */ 
/* 1250 */             return;

/* ViewContainer.js */

/* 1251 */         } else {
/* 1252 */             //check if leaf set in template config and open edit if so
/* 1253 */             var cfg = CB.DB.templates.getProperty(data.template_id, 'cfg');
/* 1254 */ 
/* 1255 */             if(cfg && (cfg.leaf === true)) {
/* 1256 */                 data.view = 'edit';
/* 1257 */                 App.openObjectWindow(data);
/* 1258 */ 
/* 1259 */                 return;
/* 1260 */             }
/* 1261 */         }
/* 1262 */ 
/* 1263 */         // if not opened object window then browse inside the item
/* 1264 */         var path = this.folderProperties.path;
/* 1265 */         if(path.substr(-1, 1) !== '/') {
/* 1266 */             path += '/';
/* 1267 */         }
/* 1268 */         path += data.nid;
/* 1269 */ 
/* 1270 */         //targetPath set by Favorites class
/* 1271 */         path = Ext.valueFrom(objectData.targetPath, path);
/* 1272 */ 
/* 1273 */         this.changeSomeParams({
/* 1274 */             path: path
/* 1275 */             ,query: null
/* 1276 */             ,descendants: false
/* 1277 */             ,search: null
/* 1278 */         });
/* 1279 */     }
/* 1280 */ 
/* 1281 */     ,onFiltersChange: function(filters){
/* 1282 */         this.changeSomeParams({filters: filters});
/* 1283 */     }
/* 1284 */ 
/* 1285 */     ,onSearchQuery: function(query, e){
/* 1286 */         this.changeSomeParams({query: query});
/* 1287 */     }
/* 1288 */ 
/* 1289 */     ,onSetOwnerClick: function(b, e) {
/* 1290 */         var ids = this.getSelectionIds();
/* 1291 */ 
/* 1292 */         if(!Ext.isEmpty(ids)) {
/* 1293 */             CB_Objects.setOwnership(
/* 1294 */                 {
/* 1295 */                     ids: ids
/* 1296 */                     ,userId: b.userId
/* 1297 */                 }
/* 1298 */                 ,this.processSetOwnership
/* 1299 */                 ,this
/* 1300 */             );

/* ViewContainer.js */

/* 1301 */         }
/* 1302 */     }
/* 1303 */ 
/* 1304 */     ,processSetOwnership: function(r, e) {
/* 1305 */         if(r && r.success) {
/* 1306 */             this.onReloadClick();
/* 1307 */         }
/* 1308 */     }
/* 1309 */ 
/* 1310 */     ,onCreateObjectClick: function(b, e) {
/* 1311 */         var ep = this.store.proxy.extraParams
/* 1312 */             ,fp = Ext.valueFrom(this.folderProperties, {});
/* 1313 */ 
/* 1314 */         Ext.apply(
/* 1315 */             b.config.data
/* 1316 */             ,{
/* 1317 */                 pid: fp.id
/* 1318 */                 ,pids: fp.path
/* 1319 */                 ,path: fp.pathtext
/* 1320 */             }
/* 1321 */         );
/* 1322 */ 
/* 1323 */         //add search param if creating over search result
/* 1324 */         if(ep.search) {
/* 1325 */             b.config.data.search = ep.search;
/* 1326 */         }
/* 1327 */ 
/* 1328 */         this.fireEvent('createobject', Ext.clone(b.config.data));
/* 1329 */     }
/* 1330 */ 
/* 1331 */     ,onUploadClick: function(b, e) {
/* 1332 */         this.fireEvent(
/* 1333 */             'fileupload'
/* 1334 */             ,{
/* 1335 */                 pid: Ext.valueFrom(this.folderProperties.id, this.folderProperties.path)
/* 1336 */                 ,uploadType: b.config.uploadType
/* 1337 */             }
/* 1338 */             ,e
/* 1339 */         );
/* 1340 */     }
/* 1341 */ 
/* 1342 */     ,onDownloadClick: function(b, e) {
/* 1343 */         var ids = this.getSelectionIds();
/* 1344 */ 
/* 1345 */         if(!Ext.isEmpty(ids)) {
/* 1346 */             this.fireEvent('filedownload', ids, false, e);
/* 1347 */         }
/* 1348 */     }
/* 1349 */ 
/* 1350 */     ,onContextPreviewClick: function(b, e) {

/* ViewContainer.js */

/* 1351 */         var ids = [];
/* 1352 */         var selection = this.getSelection();
/* 1353 */         if(Ext.isEmpty(selection)) {
/* 1354 */             return;
/* 1355 */         }
/* 1356 */ 
/* 1357 */         var data = Ext.clone(selection[0]);
/* 1358 */         data.id = data.nid;
/* 1359 */ 
/* 1360 */         App.openObjectWindow(data);
/* 1361 */     }
/* 1362 */ 
/* 1363 */     ,onDeleteClick: function(b, e) {
/* 1364 */         var selection = this.getSelection();
/* 1365 */ 
/* 1366 */         if(Ext.isEmpty(selection)) {
/* 1367 */             return;
/* 1368 */         }
/* 1369 */ 
/* 1370 */ 
/* 1371 */         if(selection[0].isFavorite === true) {
/* 1372 */             this.onUnstarClick();
/* 1373 */             this.onReloadClick();
/* 1374 */ 
/* 1375 */         } else {
/* 1376 */             this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 1377 */ 
/* 1378 */             CB.browser.Actions.deleteSelection(
/* 1379 */                 selection
/* 1380 */                 ,this.processDelete
/* 1381 */                 ,this
/* 1382 */             );
/* 1383 */         }
/* 1384 */     }
/* 1385 */ 
/* 1386 */     ,processDelete: function(r, e){
/* 1387 */         this.getEl().unmask();
/* 1388 */     }
/* 1389 */ 
/* 1390 */     ,onObjectsDeleted: function(ids, e) {
/* 1391 */         this.store.deleteIds(ids);
/* 1392 */     }
/* 1393 */ 
/* 1394 */     ,onRenameClick: function(b, e) {
/* 1395 */         this.getActiveView().onRenameClick(b, e);
/* 1396 */     }
/* 1397 */ 
/* 1398 */     ,onRestoreClick: function() {
/* 1399 */         var ids = this.getSelectionIds();
/* 1400 */ 

/* ViewContainer.js */

/* 1401 */         if(!Ext.isEmpty(ids)) {
/* 1402 */             this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 1403 */ 
/* 1404 */             CB_Browser.restore(ids, this.processRestore, this);
/* 1405 */         }
/* 1406 */     }
/* 1407 */ 
/* 1408 */     ,processRestore: function(r, e) {
/* 1409 */         this.getEl().unmask();
/* 1410 */ 
/* 1411 */         if(!r || (r.success !== true)) {
/* 1412 */             Ext.Msg.alert(L.ErrorOccured);
/* 1413 */             return;
/* 1414 */         }
/* 1415 */ 
/* 1416 */         this.onReloadClick();
/* 1417 */     }
/* 1418 */ 
/* 1419 */     ,onCutClick: function(buttonOrKey, e) {
/* 1420 */         if(this.actions.cut.isDisabled()) {
/* 1421 */             return;
/* 1422 */         }
/* 1423 */         this.onCopyClick(buttonOrKey, e);
/* 1424 */         App.clipboard.setAction('move');
/* 1425 */     }
/* 1426 */ 
/* 1427 */     ,onCopyClick: function(buttonOrKey, e) {
/* 1428 */         if(this.actions.copy.isDisabled()) {
/* 1429 */             return;
/* 1430 */         }
/* 1431 */ 
/* 1432 */         var rez = []
/* 1433 */             ,selection = this.getSelection();
/* 1434 */ 
/* 1435 */         if(Ext.isEmpty(selection)) {
/* 1436 */             return;
/* 1437 */         }
/* 1438 */ 
/* 1439 */ 
/* 1440 */         for (var i = 0; i < selection.length; i++) {
/* 1441 */             rez.push({
/* 1442 */                 id: selection[i].nid
/* 1443 */                 ,name: selection[i].name
/* 1444 */                 ,system: selection[i].system
/* 1445 */                 ,type: selection[i].type
/* 1446 */                 ,iconCls: selection[i].iconCls
/* 1447 */             });
/* 1448 */         }
/* 1449 */ 
/* 1450 */         App.clipboard.set(rez, 'copy');

/* ViewContainer.js */

/* 1451 */     }
/* 1452 */ 
/* 1453 */     ,onPasteClick: function(buttonOrKey, e) {
/* 1454 */         if(this.actions.paste.isDisabled()) {
/* 1455 */             return;
/* 1456 */         }
/* 1457 */         App.clipboard.paste(this.folderProperties.id, null);
/* 1458 */     }
/* 1459 */ 
/* 1460 */     ,onPasteShortcutClick: function(buttonOrKey, e) {
/* 1461 */         if(this.actions.pasteShortcut.isDisabled()) {
/* 1462 */             return;
/* 1463 */         }
/* 1464 */         App.clipboard.paste(this.folderProperties.id, 'shortcut');
/* 1465 */     }
/* 1466 */ 
/* 1467 */     ,onPermissionsClick: function(b, e){
/* 1468 */         if(this.actions.permissions.isDisabled()) {
/* 1469 */             return;
/* 1470 */         }
/* 1471 */ 
/* 1472 */         var selection = this.getSelection()
/* 1473 */             ,id = Ext.isEmpty(selection)
/* 1474 */                 ? this.folderProperties.id
/* 1475 */                 : Ext.valueFrom(selection[0].nid, selection[0].id);
/* 1476 */ 
/* 1477 */         App.mainViewPort.openPermissions(id);
/* 1478 */     }
/* 1479 */ 
/* 1480 */     ,onEditClick: function (b, e) {
/* 1481 */         var selection = this.getSelection();
/* 1482 */ 
/* 1483 */         if(!Ext.isEmpty(selection)) {
/* 1484 */             var p = Ext.apply({}, selection[0]);
/* 1485 */             p.id = p.nid;
/* 1486 */ 
/* 1487 */             switch(detectFileEditor(p.name)) {
/* 1488 */                 case 'webdav':
/* 1489 */                     App.openWebdavDocument(p);
/* 1490 */                     break;
/* 1491 */ 
/* 1492 */                 default:
/* 1493 */                     this.editObject(p);
/* 1494 */                     break;
/* 1495 */             }
/* 1496 */         }
/* 1497 */     }
/* 1498 */ 
/* 1499 */     ,onClipboardChange: function(cb){
/* 1500 */         this.actions.paste.setDisabled( App.clipboard.isEmpty() );

/* ViewContainer.js */

/* 1501 */         this.actions.pasteShortcut.setDisabled( App.clipboard.isEmpty() );
/* 1502 */     }
/* 1503 */ 
/* 1504 */     ,onClipboardAction: function(pids){
/* 1505 */         if(pids.indexOf(this.folderProperties.id) >=0 ) {
/* 1506 */             this.onReloadClick();
/* 1507 */         }
/* 1508 */     }
/* 1509 */ 
/* 1510 */     ,onObjectChanged: function(objData, component){
/* 1511 */         var idx = this.store.findExact('nid', String(objData.id))
/* 1512 */             ,fp = Ext.valueFrom(this.folderProperties, {});
/* 1513 */ 
/* 1514 */         if(
/* 1515 */             (idx >= 0) ||
/* 1516 */ 
/* 1517 */             isNaN(fp.id) || // virtual folders
/* 1518 */             (objData.pid == fp.id)
/* 1519 */         ) {
/* 1520 */             // App.locateObject(objData);
/* 1521 */             this.isRequestFromObjectChange = true;
/* 1522 */             this.onReloadClick();
/* 1523 */         }
/* 1524 */     }
/* 1525 */ 
/* 1526 */     ,onObjectsAction: function(action, r, e){
/* 1527 */         if(Ext.isEmpty(r.processedIds)) {
/* 1528 */             return;
/* 1529 */         }
/* 1530 */ 
/* 1531 */         switch(action){
/* 1532 */             case 'copy':
/* 1533 */             case 'shortcut':
/* 1534 */                 if(r.targetId == this.folderProperties.id){
/* 1535 */                     this.onReloadClick();
/* 1536 */                 }
/* 1537 */                 break;
/* 1538 */             case 'move':
/* 1539 */                 if(r.targetId == this.folderProperties.id){
/* 1540 */                     this.onReloadClick();
/* 1541 */                 } else {
/* 1542 */                     // remove moved record
/* 1543 */                     this.store.deleteIds(r.processedIds);
/* 1544 */                 }
/* 1545 */                 break;
/* 1546 */             case 'create':
/* 1547 */                 break;
/* 1548 */             case 'update':
/* 1549 */                 break;
/* 1550 */             case 'delete':

/* ViewContainer.js */

/* 1551 */                 break;
/* 1552 */         }
/* 1553 */     }
/* 1554 */ 
/* 1555 */     ,onItemContextMenu: function(e) {
/* 1556 */         e.stopEvent();
/* 1557 */         if(!this.contextMenu) {
/* 1558 */             this.createItem = new Ext.menu.Item({
/* 1559 */                 text: L.Create
/* 1560 */                 ,hideOnClick: false
/* 1561 */                 ,menu:[]
/* 1562 */             });
/* 1563 */ 
/* 1564 */             this.setOwnerItem = new Ext.menu.Item({
/* 1565 */                 text: L.SetOwner
/* 1566 */                 ,hideOnClick: false
/* 1567 */                 ,menu: getMenuUserItems(
/* 1568 */                     this.onSetOwnerClick
/* 1569 */                     ,this
/* 1570 */                 )
/* 1571 */             });
/* 1572 */ 
/* 1573 */             this.createItemSeparator = new Ext.menu.Separator();
/* 1574 */ 
/* 1575 */             this.contextMenu = new Ext.menu.Menu({
/* 1576 */                 items: [
/* 1577 */                     this.actions.edit
/* 1578 */                     ,this.actions.contextPreview
/* 1579 */                     ,this.actions.contextDownload
/* 1580 */                     ,'-'
/* 1581 */                     ,this.actions.cut
/* 1582 */                     ,this.actions.copy
/* 1583 */                     ,this.actions.paste
/* 1584 */                     ,this.actions.pasteShortcut
/* 1585 */                     ,'-'
/* 1586 */                     ,this.actions.contextReload
/* 1587 */                     ,this.actions.contextDelete
/* 1588 */                     ,this.actions.contextRename
/* 1589 */                     ,this.actions.star
/* 1590 */                     ,this.actions.unstar
/* 1591 */                     ,this.actions.webdavlink
/* 1592 */                     ,this.actions.permalink
/* 1593 */                     ,this.setOwnerItem
/* 1594 */                     ,'-'
/* 1595 */                     ,this.createItem
/* 1596 */                     ,this.createItemSeparator
/* 1597 */                     ,this.actions.permissions
/* 1598 */                 ]
/* 1599 */             });
/* 1600 */         }

/* ViewContainer.js */

/* 1601 */ 
/* 1602 */         var s = this.getSelection()
/* 1603 */             ,hasSelection = !Ext.isEmpty(s);
/* 1604 */ 
/* 1605 */         this.setOwnerItem.setHidden(!hasSelection);
/* 1606 */ 
/* 1607 */         this.createItem.setHidden(hasSelection);
/* 1608 */         this.createItemSeparator.setHidden(hasSelection);
/* 1609 */ 
/* 1610 */         if(!hasSelection) {
/* 1611 */             updateMenu(
/* 1612 */                 this.createItem
/* 1613 */                 ,this.folderProperties.menu
/* 1614 */                 ,this.onCreateObjectClick
/* 1615 */                 ,this
/* 1616 */             );
/* 1617 */ 
/* 1618 */             this.createItem.setDisabled(this.createItem.menu.items.getCount() < 1);
/* 1619 */         }
/* 1620 */ 
/* 1621 */         if(s && (s.length == 1)) {
/* 1622 */             var canStar = !App.Favorites.isStarred(s[0].nid);
/* 1623 */             this.actions.star.setHidden(!canStar) ;
/* 1624 */             this.actions.unstar.setHidden(canStar) ;
/* 1625 */         } else {
/* 1626 */             this.actions.star.setHidden(true) ;
/* 1627 */             this.actions.unstar.setHidden(true) ;
/* 1628 */         }
/* 1629 */ 
/* 1630 */         this.contextMenu.showAt(e.getXY());
/* 1631 */     }
/* 1632 */ 
/* 1633 */     ,onExportClick: function(b, e) {
/* 1634 */         this.fireEvent('exportrecords', this, e);
/* 1635 */     }
/* 1636 */ 
/* 1637 */     ,onDescendantsCheckChange: function(cb, checked, eOpts) {
/* 1638 */         this.changeSomeParams({
/* 1639 */             descendants: checked
/* 1640 */             ,start: 0
/* 1641 */         });
/* 1642 */     }
/* 1643 */ 
/* 1644 */     /**
/* 1645 *|      * handler for close right panel button
/* 1646 *|      * @param  button b
/* 1647 *|      * @param  event e
/* 1648 *|      * @return void
/* 1649 *|      */
/* 1650 */     ,onCloseRightPanelClick: function(b, e) {

/* ViewContainer.js */

/* 1651 */         this.objectPanel.collapse();
/* 1652 */         this.actions.preview.show();
/* 1653 */     }
/* 1654 */ 
/* 1655 */     /**
/* 1656 *|      * handler for preview toolbar button
/* 1657 *|      * @param  button b
/* 1658 *|      * @param  evente
/* 1659 *|      * @return void
/* 1660 *|      */
/* 1661 */     ,onPreviewClick: function(b, e) {
/* 1662 */         this.objectPanel.expand();
/* 1663 */         this.actions.preview.hide();
/* 1664 */     }
/* 1665 */ 
/* 1666 */     ,onWebDAVLinkClick: function(b, e) {
/* 1667 */         var selection = this.getSelection();
/* 1668 */ 
/* 1669 */         if(!Ext.isEmpty(selection)) {
/* 1670 */             var data = Ext.clone(selection[0]);
/* 1671 */             data.id = data.nid;
/* 1672 */             App.openWebdavDocument(
/* 1673 */                 data
/* 1674 */                 ,false
/* 1675 */             );
/* 1676 */         }
/* 1677 */     }
/* 1678 */ 
/* 1679 */     ,onPermalinkClick: function(b, e) {
/* 1680 */         var selection = this.getSelection();
/* 1681 */ 
/* 1682 */         if(!Ext.isEmpty(selection)) {
/* 1683 */             window.prompt(
/* 1684 */                 'Copy to clipboard: Ctrl+C, Enter'
/* 1685 */                 , window.location.origin + '/' + App.config.coreName + '/view/' + selection[0].nid + '/');
/* 1686 */         }
/* 1687 */     }
/* 1688 */ 
/* 1689 */     ,onStarClick: function(b, e) {
/* 1690 */         var d = this.getSelection()[0]
/* 1691 */             ,data = {
/* 1692 */                 id: d.nid
/* 1693 */                 ,name: d.name
/* 1694 */                 ,iconCls: d.iconCls
/* 1695 */                 ,pathText: this.folderProperties.pathtext
/* 1696 */                 ,path: this.folderProperties.path + '/' + d.nid
/* 1697 */             };
/* 1698 */ 
/* 1699 */         App.Favorites.setStarred(data);
/* 1700 */     }

/* ViewContainer.js */

/* 1701 */ 
/* 1702 */     ,onUnstarClick: function(b, e) {
/* 1703 */         App.Favorites.setUnstarred(this.getSelection()[0].nid);
/* 1704 */     }
/* 1705 */ });
/* 1706 */ 

;
/* Interface.js */

/* 1  */ Ext.namespace('CB.browser.view');
/* 2  */ 
/* 3  */ Ext.define('CB.browser.view.Interface', {
/* 4  */     extend: 'Ext.Container'
/* 5  */     ,border: false
/* 6  */ 
/* 7  */     ,xtype: 'CBBrowserViewInterface'
/* 8  */ 
/* 9  */     ,viewName: 'none'
/* 10 */ 
/* 11 */     ,initComponent: function(){
/* 12 */ 
/* 13 */         this.callParent(arguments);
/* 14 */ 
/* 15 */         this.enableBubble([
/* 16 */             'changeparams'
/* 17 */             ,'selectionchange'
/* 18 */             ,'objectopen'
/* 19 */             ,'settoolbaritems'
/* 20 */         ]);
/* 21 */     }
/* 22 */ 
/* 23 */     /**
/* 24 *|      * overwrite this function by any descendant class to specify custom request params for view
/* 25 *|      * @return object
/* 26 *|      */
/* 27 */     ,getViewParams: function() {
/* 28 */         var rez = {
/* 29 */             from: this.viewName
/* 30 */         };
/* 31 */ 
/* 32 */         return rez;
/* 33 */     }
/* 34 */ 
/* 35 */     /**
/* 36 *|      * detect sorter to be used according to given params
/* 37 *|      *
/* 38 *|      * @param  object params
/* 39 *|      * @return function | null
/* 40 *|      */
/* 41 */     ,detectSorter: function(params) {
/* 42 */         var rez = null;
/* 43 */ 
/* 44 */         if(params && params.sort) {
/* 45 */             var sortersGroup = CB.facet.Base.prototype.sorters[params.sort];
/* 46 */             if(sortersGroup) {
/* 47 */                 var dir = Ext.valueFrom(params.direction, 'asc');
/* 48 */ 
/* 49 */                 if(dir) {
/* 50 */                     rez = sortersGroup[dir];

/* Interface.js */

/* 51 */                 }
/* 52 */             }
/* 53 */         }
/* 54 */ 
/* 55 */         return rez;
/* 56 */     }
/* 57 */ });
/* 58 */ 

;
/* Grid.js */

/* 1   */ Ext.namespace('CB.browser.view');
/* 2   */ 
/* 3   */ Ext.define('CB.browser.view.Grid', {
/* 4   */     extend: 'CB.browser.view.Interface'
/* 5   */     ,border: false
/* 6   */ 
/* 7   */     ,xtype: 'CBBrowserViewGrid'
/* 8   */ 
/* 9   */     ,initComponent: function(){
/* 10  */ 
/* 11  */         var editor = new Ext.form.TextField({selectOnFocus: true});
/* 12  */         editor._setValue = editor.setValue;
/* 13  */         editor.setValue = function(v) {
/* 14  */             v = Ext.util.Format.htmlDecode(v);
/* 15  */             this._setValue(v);
/* 16  */         };
/* 17  */ 
/* 18  */ 
/* 19  */         var columns = [
/* 20  */             {
/* 21  */                 header: 'ID'
/* 22  */                 ,width: 80
/* 23  */                 ,dataIndex: 'nid'
/* 24  */                 ,sort: this.columnSortOverride
/* 25  */                 ,groupable: false
/* 26  */             },{
/* 27  */                 header: L.Name
/* 28  */                 ,width: 300
/* 29  */                 ,dataIndex: 'name'
/* 30  */                 ,renderer: function(v, m, r, ri, ci, s){
/* 31  */                     m.css = 'icon-grid-column-top '+ r.get('iconCls');
/* 32  */ 
/* 33  */                     if(r.get('acl_count') > 0) {
/* 34  */                         m.css += ' node-has-acl';
/* 35  */                     }
/* 36  */ 
/* 37  */                     m.attr = Ext.isEmpty(v) ? '' : "title=\"" + v + "\"";
/* 38  */ 
/* 39  */                     var rez = '<span class="n">' + Ext.valueFrom(r.get('hl'), v) + '</span>';
/* 40  */ 
/* 41  */                     if( (this.hideArrows !== true) && r.get('has_childs')) {
/* 42  */                         rez += ' <span class="fs9">&hellip;</span>';
/* 43  */                         // rez += '<img class="click icon-arrow3" src="'+Ext.BLANK_IMAGE_URL+'" />';
/* 44  */                     }
/* 45  */ 
/* 46  */                     return rez;
/* 47  */                 }
/* 48  */                 ,editor: editor
/* 49  */                 ,sort: this.columnSortOverride
/* 50  */             },{

/* Grid.js */

/* 51  */                 header: L.Path
/* 52  */                 ,width: 150
/* 53  */                 ,dataIndex: 'path'
/* 54  */                 ,renderer: function(v, m, r, ri, ci, s){
/* 55  */                     m.attr = Ext.isEmpty(v) ? '' : 'title="'+Ext.util.Format.stripTags(v).replace(/"/g,"&quot;")+'"';
/* 56  */                     return v;
/* 57  */                 }
/* 58  */                 ,sort: this.columnSortOverride
/* 59  */             },{
/* 60  */                 header: L.Project
/* 61  */                 ,width: 150
/* 62  */                 ,dataIndex: 'case'
/* 63  */                 ,renderer: function(v, m, r, ri, ci, s){
/* 64  */                     m.attr = Ext.isEmpty(v) ? '' : 'title="'+Ext.util.Format.stripTags(v).replace(/"/g,"&quot;")+'"';
/* 65  */                     return v;
/* 66  */                 }
/* 67  */                 ,sort: this.columnSortOverride
/* 68  */             },{
/* 69  */                 header: L.Date
/* 70  */                 ,width: 120
/* 71  */                 ,dataIndex: 'date'
/* 72  */                 // ,xtype: 'datecolumn'
/* 73  */                 ,format: App.dateFormat + ' ' + App.timeFormat
/* 74  */                 ,renderer: function(v, m, r, ri, ci, s){
/* 75  */                     return App.customRenderers.datetime(v, false);
/* 76  */                 }
/* 77  */                 ,sort: this.columnSortOverride
/* 78  */             },{
/* 79  */                 header: L.Size
/* 80  */                 ,width: 80
/* 81  */                 ,dataIndex: 'size'
/* 82  */                 ,renderer: App.customRenderers.filesize
/* 83  */                 ,sort: this.columnSortOverride
/* 84  */             },{
/* 85  */                 header: L.Creator
/* 86  */                 ,width: 200
/* 87  */                 ,dataIndex: 'cid'
/* 88  */                 ,renderer: function(v){
/* 89  */                     return CB.DB.usersStore.getName(v);
/* 90  */                 }
/* 91  */                 ,sort: this.columnSortOverride
/* 92  */             },{
/* 93  */                 header: L.Owner
/* 94  */                 ,width: 200
/* 95  */                 ,dataIndex: 'oid'
/* 96  */                 ,renderer: function(v){
/* 97  */                     return CB.DB.usersStore.getName(v);
/* 98  */                 }
/* 99  */                 ,sort: this.columnSortOverride
/* 100 */             },{

/* Grid.js */

/* 101 */                 header: L.UpdatedBy
/* 102 */                 ,width: 200
/* 103 */                 ,dataIndex: 'uid'
/* 104 */                 ,renderer: function(v){
/* 105 */                     return CB.DB.usersStore.getName(v);
/* 106 */                 }
/* 107 */                 ,sort: this.columnSortOverride
/* 108 */             },{
/* 109 */                 header: L.CommentedBy
/* 110 */                 ,width: 200
/* 111 */                 ,dataIndex: 'comment_user_id'
/* 112 */                 ,renderer: function(v){
/* 113 */                     return CB.DB.usersStore.getName(v);
/* 114 */                 }
/* 115 */                 ,sort: this.columnSortOverride
/* 116 */             },{
/* 117 */                 header: L.CreatedDate
/* 118 */                 ,width: 120
/* 119 */                 ,dataIndex: 'cdate'
/* 120 */                 ,xtype: 'datecolumn'
/* 121 */                 ,format: App.dateFormat + ' '  +  App.timeFormat
/* 122 */                 ,sort: this.columnSortOverride
/* 123 */             },{
/* 124 */                 header: L.UpdatedDate
/* 125 */                 ,width: 120
/* 126 */                 ,dataIndex: 'udate'
/* 127 */                 ,xtype: 'datecolumn'
/* 128 */                 ,format: App.dateFormat + ' ' + App.timeFormat
/* 129 */                 ,sort: this.columnSortOverride
/* 130 */             },{
/* 131 */                 header: L.CommentedDate
/* 132 */                 ,width: 120
/* 133 */                 ,dataIndex: 'comment_date'
/* 134 */                 ,xtype: 'datecolumn'
/* 135 */                 ,format: App.dateFormat + ' ' + App.timeFormat
/* 136 */                 ,sort: this.columnSortOverride
/* 137 */             }
/* 138 */         ];
/* 139 */ 
/* 140 */         var sm = (this.config.selModel)
/* 141 */             ? this.config.selModel
/* 142 */             : new Ext.selection.RowModel({
/* 143 */                mode: 'MULTI'
/* 144 */                ,allowDeselect: true
/* 145 */             });
/* 146 */ 
/* 147 */         this.grid = new Ext.grid.Panel({
/* 148 */             loadMask: false
/* 149 */             ,cls: 'folder-grid'
/* 150 */             ,border: false

/* Grid.js */

/* 151 */             ,bodyStyle: {
/* 152 */                 border: 0
/* 153 */             }
/* 154 */ 
/* 155 */             ,store: this.store
/* 156 */             ,getProperty: this.getProperty // link to view container method
/* 157 */             ,defaultColumns: Ext.apply([], columns)
/* 158 */             ,columns: columns
/* 159 */             ,features: [{
/* 160 */                 ftype:'cbGridViewGrouping'
/* 161 */                 ,disabled: true
/* 162 */                 ,groupHeaderTpl: [
/* 163 */                     '{columnName}: {[Ext.valueFrom(values.children[0].get(\'groupText\'), values.children[0].get(\'group\'))]}'
/* 164 */                 ]
/* 165 */                 // ,showSummaryRow: true
/* 166 */             }]
/* 167 */             ,viewConfig: {
/* 168 */                 forceFit: false
/* 169 */                 ,loadMask: false
/* 170 */                 ,stripeRows: false
/* 171 */                 ,emptyText: L.NoData
/* 172 */                 ,deferInitialRefresh: false
/* 173 */ 
/* 174 */                 ,listeners: {
/* 175 */                     scope: this
/* 176 */                     ,containermousedown: function(view, e, eOpts) {
/* 177 */                         var g = this.grid
/* 178 */                             ,sm = g.getSelectionModel()
/* 179 */                             ,t = e.getTarget();
/* 180 */ 
/* 181 */                         if((sm.selType !== 'checkboxmodel') && t) {
/* 182 */                             t = Ext.get(t);
/* 183 */                             var s = t.getViewSize();
/* 184 */ 
/* 185 */                             //deselect all selected records when clicking on empty area of the grid
/* 186 */                             //except the scroller
/* 187 */                             if ((e.pageX < t.getLeft() + s.width) && (e.pageY < t.getTop() + s.height)){
/* 188 */                                 this.grid.getSelectionModel().deselectAll();
/* 189 */                             }
/* 190 */                         }
/* 191 */                     }
/* 192 */                 }
/* 193 */                 ,plugins: [{
/* 194 */                         ptype: 'CBPluginDDFilesDropZone'
/* 195 */                         ,pidPropety: 'nid'
/* 196 */                         ,dropZoneConfig: {
/* 197 */                             text: L.GridDDMgs
/* 198 */                             ,onScrollerDragDrop: this.onScrollerDragDrop
/* 199 */                             ,scope: this
/* 200 */                         }

/* Grid.js */

/* 201 */                     },{
/* 202 */                         ptype: 'CBDDGrid'
/* 203 */                         ,idProperty: 'nid'
/* 204 */                         ,dropZoneConfig: {
/* 205 */                             text: L.GridDDMgs
/* 206 */                             // ,onScrollerDragDrop: this.onScrollerDragDrop
/* 207 */                             // ,scope: this
/* 208 */                             ,onContainerOver: Ext.Function.bind(this.ddOnContainerOver, this)
/* 209 */                             ,onContainerDrop: Ext.Function.bind(this.ddOnContainerDrop, this)
/* 210 */                         }
/* 211 */                     }
/* 212 */                 ]
/* 213 */             }
/* 214 */             ,selModel: sm
/* 215 */             ,listeners:{
/* 216 */                 scope: this
/* 217 */                 ,columnhide: this.saveGridState
/* 218 */                 ,columnshow: this.saveGridState
/* 219 */ 
/* 220 */                 ,keydown: this.onKeyDown
/* 221 */                 ,rowclick: this.onRowClick
/* 222 */                 ,rowdblclick: this.onRowDblClick
/* 223 */                 ,selectionchange: this.onSelectionChange
/* 224 */ 
/* 225 */                 ,columnmove:    this.saveGridState
/* 226 */                 ,columnresize:  this.saveGridState
/* 227 */                 ,groupchange:   this.saveGridState
/* 228 */                 ,sortchange: function() {
/* 229 */                     this.saveGridState();
/* 230 */                 }
/* 231 */                 ,itemcontextmenu: this.onItemContextMenu
/* 232 */                 ,containercontextmenu: this.onContainerContextMenu
/* 233 */             }
/* 234 */             ,keys: [{
/* 235 */                     key: Ext.event.Event.DOWN //down arrow (select forst row in the grid if no row already selected)  - does not work
/* 236 */                     ,ctrl: false
/* 237 */                     ,shift: false
/* 238 */                     ,stopEvent: true
/* 239 */                     ,fn: this.onDownClick
/* 240 */                     ,scope: this
/* 241 */                 },{
/* 242 */                     key: [10,13]
/* 243 */                     ,alt: false
/* 244 */                     ,ctrl: false
/* 245 */                     ,shift: false
/* 246 */                     ,stopEvent: true
/* 247 */                     ,fn: this.onEnterKeyPress
/* 248 */                     ,scope: this
/* 249 */                 },{
/* 250 */                     key: Ext.event.Event.F2

/* Grid.js */

/* 251 */                     ,alt: false
/* 252 */                     ,ctrl: false
/* 253 */                     ,stopEvent: true
/* 254 */                     ,fn: this.onRenameClick
/* 255 */                     ,scope: this
/* 256 */                 // },{
/* 257 */                 //     key: 'x'
/* 258 */                 //     ,ctrl: true
/* 259 */                 //     ,shift: false
/* 260 */                 //     ,stopEvent: true
/* 261 */                 //     ,fn: this.onCutClick
/* 262 */                 //     ,scope: this
/* 263 */                 // },{
/* 264 */                 //     key: 'c'
/* 265 */                 //     ,ctrl: true
/* 266 */                 //     ,shift: false
/* 267 */                 //     ,stopEvent: true
/* 268 */                 //     ,fn: this.onCopyClick
/* 269 */                 //     ,scope: this
/* 270 */                 // },{
/* 271 */                 //     key: 'v'
/* 272 */                 //     ,ctrl: true
/* 273 */                 //     ,shift: false
/* 274 */                 //     ,stopEvent: true
/* 275 */                 //     ,fn: this.onPasteClick
/* 276 */                 //     ,scope: this
/* 277 */                 // },{
/* 278 */                 //     key: 'v'
/* 279 */                 //     ,alt: true
/* 280 */                 //     ,ctrl: true
/* 281 */                 //     ,stopEvent: true
/* 282 */                 //     ,fn: this.onPasteShortcutClick
/* 283 */                 //     ,scope: this
/* 284 */                 // },{
/* 285 */                 //     key: Ext.event.Event.DELETE
/* 286 */                 //     ,alt: false
/* 287 */                 //     ,ctrl: false
/* 288 */                 //     ,stopEvent: true
/* 289 */                 //     ,fn: this.onDeleteClick
/* 290 */                 //     ,scope: this
/* 291 */                 // },{
/* 292 */                 //     key: Ext.event.Event.F5
/* 293 */                 //     ,alt: false
/* 294 */                 //     ,ctrl: false
/* 295 */                 //     ,stopEvent: true
/* 296 */                 //     ,fn: this.onReloadClick
/* 297 */                 //     ,scope: this
/* 298 */                 // },{
/* 299 */                 //     key: 'r'
/* 300 */                 //     ,alt: false

/* Grid.js */

/* 301 */                 //     ,ctrl: true
/* 302 */                 //     ,stopEvent: true
/* 303 */                 //     ,fn: this.onReloadClick
/* 304 */                 //     ,scope: this
/* 305 */                 // },{
/* 306 */                 //     key: [10, 13]
/* 307 */                 //     ,alt: true
/* 308 */                 //     ,ctrl: false
/* 309 */                 //     ,shift: false
/* 310 */                 //     ,stopEvent: true
/* 311 */                 //     ,fn: this.onPropertiesClick
/* 312 */                 //     ,scope: this
/* 313 */             }]
/* 314 */             ,bbar: {
/* 315 */                 xtype: 'CBBrowserViewGridPagingToolbar'
/* 316 */                 ,store: this.store
/* 317 */                 ,hidden: !Ext.isEmpty(this.hideBottomBar)
/* 318 */                 ,doRefresh: this.onReloadClick.bind(this)
/* 319 */             }
/* 320 */             ,plugins: [{
/* 321 */                 ptype: 'cellediting'
/* 322 */                 ,clicksToEdit: 1
/* 323 */                 ,listeners: {
/* 324 */                     scope: this
/* 325 */                     ,beforeedit: function(e){
/* 326 */                         if(!this.allowRename) {
/* 327 */                             return false;
/* 328 */                         }
/* 329 */ 
/* 330 */                         delete this.allowRename;
/* 331 */                         return true;
/* 332 */                     }
/* 333 */ 
/* 334 */                     ,edit: function(editor, context, eOpts){
/* 335 */                         var encodedValue = Ext.util.Format.htmlEncode(context.value);
/* 336 */                         context.record.set('name', encodedValue);
/* 337 */ 
/* 338 */                         if(encodedValue == context.originalValue) {
/* 339 */                             return;
/* 340 */                         }
/* 341 */ 
/* 342 */                         this.renamedOriginalValue = context.originalValue;
/* 343 */                         this.renamedRecord = context.record;
/* 344 */                         CB_BrowserView.rename(
/* 345 */                             {
/* 346 */                                 path: context.record.get('nid')
/* 347 */                                 ,name: context.value
/* 348 */                             }
/* 349 */                             ,function(r, e){
/* 350 */                                 if(!r || (r.success !== true)) {

/* Grid.js */

/* 351 */                                     this.renamedRecord.set('name', this.renamedOriginalValue);
/* 352 */                                     delete this.renamedOriginalValue;
/* 353 */                                     delete this.renamedRecord;
/* 354 */                                     return;
/* 355 */                                 }
/* 356 */ 
/* 357 */                                 this.renamedRecord.set('name', r.data.newName);
/* 358 */ 
/* 359 */                                 delete this.renamedOriginalValue;
/* 360 */                                 delete this.renamedRecord;
/* 361 */ 
/* 362 */                                 App.fireEvent(
/* 363 */                                     'objectchanged'
/* 364 */                                     ,{
/* 365 */                                         id: parseInt(r.data.id, 10)
/* 366 */                                         ,pid: this.refOwner.folderProperties.id
/* 367 */                                     }
/* 368 */                                     ,e
/* 369 */                                 );
/* 370 */                             }
/* 371 */                             ,this
/* 372 */                         );
/* 373 */                     }
/* 374 */                 }
/* 375 */             }]
/* 376 */         });
/* 377 */ 
/* 378 */         //reset scroll on veiew refresh
/* 379 */         this.grid.view.on(
/* 380 */             'refresh'
/* 381 */             ,function(view){
/* 382 */                 view.scrollTo(0, 0, false);
/* 383 */             }
/* 384 */             ,this
/* 385 */         );
/* 386 */ 
/* 387 */         Ext.apply(this, {
/* 388 */             title: L.Explorer
/* 389 */             ,header: false
/* 390 */             ,layout: 'fit'
/* 391 */             ,viewName: 'grid'
/* 392 */             ,items: [
/* 393 */                 this.grid
/* 394 */             ]
/* 395 */         });
/* 396 */         this.callParent(arguments);
/* 397 */ 
/* 398 */         this.store.on('beforeload', this.onBeforeStoreLoad, this);
/* 399 */         this.store.on('load', this.onStoreLoad, this);
/* 400 */ 

/* Grid.js */

/* 401 */         this.enableBubble([
/* 402 */             'reload'
/* 403 */             ,'itemcontextmenu'
/* 404 */         ]);
/* 405 */ 
/* 406 */     }
/* 407 */     /**
/* 408 *|      * override sort method for columns
/* 409 *|      * used to set userSort flag
/* 410 *|      * @param  string direction
/* 411 *|      * @return void
/* 412 *|      */
/* 413 */     ,columnSortOverride: function(direction) {
/* 414 */         var me = this,
/* 415 */             grid = me.up('tablepanel'),
/* 416 */             store = grid.store;
/* 417 */ 
/* 418 */         // store.remoteSort = (this.config.localSort !== true);
/* 419 */         if(store.remoteSort) {
/* 420 */             grid.userSort = 1;
/* 421 */         } else {
/* 422 */             // store.sort()
/* 423 */         }
/* 424 */ 
/* 425 */         Ext.grid.column.Column.prototype.sort.apply(this, arguments);
/* 426 */     }
/* 427 */ 
/* 428 */     /**
/* 429 *|      * fire the evnet for main browser view to update its buttons
/* 430 *|      * @return void
/* 431 *|      */
/* 432 */     ,updateToolbarButtons: function() {
/* 433 */         this.refOwner.fireEvent(
/* 434 */             'settoolbaritems'
/* 435 */             ,[
/* 436 */                 'create'
/* 437 */                 ,'upload'
/* 438 */                 ,'download'
/* 439 */                 ,'-'
/* 440 */                 ,'edit'
/* 441 */                 ,'delete'
/* 442 */                 ,'->'
/* 443 */                 ,'reload'
/* 444 */                 ,'apps'
/* 445 */                 ,'-'
/* 446 */                 ,'more'
/* 447 */             ]
/* 448 */         );
/* 449 */     }
/* 450 */ 

/* Grid.js */

/* 451 */     ,onBeforeStoreLoad: function(store, operation, eOpts) {
/* 452 */         this.savedSelection = this.getSelectedItems();
/* 453 */         this.grid.getSelectionModel().suspendEvents();
/* 454 */     }
/* 455 */ 
/* 456 */     ,onStoreLoad: function(store, recs, successful, options) {
/* 457 */         if(!this.rendered ||
/* 458 */             !this.getEl().isVisible(true) ||
/* 459 */             (successful !== true)
/* 460 */         ) {
/* 461 */             return;
/* 462 */         }
/* 463 */ 
/* 464 */         delete this.grid.userSort;
/* 465 */ 
/* 466 */         //grid selection logic
/* 467 */         var hadSelection = false
/* 468 */             ,prevSelectedId = 0
/* 469 */             ,prevSelectedPid = 0
/* 470 */             ,locateId = Ext.valueFrom(this.refOwner.params, {}).locatingObject;
/* 471 */ 
/* 472 */         if(!Ext.isEmpty(this.savedSelection)) {
/* 473 */             hadSelection = true;
/* 474 */             prevSelectedId = this.savedSelection[0].nid;
/* 475 */             prevSelectedPid = this.savedSelection[0].pid;
/* 476 */         }
/* 477 */ 
/* 478 */         // otherwise select previous items, if any
/* 479 */         if(!Ext.isEmpty(locateId)) {
/* 480 */             this.savedSelection = [{nid: locateId}];
/* 481 */         }
/* 482 */ 
/* 483 */         if(!Ext.isEmpty(this.savedSelection)) {
/* 484 */             this.selectItems(this.savedSelection);
/* 485 */         }
/* 486 */ 
/* 487 */         this.grid.getSelectionModel().resumeEvents(true);
/* 488 */ 
/* 489 */         if(Ext.isEmpty(locateId)) {
/* 490 */             var haveSelection = this.grid.getSelectionModel().hasSelection()
/* 491 */                 ,currSelectedId = haveSelection
/* 492 */                     ? this.grid.getSelection()[0].get('nid')
/* 493 */                     : 0
/* 494 */                 ,currSelectedPid = Ext.valueFrom(this.refOwner.folderProperties, {}).id;
/* 495 */ 
/* 496 */             if(
/* 497 */                 // (hadSelection !== haveSelection) || (prevSelectedId != currSelectedId)
/* 498 */                 (prevSelectedPid != currSelectedPid) || (haveSelection && (prevSelectedId != currSelectedId))
/* 499 */             ){
/* 500 */                 this.fireSelectionChangeEvent();

/* Grid.js */

/* 501 */             }
/* 502 */         } else {
/* 503 */             delete this.refOwner.params.locatingObject;
/* 504 */         }
/* 505 */         //end of grid selection logic
/* 506 */ 
/* 507 */         this.updateToolbarButtons();
/* 508 */ 
/* 509 */         // update empty text
/* 510 */         var noRecords = Ext.isEmpty(recs)
/* 511 */             ,params = options.request
/* 512 */                 ? options.request.config.params
/* 513 */                 : {}
/* 514 */             ,filters = params.filters
/* 515 */             ,emptyFilters = Ext.isEmpty(filters) || Ext.Object.isEmpty(filters)
/* 516 */             ,emptyText = (emptyFilters && Ext.isEmpty(params.query) && Ext.isEmpty(params.search))
/* 517 */                 ? L.GridEmptyText
/* 518 */                 : L.NoResultsFound;
/* 519 */ 
/* 520 */         this.grid.view.emptyText = '<div class="gv-empty-text"><div class="middle"><div class="inner">' + emptyText + '</div></div></div>';
/* 521 */         this.grid.view.refresh();
/* 522 */     }
/* 523 */ 
/* 524 */     ,ddOnContainerOver: function(source, e, data) {
/* 525 */         var d
/* 526 */             ,currentPid = this.refOwner.folderProperties.id
/* 527 */             ,rez = source.dropAllowed;
/* 528 */ 
/* 529 */         for (var i = 0; i < data.records.length; i++) {
/* 530 */             d = data.records[i].data;
/* 531 */             if(d['pid'] == currentPid) {
/* 532 */                 rez = source.dropNotAllowed;
/* 533 */             }
/* 534 */         }
/* 535 */ 
/* 536 */         return rez;
/* 537 */     }
/* 538 */ 
/* 539 */     ,ddOnContainerDrop: function(source, e, data) {
/* 540 */         if(this.ddOnContainerOver(source, e, data) == source.dropAllowed) {
/* 541 */             this.onScrollerDragDrop(
/* 542 */                 this.refOwner.folderProperties
/* 543 */                 ,source
/* 544 */                 ,e
/* 545 */                 ,data
/* 546 */             );
/* 547 */         }
/* 548 */     }
/* 549 */ 
/* 550 */ 

/* Grid.js */

/* 551 */     ,onScrollerDragDrop: function(targetData, source, e, data){
/* 552 */         var d, sourceData = [];
/* 553 */         for (var i = 0; i < data.records.length; i++) {
/* 554 */             d = data.records[i].data;
/* 555 */             sourceData.push({
/* 556 */                 id: d['nid']
/* 557 */                 ,name: d['name']
/* 558 */                 ,path: d['path']
/* 559 */                 ,template_id: d['template_id']
/* 560 */             });
/* 561 */         }
/* 562 */ 
/* 563 */         App.DD.execute({
/* 564 */             action: e
/* 565 */             ,targetData: this.refOwner.folderProperties
/* 566 */             ,sourceData: sourceData
/* 567 */         });
/* 568 */     }
/* 569 */ 
/* 570 */     ,getSelectedItems: function() {
/* 571 */         var s = this.grid.getSelectionModel().getSelection();
/* 572 */         for (var i = 0; i < s.length; i++) {
/* 573 */             s[i] = s[i].data;
/* 574 */         }
/* 575 */ 
/* 576 */         return s;
/* 577 */     }
/* 578 */ 
/* 579 */     ,selectItems: function(itemsArray) {
/* 580 */         if (itemsArray && itemsArray.length) {
/* 581 */             var rs = [],
/* 582 */                 r,
/* 583 */                 j = 0,
/* 584 */                 l = itemsArray.length;
/* 585 */             for (; j < l; j++) {
/* 586 */                 r = this.store.findRecord('nid', itemsArray[j].nid);
/* 587 */                 if (r) {
/* 588 */                     rs.push(r);
/* 589 */                 }
/* 590 */             }
/* 591 */             if (rs.length) {
/* 592 */                 // this.grid.setSelection(rs);
/* 593 */                 this.grid.getSelectionModel().select(rs, false, true);
/* 594 */             }
/* 595 */         }
/* 596 */ 
/* 597 */         delete this.savedSelection;
/* 598 */     }
/* 599 */ 
/* 600 */     ,fireSelectionChangeEvent: function() {

/* Grid.js */

/* 601 */         this.fireEvent('selectionchange', this.getSelectedItems());
/* 602 */     }
/* 603 */ 
/* 604 */     ,onKeyDown: function(e) {
/* 605 */         if([9, 38, 40].indexOf(e.getKey()) > -1) {
/* 606 */             this.userAction = true;
/* 607 */         }
/* 608 */     }
/* 609 */ 
/* 610 */     ,onRowClick: function(g, ri, e) {
/* 611 */         this.userAction = true;
/* 612 */         this.fireSelectionChangeEvent();
/* 613 */     }
/* 614 */ 
/* 615 */     ,onRowDblClick: function(g, record, tr, rowIndex, e, eOpts) {
/* 616 */         this.fireEvent('objectopen', g.store.getAt(rowIndex).data);
/* 617 */     }
/* 618 */ 
/* 619 */     ,onSelectionChange: function () {
/* 620 */         if(!App.mouseDown || (App.lastMouseButton !== 0)) {
/* 621 */             this.fireSelectionChangeEvent();
/* 622 */         }
/* 623 */     }
/* 624 */ 
/* 625 */     ,onEnterKeyPress: function(key, e) {
/* 626 */         if(this.grid.selModel.hasSelection()) {
/* 627 */             var s = this.grid.selModel.getSelections();
/* 628 */             this.onRowDblClick(this.grid, this.store.indexOf(s[0]), e);
/* 629 */         }
/* 630 */     }
/* 631 */ 
/* 632 */     ,onDownClick: function(key, e) {
/* 633 */         if(!this.grid.selModel.hasSelection() || (this.grid.store.getCount() < 1)) {
/* 634 */             return false;
/* 635 */         }
/* 636 */ 
/* 637 */         this.grid.selModel.select(0);
/* 638 */     }
/* 639 */ 
/* 640 */     ,onRenameClick: function(b, e){
/* 641 */         if(!this.grid.selModel.hasSelection()) {
/* 642 */             return;
/* 643 */         }
/* 644 */         this.grid.editingPlugin.cancelEdit();
/* 645 */         this.allowRename = true;
/* 646 */ 
/* 647 */         var selection = this.grid.selModel.getSelection()
/* 648 */             ,valueCol = this.grid.headerCt.child('[dataIndex="name"]')
/* 649 */             ,colIdx = valueCol.getIndex();
/* 650 */ 

/* Grid.js */

/* 651 */         if(!Ext.isEmpty(selection)) {
/* 652 */             this.grid.editingPlugin.startEdit(
/* 653 */                 selection[0]
/* 654 */                 ,colIdx
/* 655 */             );
/* 656 */         }
/* 657 */     }
/* 658 */     ,onReloadClick: function() {
/* 659 */         this.fireEvent('reload', this);
/* 660 */     }
/* 661 */ 
/* 662 */     ,saveGridState: function() {
/* 663 */         if(this.store.clearing ||
/* 664 */             (this.grid.disableStateSave && Ext.isEmpty(this.store.proxy.extraParams.userGroup))
/* 665 */         ) {
/* 666 */             return false;
/* 667 */         }
/* 668 */ 
/* 669 */         var state = this.grid.getState();
/* 670 */ 
/* 671 */         //sometimes grid state doesnt return group property
/* 672 */         if(!Ext.isEmpty(state.group)) {
/* 673 */             if(Ext.isEmpty(state.group.property)) {
/* 674 */                 state.group.property = this.store.getGroupField();
/* 675 */             }
/* 676 */         }
/* 677 */ 
/* 678 */         CB_State_DBProvider.saveGridViewState(
/* 679 */             {
/* 680 */                 params: this.refOwner.params
/* 681 */                 ,state: state
/* 682 */             }
/* 683 */         );
/* 684 */ 
/* 685 */         return state;
/* 686 */     }
/* 687 */ 
/* 688 */     ,getViewParams: function() {
/* 689 */         var rez = this.callParent(arguments);
/* 690 */ 
/* 691 */         if(this.grid.userSort) {
/* 692 */             rez.userSort = 1;
/* 693 */         }
/* 694 */ 
/* 695 */         return rez;
/* 696 */     }
/* 697 */ 
/* 698 */     ,onItemContextMenu: function(grid, record, item, index, e, eOpts) {
/* 699 */         this.fireEvent('itemcontextmenu', e);
/* 700 */     }

/* Grid.js */

/* 701 */ 
/* 702 */     ,onContainerContextMenu: function(grid, e, eOpts) {
/* 703 */         this.fireEvent('itemcontextmenu', e);
/* 704 */     }
/* 705 */ });
/* 706 */ 

;
/* ActivityStream.js */

/* 1   */ Ext.namespace('CB.browser.view');
/* 2   */ 
/* 3   */ Ext.define('CB.browser.view.ActivityStream',{
/* 4   */     extend: 'CB.browser.view.Interface'
/* 5   */ 
/* 6   */     ,xtype: 'CBBrowserViewActivityStream'
/* 7   */ 
/* 8   */     ,border: false
/* 9   */     ,tbarCssClass: 'x-panel-white'
/* 10  */ 
/* 11  */     ,initComponent: function(){
/* 12  */ 
/* 13  */         var tpl = new Ext.XTemplate(
/* 14  */             '<div class="taC"><table class="activity-stream">'
/* 15  */             ,'<tpl for=".">'
/* 16  */             ,'<tpl if="lastAction">'
/* 17  */             ,'<tr class="as-record">'
/* 18  */             ,'    <td>'
/* 19  */             ,'      <div class="as-item">'
/* 20  */             ,'        <table class="action">'
/* 21  */             ,'          <tr>'
/* 22  */             ,'            <td class="action-icon">{[this.getTitleIcon(values)]}</td>'
/* 23  */             ,'            <td class="action-title">{[this.getTitle(values)]}</td>'
/* 24  */             ,'          </tr>'
/* 25  */             ,'          <tr>'
/* 26  */             ,'            <td class="action-text" colspan="2">'
/* 27  */             ,'               <table>'
/* 28  */             ,'                  <tr>'
/* 29  */             ,'                    <td>{[this.getContent(values)]}</td>'
/* 30  */             ,'                 </tr>'
/* 31  */             ,'               </table>'
/* 32  */             ,'            </td>'
/* 33  */             ,'          </tr>'
/* 34  */             ,'        </table>'
/* 35  */             ,'      </div>'
/* 36  */             ,'      <div class="action-comments" id="as-record-{nid}">'
/* 37  */             ,'      </div>'
/* 38  */             ,'    </td>'
/* 39  */             ,'</tr>'
/* 40  */             ,'</tpl>'
/* 41  */             ,'</tpl>'
/* 42  */             ,'</table>{[this.getNextButton(this, values)]}</div>'
/* 43  */             ,{
/* 44  */                 getTitleIcon: function(r){
/* 45  */                     var uid = r.lastAction.uids[0]
/* 46  */                         ,us = CB.DB.usersStore
/* 47  */                         ,rez = '<img class="i40" src="' +
/* 48  */                             App.config.photoPath + uid + '.jpg?32=' +
/* 49  */                             us.getPhotoParam(uid)  + '" title="' +
/* 50  */                             us.getName(uid)

/* ActivityStream.js */

/* 51  */                             + '">';
/* 52  */                    return rez;
/* 53  */                 }
/* 54  */ 
/* 55  */                 ,getTitle: function(r){
/* 56  */                     var rez = '<div class="action-title-text">'
/* 57  */                         ,la = r.lastAction
/* 58  */                         ,us = CB.DB.usersStore
/* 59  */                         ,users = [];
/* 60  */                     for (var i = 0; i < la.uids.length; i++) {
/* 61  */                         users.push(' <b>' + us.getName(la.uids[i]) + '</b> ');
/* 62  */                     }
/* 63  */ 
/* 64  */                     switch(users.length) {
/* 65  */                         case 0:
/* 66  */                             break;
/* 67  */                         case 1:
/* 68  */                             rez += users[0];
/* 69  */ 
/* 70  */                             break;
/* 71  */                         case 2:
/* 72  */                             rez += users[0] + L.and + users[1];
/* 73  */ 
/* 74  */                             break;
/* 75  */ 
/* 76  */                         case 3:
/* 77  */                             rez += users[0] + ', ' + users[1] + L.and + users[2];
/* 78  */ 
/* 79  */                             break;
/* 80  */ 
/* 81  */                         default:
/* 82  */                             rez += users[0] + ', ' + users[1] + L.and + ' ' + Ext.valueFrom(L.NNOthers, '{count} others').replace('{count}', users.length -1);
/* 83  */                     }
/* 84  */ 
/* 85  */                     switch(la.type) {
/* 86  */                         case 'comment':
/* 87  */                             rez += ' ' + Ext.valueFrom(L[la.type + 'ed'], la.type);
/* 88  */                             break;
/* 89  */                         default:
/* 90  */                             rez += ' ' + Ext.valueFrom(L[la.type + 'd'], la.type);
/* 91  */                     }
/* 92  */ 
/* 93  */                     rez += ' <a class="click open-obj" nid="' + r.nid + '">' + r.name + '</a></div>';
/* 94  */ 
/* 95  */                     rez += ' <div class="as-ago-time">' + la.agoText + '</div>';
/* 96  */ 
/* 97  */                     return rez;
/* 98  */                 }
/* 99  */ 
/* 100 */                 ,getContent: function(r){

/* ActivityStream.js */

/* 101 */                    return r['diff'];
/* 102 */                 }
/* 103 */ 
/* 104 */                 ,getNextButton: Ext.bind(
/* 105 */                     function() {
/* 106 */                         var rez = '<div class="asNext click" style="display:none"><span>' +
/* 107 */                             L.Next +
/* 108 */                             ' </span><span class="dIB i16 i-arrow-right"></span></div>';
/* 109 */ 
/* 110 */                         return rez;
/* 111 */                     }
/* 112 */                     ,this
/* 113 */                 )
/* 114 */ 
/* 115 */             }
/* 116 */         );
/* 117 */ 
/* 118 */         this.dataView = new Ext.DataView({
/* 119 */             tpl: tpl
/* 120 */             ,store: this.store
/* 121 */             ,deferInitialRefresh: false
/* 122 */             ,itemSelector: 'div.as-item'//'tr.as-record'
/* 123 */             // ,overItemCls:'as-record-over'
/* 124 */             ,focusCls: ''
/* 125 */             ,scrollable: true
/* 126 */             ,listeners: {
/* 127 */                 scope: this
/* 128 */                 ,selectionchange: this.onSelectionChange
/* 129 */                 ,containerclick: this.onContainerClick
/* 130 */             }
/* 131 */         });
/* 132 */ 
/* 133 */         Ext.apply(this, {
/* 134 */             title: L.ActivityStream
/* 135 */             ,viewName: 'activityStream'
/* 136 */             ,header: false
/* 137 */             ,layout: 'fit'
/* 138 */             ,style: 'background-color: #e9eaed'
/* 139 */             ,items: [
/* 140 */                 this.dataView
/* 141 */             ]
/* 142 */             ,listeners: {
/* 143 */                 scope: this
/* 144 */                 ,activate: this.onActivate
/* 145 */             }
/* 146 */         });
/* 147 */ 
/* 148 */         this.store.on(
/* 149 */             'load'
/* 150 */             ,this.onStoreLoad

/* ActivityStream.js */

/* 151 */             ,this
/* 152 */             ,{
/* 153 */                 defer: 300
/* 154 */             }
/* 155 */         );
/* 156 */ 
/* 157 */         this.callParent(arguments);
/* 158 */     }
/* 159 */ 
/* 160 */     ,updateToolbarButtons: function() {
/* 161 */         this.refOwner.fireEvent(
/* 162 */             'settoolbaritems'
/* 163 */             ,[
/* 164 */                 'create'
/* 165 */                 ,'upload'
/* 166 */                 ,'download'
/* 167 */                 ,'-'
/* 168 */                 ,'edit'
/* 169 */                 ,'delete'
/* 170 */                 ,'->'
/* 171 */                 ,'reload'
/* 172 */                 ,'apps'
/* 173 */                 ,'-'
/* 174 */                 ,'more'
/* 175 */             ]
/* 176 */         );
/* 177 */     }
/* 178 */ 
/* 179 */     ,onSelectionChange: function(view, selected, eOpts) {
/* 180 */         var recs = [];
/* 181 */ 
/* 182 */         for (var i = 0; i < selected.length; i++) {
/* 183 */             recs.push(selected[i].data);
/* 184 */         }
/* 185 */ 
/* 186 */         if(!Ext.isEmpty(recs)) {
/* 187 */             this.fireEvent('selectionchange', recs);
/* 188 */         }
/* 189 */     }
/* 190 */ 
/* 191 */     ,onStoreLoad: function(store, records, successful, eOpts) {
/* 192 */         var visible = this.getEl().isVisible(true);
/* 193 */ 
/* 194 */         if (visible) {
/* 195 */             this.addCommentPlugins();
/* 196 */         }
/* 197 */     }
/* 198 */ 
/* 199 */     ,addCommentPlugins: function() {
/* 200 */        var ready = (this.store.getCount() === 0);

/* ActivityStream.js */

/* 201 */ 
/* 202 */         this.store.each(
/* 203 */             function(r) {
/* 204 */                 var id = r.get('nid')
/* 205 */                     ,recEl = Ext.get('as-record-' + id);
/* 206 */ 
/* 207 */                 ready = ready || !Ext.isEmpty(recEl);
/* 208 */ 
/* 209 */                 if(r.data.lastAction && !Ext.isEmpty(recEl)) {
/* 210 */                     var c = Ext.create(
/* 211 */                         'CBObjectPluginComments'
/* 212 */                         ,{
/* 213 */                             params: {id: id}
/* 214 */                             ,header: false
/* 215 */                             ,renderTo: 'as-record-' + id
/* 216 */                             ,showAddLabel: 'label'
/* 217 */                             ,commentFieldConfig: {
/* 218 */                                 xtype: 'CBFieldCommentLight'
/* 219 */                             }
/* 220 */                         }
/* 221 */                     );
/* 222 */                     c.onLoadData(r.data.comments);
/* 223 */                 }
/* 224 */             }
/* 225 */             ,this
/* 226 */         );
/* 227 */ 
/* 228 */         if(ready) {
/* 229 */ 
/* 230 */             var el = this.dataView.getEl().down('.asNext')
/* 231 */                 ,s = this.store
/* 232 */                 ,p = s.proxy
/* 233 */                 ,start = Ext.valueFrom(p.extraParams.start, 0)
/* 234 */                 ,total = p.reader.rawData.total
/* 235 */                 ,rez = '';
/* 236 */ 
/* 237 */             if (el && (total > 0) && (start + s.getCount() < total)) {
/* 238 */                 el.setStyle('display', 'inherit');
/* 239 */             }
/* 240 */ 
/* 241 */             this.dataView.scrollTo(0, 0, false);
/* 242 */         } else {
/* 243 */             Ext.defer(this.addCommentPlugins, 200, this);
/* 244 */         }
/* 245 */     }
/* 246 */ 
/* 247 */     ,onContainerClick: function(view, e, eOpts) {
/* 248 */         var el = e.getTarget('.asNext');
/* 249 */ 
/* 250 */         if(el) {

/* ActivityStream.js */

/* 251 */             this.fireEvent(
/* 252 */                 'changeparams'
/* 253 */                 ,{
/* 254 */                     start: Ext.valueFrom(this.store.proxy.extraParams.start, 0) + this.store.getCount()
/* 255 */                 }
/* 256 */             );
/* 257 */         }
/* 258 */     }
/* 259 */ 
/* 260 */     /**
/* 261 *|      * called from view container when reload is clicked
/* 262 *|      * @return void
/* 263 *|      */
/* 264 */     ,onContainerReloadClick: function(params) {
/* 265 */         delete params.start;
/* 266 */         delete params.page;
/* 267 */     }
/* 268 */ 
/* 269 */     ,onActivate: function() {
/* 270 */         this.fireEvent(
/* 271 */             'settoolbaritems'
/* 272 */             ,[
/* 273 */                 ,'->'
/* 274 */                 ,'reload'
/* 275 */                 ,'apps'
/* 276 */                 ,'-'
/* 277 */                 ,'more'
/* 278 */             ]
/* 279 */         );
/* 280 */     }
/* 281 */ 
/* 282 */ });
/* 283 */ 

;
/* Paging.js */

/* 1  */ Ext.namespace('CB.browser.view.grid.toolbar');
/* 2  */ 
/* 3  */ Ext.define('CB.browser.view.grid.toolbar.Paging', {
/* 4  */     extend: 'Ext.toolbar.Paging'
/* 5  */ 
/* 6  */     ,xtype: 'CBBrowserViewGridPagingToolbar'
/* 7  */ 
/* 8  */     ,border: false
/* 9  */     ,displayInfo: true
/* 10 */     ,displayMsg: '{0} - {1} of {2}'
/* 11 */ 
/* 12 */     ,initComponent: function(){
/* 13 */         var me = this;
/* 14 */ 
/* 15 */         this._getPagingItems = this.getPagingItems;
/* 16 */         this.getPagingItems = this.getCustomizedPaginItems;
/* 17 */ 
/* 18 */         this.setCustomItems();
/* 19 */ 
/* 20 */         me.callParent();
/* 21 */ 
/* 22 */         //move display info and spacer before custom buttons
/* 23 */         // var i = me.items.last();
/* 24 */         // me.items.remove(i);
/* 25 */         // me.items.insert(5, i);
/* 26 */ 
/* 27 */         // i = me.items.last();
/* 28 */         // me.items.remove(i);
/* 29 */         // me.items.insert(6, i);
/* 30 */ 
/* 31 */ 
/* 32 */         // enable bubble for event of export button
/* 33 */         this.enableBubble('exportrecords');
/* 34 */ 
/* 35 */         // update columns combo on grid reconfiguration
/* 36 */         // this.ownerCt.on('reconfigure', this.onGridReconfigure, this);
/* 37 */     }
/* 38 */ 
/* 39 */     ,getCustomizedPaginItems: function() {
/* 40 */         var rez = this._getPagingItems();
/* 41 */ 
/* 42 */         rez.shift(); //remove "first page" button
/* 43 */         rez.pop(); //remove reload button
/* 44 */         rez.pop(); //remove divider
/* 45 */         rez.pop(); //remove "last page" button
/* 46 */         rez.splice(1, 1); // remove splitter
/* 47 */         rez.splice(4, 1); // remove socond splitter
/* 48 */ 
/* 49 */         return rez;
/* 50 */     }

/* Paging.js */

/* 51 */ 
/* 52 */     ,setCustomItems: function() {
/* 53 */         var me = this;
/* 54 */ 
/* 55 */         // me.items = [{
/* 56 */         //     xtype: 'combo'
/* 57 */         //     ,disabled: true
/* 58 */         //     ,fieldLabel: L.Group
/* 59 */         //     ,labelWidth: 'auto'
/* 60 */         //     ,store: {
/* 61 */         //         type: 'json'
/* 62 */         //         ,model: 'Generic2'
/* 63 */         //     }
/* 64 */         //     ,queryMode: 'local'
/* 65 */         //     ,displayField: 'name'
/* 66 */         //     ,valueField: 'id'
/* 67 */         // },{
/* 68 */         //     iconCls: 'i-table-export'
/* 69 */         //     ,qtip: L.Export
/* 70 */         //     ,scope: this
/* 71 */         //     ,handler: this.onExportClick
/* 72 */         // },{
/* 73 */         //     iconCls: 'i-points'
/* 74 */         //     ,disabled: true
/* 75 */ 
/* 76 */         // }];
/* 77 */     }
/* 78 */ 
/* 79 */     ,onGridReconfigure: function(grid, store, columns, oldStore, oldColumns, eOpts) {
/* 80 */         clog('columns', arguments);
/* 81 */     }
/* 82 */ 
/* 83 */     // ,onExportClick: function(b, e) {
/* 84 */     //     this.fireEvent('exportrecords', this, e);
/* 85 */     // }
/* 86 */ });
/* 87 */ 

;
/* Grouping.js */

/* 1  */ Ext.namespace('CB.browser.view.grid.feature');
/* 2  */ 
/* 3  */ Ext.define('CB.browser.view.grid.feature.Grouping', {
/* 4  */     extend: 'Ext.grid.feature.Grouping'
/* 5  */ 
/* 6  */     ,alias: 'feature.cbGridViewGrouping'
/* 7  */ 
/* 8  */     ,storeExtraParams: {}
/* 9  */ 
/* 10 */     ,init: function() {
/* 11 */         this.callParent(arguments);
/* 12 */ 
/* 13 */         var me = this
/* 14 */             ,view = me.view
/* 15 */             ,store = view.store;
/* 16 */ 
/* 17 */         store.on('beforeload', this.onBeforeStoreLoad, this);
/* 18 */         store.on('load', this.onStoreLoad, this, {delay: 200});
/* 19 */     }
/* 20 */ 
/* 21 */     ,onStoreLoad: function(store, operation, eOpts) {
/* 22 */         delete store.proxy.extraParams.userGroup;
/* 23 */         delete this.storeExtraParams.userGroup;
/* 24 */     }
/* 25 */ 
/* 26 */     ,onBeforeStoreLoad: function(store, operation, eOpts) {
/* 27 */         Ext.apply(store.proxy.extraParams, this.storeExtraParams);
/* 28 */     }
/* 29 */ 
/* 30 */     ,onGroupMenuItemClick: function(menuItem, e) {
/* 31 */         var me = this
/* 32 */             ,menu = menuItem.parentMenu
/* 33 */             ,hdr  = menu.activeHeader
/* 34 */             ,sgf
/* 35 */             ,view = me.view
/* 36 */             ,store = view.store;
/* 37 */ 
/* 38 */         if(hdr && store.remoteSort) {
/* 39 */             sgf = hdr.dataIndex;
/* 40 */ 
/* 41 */             this.groupTitle = hdr.text;
/* 42 */ 
/* 43 */             this.storeExtraParams = {
/* 44 */                 userGroup: 1
/* 45 */                 ,sourceGroupField: sgf
/* 46 */             };
/* 47 */ 
/* 48 */             hdr.dataIndex = 'group';
/* 49 */         }
/* 50 */ 

/* Grouping.js */

/* 51 */         this.callParent(arguments);
/* 52 */ 
/* 53 */         if(hdr) {
/* 54 */             hdr.dataIndex = sgf;
/* 55 */         }
/* 56 */     }
/* 57 */ 
/* 58 */     ,setupRowData: function(record, idx, rowValues) {
/* 59 */         this.callParent(arguments);
/* 60 */         if(rowValues.isFirstRow) {
/* 61 */             if(this.refreshData.header) {
/* 62 */                 this.lastColumnTitle = this.refreshData.header.text;
/* 63 */             }
/* 64 */             rowValues.groupInfo.columnName = this.lastColumnTitle;
/* 65 */         }
/* 66 */     }
/* 67 */ 
/* 68 */     ,getGroupedHeader: function(groupField) {
/* 69 */         var rez = this.callParent([Ext.valueFrom(this.storeExtraParams.sourceGroupField, groupField)]);
/* 70 */ 
/* 71 */         return rez;
/* 72 */     }
/* 73 */ 
/* 74 */     ,disable: function() {
/* 75 */         var me = this
/* 76 */             ,view = me.view
/* 77 */             ,store = view.store;
/* 78 */ 
/* 79 */         store.remoteSort = false;
/* 80 */ 
/* 81 */         this.callParent(arguments);
/* 82 */ 
/* 83 */         store.remoteSort = true;
/* 84 */     }
/* 85 */ });
/* 86 */ 

;
/* Calendar.js */

/* 1   */ Ext.namespace('CB.browser.view');
/* 2   */ 
/* 3   */ 
/* 4   */ Ext.define('CB.browser.view.CalendarPanel', {
/* 5   */     extend: 'CB.browser.view.Interface'
/* 6   */     ,border: false
/* 7   */     ,closable: true
/* 8   */     ,layout: 'fit'
/* 9   */ 
/* 10  */     ,initComponent: function(){
/* 11  */         this.view = new CB.browser.view.Calendar();
/* 12  */ 
/* 13  */         Ext.apply(this,{
/* 14  */             items: this.view
/* 15  */         });
/* 16  */ 
/* 17  */         this.callParent(arguments);
/* 18  */     }
/* 19  */ });
/* 20  */ 
/* 21  */ 
/* 22  */ Ext.define('CB.Calendar', {
/* 23  */     extend: 'Ext.calendar.CalendarPanel'
/* 24  */     ,activeItem: 2 // month view
/* 25  */     ,border: false
/* 26  */     // CalendarPanel supports view-specific configs that are passed through to the
/* 27  */     // underlying views to make configuration possible without explicitly having to
/* 28  */     // create those views at this level:
/* 29  */     ,monthViewCfg: {
/* 30  */         showHeader: true
/* 31  */         ,showWeekLinks: true
/* 32  */         ,showWeekNumbers: false
/* 33  */     }
/* 34  */     ,showNavBar: true
/* 35  */     ,params: {
/* 36  */     }
/* 37  */ 
/* 38  */     ,initComponent: function(){
/* 39  */         // This is an example calendar store that enables event color-coding
/* 40  */         this.calendarStore = Ext.create('Ext.calendar.data.MemoryCalendarStore', {
/* 41  */             data: { "calendars":[{ id:1, title:"CaseBox" }] } // defined in calendar-list.js
/* 42  */         });
/* 43  */ 
/* 44  */         // A sample event store that loads static JSON from a local file. Obviously a real
/* 45  */         // implementation would likely be loading remote data via an HttpProxy, but the
/* 46  */         // underlying store functionality is the same.
/* 47  */         this.eventStore = Ext.create('Ext.calendar.data.MemoryEventStore', {
/* 48  */             autoLoad: false
/* 49  */             ,autoDestroy: true
/* 50  */         });

/* Calendar.js */

/* 51  */ 
/* 52  */         this.eventsReloadTask = new Ext.util.DelayedTask( this.doReloadEventsStore, this);
/* 53  */ 
/* 54  */         Ext.apply(this, {
/* 55  */             listeners: {
/* 56  */                 scope: this
/* 57  */ 
/* 58  */                 ,eventclick: function(vw, rec, el){
/* 59  */                     this.showEditWindow(rec, el);
/* 60  */                     this.clearMsg();
/* 61  */                 }
/* 62  */ 
/* 63  */                 ,eventover: function(vw, rec, el){
/* 64  */                     //console.log('Entered evt rec='+rec.data.Title+', view='+ vw.id +', el='+el.id);
/* 65  */                 }
/* 66  */ 
/* 67  */                 ,eventout: function(vw, rec, el){
/* 68  */                     //console.log('Leaving evt rec='+rec.data.Title+', view='+ vw.id +', el='+el.id);
/* 69  */                 }
/* 70  */ 
/* 71  */                 ,eventadd: function(cp, rec){
/* 72  */                     this.showMsg('Event '+ rec.data.Title +' was added');
/* 73  */                 }
/* 74  */ 
/* 75  */                 ,eventupdate: function(cp, rec){
/* 76  */                     this.showMsg('Event '+ rec.data.Title +' was updated');
/* 77  */                 }
/* 78  */ 
/* 79  */                 ,eventdelete: function(cp, rec){
/* 80  */                     this.eventStore.remove(rec);
/* 81  */                     this.showMsg('Event '+ rec.data.Title +' was deleted');
/* 82  */                 }
/* 83  */ 
/* 84  */                 ,eventcancel: function(cp, rec){
/* 85  */                     // edit canceled
/* 86  */                 }
/* 87  */ 
/* 88  */                 ,viewchange: function(p, vw, dateInfo){
/* 89  */                     if(this.getEl().isVisible(true) !== true) {
/* 90  */                         return;
/* 91  */                     }
/* 92  */ 
/* 93  */                     if(this.editWin) {
/* 94  */                         this.editWin.hide();
/* 95  */                     }
/* 96  */ 
/* 97  */                     if(dateInfo !== null){
/* 98  */                         // will be null when switching to the event edit form so ignore
/* 99  */                         //Ext.getCmp('app-nav-picker').setValue(dateInfo.activeDate);
/* 100 */                         this.updateTitle(dateInfo, vw);

/* Calendar.js */

/* 101 */                         this.eventsReloadTask.delay(200);
/* 102 */                     }
/* 103 */                 }
/* 104 */ 
/* 105 */                 ,dayclick: function(vw, dt, ad, el){
/* 106 */                     this.showEditWindow({ StartDate: dt, IsAllDay: ad }, el);
/* 107 */                     this.clearMsg();
/* 108 */                 }
/* 109 */ 
/* 110 */                 ,initdrag: function(vw){
/* 111 */                     // return false;
/* 112 */                     // if(this.editWin && this.editWin.isVisible()) this.editWin.hide();
/* 113 */                 }
/* 114 */             }
/* 115 */         });
/* 116 */ 
/* 117 */         this.callParent(arguments);
/* 118 */ 
/* 119 */         this.enableBubble(['objectopen', 'changeparams', 'reload']);
/* 120 */     }
/* 121 */ 
/* 122 */     ,doReloadEventsStore: function(){
/* 123 */         this.allowedReload = true;
/* 124 */ 
/* 125 */         if(Ext.isEmpty(this.getLayout().activeItem)) {
/* 126 */             return;
/* 127 */         }
/* 128 */ 
/* 129 */         var bounds =  this.getLayout().activeItem.getViewBounds();
/* 130 */         var p = {};
/* 131 */ 
/* 132 */         bounds.end.setHours(23);
/* 133 */         bounds.end.setMinutes(59);
/* 134 */         bounds.end.setSeconds(59);
/* 135 */         bounds.end.setMilliseconds(999);
/* 136 */         // p.dateStart = date_local_to_ISO_string(bounds.start);
/* 137 */         // p.dateEnd = date_local_to_ISO_string(bounds.end);
/* 138 */         p.dateStart = Ext.Date.format(bounds.start, 'Y-m-d') + 'T00:00:00.000Z';
/* 139 */         p.dateEnd = Ext.Date.format(bounds.end, 'Y-m-d') + 'T23:59:59.999Z';
/* 140 */         Ext.apply(this.params, p);
/* 141 */ 
/* 142 */         this.fireEvent('reload', this);
/* 143 */     }
/* 144 */ 
/* 145 */     // The edit popup window is not part of the CalendarPanel itself -- it is a separate component.
/* 146 */         // This makes it very easy to swap it out with a different type of window or custom view, or omit
/* 147 */         // it altogether. Because of this, it's up to the application code to tie the pieces together.
/* 148 */         // Note that this function is called from various event handlers in the CalendarPanel above.
/* 149 */     ,showEditWindow : function(rec, animateTarget){
/* 150 */         if(Ext.isEmpty(rec.data)) {

/* Calendar.js */

/* 151 */             return;
/* 152 */             // rec = new Ext.calendar.EventRecord(rec);
/* 153 */         }
/* 154 */ 
/* 155 */         var s = [{
/* 156 */             nid: rec.data.EventId
/* 157 */             ,template_id: rec.data.template_id
/* 158 */             ,name: rec.data.Title
/* 159 */         }];
/* 160 */ 
/* 161 */         this.fireEvent('selectionchange', s);
/* 162 */     }
/* 163 */ 
/* 164 */     // This is an application-specific way to communicate CalendarPanel event messages back to the user.
/* 165 */     // This could be replaced with a function to do "toast" style messages, growl messages, etc. This will
/* 166 */     // vary based on application requirements, which is why it's not baked into the CalendarPanel.
/* 167 */     ,showMsg: function(msg){
/* 168 */         //Ext.fly('app-msg').update(msg).removeClass('x-hidden');
/* 169 */     }
/* 170 */ 
/* 171 */     ,clearMsg: function(){
/* 172 */         //Ext.fly('app-msg').update('').addClass('x-hidden');
/* 173 */     }
/* 174 */     // The CalendarPanel itself supports the standard Panel title config, but that title
/* 175 */     // only spans the calendar views.  For a title that spans the entire width of the app
/* 176 */     // we added a title to the layout's outer center region that is app-specific. This code
/* 177 */     // updates that outer title based on the currently-selected view range anytime the view changes.
/* 178 */     ,updateTitle: function(dateInfo, view){
/* 179 */         if(Ext.isEmpty(this.titleItem)) {
/* 180 */             return;
/* 181 */         }
/* 182 */ 
/* 183 */         if(Ext.isEmpty(view)) {
/* 184 */             view = this.getLayout().activeItem;
/* 185 */             dateInfo = view.getViewBounds();
/* 186 */         } else if(Ext.isEmpty(dateInfo)) {
/* 187 */             dateInfo = view.getViewBounds();
/* 188 */         }
/* 189 */ 
/* 190 */         var sd = dateInfo.viewStart
/* 191 */             ,ed = dateInfo.viewEnd
/* 192 */             ,ad = dateInfo.activeDate
/* 193 */             ,text = '';
/* 194 */ 
/* 195 */         switch(view.xtype){
/* 196 */             case 'dayview':
/* 197 */                 text = Ext.Date.format(ad, 'F j, Y');
/* 198 */                 break;
/* 199 */ 
/* 200 */             case 'weekview':

/* Calendar.js */

/* 201 */                 if(sd.getFullYear() == ed.getFullYear()) {
/* 202 */                     if(sd.getMonth() == ed.getMonth()) {
/* 203 */                         text = Ext.Date.format(sd, 'F j') + ' - ' + Ext.Date.format(ed, 'j, Y');
/* 204 */                     } else {
/* 205 */                         text = Ext.Date.format(sd, 'F j') + ' - ' + Ext.Date.format(ed, 'F j, Y');
/* 206 */                     }
/* 207 */                 } else {
/* 208 */                     text = Ext.Date.format(sd, 'F j, Y') + ' - ' + Ext.Date.format(ed, 'F j, Y');
/* 209 */                 }
/* 210 */ 
/* 211 */                 break;
/* 212 */ 
/* 213 */             case 'monthview':
/* 214 */                 text = Ext.Date.format(ad, 'F Y');
/* 215 */                 break;
/* 216 */         }
/* 217 */ 
/* 218 */         this.titleItem.text = text;
/* 219 */         this.titleItem.setText(text);
/* 220 */     }
/* 221 */ });
/* 222 */ 
/* 223 */ Ext.define('CB.browser.view.Calendar', {
/* 224 */     extend: 'CB.browser.view.Interface'
/* 225 */     ,xtype: 'CBBrowserViewCalendar'
/* 226 */ 
/* 227 */     ,layout: 'border'
/* 228 */     ,closable: true
/* 229 */     ,border: false
/* 230 */     ,tbarCssClass: 'x-panel-white'
/* 231 */     ,folderProperties: {}
/* 232 */ 
/* 233 */     ,initComponent: function(){
/* 234 */ 
/* 235 */         this.titleItem = new Ext.toolbar.TextItem({
/* 236 */             id: 'caltitle'
/* 237 */             ,cls: 'calendar-title'
/* 238 */             ,text: '<span style="font-size: 16px; font-weight: bold; color: #333"> &nbsp; </span>'
/* 239 */         });
/* 240 */         var viewGroup = Ext.id();
/* 241 */ 
/* 242 */         this.coloringCombo = new Ext.form.ComboBox({
/* 243 */             xtype: 'combo'
/* 244 */             ,itemId: 'coloringCombo'
/* 245 */             ,selectedFacetIndex: 0
/* 246 */             ,forceSelection: true
/* 247 */             ,editable: false
/* 248 */             ,triggerAction: 'all'
/* 249 */             ,lazyRender: true
/* 250 */             ,queryMode: 'local'

/* Calendar.js */

/* 251 */             ,fieldLabel: L.ColoringBy
/* 252 */             ,labelWidth: 'auto'
/* 253 */             ,style: 'margin-right: 10px'
/* 254 */             ,store: new Ext.data.JsonStore({
/* 255 */                 model: 'Generic2'
/* 256 */             })
/* 257 */             ,displayField: 'name'
/* 258 */             ,valueField: 'id'
/* 259 */             ,listeners: {
/* 260 */                 scope: this
/* 261 */                 ,select: this.onColoringComboChange
/* 262 */             }
/* 263 */         });
/* 264 */ 
/* 265 */         this.calendar = new CB.Calendar({
/* 266 */             titleItem: this.titleItem
/* 267 */             ,region: 'center'
/* 268 */             ,border: false
/* 269 */             ,showNavBar: false
/* 270 */             ,listeners:{
/* 271 */                 scope: this
/* 272 */                 ,rangeselect: this.onRangeSelect
/* 273 */                 ,dayclick: this.onDayClick
/* 274 */                 ,selectionchange: this.onSelectionChange
/* 275 */ 
/* 276 */                 //,rangeselect: this.onRangeSelect
/* 277 */                 ,eventmove: function(vw, rec){
/* 278 */                     this.updateRecordDatesRemotely(rec);
/* 279 */                 }
/* 280 */                 ,eventresize: function(vw, rec){
/* 281 */                     this.updateRecordDatesRemotely(rec);
/* 282 */                 }
/* 283 */                 ,viewchange: function(cmp, view) {
/* 284 */                     var BC = this.refOwner.buttonCollection;
/* 285 */ 
/* 286 */                     BC.get(view.xtype).setPressed(true);
/* 287 */                 }
/* 288 */             }
/* 289 */         });
/* 290 */ 
/* 291 */         if(this.store) {
/* 292 */             this.store.on('load', this.onMainStoreLoad, this);
/* 293 */         }
/* 294 */ 
/* 295 */         this.refOwner.buttonCollection.addAll(
/* 296 */             new Ext.Button({
/* 297 */                 text: L.Day
/* 298 */                 ,itemId: 'dayview'
/* 299 */                 ,enableToggle: true
/* 300 */                 ,allowDepress: false

/* Calendar.js */

/* 301 */                 // ,iconCls: 'ib-cal-day'
/* 302 */                 ,scale: 'medium'
/* 303 */                 ,toggleGroup: 'cv' + viewGroup
/* 304 */                 ,scope: this.calendar
/* 305 */                 ,handler: this.calendar.onDayClick
/* 306 */             })
/* 307 */ 
/* 308 */             ,new Ext.Button({
/* 309 */                 text: L.Week
/* 310 */                 ,itemId: 'weekview'
/* 311 */                 ,enableToggle: true
/* 312 */                 ,allowDepress: false
/* 313 */                 // ,iconCls: 'ib-cal-week'
/* 314 */                 ,scale: 'medium'
/* 315 */                 ,toggleGroup: 'cv' + viewGroup
/* 316 */                 ,scope: this.calendar
/* 317 */                 ,handler: this.calendar.onWeekClick
/* 318 */             })
/* 319 */ 
/* 320 */             ,new Ext.Button({
/* 321 */                 text: L.Month
/* 322 */                 ,itemId: 'monthview'
/* 323 */                 ,enableToggle: true
/* 324 */                 ,allowDepress: false
/* 325 */                 // ,iconCls: 'ib-cal-month'
/* 326 */                 ,scale: 'medium'
/* 327 */                 ,toggleGroup: 'cv' + viewGroup
/* 328 */                 ,pressed: true
/* 329 */                 ,scope: this.calendar
/* 330 */                 ,handler: this.calendar.onMonthClick
/* 331 */             })
/* 332 */ 
/* 333 */             ,new Ext.Button({
/* 334 */                 itemId: 'calprev'
/* 335 */                 ,iconCls: 'im-arr-l'
/* 336 */                 ,scale: 'medium'
/* 337 */                 ,scope: this.calendar
/* 338 */                 ,handler: this.calendar.onPrevClick
/* 339 */             })
/* 340 */ 
/* 341 */             ,new Ext.Button({
/* 342 */                 itemId: 'calnext'
/* 343 */                 ,iconCls: 'im-arr-r'
/* 344 */                 ,scale: 'medium'
/* 345 */                 ,scope: this.calendar
/* 346 */                 ,handler: this.calendar.onNextClick
/* 347 */             })
/* 348 */ 
/* 349 */             ,this.titleItem
/* 350 */             ,this.coloringCombo

/* Calendar.js */

/* 351 */         );
/* 352 */ 
/* 353 */         Ext.apply(this, {
/* 354 */             title: L.Calendar
/* 355 */             ,items: this.calendar
/* 356 */             ,listeners: {
/* 357 */                 scope: this
/* 358 */                 ,activate: this.onActivate
/* 359 */             }
/* 360 */         });
/* 361 */ 
/* 362 */         this.callParent(arguments);
/* 363 */ 
/* 364 */         this.enableBubble(['createobject', 'reload']);
/* 365 */     }
/* 366 */ 
/* 367 */     ,getViewParams: function() {
/* 368 */         var p = {
/* 369 */             from: 'calendar'
/* 370 */             ,selectedColoring: this.selectedColoring
/* 371 */         };
/* 372 */         Ext.apply(p, this.calendar.params);
/* 373 */ 
/* 374 */         return p;
/* 375 */     }
/* 376 */ 
/* 377 */     ,onMainStoreLoad: function(store, records, options) {
/* 378 */         var el = this.getEl();
/* 379 */ 
/* 380 */         if(Ext.isEmpty(el) || !el.isVisible(true)) {
/* 381 */             return;
/* 382 */         }
/* 383 */ 
/* 384 */         this.loadColoringFacets();
/* 385 */ 
/* 386 */         var data = [];
/* 387 */ 
/* 388 */         store.each(
/* 389 */             function(r) {
/* 390 */                 var d = r.data;
/* 391 */ 
/* 392 */                 d.date = Ext.valueFrom(d.date, d.date_end);
/* 393 */ 
/* 394 */                 var sd = App.customRenderers.datetime(d.date);
/* 395 */                 var ed = App.customRenderers.datetime(d.date_end);
/* 396 */                 var ad = ((sd.length < 11) && (ed.length < 11));
/* 397 */                 if(!Ext.isEmpty(d.date)) {
/* 398 */                     data.push({
/* 399 */                         EventId: d.nid //id
/* 400 */                         ,IsAllDay: ad //ad

/* Calendar.js */

/* 401 */                         ,category_id: d.category_id
/* 402 */                         ,CalendarId: 1 //that's calendar id (cid)
/* 403 */                         ,StartDate: d.date //start
/* 404 */                         ,EndDate: Ext.valueFrom(d.date_end, d.date) //end
/* 405 */                         ,task_status: d.task_status
/* 406 */                         ,template_id: d.template_id
/* 407 */                         ,Title: d.name //title
/* 408 */                         ,cls: d.cls
/* 409 */                         ,style: d.style
/* 410 */                     });
/* 411 */                 }
/* 412 */             }
/* 413 */             ,this
/* 414 */         );
/* 415 */ 
/* 416 */         this.calendar.eventStore.loadData(data);
/* 417 */ 
/* 418 */     }
/* 419 */ 
/* 420 */     ,loadColoringFacets: function() {
/* 421 */         var rawData = this.store.proxy.reader.rawData
/* 422 */             ,vp = Ext.valueFrom(rawData.view, {})
/* 423 */             ,coloring = Ext.valueFrom(vp.coloring, [])
/* 424 */             ,data = [];
/* 425 */ 
/* 426 */         if(Ext.isEmpty(this.selectedColoring)) {
/* 427 */             this.selectedColoring = vp.defaultColoring;
/* 428 */         }
/* 429 */ 
/* 430 */         Ext.iterate(
/* 431 */             rawData.facets
/* 432 */             ,function(key, val, o) {
/* 433 */                 if(coloring.indexOf(val.f) > -1) {
/* 434 */                     data.push({
/* 435 */                         id: val.f
/* 436 */                         ,name: val.title
/* 437 */                     });
/* 438 */ 
/* 439 */                     if(Ext.isEmpty(this.selectedColoring)) {
/* 440 */                         this.selectedColoring = val.f;
/* 441 */                     }
/* 442 */                 }
/* 443 */             }
/* 444 */             ,this
/* 445 */         );
/* 446 */ 
/* 447 */         this.coloringCombo.store.loadData(data);
/* 448 */         this.coloringCombo.setValue(this.selectedColoring);
/* 449 */         this.coloringCombo.setHidden(this.coloringCombo.store.getCount() < 2);
/* 450 */     }

/* Calendar.js */

/* 451 */ 
/* 452 */     ,onColoringComboChange: function(c, rec, eOpts) {
/* 453 */         this.selectedColoring = c.getValue();
/* 454 */ 
/* 455 */         this.fireEvent('reload', this);
/* 456 */     }
/* 457 */ 
/* 458 */     ,onChangeViewClick: function() {
/* 459 */ 
/* 460 */     }
/* 461 */ 
/* 462 */     ,onRangeSelect: function(c, range, callback){
/* 463 */         var allday = ((Ext.Date.format(range.StartDate, 'H:i:s') === '00:00:00') && (Ext.Date.format(range.EndDate, 'H:i:s') === '23:59:59') ) ? 1 : -1;
/* 464 */         var prefix = (allday == 1) ? 'date' : 'datetime';
/* 465 */         var data = {
/* 466 */             pid: this.refOwner.folderProperties.id
/* 467 */             ,template_id: App.config.default_task_template
/* 468 */             ,data: {
/* 469 */                 allday: {
/* 470 */                     value: allday
/* 471 */                     ,childs: {}
/* 472 */                 }
/* 473 */             }
/* 474 */         };
/* 475 */         data.data.allday.childs[prefix + '_start'] = range.StartDate;
/* 476 */         data.data.allday.childs[prefix + '_end'] = range.EndDate;
/* 477 */ 
/* 478 */         this.fireEvent('createobject', data);
/* 479 */         callback();
/* 480 */     }
/* 481 */ 
/* 482 */     ,onDayClick: function(c, date, ad, el){
/* 483 */         var allday = (Ext.Date.format(date, 'H:i:s') === '00:00:00') ? 1 : -1;
/* 484 */         var prefix = (allday == 1) ? 'date' : 'datetime';
/* 485 */         var data = {
/* 486 */             pid: this.refOwner.folderProperties.id
/* 487 */             ,template_id: App.config.default_task_template
/* 488 */             ,data: {
/* 489 */                 allday: {
/* 490 */                     value: allday
/* 491 */                     ,childs: {
/* 492 */                         date_start: date
/* 493 */                     }
/* 494 */                 }
/* 495 */             }
/* 496 */         };
/* 497 */         data.data.allday.childs[prefix + '_start'] = date;
/* 498 */ 
/* 499 */         this.fireEvent('createobject', data);
/* 500 */     }

/* Calendar.js */

/* 501 */ 
/* 502 */     ,onActivate: function() {
/* 503 */         this.fireEvent(
/* 504 */             'settoolbaritems'
/* 505 */             ,[
/* 506 */                 ,'calprev'
/* 507 */                 ,'calnext'
/* 508 */                 ,'caltitle'
/* 509 */                 ,'->'
/* 510 */                 ,'coloringCombo'
/* 511 */                 ,'dayview'
/* 512 */                 ,'weekview'
/* 513 */                 ,'monthview'
/* 514 */                 ,'-'
/* 515 */                 ,'reload'
/* 516 */                 ,'apps'
/* 517 */                 ,'-'
/* 518 */                 ,'more'
/* 519 */             ]
/* 520 */         );
/* 521 */ 
/* 522 */         this.calendar.fireViewChange();
/* 523 */     }
/* 524 */ 
/* 525 */     ,onSelectionChange: function(selection) {
/* 526 */         // this.fireEvent('selectionchange', selection);
/* 527 */         if(selection) {
/* 528 */             var data = Ext.isArray(selection)
/* 529 */                 ? data = selection[0]
/* 530 */                 : selection;
/* 531 */ 
/* 532 */             this.fireEvent('openobject', data);
/* 533 */         }
/* 534 */     }
/* 535 */ 
/* 536 */     ,updateRecordDatesRemotely: function(record){
/* 537 */         var dateEnd = date_local_to_ISO_string(record.get('EndDate'));
/* 538 */ 
/* 539 */         if(this.store) {
/* 540 */             var r = this.store.findRecord('nid', record.get('EventId'), 0, false, true, true);
/* 541 */             if(r) {
/* 542 */                 if(Ext.isEmpty(r.get('date_end'))) {
/* 543 */                     dateEnd = null;
/* 544 */                 }
/* 545 */             }
/* 546 */         }
/* 547 */ 
/* 548 */         CB_Tasks.updateDates(
/* 549 */             {
/* 550 */                 id: record.get('EventId')

/* Calendar.js */

/* 551 */                 ,date_start: date_local_to_ISO_string(record.get('StartDate'))
/* 552 */                 ,date_end: date_local_to_ISO_string(dateEnd)
/* 553 */             }
/* 554 */             ,function(r, e){
/* 555 */                 if(!r || (r.success !== true)) {
/* 556 */                     this.reject();
/* 557 */                 } else {
/* 558 */                     this.commit();
/* 559 */                 }
/* 560 */             }
/* 561 */             ,record
/* 562 */         );
/* 563 */     }
/* 564 */ });
/* 565 */ 

;
/* Charts.js */

/* 1   */ Ext.namespace('CB.browser.view');
/* 2   */ 
/* 3   */ Ext.define('CB.browser.view.Charts', {
/* 4   */     extend: 'CB.browser.view.Interface'
/* 5   */     ,xtype: 'CBBrowserViewCharts'
/* 6   */ 
/* 7   */     ,border: false
/* 8   */     ,tbarCssClass: 'x-panel-white'
/* 9   */     ,layout: 'border'
/* 10  */     ,params: {
/* 11  */         from: 'charts'
/* 12  */         ,facets: 'general'
/* 13  */         // ,rows: 0
/* 14  */     }
/* 15  */ 
/* 16  */     ,initComponent: function(){
/* 17  */         this.instanceId = this.refOwner.instanceId;
/* 18  */ 
/* 19  */         this.facetsCombo = new Ext.form.ComboBox({
/* 20  */             xtype: 'combo'
/* 21  */             ,itemId: 'facetscombo'
/* 22  */             ,forceSelection: true
/* 23  */             ,triggerAction: 'all'
/* 24  */             ,lazyRender: true
/* 25  */             ,queryMode: 'local'
/* 26  */             ,fieldLabel: 'Facets'
/* 27  */             ,cls: 'fs12'
/* 28  */             ,labelWidth: 'auto'
/* 29  */             ,editable: false
/* 30  */             ,store: new Ext.data.JsonStore({
/* 31  */                 model: 'Generic2'
/* 32  */                 ,data: []
/* 33  */             })
/* 34  */             ,displayField: 'name'
/* 35  */             ,valueField: 'id'
/* 36  */             ,listeners: {
/* 37  */                 scope: this
/* 38  */                 ,select: this.onFacetChange
/* 39  */             }
/* 40  */         });
/* 41  */ 
/* 42  */         this.sortButton = new Ext.Button({
/* 43  */             itemId: 'chartsSortButton'
/* 44  */             ,scale: 'medium'
/* 45  */             ,iconCls: 'im-sort'
/* 46  */             ,style: 'margin-left: 10px'
/* 47  */             ,text: ''
/* 48  */             ,menu: [
/* 49  */                 {
/* 50  */                     text: L.SortByNameAsc

/* Charts.js */

/* 51  */                     ,sort: 'name'
/* 52  */                     ,direction: 'asc'
/* 53  */                     ,scope: this
/* 54  */                     ,handler: this.onSortButtonClick
/* 55  */                 },{
/* 56  */                     text: L.SortByNameDesc
/* 57  */                     ,sort: 'name'
/* 58  */                     ,direction: 'desc'
/* 59  */                     ,scope: this
/* 60  */                     ,handler: this.onSortButtonClick
/* 61  */                 },{
/* 62  */                     text: L.SortByCountAsc
/* 63  */                     ,sort: 'count'
/* 64  */                     ,direction: 'asc'
/* 65  */                     ,scope: this
/* 66  */                     ,handler: this.onSortButtonClick
/* 67  */                 },{
/* 68  */                     text: L.SortByCountDesc
/* 69  */                     ,sort: 'count'
/* 70  */                     ,direction: 'desc'
/* 71  */                     ,scope: this
/* 72  */                     ,handler: this.onSortButtonClick
/* 73  */                 }
/* 74  */             ]
/* 75  */         });
/* 76  */ 
/* 77  */         this.refOwner.buttonCollection.addAll(
/* 78  */             new Ext.Button({
/* 79  */                 text: L.Bar //L.ChartArea
/* 80  */                 ,itemId: 'barchart'
/* 81  */                 ,scale: 'medium'
/* 82  */                 ,enableToggle: true
/* 83  */                 ,allowDepress: false
/* 84  */                 // ,iconCls: 'ib-chart-bar'
/* 85  */                 ,toggleGroup: 'cv' + this.instanceId
/* 86  */                 ,scope: this
/* 87  */                 ,handler: this.onChangeChartClick
/* 88  */             })
/* 89  */             ,new Ext.Button({
/* 90  */                 text: L.Column //L.ChartArea
/* 91  */                 ,itemId: 'columnchart'
/* 92  */                 ,scale: 'medium'
/* 93  */                 ,enableToggle: true
/* 94  */                 ,allowDepress: false
/* 95  */                 // ,iconCls: 'ib-chart-column'
/* 96  */                 // ,iconAlign:'top'
/* 97  */                 ,toggleGroup: 'cv' + this.instanceId
/* 98  */                 ,scope: this
/* 99  */                 ,handler: this.onChangeChartClick
/* 100 */             })

/* Charts.js */

/* 101 */             ,new Ext.Button({
/* 102 */                 text: L.Pie //L.ChartPie
/* 103 */                 ,scale: 'medium'
/* 104 */                 ,itemId: 'piechart'
/* 105 */                 ,enableToggle: true
/* 106 */                 ,allowDepress: false
/* 107 */                 // ,iconCls: 'ib-chart-pie'
/* 108 */                 // ,iconAlign:'top'
/* 109 */                 ,toggleGroup: 'cv' + this.instanceId
/* 110 */                 ,scope: this
/* 111 */                 ,handler: this.onChangeChartClick
/* 112 */             })
/* 113 */             ,this.facetsCombo
/* 114 */             ,this.sortButton
/* 115 */         );
/* 116 */ 
/* 117 */         this.chartBlock = new CB.widget.block.Chart({
/* 118 */             region: 'center'
/* 119 */             ,scrollable: true
/* 120 */             ,border: false
/* 121 */             ,listeners: {
/* 122 */                 scope: this
/* 123 */                 ,itemclick: this.onChartItemClick
/* 124 */             }
/* 125 */         });
/* 126 */ 
/* 127 */         Ext.apply(this, {
/* 128 */             title: L.Charts
/* 129 */             ,header: false
/* 130 */             ,layout: 'fit'
/* 131 */             ,items: [
/* 132 */                 this.chartBlock
/* 133 */             ]
/* 134 */             ,listeners: {
/* 135 */                 scope: this
/* 136 */                 ,activate: this.onActivate
/* 137 */             }
/* 138 */         });
/* 139 */ 
/* 140 */         this.callParent(arguments);
/* 141 */ 
/* 142 */         this.currentButton = this.refOwner.buttonCollection.get('barchart');
/* 143 */ 
/* 144 */         this.selectedFacets = [];
/* 145 */ 
/* 146 */         this.store.on('load', this.onStoreLoad, this);
/* 147 */     }
/* 148 */ 
/* 149 */     ,getViewParams: function() {
/* 150 */         return this.params;

/* Charts.js */

/* 151 */     }
/* 152 */ 
/* 153 */     ,onActivate: function() {
/* 154 */         this.selectedFacets = [];
/* 155 */ 
/* 156 */         this.fireEvent(
/* 157 */             'settoolbaritems'
/* 158 */             ,[
/* 159 */                 'facetscombo'
/* 160 */                 ,'chartsSortButton'
/* 161 */                 ,'->'
/* 162 */                 // ,'linechart'
/* 163 */                 ,'barchart'
/* 164 */                 // ,'stackedbarchart'
/* 165 */                 ,'columnchart'
/* 166 */                 // ,'stackedcolumnchart'
/* 167 */                 ,'piechart'
/* 168 */                 ,'-'
/* 169 */                 ,'reload'
/* 170 */                 ,'apps'
/* 171 */                 ,'-'
/* 172 */                 ,'more'
/* 173 */             ]
/* 174 */         );
/* 175 */     }
/* 176 */ 
/* 177 */     ,onChangeChartClick: function(b, e) {
/* 178 */         this.chartData.charts = [b.itemId.split('chart').shift()];
/* 179 */ 
/* 180 */         this.onChangeChart();
/* 181 */ 
/* 182 */         this.chartBlock.changeCharts(this.chartData.charts);
/* 183 */     }
/* 184 */ 
/* 185 */     ,onChangeChart: function() {
/* 186 */         var BC = this.refOwner.buttonCollection
/* 187 */             ,ch = this.chartData.charts;
/* 188 */ 
/* 189 */         BC.get('barchart').toggle(ch.indexOf('bar') > -1, true);
/* 190 */         BC.get('columnchart').toggle(ch.indexOf('column') > -1, true);
/* 191 */         BC.get('piechart').toggle(ch.indexOf('pie') > -1, true);
/* 192 */     }
/* 193 */ 
/* 194 */     ,onStoreLoad: function(store, recs, successful, eOpts) {
/* 195 */         if(!this.rendered ||
/* 196 */             !this.getEl().isVisible(true) ||
/* 197 */             (successful !== true)
/* 198 */         ) {
/* 199 */             return;
/* 200 */         }

/* Charts.js */

/* 201 */ 
/* 202 */         this.loadRemoteData(store.proxy.reader.rawData);
/* 203 */     }
/* 204 */ 
/* 205 */     ,loadRemoteData: function(rd) {
/* 206 */         var selectedValues = {
/* 207 */             charts: ['bar']
/* 208 */         };
/* 209 */ 
/* 210 */         rd.sorter = this.detectSorter(
/* 211 */             (rd.sort && rd.direction)
/* 212 */             ? rd
/* 213 */             : Ext.valueFrom(rd.view, {})
/* 214 */         );
/* 215 */ 
/* 216 */         if(this.chartData) {
/* 217 */             if(this.selectedFacets) {
/* 218 */                 selectedValues = {
/* 219 */                     facet: this.selectedFacets[0]
/* 220 */                 };
/* 221 */             }
/* 222 */ 
/* 223 */             selectedValues.charts = this.chartData.charts;
/* 224 */         }
/* 225 */ 
/* 226 */         this.chartData = this.chartBlock.loadData(rd, selectedValues);
/* 227 */ 
/* 228 */         this.selectedFacets = [this.chartData.facet];
/* 229 */ 
/* 230 */         this.loadAvailableFacets(rd.facets);
/* 231 */ 
/* 232 */         this.onChangeChart();
/* 233 */     }
/* 234 */ 
/* 235 */     ,loadAvailableFacets: function(facets) {
/* 236 */         var data = [];
/* 237 */ 
/* 238 */         Ext.iterate(
/* 239 */             facets
/* 240 */             ,function(key, val, o) {
/* 241 */                 // if(Ext.isEmpty(this.selectedFacets)) {
/* 242 */                 //     this.selectedFacets = [key];
/* 243 */                 // }
/* 244 */                 data.push({
/* 245 */                     id: key
/* 246 */                     ,name: Ext.htmlDecode(Ext.valueFrom(val['title'], L['facet_' + key]))
/* 247 */                 });
/* 248 */             }
/* 249 */             ,this
/* 250 */         );

/* Charts.js */

/* 251 */ 
/* 252 */         /* there is some Ext bug on first combobox display
/* 253 *|             When expanding it - it has no data
/* 254 *|         */
/* 255 */         var st = this.facetsCombo.store;
/* 256 */         st.removeAll();
/* 257 */         st.loadData(data);
/* 258 */ 
/* 259 */         this.facetsCombo.setValue(this.selectedFacets[0]);
/* 260 */     }
/* 261 */ 
/* 262 */     ,onChartItemClick: function(o, event){
/* 263 */         var params = {
/* 264 */             view: 'grid'
/* 265 */             ,filters: Ext.apply({}, this.store.extraParams.filters)
/* 266 */         };
/* 267 */         var filterBy = this.facetsCombo.getValue();
/* 268 */         params['filters'][filterBy] = [{
/* 269 */             f: filterBy
/* 270 */             ,mode: 'OR'
/* 271 */             ,values: [o.storeItem.get('id')]
/* 272 */         }];
/* 273 */ 
/* 274 */         this.fireEvent('changeparams', params);
/* 275 */     }
/* 276 */ 
/* 277 */     ,onFacetChange: function(combo, records, index) {
/* 278 */         var record = Ext.isArray(records)
/* 279 */             ? records[0]
/* 280 */             : records;
/* 281 */ 
/* 282 */         this.selectedFacets[0] = record.get('id');
/* 283 */ 
/* 284 */         this.loadRemoteData(this.store.proxy.reader.rawData);
/* 285 */     }
/* 286 */ 
/* 287 */     /**
/* 288 *|      * handler for sort button items
/* 289 *|      * @param  object b
/* 290 *|      * @param  event e
/* 291 *|      * @return void
/* 292 *|      */
/* 293 */     ,onSortButtonClick: function(b, e) {
/* 294 */         var rd = this.store.proxy.reader.rawData;
/* 295 */ 
/* 296 */         rd.sort = b.sort;
/* 297 */         rd.direction = b.direction;
/* 298 */ 
/* 299 */         this.loadRemoteData(rd);
/* 300 */ 

/* Charts.js */

/* 301 */         this.sortButton.setText(b.text);
/* 302 */     }
/* 303 */ 
/* 304 */     /**
/* 305 *|      * detect sorter to be used according to given params
/* 306 *|      * default is sort by name ascending
/* 307 *|      *
/* 308 *|      * @param  object params
/* 309 *|      * @return function | null
/* 310 *|      */
/* 311 */     ,detectSorter: function(params) {
/* 312 */         if(Ext.isEmpty(params.sort)) {
/* 313 */             params.sort = 'name';
/* 314 */         }
/* 315 */         if(Ext.isEmpty(params.direction)) {
/* 316 */             params.direction = 'asc';
/* 317 */         }
/* 318 */ 
/* 319 */         var translationIndex = 'SortBy' + Ext.String.capitalize(params.sort) + Ext.String.capitalize(params.direction);
/* 320 */ 
/* 321 */         this.sortButton.setText(L[translationIndex]);
/* 322 */ 
/* 323 */         return this.callParent(arguments);
/* 324 */     }
/* 325 */ });
/* 326 */ 

;
/* Dashboard.js */

/* 1   */ Ext.namespace('CB.browser.view');
/* 2   */ 
/* 3   */ Ext.define('CB.browser.view.Dashboard',{
/* 4   */     extend: 'CB.browser.view.Interface'
/* 5   */ 
/* 6   */     ,xtype: 'CBBrowserViewDashboard'
/* 7   */ 
/* 8   */     ,border: false
/* 9   */     ,tbarCssClass: 'x-panel-white'
/* 10  */ 
/* 11  */     ,scrollable: true
/* 12  */ 
/* 13  */     ,initComponent: function(){
/* 14  */ 
/* 15  */         Ext.apply(this, {
/* 16  */             title: L.Dashboard
/* 17  */             ,viewName: 'dashboard'
/* 18  */             ,header: false
/* 19  */             ,layout: {
/* 20  */                 type: 'table'
/* 21  */                 ,columns: 1
/* 22  */                 ,tableAttrs: {
/* 23  */                     style: {
/* 24  */                         width: '100%'
/* 25  */                     }
/* 26  */                 }
/* 27  */             }
/* 28  */             // ,style: 'background-color: #e9eaed'
/* 29  */             ,defaults: {
/* 30  */                 // applied to each contained panel
/* 31  */                 // bodyStyle: 'padding: 5px; border: 1px solid gray'
/* 32  */                 bodyPadding: 5
/* 33  */                 ,cellCls: 'vaT taC'
/* 34  */             }
/* 35  */             ,items: [
/* 36  */             ]
/* 37  */             ,listeners: {
/* 38  */                 scope: this
/* 39  */                 ,activate: this.onActivate
/* 40  */             }
/* 41  */         });
/* 42  */ 
/* 43  */         this.store.on(
/* 44  */             'load'
/* 45  */             ,this.onStoreLoad
/* 46  */             ,this
/* 47  */             ,{
/* 48  */                 defer: 300
/* 49  */             }
/* 50  */         );

/* Dashboard.js */

/* 51  */ 
/* 52  */         this.callParent(arguments);
/* 53  */     }
/* 54  */ 
/* 55  */     ,updateToolbarButtons: function() {
/* 56  */         this.refOwner.fireEvent(
/* 57  */             'settoolbaritems'
/* 58  */             ,[
/* 59  */                 '->'
/* 60  */                 ,'reload'
/* 61  */                 ,'apps'
/* 62  */                 ,'-'
/* 63  */                 ,'more'
/* 64  */             ]
/* 65  */         );
/* 66  */     }
/* 67  */ 
/* 68  */     ,onStoreLoad: function(store, records, successful, eOpts) {
/* 69  */         var visible = this.getEl().isVisible(true);
/* 70  */ 
/* 71  */         if (!visible) {
/* 72  */             return;
/* 73  */         }
/* 74  */         var rd = store.proxy.reader.rawData
/* 75  */             ,vc = rd.view;
/* 76  */ 
/* 77  */         this.rawData = rd;
/* 78  */ 
/* 79  */         this.removeAll(true);
/* 80  */ 
/* 81  */         this.getLayout().columns = Ext.valueFrom(vc.columns, 1);
/* 82  */ 
/* 83  */         // this.suspendEvents(false);
/* 84  */ 
/* 85  */         this.addItems();
/* 86  */ 
/* 87  */         // this.resumeEvents(true);
/* 88  */ 
/* 89  */         this.updateLayout();
/* 90  */     }
/* 91  */ 
/* 92  */     ,addItems: function() {
/* 93  */         var vc = this.rawData.view;
/* 94  */ 
/* 95  */         Ext.iterate(
/* 96  */             vc.items
/* 97  */             ,function(k, v) {
/* 98  */                 var className = 'CB.widget.block.Base'
/* 99  */                     ,cfg = {
/* 100 */                         params: v

/* Dashboard.js */

/* 101 */                         ,data: this.rawData.blockData[k]
/* 102 */                     };
/* 103 */ 
/* 104 */                 if (!Ext.isEmpty(v.tpl)) {
/* 105 */                     className = 'CB.widget.block.Template';
/* 106 */                 } else if (['map','pivot','chart','grid'].indexOf(v.type) > -1) {
/* 107 */                     className = 'CB.widget.block.' + Ext.String.capitalize(v.type);
/* 108 */                 }
/* 109 */ 
/* 110 */ 
/* 111 */                 Ext.copyTo(cfg, v, 'title,cellCls,rowspan,colspan,width,height,minWidth,minHeight,maxWidth,maxHeight');
/* 112 */ 
/* 113 */                 this.add(
/* 114 */                     Ext.create(className, cfg)
/* 115 */                 );
/* 116 */             }
/* 117 */             ,this
/* 118 */         );
/* 119 */ 
/* 120 */     }
/* 121 */ 
/* 122 */     ,onActivate: function() {
/* 123 */         this.fireEvent(
/* 124 */             'settoolbaritems'
/* 125 */             ,[
/* 126 */                 '->'
/* 127 */                 ,'reload'
/* 128 */                 ,'apps'
/* 129 */                 ,'-'
/* 130 */                 ,'more'
/* 131 */             ]
/* 132 */         );
/* 133 */     }
/* 134 */ });
/* 135 */ 

;
/* Map.js */

/* 1   */ Ext.namespace('CB.browser.view');
/* 2   */ 
/* 3   */ Ext.define('CB.browser.view.Map',{
/* 4   */     extend: 'CB.browser.view.Interface'
/* 5   */ 
/* 6   */     ,xtype: 'CBBrowserViewMap'
/* 7   */ 
/* 8   */     ,border: false
/* 9   */     ,tbarCssClass: 'x-panel-white'
/* 10  */ 
/* 11  */     ,viewParams: {}
/* 12  */ 
/* 13  */     ,initComponent: function(){
/* 14  */ 
/* 15  */         this.mapPanel = Ext.create(
/* 16  */             'CB.LeafletPanel'
/* 17  */             ,{
/* 18  */                 listeners: {
/* 19  */                     scope: this
/* 20  */                     ,mapready: this.onMapReady
/* 21  */                 }
/* 22  */             }
/* 23  */         );
/* 24  */ 
/* 25  */         Ext.apply(this, {
/* 26  */             title: L.Map
/* 27  */             ,viewName: 'map'
/* 28  */             ,header: false
/* 29  */             ,layout: 'fit'
/* 30  */             ,style: 'background-color: #e9eaed'
/* 31  */             ,items: [
/* 32  */                 this.mapPanel
/* 33  */             ]
/* 34  */             ,listeners: {
/* 35  */                 scope: this
/* 36  */                 ,activate: this.onActivate
/* 37  */             }
/* 38  */         });
/* 39  */ 
/* 40  */         this.store.on(
/* 41  */             'load'
/* 42  */             ,this.onStoreLoad
/* 43  */             ,this
/* 44  */             ,{
/* 45  */                 defer: 300
/* 46  */             }
/* 47  */         );
/* 48  */ 
/* 49  */         this.callParent(arguments);
/* 50  */     }

/* Map.js */

/* 51  */ 
/* 52  */     ,updateToolbarButtons: function() {
/* 53  */         this.refOwner.fireEvent(
/* 54  */             'settoolbaritems'
/* 55  */             ,[
/* 56  */                 '->'
/* 57  */                 ,'reload'
/* 58  */                 ,'apps'
/* 59  */                 ,'-'
/* 60  */                 ,'more'
/* 61  */             ]
/* 62  */         );
/* 63  */     }
/* 64  */ 
/* 65  */     ,onStoreLoad: function(store, records, successful, eOpts) {
/* 66  */         var visible = this.getEl().isVisible(true);
/* 67  */ 
/* 68  */         // if (visible && this.mapReady) {
/* 69  */         //     this.addItems();
/* 70  */         // }
/* 71  */     }
/* 72  */ 
/* 73  */     ,addItems: function() {
/* 74  */         var ready = (this.store.getCount() === 0);
/* 75  */ 
/* 76  */         this.store.each(
/* 77  */             function(r) {
/* 78  */                 var v = r.data[this.viewParams.field];
/* 79  */                 if(Ext.isString(v)) {
/* 80  */                     var a = v.split(',')
/* 81  */                         ,marker = LL.marker(
/* 82  */                             [a[0], a[1]]
/* 83  */                             ,{
/* 84  */                                 icon: LL.icon({
/* 85  */                                     iconUrl: '/css/i/marker.png',
/* 86  */                                     iconSize: [25, 41],
/* 87  */                                     iconAnchor: [12, 40],
/* 88  */                                     popupAnchor: [0, -35]
/* 89  */                                 })
/* 90  */                             }
/* 91  */                         ).addTo(this.mapPanel.map);
/* 92  */ 
/* 93  */                     marker.bindPopup(r.get('name'));
/* 94  */                 }
/* 95  */             }
/* 96  */             ,this
/* 97  */         );
/* 98  */     }
/* 99  */ 
/* 100 */     ,onActivate: function() {

/* Map.js */

/* 101 */         this.fireEvent(
/* 102 */             'settoolbaritems'
/* 103 */             ,[
/* 104 */                 '->'
/* 105 */                 ,'reload'
/* 106 */                 ,'apps'
/* 107 */                 ,'-'
/* 108 */                 ,'more'
/* 109 */             ]
/* 110 */         );
/* 111 */ 
/* 112 */         if (this.mapReady) {
/* 113 */             this.onMapReady(this.mapPanel);
/* 114 */         }
/* 115 */     }
/* 116 */ 
/* 117 */     ,onMapReady: function(p) {
/* 118 */         p.setViewConfig(Ext.valueFrom(this.viewParams, {}));
/* 119 */ 
/* 120 */         this.mapReady = true;
/* 121 */ 
/* 122 */         this.addItems();
/* 123 */     }
/* 124 */ });
/* 125 */ 

;
/* Pivot.js */

/* 1   */ Ext.namespace('CB.browser.view');
/* 2   */ 
/* 3   */ Ext.define('CB.browser.view.Pivot',{
/* 4   */     extend: 'CB.browser.view.Interface'
/* 5   */     ,xtype: 'CBBrowserViewPivot'
/* 6   */ 
/* 7   */     ,border: false
/* 8   */     ,tbarCssClass: 'x-panel-white'
/* 9   */     ,layout: 'border'
/* 10  */     ,scrollable: true
/* 11  */ 
/* 12  */     ,initComponent: function(){
/* 13  */ 
/* 14  */         this.params = Ext.apply(
/* 15  */             {
/* 16  */                 from: 'pivot'
/* 17  */                 // ,rows: 0
/* 18  */             }
/* 19  */             ,this.params || {}
/* 20  */         );
/* 21  */ 
/* 22  */         this.rowsCombo = new Ext.form.ComboBox({
/* 23  */             xtype: 'combo'
/* 24  */             ,itemId: 'PVrowsCombo'
/* 25  */             ,selectedFacetIndex: 0
/* 26  */             ,forceSelection: true
/* 27  */             ,editable: false
/* 28  */             ,triggerAction: 'all'
/* 29  */             ,lazyRender: true
/* 30  */             ,queryMode: 'local'
/* 31  */             ,fieldLabel: L.Rows
/* 32  */             ,labelWidth: 'auto'
/* 33  */             ,style: 'margin-right: 10px'
/* 34  */             ,store: new Ext.data.JsonStore({
/* 35  */                 model: 'Generic2'
/* 36  */             })
/* 37  */             ,displayField: 'name'
/* 38  */             ,valueField: 'id'
/* 39  */             ,listeners: {
/* 40  */                 scope: this
/* 41  */                 ,select: this.onFacetChange
/* 42  */             }
/* 43  */         });
/* 44  */ 
/* 45  */         this.colsCombo = new Ext.form.ComboBox({
/* 46  */             xtype: 'combo'
/* 47  */             ,itemId: 'PVcolsCombo'
/* 48  */             ,selectedFacetIndex: 1
/* 49  */             ,forceSelection: true
/* 50  */             ,editable: false

/* Pivot.js */

/* 51  */             ,triggerAction: 'all'
/* 52  */             ,lazyRender: true
/* 53  */             ,queryMode: 'local'
/* 54  */             ,fieldLabel: L.Columns
/* 55  */             ,labelWidth: 'auto'
/* 56  */             ,store: new Ext.data.JsonStore({
/* 57  */                 model: 'Generic2'
/* 58  */             })
/* 59  */             ,displayField: 'name'
/* 60  */             ,valueField: 'id'
/* 61  */             ,listeners: {
/* 62  */                 scope: this
/* 63  */                 ,select: this.onFacetChange
/* 64  */             }
/* 65  */         });
/* 66  */ 
/* 67  */         this.refOwner.buttonCollection.addAll(
/* 68  */             new Ext.form.Label({
/* 69  */                 text: 'Stats'
/* 70  */                 ,itemId: 'PVStatsLabel'
/* 71  */             })
/* 72  */ 
/* 73  */             ,new Ext.Button({
/* 74  */                 text: 'Stats'
/* 75  */                 ,itemId: 'PVStatsButton'
/* 76  */                 ,scale: 'medium'
/* 77  */                 ,menu: []
/* 78  */             })
/* 79  */ 
/* 80  */             ,new Ext.Button({
/* 81  */                 qtip: L.Pivot
/* 82  */                 ,text: L.Pivot
/* 83  */                 ,itemId: 'PVtable'
/* 84  */                 ,scale: 'medium'
/* 85  */                 ,chart: 'table'
/* 86  */                 ,enableToggle: true
/* 87  */                 ,allowDepress: false
/* 88  */                 // ,iconCls: 'ib-table'
/* 89  */                 ,scope: this
/* 90  */                 ,handler: this.onChangeChartButtonClick
/* 91  */             })
/* 92  */ 
/* 93  */             ,new Ext.Button({
/* 94  */                 qtip: L.ChartArea
/* 95  */                 ,text: L.Bar
/* 96  */                 ,itemId: 'PVbarchart'
/* 97  */                 ,scale: 'medium'
/* 98  */                 ,chart: 'stackedBars'
/* 99  */                 ,enableToggle: true
/* 100 */                 ,allowDepress: false

/* Pivot.js */

/* 101 */                 // ,iconCls: 'ib-chart-bar'
/* 102 */                 ,scope: this
/* 103 */                 ,handler: this.onChangeChartButtonClick
/* 104 */             })
/* 105 */ 
/* 106 */             ,new Ext.Button({
/* 107 */                 qtip: L.ChartArea
/* 108 */                 ,text: L.Column
/* 109 */                 ,itemId: 'PVcolumnchart'
/* 110 */                 ,scale: 'medium'
/* 111 */                 ,chart: 'stackedColumns'
/* 112 */                 ,enableToggle: true
/* 113 */                 ,allowDepress: false
/* 114 */                 // ,iconCls: 'ib-chart-column'
/* 115 */                 ,scope: this
/* 116 */                 ,handler: this.onChangeChartButtonClick
/* 117 */             })
/* 118 */             ,this.rowsCombo
/* 119 */             ,this.colsCombo
/* 120 */         );
/* 121 */ 
/* 122 */         this.chartBlock = new CB.widget.block.Pivot({
/* 123 */             region: 'center'
/* 124 */             ,scrollable: true
/* 125 */             ,border: false
/* 126 */             ,listeners: {
/* 127 */                 scope: this
/* 128 */                 ,cellclick: this.onTableCellClick
/* 129 */             }
/* 130 */ 
/* 131 */         });
/* 132 */ 
/* 133 */         Ext.apply(this, {
/* 134 */             title: L.Pivot
/* 135 */             ,header: false
/* 136 */             ,items: this.chartBlock
/* 137 */             ,listeners: {
/* 138 */                 scope: this
/* 139 */                 ,activate: this.onActivate
/* 140 */             }
/* 141 */         });
/* 142 */ 
/* 143 */         this.callParent(arguments);
/* 144 */ 
/* 145 */         this.enableBubble(['reload']);
/* 146 */ 
/* 147 */         this.selectedFacets = [];
/* 148 */ 
/* 149 */         this.store.on('load', this.onStoreLoad, this);
/* 150 */     }

/* Pivot.js */

/* 151 */ 
/* 152 */     ,getViewParams: function() {
/* 153 */         this.params.selectedFacets = this.selectedFacets;
/* 154 */         this.params.selectedStat = this.selectedStat;
/* 155 */ 
/* 156 */         return this.params;
/* 157 */     }
/* 158 */ 
/* 159 */     ,onActivate: function() {
/* 160 */         this.selectedFacets = [];
/* 161 */ 
/* 162 */         delete this.chartData;
/* 163 */         delete this.selectedStat;
/* 164 */ 
/* 165 */         this.fireEvent(
/* 166 */             'settoolbaritems'
/* 167 */             ,[
/* 168 */                 'PVrowsCombo'
/* 169 */                 ,'PVcolsCombo'
/* 170 */                 ,'->'
/* 171 */                 ,'PVStatsLabel'
/* 172 */                 ,'PVStatsButton'
/* 173 */                 ,'-'
/* 174 */                 ,'PVtable'
/* 175 */                 ,'PVbarchart'
/* 176 */                 ,'PVcolumnchart'
/* 177 */                 ,'-'
/* 178 */                 ,'reload'
/* 179 */                 ,'apps'
/* 180 */                 ,'-'
/* 181 */                 ,'more'
/* 182 */             ]
/* 183 */         );
/* 184 */     }
/* 185 */ 
/* 186 */     ,onChangeChartButtonClick: function(b, e) {
/* 187 */         this.chartData.charts = [b.config.chart];
/* 188 */         // if(b.pressed) {
/* 189 */         //     this.activeCharts.push(b.config.chart);
/* 190 */         // } else {
/* 191 */         //     Ext.Array.remove(this.activeCharts, b.config.chart);
/* 192 */         // }
/* 193 */ 
/* 194 */         this.onChangeChart();
/* 195 */     }
/* 196 */ 
/* 197 */     ,onChangeChart: function() {
/* 198 */         var BC = this.refOwner.buttonCollection
/* 199 */             ,ch = this.chartData.charts;
/* 200 */ 

/* Pivot.js */

/* 201 */         BC.get('PVtable').toggle(ch.indexOf('table') > -1, true);
/* 202 */         BC.get('PVbarchart').toggle(ch.indexOf('stackedBars') > -1, true);
/* 203 */         BC.get('PVcolumnchart').toggle(ch.indexOf('stackedColumns') > -1, true);
/* 204 */ 
/* 205 */         this.chartBlock.changeCharts(ch);
/* 206 */     }
/* 207 */ 
/* 208 */     ,onStoreLoad: function(store, recs, successful, eOpts) {
/* 209 */         if(!this.rendered ||
/* 210 */             !this.getEl().isVisible(true) ||
/* 211 */             (successful !== true)
/* 212 */         ) {
/* 213 */             return;
/* 214 */         }
/* 215 */ 
/* 216 */         var rd = store.proxy.reader.rawData
/* 217 */             ,selectedValues = {};
/* 218 */ 
/* 219 */         if(this.chartData) {
/* 220 */             if(this.selectedFacets) {
/* 221 */                 selectedValues = {
/* 222 */                     xfield: this.selectedFacets[0]
/* 223 */                     ,yfield: this.selectedFacets[1]
/* 224 */                 };
/* 225 */             }
/* 226 */ 
/* 227 */             selectedValues.charts = this.chartData.charts;
/* 228 */         }
/* 229 */ 
/* 230 */         this.chartData = this.chartBlock.loadData(rd, selectedValues);
/* 231 */ 
/* 232 */         this.selectedFacets = [
/* 233 */             this.chartData.xField
/* 234 */             ,this.chartData.yField
/* 235 */         ];
/* 236 */ 
/* 237 */         this.loadAvailableFacets(rd.facets);
/* 238 */ 
/* 239 */         this.updateStatsMenu();
/* 240 */ 
/* 241 */         this.onChangeChart();
/* 242 */     }
/* 243 */ 
/* 244 */     ,loadAvailableFacets: function(facets) {
/* 245 */         var data = [];
/* 246 */ 
/* 247 */         Ext.iterate(
/* 248 */             facets
/* 249 */             ,function(key, val, o) {
/* 250 */                 if(Ext.isEmpty(this.selectedFacets)) {

/* Pivot.js */

/* 251 */                     this.selectedFacets = [key];
/* 252 */                 } else if(this.selectedFacets.length < 2) {
/* 253 */                     this.selectedFacets[1] = key;
/* 254 */                 }
/* 255 */                 data.push({
/* 256 */                     id: key
/* 257 */                     ,name: Ext.valueFrom(val['title'], L['facet_' + key])
/* 258 */                 });
/* 259 */             }
/* 260 */             ,this
/* 261 */         );
/* 262 */         this.rowsCombo.store.loadData(data);
/* 263 */         this.colsCombo.store.loadData(data);
/* 264 */         this.rowsCombo.setValue(this.selectedFacets[0]);
/* 265 */         this.colsCombo.setValue(this.selectedFacets[1]);
/* 266 */     }
/* 267 */ 
/* 268 */     ,updateStatsMenu: function() {
/* 269 */         var BC = this.refOwner.buttonCollection
/* 270 */             ,b = BC.get('PVStatsButton')
/* 271 */             ,l = BC.get('PVStatsLabel')
/* 272 */             ,d = this.chartData;
/* 273 */ 
/* 274 */         this.statsEnabled = d.view && !Ext.isEmpty(d.view.stats);
/* 275 */ 
/* 276 */         b.setHidden(!this.statsEnabled);
/* 277 */         l.setHidden(!this.statsEnabled);
/* 278 */ 
/* 279 */         if (this.statsEnabled) {
/* 280 */             if(!this.selectedStat) {
/* 281 */                 if(d.view && d.view.selectedStat) {
/* 282 */                     this.selectedStat = d.view.selectedStat;
/* 283 */                 }  else {
/* 284 */                     this.selectedStat = {};
/* 285 */                 }
/* 286 */             }
/* 287 */ 
/* 288 */             if(Ext.isEmpty(this.selectedStat.field)) {
/* 289 */                 this.selectedStat.field = '';
/* 290 */             }
/* 291 */             if(Ext.isEmpty(this.selectedStat.type)) {
/* 292 */                 this.selectedStat.type = 'min';
/* 293 */             }
/* 294 */ 
/* 295 */             var menu = b.getMenu()
/* 296 */                 ,statsFunctions = ['min', 'max', 'sum', 'count', 'missing']
/* 297 */                 ,items = []
/* 298 */                 ,checked
/* 299 */                 ,stats = d.view.stats;
/* 300 */ 

/* Pivot.js */

/* 301 */             //add none value
/* 302 */             stats.unshift({title: L.none, field: ''});
/* 303 */ 
/* 304 */             for (var i = 0; i < stats.length; i++) {
/* 305 */                 checked = (this.selectedStat.field == stats[i].field);
/* 306 */ 
/* 307 */                 if(checked) {
/* 308 */                     this.selectedStat.title = stats[i].title;
/* 309 */                 }
/* 310 */ 
/* 311 */                 items.push({
/* 312 */                     xtype: 'menucheckitem'
/* 313 */                     ,group: 'StatsField'
/* 314 */                     ,text: stats[i].title
/* 315 */                     ,field: stats[i].field
/* 316 */                     ,checked: checked
/* 317 */                     ,scope: this
/* 318 */                     ,handler: this.onStatFieldChangeClick
/* 319 */                 });
/* 320 */             }
/* 321 */ 
/* 322 */             //add separator
/* 323 */             items.push('-');
/* 324 */ 
/* 325 */             //add available functions to use
/* 326 */             for (i = 0; i < statsFunctions.length; i++) {
/* 327 */                 //statsFunctions[i];
/* 328 */                 items.push({
/* 329 */                     xtype: 'menucheckitem'
/* 330 */                     ,group: 'StatsType'
/* 331 */                     ,text: statsFunctions[i]
/* 332 */                     ,checked: (this.selectedStat.type == statsFunctions[i])
/* 333 */                     ,scope: this
/* 334 */                     ,handler: this.onStatTypeChangeClick
/* 335 */                 });
/* 336 */             }
/* 337 */ 
/* 338 */             menu.removeAll();
/* 339 */ 
/* 340 */             menu.add(items);
/* 341 */ 
/* 342 */             this.updateStatsButtonCaption();
/* 343 */         }
/* 344 */     }
/* 345 */ 
/* 346 */     ,onStatFieldChangeClick: function(b, e) {
/* 347 */         this.selectedStat.field = b.field;
/* 348 */         this.selectedStat.title = b.text;
/* 349 */         this.updateStatsButtonCaption();
/* 350 */ 

/* Pivot.js */

/* 351 */         this.fireEvent('reload', this);
/* 352 */     }
/* 353 */ 
/* 354 */     ,onStatTypeChangeClick: function(b, e) {
/* 355 */         this.selectedStat.type = b.text;
/* 356 */         this.updateStatsButtonCaption();
/* 357 */ 
/* 358 */         this.fireEvent('reload', this);
/* 359 */     }
/* 360 */ 
/* 361 */     ,updateStatsButtonCaption: function() {
/* 362 */         var BC = this.refOwner.buttonCollection
/* 363 */             ,b = BC.get('PVStatsButton')
/* 364 */             ,ss = this.selectedStat
/* 365 */             ,txt = '';
/* 366 */ 
/* 367 */             if(ss) {
/* 368 */                 txt = Ext.isEmpty(ss.field)
/* 369 */                     ? ss.title
/* 370 */                     : (ss.type + //L['SF' + ss.type] +
/* 371 */                         ' (' + ss.title + ')'
/* 372 */                     );
/* 373 */             }
/* 374 */ 
/* 375 */         b.setText(txt);
/* 376 */     }
/* 377 */ 
/* 378 */     ,onFacetChange: function(combo, records, index) {
/* 379 */         var record = Ext.isArray(records)
/* 380 */             ? records[0]
/* 381 */             : records;
/* 382 */ 
/* 383 */         this.selectedFacets[combo.selectedFacetIndex] = record.get('id');
/* 384 */         this.fireEvent('reload', this);
/* 385 */     }
/* 386 */ 
/* 387 */     ,onTableCellClick: function(ev, el, p) {
/* 388 */         if(Ext.isEmpty(el) || Ext.isEmpty(el.textContent)) {
/* 389 */             return;
/* 390 */         }
/* 391 */         var f = el.attributes.getNamedItem('f');
/* 392 */         if(Ext.isEmpty(f)) {
/* 393 */             return;
/* 394 */         }
/* 395 */ 
/* 396 */         f = f.value.split('|');
/* 397 */ 
/* 398 */         var params = {
/* 399 */             view: 'grid'
/* 400 */             ,from: 'grid'

/* Pivot.js */

/* 401 */             ,userViewChange: true
/* 402 */             ,filters: Ext.apply({}, this.store.extraParams.filters)
/* 403 */         };
/* 404 */         if(!Ext.isEmpty(f[0])) {
/* 405 */             params['filters'][this.selectedFacets[0]] = [{
/* 406 */                 f: this.selectedFacets[0]
/* 407 */                 ,mode: 'OR'
/* 408 */                 ,values: [f[0]]
/* 409 */             }];
/* 410 */         }
/* 411 */         if(!Ext.isEmpty(f[1])) {
/* 412 */             params['filters'][this.selectedFacets[1]] = [{
/* 413 */                 f: this.selectedFacets[1]
/* 414 */                 ,mode: 'OR'
/* 415 */                 ,values: [f[1]]
/* 416 */             }];
/* 417 */         }
/* 418 */ 
/* 419 */         this.fireEvent('changeparams', params);
/* 420 */     }
/* 421 */ });
/* 422 */ 

;
/* CB.VerticalEditGrid.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.VerticalEditGrid', {
/* 4   */     extend: 'Ext.grid.GridPanel'
/* 5   */     ,alias: [
/* 6   */         'CBVerticalEditGrid'
/* 7   */         ,'widget.CBVerticalEditGrid'
/* 8   */     ]
/* 9   */ 
/* 10  */     ,border: false
/* 11  */     ,root: 'data'
/* 12  */     ,cls: 'spacy-rows edit-grid'
/* 13  */     ,scrollable: true
/* 14  */     ,autoHeight: true
/* 15  */     ,plugins: []
/* 16  */ 
/* 17  */     ,initComponent: function() {
/* 18  */ 
/* 19  */         // define helperTree if owner does not have already defined one
/* 20  */         var parentWindow = this.getBubbleTarget();
/* 21  */         if(parentWindow.helperTree) {
/* 22  */             this.helperTree = parentWindow.helperTree;
/* 23  */         } else {
/* 24  */             this.helperTree = new CB.VerticalEditGridHelperTree();
/* 25  */         }
/* 26  */ 
/* 27  */         this.initRenderers();
/* 28  */         this.initColumns();
/* 29  */ 
/* 30  */         var viewCfg = {
/* 31  */             autoFill: false
/* 32  */             ,deferInitialRefresh: false
/* 33  */             ,stripeRows: true
/* 34  */             ,markDirty: false
/* 35  */             ,getRowClass: function( record, index, rowParams, store ){
/* 36  */                 var rez = '';
/* 37  */                 if(record.get('type') === 'H'){
/* 38  */                     rez = 'group-titles-colbg';
/* 39  */                     var node = this.grid.helperTree.getNode(record.get('id'));
/* 40  */                     if(node && !Ext.isEmpty(node.data.templateRecord.get('cfg').css)){
/* 41  */                         rez += ' ' + node.data.templateRecord.get('cfg').css;
/* 42  */                     }
/* 43  */                 }
/* 44  */                 return rez;
/* 45  */             }
/* 46  */             ,plugins: [{
/* 47  */                 ptype: 'CBDDGrid'
/* 48  */                 ,enableDrop: true
/* 49  */                 ,dropZoneConfig:  {
/* 50  */                     onNodeOver: this.onNodeDragOver.bind(this)

/* CB.VerticalEditGrid.js */

/* 51  */                     ,onNodeDrop: this.onNodeDrop.bind(this)
/* 52  */                 }
/* 53  */             }]
/* 54  */ 
/* 55  */         };
/* 56  */         if(this.viewConfig) {
/* 57  */             Ext.apply(viewCfg, this.viewConfig);
/* 58  */         }
/* 59  */ 
/* 60  */         var plugins = Ext.apply([], Ext.valueFrom(this.plugins, []));
/* 61  */         plugins.push(
/* 62  */             {
/* 63  */                 ptype: 'cellediting'
/* 64  */                 ,clicksToEdit: 1
/* 65  */                 ,listeners: {
/* 66  */                     scope: this
/* 67  */                     ,beforeedit: this.onBeforeEditProperty
/* 68  */                     ,edit: this.onAfterEditProperty
/* 69  */                 }
/* 70  */             }
/* 71  */         );
/* 72  */ 
/* 73  */         Ext.apply(this, {
/* 74  */             store:  new Ext.data.JsonStore({
/* 75  */                 model: 'EditGridRecord'
/* 76  */                 ,proxy: {
/* 77  */                     type: 'memory'
/* 78  */                     ,reader: {
/* 79  */                         type: 'json'
/* 80  */                         ,idProperty: 'id'
/* 81  */                         ,messageProperty: 'msg'
/* 82  */                     }
/* 83  */                 }
/* 84  */                 ,listeners: {
/* 85  */                     scope: this
/* 86  */                     ,update: function(store, record, operation) {
/* 87  */                         if(operation != Ext.data.Record.EDIT) {
/* 88  */                             return;
/* 89  */                         }
/* 90  */                         var node = this.helperTree.getNode(record.get('id'));
/* 91  */                         node.data.value['value'] = record.get('value');
/* 92  */                         node.data.value['info'] = record.get('info');
/* 93  */                         node.data.value['cond'] = record.get('cond');
/* 94  */                     }
/* 95  */                 }
/* 96  */             })
/* 97  */             ,columns: Ext.apply([], this.gridColumns) //leave default column definitions intact
/* 98  */             ,selType: 'cellmodel'
/* 99  */             ,header: false
/* 100 */             ,listeners: {

/* CB.VerticalEditGrid.js */

/* 101 */                 scope: this
/* 102 */                 ,keypress:  function(e){
/* 103 */                     if( (e.getKey() == e.ENTER) && (!e.hasModifier())) {
/* 104 */                         this.onFieldTitleDblClick();
/* 105 */                     }
/* 106 */                 }
/* 107 */                 ,celldblclick:  this.onFieldTitleDblClick
/* 108 */                 ,cellclick:  this.onCellClick
/* 109 */                 ,cellcontextmenu: this.onPopupMenu
/* 110 */             }
/* 111 */             ,stateful: true
/* 112 */             ,stateId: Ext.valueFrom(this.stateId, 'veg')//vertical edit grid
/* 113 */             ,stateEvents: [
/* 114 */                 'columnhide'
/* 115 */                 ,'columnmove'
/* 116 */                 ,'columnresize'
/* 117 */                 ,'columnschanged'
/* 118 */                 ,'columnshow'
/* 119 */             ]
/* 120 */             ,viewConfig: viewCfg
/* 121 */             ,editors: {
/* 122 */                 iconcombo: function(){
/* 123 */                     return new Ext.form.ComboBox({
/* 124 */                         editable: true
/* 125 */                         ,name: 'iconCls'
/* 126 */                         ,hiddenName: 'iconCls'
/* 127 */                         ,tpl: '<tpl for="."><div class="x-boundlist-item icon-padding16 {name}">{name}</div></tpl>'
/* 128 */                         ,store: CB.DB.templatesIconSet
/* 129 */                         ,valueField: 'name'
/* 130 */                         ,displayField: 'name'
/* 131 */                         ,iconClsField: 'name'
/* 132 */                         ,triggerAction: 'all'
/* 133 */                         ,queryMode: 'local'
/* 134 */                     });
/* 135 */                 }
/* 136 */             }
/* 137 */ 
/* 138 */             ,plugins: plugins
/* 139 */         });
/* 140 */ 
/* 141 */ 
/* 142 */         this.enableBubble(['change', 'fileupload', 'filedownload', 'filesdelete', 'loaded', 'saveobject']);
/* 143 */         this.callParent(arguments);
/* 144 */     }
/* 145 */ 
/* 146 */     ,initRenderers: function () {
/* 147 */         this.renderers = {
/* 148 */             iconcombo: App.customRenderers.iconcombo
/* 149 */ 
/* 150 */             ,H: function(){ return '';}

/* CB.VerticalEditGrid.js */

/* 151 */ 
/* 152 */             ,title: function(v, meta, record, row_idx, col_idx, store){
/* 153 */                 var id = record.get('id');
/* 154 */                 var n = this.helperTree.getNode(id);
/* 155 */ 
/* 156 */                 if(Ext.isString(v)) {
/* 157 */                     v = Ext.util.Format.htmlEncode(v);
/* 158 */                 }
/* 159 */ 
/* 160 */                 // temporary workaround for not found nodes
/* 161 */                 if(!n) {
/* 162 */                     return v;
/* 163 */                 }
/* 164 */ 
/* 165 */                 var tr = n.data.templateRecord;
/* 166 */ 
/* 167 */                 if(tr.get('type') === 'H'){
/* 168 */                     meta.css ='vgh';
/* 169 */                 } else {
/* 170 */                     meta.css = 'bgcLG vaT';
/* 171 */                     meta.style = 'margin-left: ' + (n.getDepth()-1) + '0px';
/* 172 */                     if(tr.get('cfg').readOnly === true) {
/* 173 */                         meta.css += ' cG';
/* 174 */                     }
/* 175 */ 
/* 176 */                     if(tr.get('cfg').required && Ext.isEmpty(record.data.value)) {
/* 177 */                         meta.css += ' cRequired';
/* 178 */                         v += ' *';
/* 179 */                     }
/* 180 */ 
/* 181 */                 }
/* 182 */ 
/* 183 */                 if(!Ext.isEmpty(tr.get('cfg').hint)) {
/* 184 */                     meta.tdAttr = ' title="'+tr.get('cfg').hint+'"';
/* 185 */                 }
/* 186 */ 
/* 187 */                 /* setting icon for duplicate fields /**/
/* 188 */                 if(this.helperTree.isDuplicate(id)){
/* 189 */                     //show duplicate index
/* 190 */                     // if last (and not exsceeded) then show + icon
/* 191 */                     if(this.helperTree.canDuplicate(id) && this.helperTree.isLastDuplicate(id)) {
/* 192 */                         v = '<img name="add_duplicate" title="'+L.addDuplicateField+'" class="fr duplicate-plus" src="'+Ext.BLANK_IMAGE_URL + '" / >' + v;
/* 193 */                     } else {
/* 194 */                         var idx = this.helperTree.getDuplicateIndex(id) +1;
/* 195 */                         v = '<img title="' + L.duplicate + ' ' + idx +
/* 196 */                             '" class="fr vc' + idx + '" src="' + Ext.BLANK_IMAGE_URL + '" / >' + v;
/* 197 */                     }
/* 198 */                 }
/* 199 */ 
/* 200 */                 return v;

/* CB.VerticalEditGrid.js */

/* 201 */             }
/* 202 */ 
/* 203 */             ,value: function(v, meta, record, row_idx, col_idx, store){
/* 204 */                 var n = this.helperTree.getNode(record.get('id'));
/* 205 */ 
/* 206 */                 if(Ext.isString(v)
/* 207 */                     // && (Ext.util.Format.stripTags(v) !== v)
/* 208 */                 ) {
/* 209 */                     v = Ext.util.Format.htmlEncode(v);
/* 210 */                 }
/* 211 */ 
/* 212 */                 // temporary workaround for not found nodes
/* 213 */                 if(!n) {
/* 214 */                     return v;
/* 215 */                 }
/* 216 */                 var tr = n.data.templateRecord;
/* 217 */ 
/* 218 */                 //check validation field
/* 219 */                 if (record.get('valid') === false) {
/* 220 */                     meta.css = ' x-form-invalid-field-default';
/* 221 */                     meta.tdAttr = 'data-errorqtip="<ul class=\'x-list-plain\'><li>' + Ext.form.field.Base.prototype.invalidText + '</li></ul>"';
/* 222 */                 } else {
/* 223 */                     //Check required field
/* 224 */                     if(tr.get('cfg').required && Ext.isEmpty(v)) {
/* 225 */                         meta.css = ' x-form-invalid-field-default';
/* 226 */                         meta.tdAttr = 'data-errorqtip="<ul class=\'x-list-plain\'><li>' + Ext.form.TextField.prototype.blankText + '</li></ul>"';
/* 227 */                     } else {
/* 228 */                         // Value is valid
/* 229 */                         meta.css = '';
/* 230 */                         meta.tdAttr = 'data-errorqtip=""';
/* 231 */                     }
/* 232 */                 }
/* 233 */ 
/* 234 */                 if(this.renderers && this.renderers[tr.get('type')]) {
/* 235 */                     return this.renderers[tr.get('type')](v, this);
/* 236 */                 }
/* 237 */                 if(!Ext.isEmpty(tr.get('cfg').height)) {
/* 238 */                     meta.style += 'min-height:' + tr.get('cfg').height + 'px';
/* 239 */                 }
/* 240 */ 
/* 241 */                 var renderer = App.getCustomRenderer(tr.get('type'));
/* 242 */ 
/* 243 */                 if(Ext.isEmpty(renderer)) {
/* 244 */                     return v;
/* 245 */                 }
/* 246 */ 
/* 247 */                 //set field config into meta so that renderers could access necesary params
/* 248 */                 meta.fieldConfig = tr.get('cfg');
/* 249 */ 
/* 250 */                 return renderer(v, meta, record, row_idx, col_idx, store, this);

/* CB.VerticalEditGrid.js */

/* 251 */             }
/* 252 */ 
/* 253 */         };
/* 254 */     }
/* 255 */ 
/* 256 */     ,initColumns: function() {
/* 257 */         this.gridColumns = [
/* 258 */             {
/* 259 */                 header: L.Property
/* 260 */                 ,sortable: false
/* 261 */                 ,dataIndex: 'title'
/* 262 */                 ,stateId: 'title'
/* 263 */                 ,editable: false
/* 264 */                 ,scope: this
/* 265 */                 ,size: 100
/* 266 */                 ,renderer: this.renderers.title
/* 267 */             },{
/* 268 */                 header: L.Value
/* 269 */                 ,itemId: 'value'
/* 270 */                 ,sortable: false
/* 271 */                 ,dataIndex: 'value'
/* 272 */                 ,stateId: 'value'
/* 273 */                 ,editor: new Ext.form.TextField()
/* 274 */                 ,scope: this
/* 275 */                 ,flex: 1
/* 276 */                 ,resizable: true
/* 277 */                 ,renderer: this.renderers.value
/* 278 */             },{
/* 279 */                 header: L.Additionally
/* 280 */                 ,sortable: false
/* 281 */                 ,dataIndex: 'info'
/* 282 */                 ,stateId: 'info'
/* 283 */                 ,editor: new Ext.form.TextField()
/* 284 */                 ,size: 200
/* 285 */                 ,hideable: false
/* 286 */             }
/* 287 */         ];
/* 288 */     }
/* 289 */ 
/* 290 */     ,onNodeDragOver: function (targetEl, source, e, data){
/* 291 */         var rez = source.dropNotAllowed;
/* 292 */         var record = this.view.getRecord(targetEl);
/* 293 */         var recs = data.records;
/* 294 */ 
/* 295 */         if(Ext.isEmpty(record) ||
/* 296 */             Ext.isEmpty(recs) ||
/* 297 */             isNaN(Ext.Number.from(recs[0].data.nid, recs[0].data.id))
/* 298 */         ) {
/* 299 */             return rez;
/* 300 */         }

/* CB.VerticalEditGrid.js */

/* 301 */ 
/* 302 */         rez = (record.get('type') === '_objects')
/* 303 */             ? source.dropAllowed
/* 304 */             : source.dropNotAllowed;
/* 305 */ 
/* 306 */         return rez;
/* 307 */     }
/* 308 */ 
/* 309 */     ,onNodeDrop: function(targetEl, source, e, sourceData){
/* 310 */         if(this.onNodeDragOver(targetEl, source, e, sourceData) == source.dropAllowed){
/* 311 */             var record = this.view.getRecord(targetEl)
/* 312 */                 ,recs = sourceData.records;
/* 313 */             if(record) {
/* 314 */                 var bt = this.view.grid.getBubbleTarget();
/* 315 */                 var node = this.helperTree.getNode(record.get('id'));
/* 316 */                 var tr = node.data.templateRecord;
/* 317 */                 var oldValue = node.data.value.value;
/* 318 */                 var v = toNumericArray(oldValue);
/* 319 */ 
/* 320 */                 var id, idx = null;
/* 321 */ 
/* 322 */                 for (var i = 0; i < recs.length; i++) {
/* 323 */                     id = Ext.Number.from(recs[i].data.nid, recs[i].data.id);
/* 324 */                     idx = v.indexOf(id);
/* 325 */                     if(idx >= 0) {
/* 326 */                         v.splice(idx, 1);
/* 327 */                     } else {
/* 328 */                         v.push(id);
/* 329 */                         if(bt.objectsStore) {
/* 330 */                             bt.objectsStore.checkRecordExistance(recs[i].data);
/* 331 */                         }
/* 332 */                     }
/* 333 */                 }
/* 334 */                 var newValue = v.join(',');
/* 335 */ 
/* 336 */                 record.set('value', newValue);
/* 337 */                 this.fireEvent('change', tr.get('name'), newValue, oldValue);
/* 338 */             }
/* 339 */             return true;
/* 340 */         }
/* 341 */         return false;
/* 342 */     }
/* 343 */ 
/* 344 */     ,onCellClick: function( g, td, cellIndex, record, tr, rowIndex, e, eOpts){//g, r, c, e
/* 345 */         var el = e.getTarget();
/* 346 */         if(el) {
/* 347 */             switch(el.name){
/* 348 */                 case 'add_duplicate':
/* 349 */                     this.onDuplicateFieldClick();
/* 350 */                     break;

/* CB.VerticalEditGrid.js */

/* 351 */             }
/* 352 */         }
/* 353 */     }
/* 354 */ 
/* 355 */     ,onPopupMenu: function(gridView, el, colIndex, record, rowEl, rowIndex, ev, eOpts){
/* 356 */         ev.preventDefault();
/* 357 */         switch(this.columns[colIndex].dataIndex){
/* 358 */             case 'title':
/* 359 */                 this.showTitlePopupMenu(this, rowIndex, colIndex, ev);
/* 360 */                 break;
/* 361 */         }
/* 362 */     }
/* 363 */ 
/* 364 */     ,showTitlePopupMenu: function(grid, rowIndex, cellIndex, e){
/* 365 */         var r = grid.getStore().getAt(rowIndex);
/* 366 */         this.popupForRow = rowIndex;
/* 367 */ 
/* 368 */         if(!this.titlePopupMenu) {
/* 369 */             this.titlePopupMenu = new Ext.menu.Menu({
/* 370 */                 items: [
/* 371 */                     {
/* 372 */                         text: L.addDuplicateField
/* 373 */                         ,scope: this
/* 374 */                         ,handler: this.onDuplicateFieldClick
/* 375 */                     },{
/* 376 */                         text: L.delDuplicateField
/* 377 */                         ,scope: this
/* 378 */                         ,handler: this.onDeleteDuplicateFieldClick
/* 379 */                     }
/* 380 */                 ]
/* 381 */             });
/* 382 */         }
/* 383 */         this.titlePopupMenu.items.getAt(0).setDisabled(!this.helperTree.canDuplicate(r.get('id')));
/* 384 */         this.titlePopupMenu.items.getAt(1).setDisabled(this.helperTree.isFirstDuplicate(r.get('id')));
/* 385 */         this.titlePopupMenu.showAt(e.getXY());
/* 386 */     }
/* 387 */ 
/* 388 */     ,onFieldTitleDblClick: function(gridView, td, cellIndex, record, tr, rowIndex, e, eOpts){
/* 389 */         var sm = this.getSelectionModel();
/* 390 */ 
/* 391 */         var fieldName = this.columns[cellIndex].dataIndex;
/* 392 */ 
/* 393 */         if(fieldName === 'title'){
/* 394 */             this.editingPlugin.startEdit(record, 1);//begin field edit
/* 395 */         }
/* 396 */     }
/* 397 */ 
/* 398 */     ,getBubbleTarget: function(){
/* 399 */         if(!this.parentWindow){
/* 400 */             this.parentWindow = this.findParentByType('CBGenericForm') || this.refOwner;

/* CB.VerticalEditGrid.js */

/* 401 */         }
/* 402 */         return this.parentWindow;
/* 403 */     }
/* 404 */ 
/* 405 */     ,reload: function(){
/* 406 */         // initialization
/* 407 */         this.data = {};
/* 408 */         this.newItem = true;
/* 409 */         var pw = this.getBubbleTarget(); //parent window
/* 410 */ 
/* 411 */         if(Ext.isDefined(pw.data)) {
/* 412 */             this.newItem = isNaN(pw.data.id);
/* 413 */             if(Ext.isDefined(pw.data[this.root])) {
/* 414 */                 this.data = pw.data[this.root];
/* 415 */             }
/* 416 */         }
/* 417 */         //if not specified template_id directly to grid then try to look in owners data
/* 418 */         this.template_id = Ext.valueFrom(pw.data.template_id, this.template_id);
/* 419 */         if(isNaN(this.template_id)) {
/* 420 */             return Ext.Msg.alert('Error', 'No template id specified in data for "' + pw.title + '" window.');
/* 421 */         }
/* 422 */         this.template_id = parseInt(this.template_id, 10);
/* 423 */ 
/* 424 */         this.templateStore = CB.DB['template' + this.template_id];
/* 425 */ 
/* 426 */         var idx = CB.DB.templates.findExact('id', this.template_id);
/* 427 */         if(idx >= 0) {
/* 428 */             // var cm = this.getColumnModel();
/* 429 */             var tc = CB.DB.templates.getAt(idx).get('cfg');//template config
/* 430 */ 
/* 431 */             var infoCol = this.headerCt.child('[dataIndex="info"]'); //cm.findColumnIndex('info');
/* 432 */             var colRequired = (
/* 433 */                 (tc.infoColumn === true) ||
/* 434 */                 (
/* 435 */                     (Ext.isEmpty(infoCol)) &&
/* 436 */                     (!Ext.isEmpty(App.config.template_info_column))
/* 437 */                 )
/* 438 */             );
/* 439 */ 
/* 440 */             var newConfig = Ext.apply([], this.gridColumns);
/* 441 */ 
/* 442 */             if(!Ext.isEmpty(infoCol) &&  !colRequired) {
/* 443 */                 if(!colRequired) {
/* 444 */                     newConfig.pop();
/* 445 */                 }
/* 446 */ 
/* 447 */                 //apply state to columns
/* 448 */                 if(this.stateful) {
/* 449 */                     var state = Ext.state.Manager.get(this.stateId);
/* 450 */                     if(state && state.columns) {

/* CB.VerticalEditGrid.js */

/* 451 */                         Ext.iterate(
/* 452 */                             newConfig,
/* 453 */                             function(c) {
/* 454 */                                 if(state.columns[c.dataIndex]) {
/* 455 */                                     Ext.apply(c, state.columns[c.dataIndex]);
/* 456 */                                 }
/* 457 */                             }
/* 458 */                             ,this
/* 459 */                         );
/* 460 */                     }
/* 461 */                 }
/* 462 */ 
/* 463 */                 this.reconfigure(this.store, newConfig);
/* 464 */             }
/* 465 */         }
/* 466 */         // if parent have a helperTree then it is responsible for helper reload
/* 467 */         if(!pw.helperTree) {
/* 468 */             this.helperTree.newItem = this.newItem;
/* 469 */             this.helperTree.loadData(this.data, this.templateStore);
/* 470 */         }
/* 471 */ 
/* 472 */         this.syncRecordsWithHelper();
/* 473 */ 
/* 474 */         this.fireEvent('loaded', this);
/* 475 */     }
/* 476 */ 
/* 477 */     ,syncRecordsWithHelper: function(){
/* 478 */         if(!this.store) {
/* 479 */             return;
/* 480 */         }
/* 481 */ 
/* 482 */         var nodesList = this.helperTree.queryNodeListBy(this.helperNodesFilter.bind(this))
/* 483 */             ,ids = this.store.collect('id')
/* 484 */             ,update = false
/* 485 */             ,i, idx;
/* 486 */ 
/* 487 */         //check if store records should be updated
/* 488 */         for (i = 0; i < nodesList.length; i++) {
/* 489 */             idx = ids.indexOf(nodesList[i].data.id);
/* 490 */             if(idx < 0) {
/* 491 */                 update = true;
/* 492 */             } else {
/* 493 */                 ids.splice(idx, 1);
/* 494 */             }
/* 495 */         }
/* 496 */ 
/* 497 */         if(!update && Ext.isEmpty(ids)) {
/* 498 */             return;
/* 499 */         }
/* 500 */ 

/* CB.VerticalEditGrid.js */

/* 501 */         if(this.store && this.store.suspendEvents) {
/* 502 */             this.store.suspendEvents(true);
/* 503 */         }
/* 504 */ 
/* 505 */         this.store.removeAll(false);
/* 506 */ 
/* 507 */         var records = [];
/* 508 */         for (i = 0; i < nodesList.length; i++) {
/* 509 */             var attr = nodesList[i].data;
/* 510 */             var r  = attr.templateRecord;
/* 511 */ 
/* 512 */             records.push(
/* 513 */                 Ext.create(
/* 514 */                     this.store.getModel().getName()
/* 515 */                     ,{
/* 516 */                         id: attr.id
/* 517 */                         ,title: r.get('title')
/* 518 */                         ,readonly: ((r.get('type') === 'H') || (r.get('cfg').readOnly == 1))
/* 519 */                         ,value: Ext.isNumeric(attr.value.value)
/* 520 */                             ? parseFloat(attr.value.value, 10)
/* 521 */                             : attr.value.value
/* 522 */                         ,info: attr.value.info
/* 523 */                         ,type: r.get('type')
/* 524 */                         ,cond: attr.value.cond
/* 525 */                         ,valid: attr.valid
/* 526 */                     }
/* 527 */                 )
/* 528 */             );
/* 529 */         }
/* 530 */         this.store.resumeEvents();
/* 531 */         this.store.add(records);
/* 532 */ 
/* 533 */         return true;
/* 534 */     }
/* 535 */ 
/* 536 */     ,helperNodesFilter: function(node){
/* 537 */         var r = node.data.templateRecord;
/* 538 */         //skip check for root node
/* 539 */         if(Ext.isEmpty(r)) {
/* 540 */             return false;
/* 541 */         }
/* 542 */ 
/* 543 */         return (
/* 544 */             (r.get('type') !== 'G')
/* 545 */             &&
/* 546 */             (
/* 547 */                 (r.get('cfg').showIn !== 'top') ||
/* 548 */                 ((r.get('cfg').showIn === 'top') &&
/* 549 */                     this.includeTopFields
/* 550 */                 )

/* CB.VerticalEditGrid.js */

/* 551 */             ) &&
/* 552 */             (r.get('cfg').showIn !== 'tabsheet') &&
/* 553 */             (node.data.visible !== false)
/* 554 */         );
/* 555 */     }
/* 556 */ 
/* 557 */     ,readValues: function(){
/* 558 */         if(!Ext.isDefined(this.data)) {
/* 559 */             this.data = {};
/* 560 */         }
/* 561 */ 
/* 562 */         this.data = this.helperTree.readValues();
/* 563 */ 
/* 564 */         var w = this.getBubbleTarget();
/* 565 */         if(Ext.isDefined(w.data)) {
/* 566 */             w.data[this.root] = this.data;
/* 567 */         }
/* 568 */     }
/* 569 */ 
/* 570 */     ,onBeforeEditProperty: function(editor, context, eOpts){//grid, record, field, value, row, column, cancel
/* 571 */         var node = this.helperTree.getNode(context.record.get('id'));
/* 572 */         // temporary workaround for not found nodes
/* 573 */         if(!node) {
/* 574 */             return false;
/* 575 */         }
/* 576 */         var tr = node.data.templateRecord;
/* 577 */         if((tr.get('type') === 'H') || (tr.get('cfg').readOnly == 1) ){
/* 578 */             return false;
/* 579 */         }
/* 580 */         if(context.field !== 'value') {
/* 581 */             return;
/* 582 */         }
/* 583 */ 
/* 584 */         var pw = this.findParentByType(CB.GenericForm, false)
/* 585 */             || this.refOwner
/* 586 */         ; //CB.Objects & CB.TemplateEditWindow
/* 587 */         var t = tr.get('type');
/* 588 */         if(pw && !Ext.isEmpty(pw.data)){
/* 589 */             context.objectId = pw.data.id;
/* 590 */             context.path = pw.data.path;
/* 591 */         }
/* 592 */ 
/* 593 */         /* get and set pidValue if dependent */
/* 594 */         if( (Ext.isDefined(tr.get('cfg').dependency) ) && !Ext.isEmpty(tr.get('pid')) ) {
/* 595 */                 context.pidValue = this.helperTree.getParentValue(context.record.get('id'), tr.get('pid'));
/* 596 */         }
/* 597 */ 
/* 598 */         /* prepare time fields */
/* 599 */         if((t === 'time') && !Ext.isEmpty(context.value)) {
/* 600 */             var a = context.value.split(':');

/* CB.VerticalEditGrid.js */

/* 601 */             a.pop();
/* 602 */             context.value = a.join(':');
/* 603 */         }
/* 604 */ 
/* 605 */         var col = context.column;
/* 606 */         var previousEditor = col.getEditor();
/* 607 */ 
/* 608 */ 
/* 609 */         if(this.editors && this.editors[t]) {
/* 610 */             col.setEditor(this.editors[t](this));
/* 611 */         } else {
/* 612 */             context.fieldRecord = this.helperTree.getNode(context.record.get('id')).data.templateRecord;
/* 613 */ 
/* 614 */             //check if custom source and send fields
/* 615 */             if(Ext.isObject(context.fieldRecord.get('cfg')['source'])) {
/* 616 */                 var fields = context.fieldRecord.get('cfg')['source'].requiredFields;
/* 617 */                 if(!Ext.isEmpty(fields)) {
/* 618 */                     if(!Ext.isArray(fields)) {
/* 619 */                         fields = fields.split(',');
/* 620 */                     }
/* 621 */                     context.objFields = {};
/* 622 */                     var currentData = this.helperTree.readValues();
/* 623 */ 
/* 624 */                     for (var i = 0; i < fields.length; i++) {
/* 625 */                         var f = fields[i].trim();
/* 626 */ 
/* 627 */                         if(!Ext.isEmpty(currentData[f])) {
/* 628 */                             context.objFields[f] = currentData[f];
/* 629 */                         }
/* 630 */                     }
/* 631 */                 }
/* 632 */             }
/* 633 */ 
/* 634 */             var te = App.getTypeEditor(t, context);
/* 635 */ 
/* 636 */             this.attachKeyListeners(te);
/* 637 */             if(te) {
/* 638 */                 col.setEditor(te);
/* 639 */             }
/* 640 */         }
/* 641 */ 
/* 642 */         // destroy previous editor if changed
/* 643 */         var currentEditor = col.getEditor();
/* 644 */         if(previousEditor && (previousEditor != currentEditor)) {
/* 645 */             Ext.destroy(previousEditor);
/* 646 */         }
/* 647 */     }
/* 648 */ 
/* 649 */     ,gainFocus: function(position){
/* 650 */         var sm = this.getSelectionModel()

/* CB.VerticalEditGrid.js */

/* 651 */             ,navModel = this.getNavigationModel()
/* 652 */             ,lastFocused = navModel.getLastFocused();
/* 653 */ 
/* 654 */ 
/* 655 */         if(lastFocused && !isNaN(lastFocused.rowIdx)){
/* 656 */             sm.select({
/* 657 */                 row: lastFocused.rowIdx
/* 658 */                 ,column: lastFocused.colIdx
/* 659 */             });
/* 660 */ 
/* 661 */             navModel.setPosition(lastFocused.rowIdx, lastFocused.colIdx);
/* 662 */ 
/* 663 */             navModel.focusPosition(lastFocused);
/* 664 */         }
/* 665 */     }
/* 666 */ 
/* 667 */     ,addKeyMaps: function(c) {
/* 668 */         var map = new Ext.KeyMap(c.getEl(), [
/* 669 */             {
/* 670 */                 key: "s"
/* 671 */                 ,ctrl: true
/* 672 */                 ,shift: false
/* 673 */                 ,scope: this
/* 674 */                 ,stopEvent: true
/* 675 */                 ,fn: this.onSaveObjectEvent
/* 676 */             }
/* 677 */         ]);
/* 678 */     }
/* 679 */ 
/* 680 */     ,attachKeyListeners: function(comp) {
/* 681 */         if(Ext.isEmpty(comp) || !Ext.isObject(comp)) {
/* 682 */             return;
/* 683 */         }
/* 684 */         comp.on(
/* 685 */             'afterrender'
/* 686 */             ,this.addKeyMaps
/* 687 */             ,this
/* 688 */         );
/* 689 */     }
/* 690 */ 
/* 691 */     ,onSaveObjectEvent: function (key, event){
/* 692 */         if(this.editing) {
/* 693 */             this.stopEditing(false);
/* 694 */         }
/* 695 */         this.fireEvent('saveobject', this, event);
/* 696 */     }
/* 697 */ 
/* 698 */     ,onAfterEditProperty: function(editor, context, eOpts){
/* 699 */         var nodeId = context.record.get('id')
/* 700 */             ,node = this.helperTree.getNode(nodeId)

/* CB.VerticalEditGrid.js */

/* 701 */             ,tr = node.data.templateRecord;
/* 702 */ 
/* 703 */         if(context.field === 'value'){
/* 704 */             /* post process value */
/* 705 */             if(!Ext.isEmpty(context.value) && context.fieldRecord) {
/* 706 */                 switch(context.fieldRecord.get('type')) {
/* 707 */                     case 'time':
/* 708 */                         if(Ext.isPrimitive(context.value)) {
/* 709 */                             var format = Ext.valueFrom(tr.get('cfg').format, App.timeFormat);
/* 710 */                             context.value = Ext.Date.parse(context.value, format);
/* 711 */                         }
/* 712 */ 
/* 713 */                         context.value = Ext.Date.format(context.value, 'H:i:s');
/* 714 */                         context.record.set('value', context.value);
/* 715 */                         break;
/* 716 */ 
/* 717 */                     case '_objects':
/* 718 */                         if(Ext.isArray(context.value)) {
/* 719 */                             context.value = context.value.join(',');
/* 720 */                             context.record.set('value', context.value);
/* 721 */                         }
/* 722 */                         break;
/* 723 */                 }
/* 724 */             }
/* 725 */ 
/* 726 */             //check if field has validator set and notify if validation not passed
/* 727 */             var validator = tr.get('cfg').validator;
/* 728 */ 
/* 729 */             if(!Ext.isEmpty(validator)) {
/* 730 */                 if(!Ext.isDefined(CB.Validators[validator])) {
/* 731 */                     plog('Undefined field validator: ' + validator);
/* 732 */ 
/* 733 */                 } else {
/* 734 */                     //empty values are considered valid by default
/* 735 */                     node.data.valid = Ext.isEmpty(context.value) || CB.Validators[validator](context.value);
/* 736 */                     context.record.set('valid', node.data.valid);
/* 737 */                 }
/* 738 */             }
/* 739 */ 
/* 740 */             if(context.value != context.originalValue){
/* 741 */                 this.helperTree.resetChildValues(nodeId);
/* 742 */             }
/* 743 */ 
/* 744 */             //check if editor field has getValueRecords (tag field) method and check records existance
/* 745 */             var fe = context.column.field;
/* 746 */             if(fe.getValueRecords) {
/* 747 */                 var records = fe.getValueRecords();
/* 748 */                 for (var i = 0; i < records.length; i++) {
/* 749 */                     this.refOwner.objectsStore.checkRecordExistance(records[i].data);
/* 750 */                 }

/* CB.VerticalEditGrid.js */

/* 751 */             }
/* 752 */         }
/* 753 */ 
/* 754 */         //fire change event if value changed
/* 755 */         if(context.value != context.originalValue) {
/* 756 */             this.fireEvent(
/* 757 */                 'change'
/* 758 */                 ,tr.get('name')
/* 759 */                 ,context.value
/* 760 */                 ,context.originalValue
/* 761 */             );
/* 762 */         }
/* 763 */ 
/* 764 */         if(!this.syncRecordsWithHelper()) {
/* 765 */             this.getView().refresh();
/* 766 */         }
/* 767 */ 
/* 768 */         this.gainFocus();
/* 769 */     }
/* 770 */ 
/* 771 */     ,getFieldValue: function(field_id, duplication_id){
/* 772 */         //TODO: review
/* 773 */         var result = null;
/* 774 */ 
/* 775 */         this.store.each(
/* 776 */             function(r){
/* 777 */                 if((r.get('field_id') == field_id) && (r.get('duplicate_id') == duplication_id)){
/* 778 */                     result = r.get('value');
/* 779 */                     return false;
/* 780 */                 }
/* 781 */             }
/* 782 */             ,this
/* 783 */         );
/* 784 */         return result;
/* 785 */     }
/* 786 */ 
/* 787 */     /**
/* 788 *|      * set value for a field
/* 789 *|      *
/* 790 *|      * TODO: review for duplicated fields
/* 791 *|      *
/* 792 *|      * @param varchar fieldName
/* 793 *|      * @param variant value
/* 794 *|      */
/* 795 */     ,setFieldValue: function(fieldName, value) {
/* 796 */         var helperTreeNode = this.helperTree.setFieldValue(fieldName, value);
/* 797 */ 
/* 798 */         if(Ext.isEmpty(helperTreeNode)) {
/* 799 */             return;
/* 800 */         }

/* CB.VerticalEditGrid.js */

/* 801 */ 
/* 802 */         var recordIndex = this.store.findExact('id', helperTreeNode.data.id);
/* 803 */ 
/* 804 */         if(recordIndex >= 0) {
/* 805 */             this.store.getAt(recordIndex).set('value', value);
/* 806 */         }
/* 807 */     }
/* 808 */ 
/* 809 */     ,onDuplicateFieldClick: function(b){
/* 810 */         var r = this.getSelectionModel().getSelection()[0];
/* 811 */         if(Ext.isEmpty(r)) {
/* 812 */             return;
/* 813 */         }
/* 814 */ 
/* 815 */         this.fireEvent('savescroll', this);
/* 816 */ 
/* 817 */         this.helperTree.duplicate(r.get('id'));
/* 818 */         this.syncRecordsWithHelper();
/* 819 */ 
/* 820 */         this.fireEvent('restorescroll', this);
/* 821 */ 
/* 822 */         this.fireEvent('change');
/* 823 */     }
/* 824 */ 
/* 825 */     ,onDeleteDuplicateFieldClick: function(b){
/* 826 */         var r = this.getSelectionModel().getSelection()[0];
/* 827 */         if(Ext.isEmpty(r)) {
/* 828 */             return;
/* 829 */         }
/* 830 */ 
/* 831 */         this.fireEvent('savescroll', this);
/* 832 */ 
/* 833 */         this.helperTree.deleteDuplicate(r.get('id'));
/* 834 */         this.syncRecordsWithHelper();
/* 835 */ 
/* 836 */         this.fireEvent('restorescroll', this);
/* 837 */ 
/* 838 */         this.fireEvent('change');
/* 839 */     }
/* 840 */ 
/* 841 */     /**
/* 842 *|      * check if every record meets required config option
/* 843 *|      * and is valid if validator set
/* 844 *|      * @return bool
/* 845 *|      */
/* 846 */     ,isValid: function() {
/* 847 */         var rez = true;
/* 848 */         delete this.invalidRecord;
/* 849 */ 
/* 850 */         this.store.each(

/* CB.VerticalEditGrid.js */

/* 851 */             function(r) {
/* 852 */                 var n = this.helperTree.getNode(r.get('id'));
/* 853 */                 if((r.get('valid') === false) ||
/* 854 */                     (n.data.templateRecord.get('cfg').required &&
/* 855 */                     Ext.isEmpty(r.get('value'))
/* 856 */                     )
/* 857 */                 ) {
/* 858 */                     this.invalidRecord = r;
/* 859 */                     rez = false;
/* 860 */                 }
/* 861 */                 return rez;
/* 862 */             }
/* 863 */             ,this
/* 864 */         );
/* 865 */ 
/* 866 */         return rez;
/* 867 */     }
/* 868 */ 
/* 869 */     ,focusInvalidRecord: function() {
/* 870 */         var view = this.getView();
/* 871 */ 
/* 872 */         if (this.invalidRecord) {
/* 873 */             Ext.get(view.getRow(this.invalidRecord)).scrollIntoView(view.getEl(), null, true);
/* 874 */ 
/* 875 */             Ext.Msg.alert(
/* 876 */                 L.Error,
/* 877 */                 L.FillFieldMsg.replace('{fieldName}', this.invalidRecord.get('title'))
/* 878 */             );
/* 879 */         }
/* 880 */     }
/* 881 */ });
/* 882 */ 

;
/* CB.VerticalSearchEditGrid.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.VerticalSearchEditGrid', {
/* 4   */     extend: 'CB.VerticalEditGrid'
/* 5   */ 
/* 6   */     ,alias: 'CBVerticalSearchEditGrid'
/* 7   */ 
/* 8   */     ,xtype: 'CBVerticalSearchEditGrid'
/* 9   */ 
/* 10  */     ,initComponent: function() {
/* 11  */         this.initRenderers = Ext.Function.createSequence(this.initRenderers, this.newInitRenderers, this);
/* 12  */         this.initColumns = Ext.Function.createSequence(this.initColumns, this.newInitColumns, this);
/* 13  */ 
/* 14  */         this.oldOnBeforeEditProperty = this.onBeforeEditProperty;
/* 15  */         this.onBeforeEditProperty = this.newOnBeforeEditProperty;
/* 16  */ 
/* 17  */         this.callParent(arguments);
/* 18  */ 
/* 19  */         Ext.apply(this, {
/* 20  */             stateId: 'vseg'
/* 21  */         });
/* 22  */     }
/* 23  */ 
/* 24  */     ,newInitRenderers: function () {
/* 25  */         this.renderers.condition = Ext.Function.bind(
/* 26  */             function(v, meta, record, row_idx, col_idx, store){
/* 27  */                 var st = this.getConditionsStore(record.get('type'));
/* 28  */                 var idx = st.findExact('id', v);
/* 29  */ 
/* 30  */                 if(idx >= 0) {
/* 31  */                     return st.getAt(idx).get('name');
/* 32  */                 }
/* 33  */                 return '';
/* 34  */             }
/* 35  */             ,this
/* 36  */         );
/* 37  */     }
/* 38  */ 
/* 39  */     ,newInitColumns: function() {
/* 40  */ 
/* 41  */         this.gridColumns.splice(
/* 42  */             1
/* 43  */             ,0
/* 44  */             ,{
/* 45  */                 header: L.Condition
/* 46  */                 ,width: 50
/* 47  */                 ,dataIndex: 'cond'
/* 48  */                 ,editor: new Ext.form.TextField()
/* 49  */                 ,hidden: true
/* 50  */                 ,editable: true

/* CB.VerticalSearchEditGrid.js */

/* 51  */                 ,scope: this
/* 52  */                 ,renderer: this.renderers.condition
/* 53  */             }
/* 54  */         );
/* 55  */     }
/* 56  */ 
/* 57  */     //grid, record, field, value, row, column, cancel
/* 58  */     ,newOnBeforeEditProperty: function(editor, context, eOpts){ //e
/* 59  */         if(context.field !== 'cond') {
/* 60  */             return this.oldOnBeforeEditProperty(editor, context, eOpts);
/* 61  */         }
/* 62  */ 
/* 63  */         if(context.record.get('type') === 'H') {
/* 64  */             context.cancel = true;
/* 65  */             return;
/* 66  */         }
/* 67  */ 
/* 68  */         var ed = new Ext.form.ComboBox({
/* 69  */             enableKeyEvents: true
/* 70  */             ,forceSelection: true
/* 71  */             ,triggerAction: 'all'
/* 72  */             ,lazyRender: true
/* 73  */             ,queryMode: 'local'
/* 74  */             ,displayField: 'name'
/* 75  */             ,valueField: 'id'
/* 76  */             ,store: this.getConditionsStore(context.record.get('type'))
/* 77  */             ,listConfig: {
/* 78  */                 minWidth: 130
/* 79  */                 // width: 'auto'
/* 80  */             }
/* 81  */         });
/* 82  */         this.attachKeyListeners(ed);
/* 83  */ 
/* 84  */         context.column.setEditor(ed);
/* 85  */     }
/* 86  */ 
/* 87  */     ,getConditionsStore: function(type) {
/* 88  */         var cond = [];
/* 89  */         switch(type) {
/* 90  */             case 'H':
/* 91  */                 break;
/* 92  */             case 'int':
/* 93  */             case 'float':
/* 94  */             case 'date':
/* 95  */             case 'datetime':
/* 96  */                 cond = [
/* 97  */                     {id: '=', name: L.condNumEq}
/* 98  */                     ,{id: '<=', name: L.condNumLt}
/* 99  */                     ,{id: '>=', name: L.condNumGt}
/* 100 */                     ,{id: '!=', name: L.condNumNe}

/* CB.VerticalSearchEditGrid.js */

/* 101 */                 ];
/* 102 */                 // custom value formats (date1 .. date2, )
/* 103 */                 break;
/* 104 */ 
/* 105 */             case '_objects':
/* 106 */             case 'combo':
/* 107 */             case 'iconcombo':
/* 108 */             case 'timeunits':
/* 109 */             case '_sex':
/* 110 */                 cond = [
/* 111 */                     {id: '<=', name: L.condSetLt}
/* 112 */                     ,{id: '>=', name: L.condSetGt}
/* 113 */                     ,{id: '=', name: L.condSetEq}
/* 114 */                     ,{id: '!=', name: L.condSetNe}
/* 115 */                 ];
/* 116 */                 //= (exact match), contains any, contains all, does not contain any, does not contain all
/* 117 */                 break;
/* 118 */ 
/* 119 */             case '_auto_title':
/* 120 */             case 'varchar':
/* 121 */             case 'text':
/* 122 */             case 'memo':
/* 123 */             case 'html':
/* 124 */                 cond = [
/* 125 */                     {id: 'contain', name: L.condTxtContain}
/* 126 */                     ,{id: 'start', name: L.condTxtBegin}
/* 127 */                     ,{id: 'end', name: L.condTxtEnd}
/* 128 */                     ,{id: 'not', name: L.condTxtNc}
/* 129 */                     ,{id: '=', name: L.condTxtEq}
/* 130 */                     ,{id: '!=', name: L.condTxtNe}
/* 131 */                 ];
/* 132 */                 break;
/* 133 */ 
/* 134 */             case 'checkbox':
/* 135 */                 cond = [
/* 136 */                     {id: '=', name: L.condCbEq}
/* 137 */                     ,{id: '!=', name: l.condCbNe}
/* 138 */                 ];
/* 139 */                 break;
/* 140 */ 
/* 141 */         }
/* 142 */ 
/* 143 */         return new Ext.data.JsonStore({
/* 144 */             autoLoad: true
/* 145 */             ,autoDestroy: true
/* 146 */             ,model: 'Generic2'
/* 147 */             ,data: cond
/* 148 */             ,proxy: {
/* 149 */                 type: 'memory'
/* 150 */                 ,reader: {

/* CB.VerticalSearchEditGrid.js */

/* 151 */                     type: 'json'
/* 152 */                 }
/* 153 */             }
/* 154 */         });
/* 155 */     }
/* 156 */ });
/* 157 */ 

;
/* CB.PasteFromWord.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.PasteFromWord', {
/* 4   */     extend: 'Ext.Window'
/* 5   */     ,autoHeight: true
/* 6   */     ,autoShow: true
/* 7   */     ,bodyBorder: false
/* 8   */     ,closable: true
/* 9   */     ,closeAction: 'hide'
/* 10  */     ,hideCollapseTool: true
/* 11  */     ,layout: 'fit'
/* 12  */     ,maximizable: false
/* 13  */     ,minimizable: false
/* 14  */     ,modal: true
/* 15  */     ,plain: true
/* 16  */     ,resizable: true
/* 17  */     ,stateful: false
/* 18  */     ,title: L.PasteFromWord
/* 19  */     ,width: 530
/* 20  */     ,initComponent: function() {
/* 21  */         Ext.apply(this, {
/* 22  */             items:[{
/* 23  */                 xtype: 'htmleditor'
/* 24  */                 ,bodyBorder: false
/* 25  */                 ,border: false
/* 26  */                 ,anchor: '100% -125'
/* 27  */             }
/* 28  */             ]
/* 29  */             ,buttons: [
/* 30  */                 { text: L.Insert, handler: this.doSubmit, scope: this}
/* 31  */                 ,{ text: L.Cancel, handler: this.doClose, scope: this}
/* 32  */             ]
/* 33  */         });
/* 34  */ 
/* 35  */         this.callParent(arguments);
/* 36  */ 
/* 37  */         this.editor = this.items.getAt(0);
/* 38  */ 
/* 39  */         this.on('afterrender', this.doShow);
/* 40  */         this.on('activate',    this.doShow);
/* 41  */     }
/* 42  */     ,doShow:   function(w) {
/* 43  */        this.editor.setValue('');
/* 44  */     }
/* 45  */     ,doSubmit: function(w) {
/* 46  */         var text_source = Ext.util.Format.stripTags(this.opener.getValue());
/* 47  */         text_source = text_source.replace(/ /g, '');
/* 48  */ 
/* 49  */         if(!text_source) {
/* 50  */             this.opener.setValue(CleanWord(this.editor.getValue()));

/* CB.PasteFromWord.js */

/* 51  */         } else {
/* 52  */             this.opener.insertAtCursor(CleanWord(this.editor.getValue()));
/* 53  */         }
/* 54  */         this.hide();
/* 55  */     }
/* 56  */     ,doClose: function(w) {
/* 57  */         this.hide();
/* 58  */     }
/* 59  */ });
/* 60  */ 
/* 61  */ //________________________________________________________________________________________
/* 62  */ function CleanWord( html){
/* 63  */   var bIgnoreFont = true;
/* 64  */   var bRemoveStyles = true;
/* 65  */ 
/* 66  */     html = html.replace(/<o:p>\s*<\/o:p>/g, '') ;
/* 67  */     html = html.replace(/<o:p>[\s\S]*?<\/o:p>/g, '&nbsp;') ;
/* 68  */ 
/* 69  */     // Remove mso-xxx styles.
/* 70  */     html = html.replace( /\s*mso-[^:]+:[^;"]+;?/gi, '' ) ;
/* 71  */ 
/* 72  */     // Remove margin styles.
/* 73  */     html = html.replace( /\s*MARGIN: 0(?:cm|in) 0(?:cm|in) 0pt\s*;/gi, '' ) ;
/* 74  */     html = html.replace( /\s*MARGIN: 0(?:cm|in) 0(?:cm|in) 0pt\s*"/gi, "\"" ) ;
/* 75  */ 
/* 76  */     html = html.replace( /\s*TEXT-INDENT: 0(?:cm|in)\s*;/gi, '' ) ;
/* 77  */     html = html.replace( /\s*TEXT-INDENT: 0(?:cm|in)\s*"/gi, "\"" ) ;
/* 78  */ 
/* 79  */     html = html.replace( /\s*TEXT-ALIGN: [^\s;]+;?"/gi, "\"" ) ;
/* 80  */ 
/* 81  */     html = html.replace( /\s*PAGE-BREAK-BEFORE: [^\s;]+;?"/gi, "\"" ) ;
/* 82  */ 
/* 83  */     html = html.replace( /\s*FONT-VARIANT: [^\s;]+;?"/gi, "\"" ) ;
/* 84  */ 
/* 85  */     html = html.replace( /\s*tab-stops:[^;"]*;?/gi, '' ) ;
/* 86  */     html = html.replace( /\s*tab-stops:[^"]*/gi, '' ) ;
/* 87  */ 
/* 88  */     // Remove FONT face attributes.
/* 89  */     if ( bIgnoreFont )
/* 90  */     {
/* 91  */         html = html.replace( /\s*face="[^"]*"/gi, '' ) ;
/* 92  */         html = html.replace( /\s*face=[^ >]*/gi, '' ) ;
/* 93  */ 
/* 94  */         html = html.replace( /\s*FONT-FAMILY:[^;"]*;?/gi, '' ) ;
/* 95  */     }
/* 96  */ 
/* 97  */     // Remove Class attributes
/* 98  */     html = html.replace(/<(\w[^>]*) class=([^ |>]*)([^>]*)/gi, "<$1$3") ;
/* 99  */ 
/* 100 */     // Remove styles.

/* CB.PasteFromWord.js */

/* 101 */     if (bRemoveStyles) {
/* 102 */         html = html.replace( /<(\w[^>]*) style="([^\"]*)"([^>]*)/gi, "<$1$3" ) ;
/* 103 */     }
/* 104 */ 
/* 105 */     // Remove style, meta and link tags
/* 106 */     html = html.replace( /<STYLE[^>]*>[\s\S]*?<\/STYLE[^>]*>/gi, '' ) ;
/* 107 */     html = html.replace( /<(?:META|LINK)[^>]*>\s*/gi, '' ) ;
/* 108 */ 
/* 109 */     // Remove empty styles.
/* 110 */     html =  html.replace( /\s*style="\s*"/gi, '' ) ;
/* 111 */ 
/* 112 */     html = html.replace( /<SPAN\s*[^>]*>\s*&nbsp;\s*<\/SPAN>/gi, '&nbsp;' ) ;
/* 113 */ 
/* 114 */     html = html.replace( /<SPAN\s*[^>]*><\/SPAN>/gi, '' ) ;
/* 115 */ 
/* 116 */     // Remove Lang attributes
/* 117 */     html = html.replace(/<(\w[^>]*) lang=([^ |>]*)([^>]*)/gi, "<$1$3") ;
/* 118 */ 
/* 119 */     html = html.replace( /<SPAN\s*>([\s\S]*?)<\/SPAN>/gi, '$1' ) ;
/* 120 */ 
/* 121 */     html = html.replace( /<FONT\s*>([\s\S]*?)<\/FONT>/gi, '$1' ) ;
/* 122 */ 
/* 123 */     // Remove XML elements and declarations
/* 124 */     html = html.replace(/<\\?\?xml[^>]*>/gi, '' ) ;
/* 125 */ 
/* 126 */     // Remove w: tags with contents.
/* 127 */     html = html.replace( /<w:[^>]*>[\s\S]*?<\/w:[^>]*>/gi, '' ) ;
/* 128 */ 
/* 129 */     // Remove Tags with XML namespace declarations: <o:p><\/o:p>
/* 130 */     html = html.replace(/<\/?\w+:[^>]*>/gi, '' ) ;
/* 131 */ 
/* 132 */     // Remove comments [SF BUG-1481861].
/* 133 */     html = html.replace(/<\!--[\s\S]*?-->/g, '' ) ;
/* 134 */ 
/* 135 */     html = html.replace( /<(U|I|STRIKE)>&nbsp;<\/\1>/g, '&nbsp;' ) ;
/* 136 */ 
/* 137 */     html = html.replace( /<H\d>\s*<\/H\d>/gi, '' ) ;
/* 138 */ 
/* 139 */     // Remove "display:none" tags.
/* 140 */     html = html.replace( /<(\w+)[^>]*\sstyle="[^"]*DISPLAY\s?:\s?none[\s\S]*?<\/\1>/ig, '' ) ;
/* 141 */ 
/* 142 */     // Remove language tags
/* 143 */     html = html.replace( /<(\w[^>]*) language=([^ |>]*)([^>]*)/gi, "<$1$3") ;
/* 144 */ 
/* 145 */     // Remove onmouseover and onmouseout events (from MS Word comments effect)
/* 146 */     html = html.replace( /<(\w[^>]*) onmouseover="([^\"]*)"([^>]*)/gi, "<$1$3") ;
/* 147 */     html = html.replace( /<(\w[^>]*) onmouseout="([^\"]*)"([^>]*)/gi, "<$1$3") ;
/* 148 */ 
/* 149 */     /*if ( FCKConfig.CleanWordKeepsStructure )
/* 150 *|     {

/* CB.PasteFromWord.js *|

/* 151 *|         // The original <Hn> tag send from Word is something like this: <Hn style="margin-top:0px;margin-bottom:0px">
/* 152 *|         html = html.replace( /<H(\d)([^>]*)>/gi, '<h$1>' ) ;
/* 153 *| 
/* 154 *|         // Word likes to insert extra <font> tags, when using MSIE. (Wierd).
/* 155 *|         html = html.replace( /<(H\d)><FONT[^>]*>([\s\S]*?)<\/FONT><\/\1>/gi, '<$1>$2<\/$1>' );
/* 156 *|         html = html.replace( /<(H\d)><EM>([\s\S]*?)<\/EM><\/\1>/gi, '<$1>$2<\/$1>' );
/* 157 *|     }
/* 158 *|     else
/* 159 *|     {/**/
/* 160 */         html = html.replace( /<H1([^>]*)>/gi, '<div$1><b><font size="6">' ) ;
/* 161 */         html = html.replace( /<H2([^>]*)>/gi, '<div$1><b><font size="5">' ) ;
/* 162 */         html = html.replace( /<H3([^>]*)>/gi, '<div$1><b><font size="4">' ) ;
/* 163 */         html = html.replace( /<H4([^>]*)>/gi, '<div$1><b><font size="3">' ) ;
/* 164 */         html = html.replace( /<H5([^>]*)>/gi, '<div$1><b><font size="2">' ) ;
/* 165 */         html = html.replace( /<H6([^>]*)>/gi, '<div$1><b><font size="1">' ) ;
/* 166 */ 
/* 167 */         html = html.replace( /<\/H\d>/gi, '<\/font><\/b><\/div>' ) ;
/* 168 */ 
/* 169 */         // Transform <P> to <DIV>
/* 170 */         var re = new RegExp( '(<P)([^>]*>[\\s\\S]*?)(<\/P>)', 'gi' ) ;  // Different because of a IE 5.0 error
/* 171 */         html = html.replace( re, '<div$2<\/div>' ) ;
/* 172 */ 
/* 173 */         // Remove empty tags (three times, just to be sure).
/* 174 */         // This also removes any empty anchor
/* 175 */         html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
/* 176 */         html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
/* 177 */         html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
/* 178 */     //}
/* 179 */     return html ;
/* 180 */ }
/* 181 */ 

;
/* CB.FileUploadWindow.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.FilesConfirmationWindow', {
/* 4   */     extend: 'Ext.Window'
/* 5   */     ,autoShow: true
/* 6   */     ,border: false
/* 7   */     ,bodyBorder: false
/* 8   */     ,closable: true
/* 9   */     ,closeAction: 'hide'
/* 10  */     ,autoHeight: true
/* 11  */     ,maximizable: false
/* 12  */     ,minimizable: false
/* 13  */     ,modal: true
/* 14  */     ,plain: true
/* 15  */     ,resizable: false
/* 16  */     ,stateful: false
/* 17  */     ,title: L.UploadFile
/* 18  */     ,minWidth: 550
/* 19  */     ,width: 550
/* 20  */     ,bodyStyle: 'padding: 10px; border: 0'
/* 21  */     ,buttonAlign: 'center'
/* 22  */     ,data:{
/* 23  */         single: true
/* 24  */         ,autorenameButton: true
/* 25  */     }
/* 26  */ 
/* 27  */     ,initComponent: function(){
/* 28  */         this.data = this.config.data;
/* 29  */ 
/* 30  */         var buttons = [];
/* 31  */ 
/* 32  */         if(this.data.allow_new_version) {
/* 33  */             buttons.push({
/* 34  */                 text: L.NewVersion
/* 35  */                 ,name: 'newversion'
/* 36  */                 ,scope: this
/* 37  */                 ,handler: this.onButtonClick
/* 38  */             });
/* 39  */         }
/* 40  */ 
/* 41  */         buttons.push({
/* 42  */             text: L.Replace
/* 43  */             ,name: 'replace'
/* 44  */             ,scope: this
/* 45  */             ,handler: this.onButtonClick
/* 46  */         });
/* 47  */ 
/* 48  */         this.renameButton = new Ext.Button({
/* 49  */             text: L.Rename
/* 50  */             ,name: 'rename'

/* CB.FileUploadWindow.js */

/* 51  */             ,scope: this
/* 52  */             ,handler: this.onButtonClick
/* 53  */         });
/* 54  */ 
/* 55  */         if(!Ext.isEmpty(this.data.suggestedFilename)) {
/* 56  */             buttons.push(this.renameButton);
/* 57  */         }
/* 58  */ 
/* 59  */         if(this.data.autorenameButton) {
/* 60  */             buttons.push({
/* 61  */                 text: L.AutoRename
/* 62  */                 ,name: 'autorename'
/* 63  */                 ,scope: this
/* 64  */                 ,handler: this.onButtonClick
/* 65  */             });
/* 66  */         }
/* 67  */ 
/* 68  */         buttons.push({
/* 69  */             text: L.Cancel
/* 70  */             ,name: 'cancel'
/* 71  */             ,scope: this
/* 72  */             ,handler: this.onButtonClick
/* 73  */         });
/* 74  */ 
/* 75  */         var items = [
/* 76  */             {xtype: 'label', text: this.data.msg}
/* 77  */         ];
/* 78  */ 
/* 79  */         if(this.data.single === false) {
/* 80  */             items.push({
/* 81  */                 xtype: 'checkbox'
/* 82  */                 ,boxLabel: L.ApplyForAll
/* 83  */                 ,style: 'margin-top: 25px'
/* 84  */                 ,listeners:{
/* 85  */                     change: function(cb, checked){
/* 86  */                         this.forAll = checked;
/* 87  */                         this.renameButton.setDisabled(checked);
/* 88  */                     }
/* 89  */                     ,scope: this
/* 90  */                 }
/* 91  */             });
/* 92  */         }
/* 93  */ 
/* 94  */         Ext.apply(this, {
/* 95  */             items: items
/* 96  */             ,buttons: buttons
/* 97  */         });
/* 98  */ 
/* 99  */         this.callParent(arguments);
/* 100 */ 

/* CB.FileUploadWindow.js */

/* 101 */         this.response = 'cancel';
/* 102 */     }
/* 103 */ 
/* 104 */     ,onButtonClick: function(b){
/* 105 */         this.response = b.name;
/* 106 */         this.hide();
/* 107 */     }
/* 108 */ 
/* 109 */ });
/* 110 */ 

;
/* CustomInterface.js */

/* 1 */ Ext.namespace('CB.plugin');
/* 2 */ Ext.define('CB.plugin.CustomInterface', {
/* 3 */     extend: 'Ext.plugin.Abstract'
/* 4 */ 
/* 5 */     ,init: function(owner) {
/* 6 */         //
/* 7 */     }
/* 8 */ });
/* 9 */ 

;
/* DropDownList.js */

/* 1   */ Ext.namespace('CB.plugin.field');
/* 2   */ 
/* 3   */ Ext.define('CB.plugin.field.DropDownList', {
/* 4   */     extends: 'Ext.util.Observable'
/* 5   */ 
/* 6   */     ,alias: 'plugin.CBPluginFieldDropDownList'
/* 7   */     ,xtype: 'CB.plugin.field.DropDownList'
/* 8   */ 
/* 9   */     ,constructor: function(config) {
/* 10  */         var defaultConfig = {
/* 11  */             commands: [
/* 12  */                 {
/* 13  */                     prefix: '@'
/* 14  */                     ,regex: /^([\w\d_\.]+)/i
/* 15  */ 
/* 16  */                     ,insertField: 'info'
/* 17  */ 
/* 18  */                     ,handler: this.onAtCommand
/* 19  */                     ,scope: this
/* 20  */                 }
/* 21  */                 ,{
/* 22  */                     prefix: '#'
/* 23  */                     ,regex: /^(\d+)/i
/* 24  */ 
/* 25  */                     ,handler: this.onDiezCommand
/* 26  */                 }
/* 27  */             ]
/* 28  */             ,displayTpl: new Ext.XTemplate(
/* 29  */                 '<tpl for=".">'
/* 30  */                     ,'<li role="option" class="x-boundlist-item users-list-item">'
/* 31  */                         ,'<div class="thumb">'
/* 32  */                             ,'<img class="i32" src="' + App.config.photoPath + '{id}.jpg?32={[ CB.DB.usersStore.getPhotoParam(values.id) ]}" title="{text}">'
/* 33  */                         ,'</div>'
/* 34  */                         ,'<div class="text">'
/* 35  */                             ,'<span class="info">{[this.replaceLastQuery(values.info)]}</span>'
/* 36  */                             ,'{[this.replaceLastQuery(values.text)]}'
/* 37  */                             ,'<div class="descr">{[this.replaceLastQuery(values.descr)]}</div>'
/* 38  */                         ,'</div>'
/* 39  */                     ,'</li>'
/* 40  */                 ,'</tpl>'
/* 41  */                 ,'<div class="x-clear"></div>'
/* 42  */                 ,{
/* 43  */                     // XTemplate configuration:
/* 44  */                     compiled: true
/* 45  */                     ,replaceLastQuery: function(value){
/* 46  */                         if(!Ext.isEmpty(this.lastQuery)) {
/* 47  */                             return String(value).replace(this.lastQuery, '<span class="fwB">' + this.lastQuery + '</span>');
/* 48  */                         }
/* 49  */ 
/* 50  */                         return value;

/* DropDownList.js */

/* 51  */                     }
/* 52  */                 }
/* 53  */             )
/* 54  */ 
/* 55  */         };
/* 56  */ 
/* 57  */         if(config) {
/* 58  */             Ext.apply(defaultConfig, config);
/* 59  */         }
/* 60  */ 
/* 61  */         Ext.apply(this, defaultConfig);
/* 62  */ 
/* 63  */         this.callParent(arguments);
/* 64  */         // CB.plugin.field.DropDownList.superclass.constructor.call(defaultConfig);
/* 65  */     }
/* 66  */ 
/* 67  */     ,init: function(owner) {
/* 68  */         this.owner = owner;
/* 69  */ 
/* 70  */         this.store = new Ext.data.JsonStore({
/* 71  */             model: 'DropDownListItems'
/* 72  */         });
/* 73  */ 
/* 74  */         Ext.copyTo(
/* 75  */             this.owner
/* 76  */             ,Ext.form.field.Picker.prototype
/* 77  */             ,[
/* 78  */                 'matchFieldWidth'
/* 79  */                 ,'pickerAlign'
/* 80  */                 ,'openCls'
/* 81  */                 ,'initEvents' //overwriten in Casebox
/* 82  */                 ,'expand'
/* 83  */                 ,'onExpand'
/* 84  */                 ,'doAlign'
/* 85  */                 ,'collapse'
/* 86  */                 ,'collapseIf'
/* 87  */                 ,'getPicker'
/* 88  */                 ,'getRefItems'
/* 89  */                 ,'onOtherFocus'
/* 90  */                 ,'alignPicker'
/* 91  */                 ,'beforeDestroy'
/* 92  */             ]
/* 93  */         );
/* 94  */ 
/* 95  */         Ext.copyTo(
/* 96  */             this.owner
/* 97  */             ,Ext.form.field.ComboBox.prototype
/* 98  */             ,[
/* 99  */                 ,'defaultListConfig'
/* 100 */                 ,'listConfig'

/* DropDownList.js */

/* 101 */                 ,'childEls'
/* 102 */                 ,'delimiter'
/* 103 */                 ,'getStore'
/* 104 */                 ,'updateBindSelection'
/* 105 */                 ,'onPageChange'
/* 106 */                 ,'onListRefresh'
/* 107 */                 ,'onBeforeSelect'
/* 108 */                 ,'onBeforeDeselect'
/* 109 */                 // ,'onDestroy'
/* 110 */             ]
/* 111 */         );
/* 112 */ 
/* 113 */         Ext.apply(owner, {
/* 114 */             enableKeyEvents: true
/* 115 */             ,store: this.store
/* 116 */             ,valueField: 'id'
/* 117 */             ,displayField: 'text'
/* 118 */             ,displayTpl: this.displayTpl
/* 119 */ 
/* 120 */             ,selectByValue: Ext.emptyFn
/* 121 */             ,onTriggerClick: Ext.emptyFn
/* 122 */             ,syncSelection: Ext.emptyFn
/* 123 */             ,setSelection: Ext.emptyFn
/* 124 */ 
/* 125 */             ,onCollapse: function() {
/* 126 */                 if(this.preventEditComplete !== Ext.EventObject.time) {
/* 127 */                     delete this.preventEditComplete;
/* 128 */                 }
/* 129 */             }
/* 130 */             ,onEsc: Ext.emptyFn
/* 131 */             ,bindStore: Ext.emptyFn
/* 132 */ 
/* 133 */             ,assertValue: function() {
/* 134 */                 return '';
/* 135 */             }
/* 136 */ 
/* 137 */             ,select : function(record, index){
/* 138 */                 if(this.fireEvent('beforeselect', this, record, index) !== false){
/* 139 */                     ed.preventEditComplete = true;
/* 140 */                     this.collapse();
/* 141 */                     this.fireEvent('select', this, record, index);
/* 142 */                 }
/* 143 */             }
/* 144 */ 
/* 145 */             ,createPicker: function() {
/* 146 */                 var me = this,
/* 147 */                     picker,
/* 148 */                     pickerCfg = Ext.apply(
/* 149 */                         {
/* 150 */                             xtype: 'boundlist'

/* DropDownList.js */

/* 151 */                             ,pickerField: me
/* 152 */                             ,selModel: {
/* 153 */                                 mode: me.multiSelect ? 'SIMPLE' : 'SINGLE'
/* 154 */                                 // ,enableInitialSelection: true
/* 155 */                             }
/* 156 */                             ,floating: true
/* 157 */                             ,hidden: true
/* 158 */                             ,store: me.store
/* 159 */                             ,displayField: me.displayField
/* 160 */                             ,preserveScrollOnRefresh: true
/* 161 */                             ,pageSize: me.pageSize
/* 162 */                             ,tpl: me.displayTpl
/* 163 */                             ,navigationModel: 'CBboundlist'
/* 164 */                         }
/* 165 */                         ,me.listConfig
/* 166 */                         ,me.defaultListConfig
/* 167 */                     );
/* 168 */ 
/* 169 */                 picker = me.picker = Ext.widget(pickerCfg);
/* 170 */                 if (me.pageSize) {
/* 171 */                     picker.pagingToolbar.on('beforechange', me.onPageChange, me);
/* 172 */                 }
/* 173 */ 
/* 174 */                 // me.mon(picker, {
/* 175 */                 //     refresh: me.onListRefresh,
/* 176 */                 //     scope: me
/* 177 */                 // });
/* 178 */ 
/* 179 */                 me.mon(picker.getSelectionModel(), {
/* 180 */                     beforeselect: me.onBeforeSelect,
/* 181 */                     beforedeselect: me.onBeforeDeselect,
/* 182 */                     scope: me
/* 183 */                 });
/* 184 */ 
/* 185 */                 return picker;
/* 186 */             }
/* 187 */ 
/* 188 */         });
/* 189 */ 
/* 190 */         owner.on('render', this.onRender, this);
/* 191 */         owner.on('beforeselect', this.setSelectedValue, this);
/* 192 */         owner.on('beforedestroy', this.onBeforeDestroy, this);
/* 193 */     }
/* 194 */ 
/* 195 */ 
/* 196 */     ,onRender: function(ed){
/* 197 */         this.owner.wrap = this.owner.getEl();
/* 198 */ 
/* 199 */         //add listeners
/* 200 */         ed.on('keydown', this.onKeyDown, this);

/* DropDownList.js */

/* 201 */         ed.on('keyup', this.onKeyUp, this);
/* 202 */     }
/* 203 */ 
/* 204 */     ,onBeforeDestroy: function(ed){
/* 205 */         ed.un('keydown', this.onKeyDown, this);
/* 206 */         ed.un('keyup', this.onKeyUp, this);
/* 207 */         this.owner.un('beforeselect', this.setSelectedValue, this);
/* 208 */     }
/* 209 */ 
/* 210 */     ,onKeyDown: function(ed, e){
/* 211 */         if(!ed.picker) {
/* 212 */             return;
/* 213 */         }
/* 214 */ 
/* 215 */         var me = this
/* 216 */             ,picker = ed.picker
/* 217 */             ,allItems = picker.all
/* 218 */             ,oldItem = picker.highlightedItem
/* 219 */             ,oldItemIdx
/* 220 */             ,newItemIdx;
/* 221 */ 
/* 222 */         switch(e.getKey()) {
/* 223 */             case e.ENTER:
/* 224 */                 if(ed.isExpanded) {
/* 225 */                     e.stopEvent();
/* 226 */                     ed.onKeyEnter(e);
/* 227 */                 }
/* 228 */                 break;
/* 229 */ 
/* 230 */             case e.ESC:
/* 231 */                 if(ed.isExpanded) {
/* 232 */                     e.stopEvent();
/* 233 */                     ed.preventEditComplete = true;
/* 234 */                     ed.collapse();
/* 235 */                 }
/* 236 */                 break;
/* 237 */ 
/* 238 */             case e.UP:
/* 239 */                 if(ed.isExpanded) {
/* 240 */                     e.stopEvent();
/* 241 */                     ed.onKeyUp(e);
/* 242 */                 }
/* 243 */                 break;
/* 244 */ 
/* 245 */             case e.DOWN:
/* 246 */                 if(ed.isExpanded) {
/* 247 */                     e.stopEvent();
/* 248 */                     ed.onKeyDown(e);
/* 249 */                 }
/* 250 */                 break;

/* DropDownList.js */

/* 251 */ 
/* 252 */             case e.LEFT:
/* 253 */             case e.RIGHT:
/* 254 */                 // do nothing and let the event propagate
/* 255 */                 break;
/* 256 */         }
/* 257 */     }
/* 258 */ 
/* 259 */     ,onKeyUp: function(ed, e){
/* 260 */         var value = ed.getRawValue();
/* 261 */ 
/* 262 */         if(Ext.isEmpty(value) || e.isSpecialKey()) {
/* 263 */             return;
/* 264 */         }
/* 265 */ 
/* 266 */         var el = ed.inputEl
/* 267 */             ,caretPosition = this.getCaretPosition(el.dom)
/* 268 */             ,parts = [
/* 269 */                 value.substring(0, caretPosition)
/* 270 */                 ,value.substring(caretPosition)
/* 271 */             ];
/* 272 */ 
/* 273 */         //iterate each command and check if matches any
/* 274 */         for (var i = 0; i < this.commands.length; i++) {
/* 275 */             var cmd = this.commands[i];
/* 276 */ 
/* 277 */             //transform enters and comma's to spaces for "space" prefix
/* 278 */             if(cmd.prefix === ' ') {
/* 279 */                 parts[0] = parts[0].replace(/[\n\r,]/g, ' ');
/* 280 */             }
/* 281 */ 
/* 282 */             //split left part by command prefix
/* 283 */             var t = parts[0].split(cmd.prefix);
/* 284 */             //skip if no comand prefix found, but not for space
/* 285 */             if((cmd.prefix !== ' ') && (t.length < 2)) {
/* 286 */                continue;
/* 287 */             }
/* 288 */ 
/* 289 */             var leftpart = t[t.length - 1];
/* 290 */             var str = t[t.length - 1] + parts[1];
/* 291 */             //execute regex match and check result
/* 292 */             var rez = cmd.regex.exec(str);
/* 293 */ 
/* 294 */             //if no match or not all left part from cursor included then skip
/* 295 */             if(Ext.isEmpty(rez) || (rez[1].length < leftpart.length)) {
/* 296 */                continue;
/* 297 */             }
/* 298 */ 
/* 299 */             var handler = cmd.handler || Ext.emptyFn;
/* 300 */             handler = Ext.Function.bind(handler, Ext.valueFrom(this.commands[i].scope, this));

/* DropDownList.js */

/* 301 */ 
/* 302 */             cmd.caretPosition = caretPosition;
/* 303 */             cmd.query = rez[1];
/* 304 */             cmd.queryStartIndex = parts[0].length - leftpart.length;
/* 305 */ 
/* 306 */             this.currentCommand = cmd;
/* 307 */ 
/* 308 */             handler(cmd, rez[1]);
/* 309 */             return true;
/* 310 */          }
/* 311 */          this.owner.collapse();
/* 312 */     }
/* 313 */ 
/* 314 */     ,onAtCommand: function(cmdParams, query) {
/* 315 */         if(query == this.lastQuery) {
/* 316 */             return;
/* 317 */         }
/* 318 */ 
/* 319 */         this.lastQuery = query;
/* 320 */         this.owner.displayTpl.lastQuery = query;
/* 321 */ 
/* 322 */         CB_Security.searchUserGroups(
/* 323 */             {
/* 324 */                 source: 'users'
/* 325 */                 ,query: query
/* 326 */             }
/* 327 */             ,this.onSearchUsersProcess
/* 328 */             ,this
/* 329 */         );
/* 330 */     }
/* 331 */ 
/* 332 */     ,onSearchUsersProcess: function(r, e) {
/* 333 */         if(!r || (r.success !== true)) {
/* 334 */             return;
/* 335 */         }
/* 336 */ 
/* 337 */         var items = [];
/* 338 */         for (var i = 0; i < r.data.length; i++) {
/* 339 */             var d = r.data[i];
/* 340 */             items.push({
/* 341 */                 id: d.id
/* 342 */                 ,text: d.name
/* 343 */                 ,info: d.user
/* 344 */                 ,descr: d.email
/* 345 */             });
/* 346 */ 
/* 347 */         }
/* 348 */ 
/* 349 */         this.showItems(items);
/* 350 */     }

/* DropDownList.js */

/* 351 */ 
/* 352 */     /**
/* 353 *|      * TODO: discuss and implement diez command
/* 354 *|      * @param  object cmdParams
/* 355 *|      * @param  varchar query
/* 356 *|      * @return void
/* 357 *|      */
/* 358 */     ,onDiezCommand: function(cmdParams, query) {
/* 359 */         plog('Diez', arguments, query);
/* 360 */     }
/* 361 */ 
/* 362 */     ,showItems: function(itemsArray){
/* 363 */         this.store.loadData(itemsArray);
/* 364 */         this.owner.getPicker().getSelectionModel().deselectAll();
/* 365 */         this.owner.expand();
/* 366 */         this.owner.setPosition();
/* 367 */     }
/* 368 */ 
/* 369 */     ,setSelectedValue: function(ed, record, index) {
/* 370 */         var cmd = this.currentCommand
/* 371 */             ,field = Ext.valueFrom(cmd.insertField, 'id')
/* 372 */             ,value = ed.getRawValue()
/* 373 */             ,newValue = value.substring(0, cmd.queryStartIndex) + record.get(field)
/* 374 */             ,newCaretPosition = newValue.length;
/* 375 */ 
/* 376 */         newValue += value.substring(cmd.queryStartIndex + cmd.query.length);
/* 377 */         if(Ext.EventObject.type != "click") {
/* 378 */             ed.preventEditComplete = Ext.EventObject.time;
/* 379 */         }
/* 380 */ 
/* 381 */         ed.collapse();
/* 382 */         ed.setRawValue(newValue);
/* 383 */         this.setCaretPosition(ed.inputEl.dom, newCaretPosition);
/* 384 */     }
/* 385 */ 
/* 386 */     ,getCaretPosition: function(el) {
/* 387 */         if (typeof(el.selectionStart) === "number") {
/* 388 */             return el.selectionStart;
/* 389 */         } else if (document.selection && el.createTextRange){
/* 390 */             var range = document.selection.createRange();
/* 391 */             range.collapse(true);
/* 392 */             range.moveStart("character", -el.value.length);
/* 393 */             return range.text.length;
/* 394 */         } else {
/* 395 */             throw 'getCaretPosition() not supported';
/* 396 */         }
/* 397 */     }
/* 398 */ 
/* 399 */     ,setCaretPosition: function (el, pos){
/* 400 */         if(el.setSelectionRange)

/* DropDownList.js */

/* 401 */         {
/* 402 */             el.focus();
/* 403 */             el.setSelectionRange(pos,pos);
/* 404 */         }
/* 405 */         else if (el.createTextRange) {
/* 406 */             var range = el.createTextRange();
/* 407 */             range.collapse(true);
/* 408 */             range.moveEnd('character', pos);
/* 409 */             range.moveStart('character', pos);
/* 410 */             range.select();
/* 411 */         }
/* 412 */     }
/* 413 */ });
/* 414 */ 

;
/* Ext.ux.htmlEditor.js */

/* 1  */ Ext.namespace('Ext.ux');
/* 2  */ 
/* 3  */ Ext.define('Ext.ux.HtmlEditor', {
/* 4  */     extend: 'Ext.form.field.HtmlEditor'
/* 5  */     ,alias: 'widget.CBHtmlEditor'
/* 6  */ 
/* 7  */     ,xtype: 'ExtUxHtmlEditor'
/* 8  */ 
/* 9  */     ,itemId: 'htmleditor'
/* 10 */     ,baseUri: ''
/* 11 */     ,border: false
/* 12 */     ,bodyStyle: 'border: 0'
/* 13 */     ,headerInclude: ''
/* 14 */ 
/* 15 */     ,initComponent: function() {
/* 16 */         this.on('render', this.onRenderEvent, this);
/* 17 */         this.callParent(arguments);
/* 18 */     }
/* 19 */     ,onRenderEvent: function(){
/* 20 */         this.addPasteFromWordButton();
/* 21 */     }
/* 22 */ 
/* 23 */     ,addPasteFromWordButton: function(){
/* 24 */         this.getToolbar().add(
/* 25 */             '-'
/* 26 */             ,{
/* 27 */                 cls: 'remove-sprites'
/* 28 */                 ,iconCls: 'icon-paste-from-word-text'
/* 29 */                 ,text: L.PasteFromWord
/* 30 */                 ,scope: this
/* 31 */                 ,handler: function(b) {
/* 32 */                     if(!Ext.isDefined(CB.thePasteFromWordWindow)) {
/* 33 */                         CB.thePasteFromWordWindow = new CB.PasteFromWord();
/* 34 */                     }
/* 35 */                     var pw = CB.thePasteFromWordWindow;
/* 36 */                     Ext.apply(pw, {opener: this});
/* 37 */                     pw.show();
/* 38 */                 }
/* 39 */             }
/* 40 */         );
/* 41 */     }
/* 42 */ 
/* 43 */     ,getDocMarkup : function(){
/* 44 */         if(this.iframe) {
/* 45 */             var inc = (this.baseUri ? '<base href="' + this.baseUri + '" />' : '') + this.headerInclude;
/* 46 */             var h = Ext.fly(this.iframe).getHeight() - this.iframePad * 2;
/* 47 */             return Ext.String.format(
/* 48 */                 '<html><head>' +
/* 49 */                 inc +
/* 50 */                 '<style type="text/css">body{border: 0; margin: 0; padding: {0}px; height: {1}px; cursor: text}</style></head>' +

/* Ext.ux.htmlEditor.js */

/* 51 */                 '<body></body></html>'
/* 52 */                 ,this.iframePad
/* 53 */                 ,h
/* 54 */             );
/* 55 */         }
/* 56 */     }
/* 57 */ 
/* 58 */ });
/* 59 */ 

;
/* Ext.ux.plugins.defaultButton.js */

/* 1  */ Ext.ns('Ext.ux.plugins');
/* 2  */ 
/* 3  */ Ext.define('Ext.ux.plugins.DefaultButton', {
/* 4  */     alias: 'plugin.defaultButton'
/* 5  */ 
/* 6  */     ,init: function(button) {
/* 7  */         button.on('afterRender', this.setupKeyListener, button);
/* 8  */     }
/* 9  */ 
/* 10 */     ,setupKeyListener: function() {
/* 11 */         var formPanel = this.findParentByType('form');
/* 12 */         new Ext.KeyMap(formPanel.el, {
/* 13 */             key: Ext.event.Event.ENTER
/* 14 */             ,shift: false
/* 15 */             ,alt: false
/* 16 */             ,fn: function(keyCode, e) {
/* 17 */                 if (e.target.type === 'textarea' && !e.ctrlKey)  {
/* 18 */                     return true;
/* 19 */                 }
/* 20 */ 
/* 21 */                 this.el.dom.click();
/* 22 */ 
/* 23 */                 return false;
/* 24 */             }
/* 25 */             ,scope: this
/* 26 */         });
/* 27 */     }
/* 28 */ });
/* 29 */ 

;
/* CB.TextEditWindow.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.TextEditWindow', {
/* 4   */     extend: 'Ext.Window'
/* 5   */     ,border: false
/* 6   */     ,bodyBorder: false
/* 7   */     ,closable: true
/* 8   */     ,closeAction: 'destroy'
/* 9   */     ,hideCollapseTool: true
/* 10  */     ,layout: 'fit'
/* 11  */     ,maximizable: false
/* 12  */     ,minimizable: false
/* 13  */     ,modal: true
/* 14  */     ,resizable: true
/* 15  */     ,stateful: false
/* 16  */     ,data: { callback: Ext.emptyFn }
/* 17  */     ,title: L.EditingValue
/* 18  */     ,width: 600
/* 19  */     ,height: 400
/* 20  */ 
/* 21  */     ,initComponent: function() {
/* 22  */         this.data = this.config.data;
/* 23  */ 
/* 24  */         switch(this.config.editor) {
/* 25  */             case 'ace':
/* 26  */                 this.editor = new Ext.ux.AceEditor({
/* 27  */                     border: false
/* 28  */ 
/* 29  */                 });
/* 30  */                 break;
/* 31  */ 
/* 32  */             default:
/* 33  */                 this.editor = new Ext.form.TextArea({border: false});
/* 34  */         }
/* 35  */ 
/* 36  */         Ext.apply(this, {
/* 37  */             layout: 'fit'
/* 38  */             ,items: [this.editor]
/* 39  */             ,keys:[{
/* 40  */                 key: Ext.event.Event.ESC,
/* 41  */                 fn: this.doClose,
/* 42  */                 scope: this
/* 43  */                 }
/* 44  */             ]
/* 45  */             ,listeners: {
/* 46  */                 scope: this
/* 47  */                 ,show: this.onWindowsShow
/* 48  */             }
/* 49  */             ,buttons: [
/* 50  */                 {

/* CB.TextEditWindow.js */

/* 51  */                     text: Ext.MessageBox.buttonText.ok
/* 52  */                     ,handler: this.doSubmit
/* 53  */                     ,scope: this
/* 54  */                 },{
/* 55  */                     text: L.Cancel
/* 56  */                     ,handler: this.doClose
/* 57  */                     ,scope: this
/* 58  */                 }
/* 59  */             ]
/* 60  */         });
/* 61  */ 
/* 62  */         this.callParent(arguments);
/* 63  */     }
/* 64  */ 
/* 65  */     ,onWindowsShow: function(){
/* 66  */         //update title if set
/* 67  */         var title = Ext.valueFrom(this.data.title, this.title);
/* 68  */         this.setTitle(title);
/* 69  */         this.getHeader().setTitle(title);
/* 70  */ 
/* 71  */         this.editor.setValue(
/* 72  */             Ext.valueFrom(this.data.value, '')
/* 73  */ 
/* 74  */             /* need to clarify why json mode is not present in current ace distribution
/* 75  *| 
/* 76  *|              ,{
/* 77  *|                 mode: this.config.mode //set mode for qace editor
/* 78  *|             }/**/
/* 79  */         );
/* 80  */         this.editor.focus(false, 350);
/* 81  */     }
/* 82  */ 
/* 83  */     ,doSubmit: function(){
/* 84  */         var ed = this.editor.editor
/* 85  */                 ? this.editor.editor
/* 86  */                 : this.editor
/* 87  */             ,session = ed.getSession
/* 88  */                 ? ed.getSession()
/* 89  */                 : null
/* 90  */             ,value = session
/* 91  */                 ? session.getValue()
/* 92  */                 : ed.getValue()
/* 93  */             ,f = Ext.Function.bind(
/* 94  */                 this.data.callback
/* 95  */                 ,Ext.valueFrom(this.data.scope, this)
/* 96  */                 ,[this, value]
/* 97  */             );
/* 98  */ 
/* 99  */         f();
/* 100 */ 

/* CB.TextEditWindow.js */

/* 101 */         this.close();
/* 102 */     }
/* 103 */ });
/* 104 */ 

;
/* CB.HtmlEditWindow.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.HtmlEditWindow', {
/* 4  */     extend: 'Ext.Window'
/* 5  */ 
/* 6  */     ,itemId: 'htmleditorwindow'
/* 7  */     ,bodyBorder: false
/* 8  */     ,border: false
/* 9  */     ,closable: true
/* 10 */     ,closeAction: 'hide'
/* 11 */     ,hideCollapseTool: true
/* 12 */     ,layout: 'fit'
/* 13 */     ,maximizable: false
/* 14 */     ,minimizable: false
/* 15 */     ,modal: true
/* 16 */     ,plain: true
/* 17 */     ,resizable: true
/* 18 */     ,stateful: false
/* 19 */     ,data: { callback: Ext.emptyFn }
/* 20 */     ,title: L.EditingValue
/* 21 */     ,width: 700
/* 22 */     ,height: 400
/* 23 */     ,initComponent: function() {
/* 24 */         this.editor = new Ext.ux.HtmlEditor({border: false});
/* 25 */         Ext.apply(this, {
/* 26 */             items: [this.editor]
/* 27 */             ,keys:[{
/* 28 */                 key: Ext.event.Event.ESC,
/* 29 */                 fn: this.doClose,
/* 30 */                 scope: this
/* 31 */                 }
/* 32 */             ]
/* 33 */             ,buttons: [ {text: Ext.MessageBox.buttonText.ok, handler: this.doSubmit, scope: this}
/* 34 */                         ,{text: L.Cancel, handler: this.doClose, scope: this}]
/* 35 */         });
/* 36 */ 
/* 37 */         this.callParent(arguments);
/* 38 */ 
/* 39 */         this.on('show', this.onShow, this);
/* 40 */     }
/* 41 */     ,onShow: function(){
/* 42 */         this.editor.setValue(Ext.valueFrom(this.data.value, ''));
/* 43 */         this.editor.focus(true, 350);
/* 44 */     },doSubmit: function(){
/* 45 */         var f = this.data.callback.bind(Ext.valueFrom(this.data.scope, this), [this, this.editor.getValue()]);
/* 46 */         f();
/* 47 */         this.doClose();
/* 48 */     },doClose: function(){
/* 49 */         this.hide();
/* 50 */     }

/* CB.HtmlEditWindow.js */

/* 51 */ });
/* 52 */ 

;
/* Base.js */

/* 1   */ Ext.namespace('CB.facet');
/* 2   */ Ext.define('CB.facet.Base', {
/* 3   */     xtype: 'CBFacetBase'
/* 4   */     ,alias: 'CB.Facet.Base'
/* 5   */ 
/* 6   */     ,extend: 'Ext.Panel'
/* 7   */     ,title: 'facet'
/* 8   */     ,autoHeight: true
/* 9   */     ,closable: false
/* 10  */     ,collapsible: true
/* 11  */     ,animCollapse: false
/* 12  */     ,titleCollapse: true
/* 13  */     ,hideCollapseTool: true
/* 14  */     ,cls: 'facet'
/* 15  */     ,border: false
/* 16  */     ,mode: 'OR'
/* 17  */     ,modeToggle: false
/* 18  */     ,bodyStyle: 'background: none'
/* 19  */ 
/* 20  */     ,sorters: {
/* 21  */         name: {
/* 22  */             asc: function(o1, o2) {
/* 23  */                 var a = o1.name
/* 24  */                     ,b = o2.name;
/* 25  */ 
/* 26  */                 if(Ext.isNumeric(a) && Ext.isNumeric(b)) {
/* 27  */                     a = parseFloat(a);
/* 28  */                     b = parseFloat(b);
/* 29  */                 }
/* 30  */ 
/* 31  */                 if(a < b) {
/* 32  */                     return -1;
/* 33  */                 }
/* 34  */ 
/* 35  */                 if(a > b) {
/* 36  */                     return 1;
/* 37  */                 }
/* 38  */ 
/* 39  */                 return 0;
/* 40  */             }
/* 41  */ 
/* 42  */             ,desc: function(o1, o2) {
/* 43  */                 var a = o1.name
/* 44  */                     ,b = o2.name;
/* 45  */ 
/* 46  */                 if(Ext.isNumeric(a) && Ext.isNumeric(b)) {
/* 47  */                     a = parseFloat(a);
/* 48  */                     b = parseFloat(b);
/* 49  */                 }
/* 50  */ 

/* Base.js */

/* 51  */                 if(a < b) {
/* 52  */                     return 1;
/* 53  */                 }
/* 54  */ 
/* 55  */                 if(a > b) {
/* 56  */                     return -1;
/* 57  */                 }
/* 58  */ 
/* 59  */                 return 0;
/* 60  */             }
/* 61  */         }
/* 62  */ 
/* 63  */         //count sorter is used by charts to sort its data on load
/* 64  */         ,count: {
/* 65  */             asc: function(o1, o2) {
/* 66  */                 var a = o1.count
/* 67  */                     ,b = o2.count;
/* 68  */ 
/* 69  */                 return a - b;
/* 70  */             }
/* 71  */             ,desc: function(o1, o2) {
/* 72  */                 var a = o1.count
/* 73  */                     ,b = o2.count;
/* 74  */ 
/* 75  */                 return b - a;
/* 76  */             }
/* 77  */         }
/* 78  */ 
/* 79  */         ,items: {
/* 80  */             asc: function(o1, o2) {
/* 81  */                 var a = o1.items
/* 82  */                     ,b = o2.items;
/* 83  */ 
/* 84  */                 return a - b;
/* 85  */             }
/* 86  */             ,desc: function(o1, o2) {
/* 87  */                 var a = o1.items
/* 88  */                     ,b = o2.items;
/* 89  */ 
/* 90  */                 return b - a;
/* 91  */             }
/* 92  */         }
/* 93  */     }
/* 94  */ 
/* 95  */     ,initComponent: function(config){
/* 96  */         Ext.apply(this, config);
/* 97  */ 
/* 98  */         this.initActions();
/* 99  */ 
/* 100 */         Ext.apply(

/* Base.js */

/* 101 */             this
/* 102 */             ,{
/* 103 */                 tools: this.getToolButtons()
/* 104 */             }
/* 105 */         );
/* 106 */ 
/* 107 */         this.callParent(arguments);
/* 108 */ 
/* 109 */         this.enableBubble(['facetchange', 'modechange']);
/* 110 */     }
/* 111 */ 
/* 112 */     /**
/* 113 *|      * init actions used for the facet
/* 114 *|      * @return object
/* 115 *|      */
/* 116 */     ,initActions: function() {
/* 117 */         this.actions = {
/* 118 */             sortByName: new Ext.Action({
/* 119 */                 text: L.SortByName
/* 120 */                 ,itemId: 'sortname'
/* 121 */                 ,scope: this
/* 122 */                 ,handler: this.onSortByNameClick
/* 123 */             })
/* 124 */             ,sortByCount: new Ext.Action({
/* 125 */                 text: L.SortByCount
/* 126 */                 ,itemId: 'sortcount'
/* 127 */                 ,scope: this
/* 128 */                 ,handler: this.onSortByCountClick
/* 129 */             })
/* 130 */         };
/* 131 */ 
/* 132 */         return this.actions;
/* 133 */     }
/* 134 */ 
/* 135 */     /**
/* 136 *|      * basic loading data method. Descendant classes should add more logic here
/* 137 *|      * @param  array data
/* 138 *|      * @return void
/* 139 *|      */
/* 140 */     ,loadData: function(data) {
/* 141 */         delete this.lastSort;
/* 142 */ 
/* 143 */         //check if sorting set
/* 144 */         if(this.defaultSort && this.defaultSort.property) {
/* 145 */             var by = (this.defaultSort.property === 'name')
/* 146 */                 ? 'name'
/* 147 */                 : 'items'
/* 148 */                 ,dir = this.defaultSort.direction;
/* 149 */ 
/* 150 */             data = Ext.Array.sort(data, this.sorters[by][dir]);

/* Base.js */

/* 151 */ 
/* 152 */             this.lastSort = by + dir;
/* 153 */         }
/* 154 */ 
/* 155 */         this.rawData = data;
/* 156 */ 
/* 157 */     }
/* 158 */ 
/* 159 */     ,processServerData: function(serverData, options){
/* 160 */ 
/* 161 */     }
/* 162 */ 
/* 163 */     /**
/* 164 *|      * get buttons to be set in top right side of the facet
/* 165 *|      * @return array
/* 166 *|      */
/* 167 */     ,getToolButtons: function() {
/* 168 */         var rez = [];
/* 169 */ 
/* 170 */         //add button for adding a manual date period
/* 171 */         if(this.manualPeriod) {
/* 172 */             rez.push({
/* 173 */                 itemId: 'period'
/* 174 */                 ,name: 'period'
/* 175 */                 ,xtype: 'button'
/* 176 */                 // ,html: '<span onclick="document.getElementById(\'addDatePeriod\').style.display = \'block\'" style="cursor: pointer; padding-left: 19px; background: url(/i4/16/calendar_mono.png) 0 0 no-repeat; vertical-align: top;">Period</span>'
/* 177 */                 ,callback: this.onPeriodAddClick
/* 178 */                 ,scope: this
/* 179 */                 ,qtip: 'Add period'
/* 180 */             });
/* 181 */         }
/* 182 */ 
/* 183 */         //add button for filtering mode change (AND/OR)
/* 184 */         if(this.modeToggle) {
/* 185 */             rez.push({
/* 186 */                 name: 'unchain'
/* 187 */                 ,itemId: 'unchain'
/* 188 */                 ,cls: 'x-tool-unchain'
/* 189 */                 ,handler: this.onModeToggle
/* 190 */                 ,scope: this
/* 191 */                 ,qtip: L.searchSwitchModeMessage
/* 192 */             });
/* 193 */         }
/* 194 */ 
/* 195 */         //create menu for points button
/* 196 */         this.moreMenu = new Ext.menu.Menu({
/* 197 */             items: [
/* 198 */                 this.actions.sortByName
/* 199 */                 ,this.actions.sortByCount
/* 200 */             ]

/* Base.js */

/* 201 */         });
/* 202 */ 
/* 203 */         //add points menu button
/* 204 */         rez.push({
/* 205 */             itemId: 'points'
/* 206 */             ,type: 'points'
/* 207 */             ,scope: this
/* 208 */             ,callback: this.onPointsTollClick
/* 209 */         });
/* 210 */ 
/* 211 */         return rez;
/* 212 */     }
/* 213 */ 
/* 214 */     ,onPointsTollClick: function(b, e) {
/* 215 */         this.moreMenu.showAt(e.getXY());
/* 216 */     }
/* 217 */ 
/* 218 */     ,onSortByNameClick: function(b, e) {
/* 219 */         var sortDir = (this.lastSort !== 'nameasc')
/* 220 */             ? 'asc'
/* 221 */             : 'desc';
/* 222 */ 
/* 223 */         var data = Ext.Array.sort(this.rawData, this.sorters['name'][sortDir]);
/* 224 */ 
/* 225 */         this.store.loadData(data);
/* 226 */ 
/* 227 */         this.lastSort = 'name' + sortDir;
/* 228 */     }
/* 229 */ 
/* 230 */     ,onSortByCountClick: function(b, e) {
/* 231 */         var sortDir = (this.lastSort !== 'countdesc')
/* 232 */             ? 'desc'
/* 233 */             : 'asc';
/* 234 */ 
/* 235 */         var data = Ext.Array.sort(this.rawData, this.sorters['items'][sortDir]);
/* 236 */ 
/* 237 */         this.store.loadData(data);
/* 238 */ 
/* 239 */         this.lastSort = 'count' + sortDir;
/* 240 */     }
/* 241 */ 
/* 242 */     ,updateVisibility: function() {
/* 243 */         this.setVisible(this.store.getCount() > 0);
/* 244 */     }
/* 245 */ 
/* 246 */     ,setModeVisible: function(visible){
/* 247 */         if(!this.rendered) {
/* 248 */             return;
/* 249 */         }
/* 250 */         this.getEl().removeCls('multivalued');

/* Base.js */

/* 251 */         if(visible) {
/* 252 */             this.getEl().addCls('multivalued');
/* 253 */         }
/* 254 */     }
/* 255 */ 
/* 256 */     ,onModeToggle: function(ev, toolEl, panel, tc){
/* 257 */         var el = tc.el;
/* 258 */ 
/* 259 */         if (el.hasCls('x-tool-chain')) {
/* 260 */             el.replaceCls('x-tool-chain', 'x-tool-unchain');
/* 261 */             this.mode = 'OR';
/* 262 */         } else {
/* 263 */             el.replaceCls('x-tool-unchain', 'x-tool-chain');
/* 264 */             this.mode = 'AND';
/* 265 */         }
/* 266 */         this.fireEvent('modechange', this, ev);
/* 267 */     }
/* 268 */ 
/* 269 */     // ,onPeriodAddClick: function(ev, el, panel, tc) {
/* 270 */     //     var coord = el.getXY();
/* 271 */     //     var w = new Ext.Panel({
/* 272 */     //         title: 'Date select'
/* 273 */     //         ,floating: true
/* 274 */     //         ,closable: true
/* 275 */     //         ,width: 100
/* 276 */     //         ,height: 50
/* 277 */     //         ,items: [{
/* 278 */     //             xtype: 'label'
/* 279 */     //             ,text: 'Date'
/* 280 */     //         }]
/* 281 */     //         ,renderTo: Ext.getBody()
/* 282 */     //     });
/* 283 */     //     w.setPosition(coord[0]-100,coord[1]);
/* 284 */     //     w.show();
/* 285 */     // }
/* 286 */ }
/* 287 */ );
/* 288 */ 

;
/* Text.js */

/* 1  */ Ext.namespace('CB.facet');
/* 2  */ 
/* 3  */ Ext.define('CB.facet.Text', {
/* 4  */     extend: 'CB.facet.Base'
/* 5  */ 
/* 6  */     ,xtype: 'CBFacetText'
/* 7  */     ,alias: 'CB.Facet.Text'
/* 8  */ 
/* 9  */     ,autoHeight: true
/* 10 */     ,layout: 'fit'
/* 11 */     ,bodyStyle: 'padding: 5px 5px 0 5px'
/* 12 */ 
/* 13 */     ,initComponent: function(){
/* 14 */         this.editor = new Ext.form.field.Text({
/* 15 */             emptyText: L.searchText
/* 16 */             ,triggerClass: 'x-form-search-trigger'
/* 17 */             ,name: 'queryText'
/* 18 */             ,enableKeyEvents: true
/* 19 */             ,scope: this
/* 20 */             ,anchor: '100%'
/* 21 */             ,onTriggerClick: function(ev){
/* 22 */                 this.scope.fireEvent('facetchange', this, ev);
/* 23 */             }
/* 24 */             ,listeners: {
/* 25 */                 scope: this
/* 26 */                 ,specialkey: function(ed, ev) {
/* 27 */                     if(ev.getKey() == ev.ENTER) {
/* 28 */                         ed.onTriggerClick(ev);
/* 29 */                     }
/* 30 */                 }
/* 31 */             }
/* 32 */         });
/* 33 */ 
/* 34 */         Ext.apply(this, { items: this.editor });
/* 35 */ 
/* 36 */         this.callParent(arguments);
/* 37 */     }
/* 38 */ 
/* 39 */     ,setValue: function(value){
/* 40 */         this.editor.setValue(value);
/* 41 */     }
/* 42 */ 
/* 43 */     ,getValue: function(){
/* 44 */         return this.editor.getValue();
/* 45 */     }
/* 46 */ }
/* 47 */ );
/* 48 */ 

;
/* List.js */

/* 1   */ Ext.namespace('CB.facet');
/* 2   */ 
/* 3   */ xtemplate_facetList = new Ext.XTemplate(
/* 4   */     '<ul class="filter_list">'
/* 5   */         ,'<tpl for=".">'
/* 6   */         ,'<li class="item {[ (xindex > 10) ? \'more\' : ""]}">'
/* 7   */         ,   '<b class="tick {[ (values.active == 1) ? \'active\' : ""]} {cls}"'
/* 8   */         ,   ' style="{[ (values.color) ? \'background-color: \' + values.color : ""]}"'
/* 9   */         ,       '></b>'
/* 10  */         ,   '<span class="{[ (values.active == 1) ? "b" : "t"]}">{items}</span>'
/* 11  */         ,   '<a href="#">{[Ext.valueFrom(values.name, "-")]}</a>'
/* 12  */         ,'</li>'
/* 13  */         ,'<tpl if="xcount &gt; 10 && xindex == xcount">'
/* 14  */         ,'<li class="toggle"><u class="click">' + L.ShowAll + '</u></li>'
/* 15  */         ,'</tpl>'
/* 16  */     ,'</tpl></ul>'
/* 17  */ );
/* 18  */ xtemplate_facetList.compile();
/* 19  */ 
/* 20  */ Ext.define('CB.facet.List', {
/* 21  */     extend: 'CB.facet.Base'
/* 22  */ 
/* 23  */     ,xtype: 'CBFacetList'
/* 24  */     ,alias: 'CB.Facet.List'
/* 25  */ 
/* 26  */     ,title: 'List facet'
/* 27  */     ,autoHeight: true
/* 28  */     ,layout: 'fit'
/* 29  */     ,listMode: 'checklist' //radio
/* 30  */     ,itemsTemplate: xtemplate_facetList
/* 31  */ 
/* 32  */     ,initComponent: function(){
/* 33  */         this.store = new Ext.data.JsonStore({
/* 34  */             autoDestroy: true
/* 35  */             ,model: 'Facet'
/* 36  */             ,proxy: {
/* 37  */                 type: 'memory'
/* 38  */             }
/* 39  */         });
/* 40  */ 
/* 41  */         if(!Ext.isEmpty(this.data)) {
/* 42  */             this.store.loadData(this.data, false);
/* 43  */         }
/* 44  */ 
/* 45  */         var items = [
/* 46  */             new Ext.DataView({
/* 47  */                 autoHeight: true
/* 48  */                 ,store: this.store
/* 49  */                 ,itemSelector: 'li.item'
/* 50  */                 ,tpl: this.itemsTemplate

/* List.js */

/* 51  */                 ,listeners: {
/* 52  */                     scope: this
/* 53  */                     ,itemclick: this.onItemClick
/* 54  */                     ,containerclick: this.onContainerClick
/* 55  */                 }
/* 56  */             })
/* 57  */         ];
/* 58  */ 
/* 59  */         if (this.config.manualPeriod === true) {
/* 60  */             this.addPeriodPanel = new Ext.form.FieldContainer({
/* 61  */                 height: 'auto'
/* 62  */                 ,hidden: true
/* 63  */                 ,layout: 'hbox'
/* 64  */                 ,style: 'background-color: transparent; padding-left: 15px'
/* 65  */                 ,items: [{
/* 66  */                     xtype: 'datefield'
/* 67  */                     ,width: 100
/* 68  */                     ,height: 20
/* 69  */                     ,name: 'from'
/* 70  */                 },{
/* 71  */                     xtype: 'label'
/* 72  */                     ,width: 15
/* 73  */                     ,html: ' &nbsp;– '
/* 74  */                 },{
/* 75  */                     xtype: 'datefield'
/* 76  */                     ,width: 100
/* 77  */                     ,name: 'to'
/* 78  */                 },{
/* 79  */                     xtype: 'button'
/* 80  */                     ,width: 20
/* 81  */                     ,iconCls: 'i-check-alt'
/* 82  */                     ,scope: this
/* 83  */                     ,handler: this.onAddPeriodClick
/* 84  */                 },{
/* 85  */                     xtype: 'button'
/* 86  */                     ,width: 20
/* 87  */                     ,iconCls: 'i-cancel'
/* 88  */                     ,scope: this
/* 89  */                     ,handler: function() {
/* 90  */                         this.addPeriodPanel.hide();
/* 91  */                     }
/* 92  */                 }]
/* 93  */             });
/* 94  */ 
/* 95  */             items.push(this.addPeriodPanel);
/* 96  */         }
/* 97  */ 
/* 98  */         Ext.apply(this, {
/* 99  */             items: items
/* 100 */             ,cachedNames: {}

/* List.js */

/* 101 */             ,listeners: {
/* 102 */                 modechange: {
/* 103 */                     scope: this
/* 104 */                     ,fn: this.onModeChange
/* 105 */                 }
/* 106 */             }
/* 107 */         });
/* 108 */ 
/* 109 */         this.callParent(arguments);
/* 110 */     }
/* 111 */ 
/* 112 */     ,onModeChange: function(o, ev){
/* 113 */         var i = this.store.query('active', 1);
/* 114 */         if(i.getCount() < 2) {
/* 115 */             ev.stopPropagation();
/* 116 */         } else {
/* 117 */             this.fireEvent('facetchange', this, ev);
/* 118 */         }
/* 119 */     }
/* 120 */ 
/* 121 */     ,loadData: function(data){
/* 122 */         this.removeCls('facet-expanded');
/* 123 */ 
/* 124 */         this.callParent(arguments);
/* 125 */ 
/* 126 */         for (var i = 0; i < data.length; i++) {
/* 127 */             this.cachedNames[data[i].id] = data[i].name;
/* 128 */         }
/* 129 */ 
/* 130 */         this.store.loadData(data, false);
/* 131 */         this.setLastField();
/* 132 */         this.setModeVisible(this.getValue().values.length > 1);
/* 133 */     }
/* 134 */ 
/* 135 */     ,processServerData: function(serverData, options){
/* 136 */         this.loadData(this.getFacetData(this.facetId, serverData, options));
/* 137 */     }
/* 138 */ 
/* 139 */     ,getFacetData: function(fid, serverData, options){
/* 140 */         var data = []
/* 141 */             ,values = []
/* 142 */             ,facetField = Ext.valueFrom(this.f, fid);
/* 143 */ 
/* 144 */         if(options && options.filters && options.filters[fid]){
/* 145 */             Ext.each(
/* 146 */                 options.filters[fid]
/* 147 */                 ,function(f){
/* 148 */                     if(!Ext.isEmpty(f.f)) {
/* 149 */                         facetField = f.f;
/* 150 */                     }

/* List.js */

/* 151 */ 
/* 152 */                     for(var i = 0; i < f.values.length; i++) {
/* 153 */                         values.push(f.values[i]);
/* 154 */                     }
/* 155 */                 }
/* 156 */                 ,this
/* 157 */             );
/* 158 */         }
/* 159 */         this.serverValues = values;
/* 160 */ 
/* 161 */         //'id', 'name', 'active', 'last', 'items', 'new_items'
/* 162 */         switch(facetField){
/* 163 */             case 'task_status':
/* 164 */                 Ext.iterate(
/* 165 */                     serverData
/* 166 */                     ,function(k, v){
/* 167 */                         if(!Ext.isEmpty(L['taskStatus' + k])) {
/* 168 */                             data.push({
/* 169 */                                 id: k
/* 170 */                                 ,name: L['taskStatus' + k]
/* 171 */                                 ,active: (values.indexOf(k + '') >= 0) ? 1 : 0
/* 172 */                                 ,items: v
/* 173 */                             });
/* 174 */                         }
/* 175 */                     }
/* 176 */                     ,this
/* 177 */                 );
/* 178 */                 break;
/* 179 */ 
/* 180 */             case 'template_type':
/* 181 */                 Ext.iterate(
/* 182 */                     serverData
/* 183 */                     ,function(k, v){
/* 184 */                         data.push({
/* 185 */                             id: k
/* 186 */                             ,name: L['tt_'+k]
/* 187 */                             ,active: (values.indexOf(k+'') >=0) ? 1 : 0
/* 188 */                             ,items: v
/* 189 */                         });
/* 190 */                     }, this);
/* 191 */                 break;
/* 192 */ 
/* 193 */             default:
/* 194 */                 Ext.iterate(
/* 195 */                     serverData
/* 196 */                     ,function(k, v){
/* 197 */                         var d = {
/* 198 */                             id: k
/* 199 */                             ,name: Ext.isPrimitive(v) ? k : v['name']
/* 200 */                             ,active: (values.indexOf(k + '') >= 0) ? 1 : 0

/* List.js */

/* 201 */                             ,items: Ext.isPrimitive(v) ? v : v.count
/* 202 */                         };
/* 203 */                         if(!Ext.isEmpty(v.color)) {
/* 204 */                             d.color = v.color;
/* 205 */                         }
/* 206 */                         if(!Ext.isEmpty(v.cls)) {
/* 207 */                             d.cls = v.cls;
/* 208 */                         }
/* 209 */ 
/* 210 */                         data.push(d);
/* 211 */                     }
/* 212 */                     ,this
/* 213 */                 );
/* 214 */         }
/* 215 */ 
/* 216 */         return data;
/* 217 */     }
/* 218 */ 
/* 219 */     ,setLastField: function(){
/* 220 */         var lr = false;
/* 221 */         this.store.each(
/* 222 */             function(r){
/* 223 */                 r.set('last', 0);
/* 224 */                 if(r.get('active') == 1) {
/* 225 */                     lr = r;
/* 226 */                 }
/* 227 */             }
/* 228 */             ,this
/* 229 */         );
/* 230 */ 
/* 231 */         if(lr) {
/* 232 */             lr.set('last', 1);
/* 233 */         }
/* 234 */     }
/* 235 */ 
/* 236 */     ,getValue: function(){
/* 237 */         var r = [];
/* 238 */         var si = -1;
/* 239 */         do {
/* 240 */             si = this.store.findExact('active', 1, si + 1);
/* 241 */             if(si >=0) {
/* 242 */                 r.push(this.store.getAt(si).get('id'));
/* 243 */             }
/* 244 */         } while (si > -1);
/* 245 */ 
/* 246 */         if(!Ext.isEmpty(this.serverValues)) {
/* 247 */             for (var i = 0; i < this.serverValues.length; i++) {
/* 248 */                 si = this.store.findExact('id', this.serverValues[i]);
/* 249 */                 if(si < 0) {
/* 250 */                     r.push(this.serverValues[i]);

/* List.js */

/* 251 */                 }
/* 252 */             }
/* 253 */         }
/* 254 */ 
/* 255 */         return {f: this.f, mode: this.mode, values: r};
/* 256 */     }
/* 257 */ 
/* 258 */     ,onItemClick: function(cmp, record, item, index, e, eOpts){//dv, idx, el, ev
/* 259 */         var r;
/* 260 */ 
/* 261 */         switch(this.listMode) {
/* 262 */             case 'radio':
/* 263 */                 r = this.store.getAt(index);
/* 264 */                 var currentlyChecked = (r.get('active') == 1);
/* 265 */                 if(!currentlyChecked) {
/* 266 */                     this.reset();
/* 267 */                     r.set('active', 1);
/* 268 */                     this.fireEvent('facetchange', this, ev);
/* 269 */                 }
/* 270 */ 
/* 271 */                 break;
/* 272 */ 
/* 273 */             default:
/* 274 */                 r = this.store.getAt(index);
/* 275 */                 r.set('active', (r.get('active') == 1) ? 0 : 1);
/* 276 */                 this.setLastField();
/* 277 */                 this.fireEvent('facetchange', this, e);
/* 278 */         }
/* 279 */     }
/* 280 */ 
/* 281 */     ,onContainerClick: function(view, e, eOpts) {
/* 282 */         var el = e.getTarget();
/* 283 */ 
/* 284 */         if(el) {
/* 285 */             //check Show all click
/* 286 */             if(el.className === 'click') {
/* 287 */                 this.addCls('facet-expanded');
/* 288 */                 this.updateLayout();
/* 289 */             }
/* 290 */         }
/* 291 */     }
/* 292 */ 
/* 293 */     ,uncheck: function(value){
/* 294 */         value = String(value);
/* 295 */         var idx = this.store.findExact('id', value );
/* 296 */ 
/* 297 */         if(idx >= 0) {
/* 298 */             this.store.getAt(idx).set('active', 0);
/* 299 */         } else {
/* 300 */             if(!Ext.isEmpty(this.serverValues)) {

/* List.js */

/* 301 */                 this.serverValues.remove(value);
/* 302 */             }
/* 303 */         }
/* 304 */     }
/* 305 */ 
/* 306 */     ,reset: function(){
/* 307 */         this.store.each(
/* 308 */             function(r){
/* 309 */                 r.set('active', 0);
/* 310 */             }
/* 311 */             ,this
/* 312 */         );
/* 313 */     }
/* 314 */ 
/* 315 */     ,onPeriodAddClick: function() {
/* 316 */         this.addPeriodPanel.items.getAt(0).setValue(new Date());
/* 317 */         this.addPeriodPanel.show();
/* 318 */     }
/* 319 */ 
/* 320 */     ,onAddPeriodClick: function(b, e) {
/* 321 */         var from = this.addPeriodPanel.items.getAt(0).getValue();
/* 322 */         var to = this.addPeriodPanel.items.getAt(1).getValue();
/* 323 */         var id = '';
/* 324 */         var name = '';
/* 325 */ 
/* 326 */         if(!Ext.isEmpty(from)) {
/* 327 */             id = date_local_to_ISO_string(from);
/* 328 */             name = Ext.Date.format(from, App.dateFormat);
/* 329 */         }
/* 330 */         id +='~';
/* 331 */         name += ' - ';
/* 332 */ 
/* 333 */         if(!Ext.isEmpty(to)) {
/* 334 */             id += date_local_to_ISO_string(to);
/* 335 */             name += Ext.Date.format(to, App.dateFormat);
/* 336 */         }
/* 337 */         if(id === '-') {
/* 338 */             return;
/* 339 */         }
/* 340 */         this.store.loadData(
/* 341 */             [{
/* 342 */                 id: id
/* 343 */                 ,name: name
/* 344 */                 ,active: 1
/* 345 */             }
/* 346 */             ]
/* 347 */             ,true
/* 348 */         );
/* 349 */         this.cachedNames[id] = name;
/* 350 */         this.addPeriodPanel.hide();

/* List.js */

/* 351 */         this.fireEvent('facetchange', this, e);
/* 352 */     }
/* 353 */ }
/* 354 */ );
/* 355 */ 

;
/* Calendar.js */

/* 1  */ Ext.namespace('CB.facet');
/* 2  */ 
/* 3  */ Ext.define('CB.facet.Calendar', {
/* 4  */     extend: 'CB.facet.Base'
/* 5  */ 
/* 6  */     ,xtype: 'CBFacetCalendar'
/* 7  */     ,alias: 'CB.Facet.Calendar'
/* 8  */ 
/* 9  */     ,autoHeight: true
/* 10 */     ,layout: 'fit'
/* 11 */     ,bodyStyle: 'padding: 0'
/* 12 */ 
/* 13 */     ,initComponent: function(){
/* 14 */         this.editor = new Ext.picker.Date({
/* 15 */             anchor: '100%'
/* 16 */             ,border: false
/* 17 */             ,listeners: {
/* 18 */                 scope: this
/* 19 */                 ,select: this.onDateSelect
/* 20 */             }
/* 21 */         });
/* 22 */ 
/* 23 */         Ext.apply(this, {
/* 24 */             items: this.editor
/* 25 */         });
/* 26 */ 
/* 27 */         this.callParent(arguments);
/* 28 */ 
/* 29 */         this.enableBubble('dateselect');
/* 30 */     }
/* 31 */ 
/* 32 */     ,getToolButtons: function() {
/* 33 */         return [];
/* 34 */     }
/* 35 */ 
/* 36 */     ,setValue: function(value){
/* 37 */         this.editor.setValue(value);
/* 38 */     }
/* 39 */ 
/* 40 */     ,getValue: function(){
/* 41 */         return this.editor.getValue();
/* 42 */     }
/* 43 */ 
/* 44 */     ,updateVisibility: function() {
/* 45 */         this.setVisible(true);
/* 46 */     }
/* 47 */ 
/* 48 */     ,onDateSelect: function(ed, date, eOpts) {
/* 49 */         this.fireEvent('dateselect', date);
/* 50 */     }

/* Calendar.js */

/* 51 */ });
/* 52 */ 

;
/* UsersColor.js */

/* 1  */ Ext.namespace('CB.facet');
/* 2  */ 
/* 3  */ Ext.define('CB.facet.UsersColor', {
/* 4  */     extend: 'CB.facet.List'
/* 5  */ 
/* 6  */     ,xtype: 'CBFacetUsersColor'
/* 7  */     ,alias: 'CB.Facet.UsersColor'
/* 8  */ 
/* 9  */     ,initComponent: function(){
/* 10 */         this.callParent(arguments);
/* 11 */     }
/* 12 */ });
/* 13 */ 

;
/* CB.Clipboard.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ Ext.define('CB.Clipboard', {
/* 3  */     extend: 'Ext.util.Observable'
/* 4  */     ,data: []
/* 5  */     ,action: 'copy' // copy / move / shortcut
/* 6  */ 
/* 7  */     ,constructor: function(config){
/* 8  */         this.callParent(arguments);
/* 9  */         // CB.Clipboard.superclass.constructor.call(this, config);
/* 10 */     }
/* 11 */ 
/* 12 */     ,set:function(data, action) {
/* 13 */         this.data = Ext.isArray(data) ? data : [data];
/* 14 */         this.action = Ext.valueFrom(action, 'copy');
/* 15 */         this.fireEvent('change', this);
/* 16 */     }
/* 17 */ 
/* 18 */     ,setAction:function(action) {
/* 19 */         this.action = action;
/* 20 */     }
/* 21 */ 
/* 22 */     ,size: function(){
/* 23 */         return this.data.length;
/* 24 */     }
/* 25 */ 
/* 26 */     ,isEmpty: function(){
/* 27 */         return Ext.isEmpty(this.data);
/* 28 */     }
/* 29 */ 
/* 30 */     ,clear: function(){
/* 31 */         this.data = [];
/* 32 */         this.fireEvent('change', this);
/* 33 */     }
/* 34 */ 
/* 35 */     ,containShortcutsOnly: function() {
/* 36 */         var rez = true;
/* 37 */         Ext.each(
/* 38 */             this.data
/* 39 */             ,function(i){
/* 40 */                 rez = (i.type == 2);
/* 41 */                 return rez;
/* 42 */             }
/* 43 */             ,this
/* 44 */         );
/* 45 */         return rez;
/* 46 */     }
/* 47 */ 
/* 48 */     ,paste: function(pid, action, callback, scope){
/* 49 */         App.DD.execute({
/* 50 */             action: Ext.valueFrom(action, this.action)

/* CB.Clipboard.js */

/* 51 */             ,confirm: false
/* 52 */             ,targetData: {id: pid}
/* 53 */             ,sourceData: this.data
/* 54 */         }
/* 55 */         ,callback
/* 56 */         ,scope
/* 57 */         );
/* 58 */     }
/* 59 */ });
/* 60 */ 

;
/* CB.FilterPanel.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.FilterPanel', {
/* 4   */     extend: 'Ext.Panel'
/* 5   */ 
/* 6   */     ,alias: 'widget.CBFilterPanel'
/* 7   */ 
/* 8   */     ,xtype: 'CBFilterPanel'
/* 9   */ 
/* 10  */     ,scrollable: true
/* 11  */     ,bodyStyle: 'padding: 10px 0'
/* 12  */     ,padding:0
/* 13  */ 
/* 14  */     ,initComponent: function(){
/* 15  */         this.activeFileterFacet = new CB.FacetActiveFilters({
/* 16  */             listeners:{
/* 17  */                 scope: this
/* 18  */                 ,itemclick: this.onActiveFiltersItemClick
/* 19  */             }
/* 20  */         });
/* 21  */ 
/* 22  */         Ext.apply(this, {
/* 23  */             items: [this.activeFileterFacet]
/* 24  */             ,layout: {
/* 25  */                 type: 'vbox'
/* 26  */                 ,align: 'stretch'
/* 27  */             }
/* 28  */ 
/* 29  */             ,listeners:{
/* 30  */                 scope: this
/* 31  */                 ,facetchange: this.onFacetChange
/* 32  */             }
/* 33  */         });
/* 34  */ 
/* 35  */         this.callParent(arguments);
/* 36  */     }
/* 37  */ 
/* 38  */     ,hideAllFacets: function() {
/* 39  */         this.items.each(
/* 40  */             function(i){
/* 41  */                 i.setVisible(false);
/* 42  */             }
/* 43  */             ,this
/* 44  */         );
/* 45  */     }
/* 46  */ 
/* 47  */     ,updateFacets: function(data, options){
/* 48  */         this.hideAllFacets();
/* 49  */         this.facetIndex = 1;
/* 50  */         Ext.iterate(

/* CB.FilterPanel.js */

/* 51  */             data
/* 52  */             ,function(key, value, obj){
/* 53  */                 var facet = this.query('panel[facetId="' + key + '"]')[0];
/* 54  */ 
/* 55  */                 if(Ext.isEmpty(facet)){
/* 56  */                     var type = Ext.String.capitalize(Ext.valueFrom(value.type, 'List'));
/* 57  */ 
/* 58  */                     facet = Ext.create('CB.facet.' + type, {
/* 59  */                         modeToggle: Ext.valueFrom(value.boolMode, true)
/* 60  */                         ,facetId: key
/* 61  */                         ,title: value.title
/* 62  */                         ,f: Ext.isEmpty(value.f) ? key: value.f
/* 63  */                         ,manualPeriod: value.manualPeriod
/* 64  */                         ,defaultSort: value.sort
/* 65  */                     });
/* 66  */ 
/* 67  */                     this.insert(this.facetIndex, facet);
/* 68  */                 }
/* 69  */ 
/* 70  */                 facet.processServerData(value.items, options);
/* 71  */                 facet.updateVisibility();
/* 72  */                 this.facetIndex++;
/* 73  */             }
/* 74  */             ,this
/* 75  */         );
/* 76  */ 
/* 77  */         this.updateActiveFiltersFacet(options);
/* 78  */ 
/* 79  */         // if(this.rendered) {
/* 80  */             // this.syncSize();
/* 81  */         // }
/* 82  */ 
/* 83  */     }
/* 84  */ 
/* 85  */     ,updateActiveFiltersFacet: function(options){
/* 86  */         if(Ext.isEmpty(this.activeFileterFacet)) {
/* 87  */             return;
/* 88  */         }
/* 89  */ 
/* 90  */         var af_data = [];
/* 91  */         Ext.iterate(
/* 92  */             options.filters
/* 93  */             ,function(key, val, obj){
/* 94  */                 var facet = this.child('[facetId="'+ key + '"]');
/* 95  */                 if(!Ext.isEmpty(facet)){
/* 96  */                     var vals = [];
/* 97  */                     Ext.each(
/* 98  */                         val
/* 99  */                         ,function(f){
/* 100 */                             for(i = 0; i < f.values.length; i++) {

/* CB.FilterPanel.js */

/* 101 */                                 if(vals.indexOf(f.values[i]) < 0) {
/* 102 */                                     vals.push(f.values[i]);
/* 103 */                                 }
/* 104 */                             }
/* 105 */                         }
/* 106 */                         ,this
/* 107 */                     );
/* 108 */ 
/* 109 */                     for (var i = 0; i < vals.length; i++){
/* 110 */                         af_data.push({
/* 111 */                             id: Ext.id()
/* 112 */                             ,facetId: key
/* 113 */                             ,value: vals[i]
/* 114 */                             ,name: facet.cachedNames[vals[i]]
/* 115 */                         });
/* 116 */                     }
/* 117 */                 }
/* 118 */             }, this);
/* 119 */         this.activeFileterFacet.loadData(af_data);
/* 120 */         if(this.activeFileterFacet.store.getCount() > 0){
/* 121 */             this.activeFileterFacet.store.loadData([{id: -1, value: -1, name: L.ResetAll}], true);
/* 122 */             this.activeFileterFacet.setVisible(true);
/* 123 */             if(this.bindButton) {
/* 124 */                 this.bindButton.setIconCls(this.bindButton.initialConfig.activeIconCls);
/* 125 */             }
/* 126 */         }else {
/* 127 */             if(this.bindButton) {
/* 128 */                 this.bindButton.setIconCls(this.bindButton.initialConfig.iconCls);
/* 129 */             }
/* 130 */         }
/* 131 */     }
/* 132 */ 
/* 133 */     ,onFacetChange: function(o, e){
/* 134 */         e.stopPropagation();
/* 135 */         var p = this.getFacetsValues();
/* 136 */         this.fireEvent('change', p, e);
/* 137 */     }
/* 138 */ 
/* 139 */     ,getFacetsValues: function(){
/* 140 */         var rez = {};
/* 141 */         this.items.each(
/* 142 */             function(fe){
/* 143 */                 if(!Ext.isEmpty(fe.facetId)){
/* 144 */                     var value = fe.getValue();
/* 145 */                     //add only if no empty selected values
/* 146 */                     if(value && !Ext.isEmpty(value.values)) {
/* 147 */                         var fid = Ext.valueFrom(fe.facetId, fe.f);
/* 148 */                         if(Ext.isEmpty(rez[fid])) {
/* 149 */                             rez[fid] = [];
/* 150 */                         }

/* CB.FilterPanel.js */

/* 151 */                         rez[fid].push(value);
/* 152 */                     }
/* 153 */                 }
/* 154 */             }
/* 155 */             ,this
/* 156 */         );
/* 157 */ 
/* 158 */         return rez;
/* 159 */     }
/* 160 */ 
/* 161 */     ,onActiveFiltersItemClick: function(idx, data, e){
/* 162 */         if(data.id == -1) {
/* 163 */             return this.fireEvent('change', {});
/* 164 */         }
/* 165 */         var i = this.child('[facetId="' + data.facetId + '"]');
/* 166 */         if(i){
/* 167 */             i.uncheck(data.value);
/* 168 */             var fv = this.getFacetsValues();
/* 169 */             this.fireEvent('change', fv);
/* 170 */         }
/* 171 */     }
/* 172 */ });
/* 173 */ 
/* 174 */ 
/* 175 */ Ext.define('CB.FacetActiveFilters', {
/* 176 */     extend: 'Ext.Panel'
/* 177 */     ,title: L.ActiveFilters
/* 178 */     ,cls: 'facet activeFilters'
/* 179 */     ,autoHeight: true
/* 180 */     ,layout: 'fit'
/* 181 */     ,border: false
/* 182 */     ,style: 'border:0'
/* 183 */     ,bodyStyle: 'background: none'
/* 184 */ 
/* 185 */     ,initComponent: function(){
/* 186 */         this.store = new Ext.data.JsonStore({
/* 187 */             autoDestroy: true
/* 188 */             ,model: 'Filter'
/* 189 */             ,proxy: {
/* 190 */                 type: 'memory'
/* 191 */             }
/* 192 */         });
/* 193 */         if (!Ext.isEmpty( this.data )) {
/* 194 */             this.store.loadData(this.data, false);
/* 195 */         }
/* 196 */ 
/* 197 */         Ext.apply(this, {
/* 198 */             items: new Ext.DataView({
/* 199 */                 autoHeight: true
/* 200 */                 ,store: this.store

/* CB.FilterPanel.js */

/* 201 */                 ,itemSelector: 'li'
/* 202 */                 ,tpl: [
/* 203 */                     '<ul class="filter_list">'
/* 204 */                         ,'<tpl for=".">'
/* 205 */                         ,'<li{[ (values.id == -1) ? \' class="reset"\' : ""]}>'
/* 206 */                         ,   '<a href="#">{[Ext.valueFrom(values.name, "-")]}</a>'
/* 207 */                         ,'</li>'
/* 208 */                     ,'</tpl></ul>'
/* 209 */                 ]
/* 210 */                 ,listeners: {
/* 211 */                     scope: this
/* 212 */                     ,itemclick: function(cmp, record, item, index, e, eOpts){//dv, idx, el, ev
/* 213 */                         var r = this.store.getAt(index);
/* 214 */                         this.fireEvent('itemclick', index, r.data, e);
/* 215 */                     }
/* 216 */                 }
/* 217 */             })
/* 218 */         });
/* 219 */ 
/* 220 */         this.callParent(arguments);
/* 221 */     }
/* 222 */ 
/* 223 */     ,loadData: function(data){
/* 224 */         this.store.loadData(data, false);
/* 225 */         this.doLayout();
/* 226 */     }
/* 227 */ }
/* 228 */ );
/* 229 */ 

;
/* Panel.js */

/* 1   */ Ext.namespace('CB.Favorites');
/* 2   */ 
/* 3   */ Ext.define('CB.Favorites.Panel', {
/* 4   */     extend: 'Ext.panel.Panel'
/* 5   */ 
/* 6   */     ,xtype: 'CBFavoritesPanel'
/* 7   */ 
/* 8   */     ,constructor: function(config){
/* 9   */         this.store = new Ext.data.DirectStore({
/* 10  */             autoLoad: true
/* 11  */             ,autoDestroy: true
/* 12  */             ,autoSave: true
/* 13  */             ,model: 'FavoriteRecord'
/* 14  */             ,proxy: {
/* 15  */                 type: 'direct'
/* 16  */                 ,paramsAsHash: true
/* 17  */                 ,directFn: CB_Favorites.read
/* 18  */                 ,reader: {
/* 19  */                     type: 'json'
/* 20  */                     ,successProperty: 'success'
/* 21  */                     ,idProperty: 'id'
/* 22  */                     ,rootProperty: 'data'
/* 23  */                     ,messageProperty: 'msg'
/* 24  */                 }
/* 25  */             }
/* 26  */         });
/* 27  */ 
/* 28  */         this.callParent(arguments);
/* 29  */ 
/* 30  */         this.actions = {
/* 31  */             browse: new Ext.Action({
/* 32  */                 text: L.Browse
/* 33  */                 ,scope: this
/* 34  */                 ,handler: this.onBrowseClick
/* 35  */             })
/* 36  */ 
/* 37  */             ,edit: new Ext.Action({
/* 38  */                 text: L.Edit
/* 39  */                 ,scope: this
/* 40  */                 ,handler: this.onEditClick
/* 41  */             })
/* 42  */ 
/* 43  */             ,unstar: new Ext.Action({
/* 44  */                 text: L.Unstar
/* 45  */                 ,iconCls: 'i-unstar'
/* 46  */                 ,scope: this
/* 47  */                 ,handler: this.onUnstarClick
/* 48  */             })
/* 49  */         };
/* 50  */ 

/* Panel.js */

/* 51  */     }
/* 52  */ 
/* 53  */ 
/* 54  */     ,initComponent: function () {
/* 55  */ 
/* 56  */         Ext.apply(this, {
/* 57  */             layout: 'fit'
/* 58  */             ,border: false
/* 59  */             ,iconCls: 'icon-fav'
/* 60  */             ,tabConfig: {
/* 61  */                 tooltip: L.Favorites
/* 62  */             }
/* 63  */             ,items: [
/* 64  */                 {
/* 65  */                     xtype: 'grid'
/* 66  */                     ,store: this.store
/* 67  */                     ,hideHeaders: true
/* 68  */                     ,bodyStyle: 'border-width: 0'
/* 69  */                     ,viewConfig: {
/* 70  */                         loadMask: false
/* 71  */                     }
/* 72  */                     ,columns: [
/* 73  */                         {
/* 74  */                             text: 'Name'
/* 75  */                             ,dataIndex: 'data'
/* 76  */                             ,flex: 1
/* 77  */                             ,renderer: function(v, m, r) {
/* 78  */                                 m.css = 'icon-grid-column-top ' + Ext.valueFrom(v.iconCls, '');
/* 79  */                                 //set path as title attribute
/* 80  */                                 App.customRenderers.titleAttribute(v.pathText, m);
/* 81  */ 
/* 82  */                                 var rez = '<span class="n">' + v.name + '</span>';
/* 83  */ 
/* 84  */                                 return rez;
/* 85  */                             }
/* 86  */                         }
/* 87  */                     ]
/* 88  */                     ,listeners:{
/* 89  */                         scope: this
/* 90  */                         ,itemcontextmenu: this.onItemContextMenu
/* 91  */                         ,itemclick: this.onItemClick
/* 92  */                     }
/* 93  */                 }
/* 94  */             ]
/* 95  */         });
/* 96  */ 
/* 97  */         this.callParent(arguments);
/* 98  */     }
/* 99  */ 
/* 100 */     ,isStarred: function(nodeId) {

/* Panel.js */

/* 101 */         var rez = this.store.findExact('node_id', String(nodeId));
/* 102 */ 
/* 103 */         return (rez >= 0);
/* 104 */     }
/* 105 */ 
/* 106 */     ,setStarred: function(data){
/* 107 */         if(!this.isStarred(data.id)) {
/* 108 */             Ext.Msg.prompt(
/* 109 */                 L.Star
/* 110 */                 ,L.SetStarNameMsg
/* 111 */                 ,function(b, name) {
/* 112 */                     if(b === 'ok') {
/* 113 */                         data.name = name;
/* 114 */ 
/* 115 */                         var d = {
/* 116 */                             node_id: data.id
/* 117 */                             ,data: data
/* 118 */                         };
/* 119 */ 
/* 120 */                         CB_Favorites.create(
/* 121 */                             d
/* 122 */                             ,this.processSetStarred
/* 123 */                             ,this
/* 124 */                         );
/* 125 */                     }
/* 126 */                 }
/* 127 */                 ,this
/* 128 */                 ,false
/* 129 */                 ,data.name
/* 130 */             );
/* 131 */         } else {
/* 132 */             Ext.Msg.alert(
/* 133 */                 L.Star
/* 134 */                 ,L.AlreadyStarred
/* 135 */             );
/* 136 */         }
/* 137 */     }
/* 138 */ 
/* 139 */     ,processSetStarred: function(r, e) {
/* 140 */         if(!r || (r.success !== true)) {
/* 141 */             return;
/* 142 */         }
/* 143 */ 
/* 144 */         r.data.node_id = String(r.data.node_id);
/* 145 */ 
/* 146 */         var rec = Ext.create(
/* 147 */             this.store.getModel().getName()
/* 148 */             ,r.data
/* 149 */         );
/* 150 */ 

/* Panel.js */

/* 151 */         this.store.add(rec);
/* 152 */         this.fireEvent('change', this);
/* 153 */     }
/* 154 */ 
/* 155 */     ,setUnstarred: function(nodeId){
/* 156 */         if(this.isStarred(nodeId)) {
/* 157 */             CB_Favorites['delete'](
/* 158 */                 nodeId
/* 159 */                 ,this.processSetUnstarred
/* 160 */                 ,this
/* 161 */             );
/* 162 */         }
/* 163 */     }
/* 164 */ 
/* 165 */     ,processSetUnstarred: function(r, e){
/* 166 */         if (!r || (r.success !== true)) {
/* 167 */             return;
/* 168 */         }
/* 169 */ 
/* 170 */         var s = this.store
/* 171 */             ,idx = s.findExact('node_id', String(r.node_id));
/* 172 */ 
/* 173 */         s.removeAt(idx);
/* 174 */         this.fireEvent('change', this);
/* 175 */     }
/* 176 */ 
/* 177 */     ,onItemContextMenu: function(grid, record, item, index, e, eOpts) {
/* 178 */         if(Ext.isEmpty(this.contextMenu)){
/* 179 */             this.contextMenu = new Ext.menu.Menu({
/* 180 */                 items: [
/* 181 */                     this.actions.browse
/* 182 */                     ,this.actions.edit
/* 183 */                     ,'-'
/* 184 */                     ,this.actions.unstar
/* 185 */                 ]
/* 186 */             });
/* 187 */         }
/* 188 */ 
/* 189 */         e.stopEvent();
/* 190 */         this.contextMenu.record = record;
/* 191 */ 
/* 192 */         this.actions.edit.setDisabled(Ext.isEmpty(record.data.data.template_id));
/* 193 */ 
/* 194 */         this.contextMenu.showAt(e.getXY());
/* 195 */     }
/* 196 */ 
/* 197 */     ,onBrowseClick: function(b, e) {
/* 198 */         var r = this.contextMenu.record
/* 199 */             ,d = Ext.clone(r.data.data);
/* 200 */         d.id = r.data.node_id;

/* Panel.js */

/* 201 */         App.openPath(d);
/* 202 */     }
/* 203 */ 
/* 204 */     ,onEditClick: function(b, e) {
/* 205 */         var r = this.contextMenu.record
/* 206 */             ,d = Ext.clone(r.data.data);
/* 207 */         d.id = r.data.node_id;
/* 208 */         App.openObjectWindow(d);
/* 209 */     }
/* 210 */ 
/* 211 */     ,onUnstarClick: function(b, e) {
/* 212 */         this.setUnstarred(this.contextMenu.record.data.node_id);
/* 213 */     }
/* 214 */ 
/* 215 */     ,onItemClick: function (grid, record, item, index, e, eOpts) {
/* 216 */         var d = Ext.clone(record.data.data);
/* 217 */         d.id = record.data.node_id;
/* 218 */         App.openPath(d);
/* 219 */     }
/* 220 */ });
/* 221 */ 

;
/* FilesDropZone.js */

/* 1   */ Ext.namespace('CB.plugin.dd');
/* 2   */ 
/* 3   */ Ext.define('CB.plugin.dd.FilesDropZone', {
/* 4   */     extend: 'Ext.util.Observable'
/* 5   */     ,alias: 'plugin.CBPluginDDFilesDropZone'
/* 6   */     ,pidPropety: 'nid'
/* 7   */ 
/* 8   */     ,constructor: function(config){
/* 9   */         Ext.apply(this, {
/* 10  */             dropZoneConfig:{
/* 11  */                 text: L.DropFilesHere
/* 12  */             }
/* 13  */         });
/* 14  */ 
/* 15  */         if(config) {
/* 16  */             Ext.apply(this, config);
/* 17  */         }
/* 18  */     }
/* 19  */ 
/* 20  */     ,init: function(owner) {
/* 21  */         this.owner = owner;
/* 22  */ 
/* 23  */         owner.enableBubble(['getdraftid']);
/* 24  */ 
/* 25  */         owner.on('render', this.onRender, this);
/* 26  */ 
/* 27  */         if(owner.dropZoneConfig) {
/* 28  */             Ext.apply(this.dropZoneConfig, owner.dropZoneConfig);
/* 29  */         }
/* 30  */     }
/* 31  */ 
/* 32  */     ,onRender: function(grid){
/* 33  */         var el = grid.getEl();
/* 34  */         el.on('dragleave', this.onDragLeave, this);
/* 35  */         el.on('dragover', this.onDragOver, this);
/* 36  */         el.on('drop', this.onDrop, this);
/* 37  */         App.on('dragfilesenter', this.showDropZone, this);
/* 38  */         App.on('dragfilesover', this.showDropZone, this);
/* 39  */         App.on('dragfilesleave', this.hideDropZone, this);
/* 40  */         App.on('filesdrop', this.hideDropZone, this);
/* 41  */     }
/* 42  */ 
/* 43  */     ,onBeforeDestroy: function(){
/* 44  */         App.un('dragfilesenter', this.showDropZone, this);
/* 45  */         App.un('dragfilesover', this.showDropZone, this);
/* 46  */         App.un('dragfilesleave', this.hideDropZone, this);
/* 47  */         App.un('filesdrop', this.hideDropZone, this);
/* 48  */         if(this.dropZoneEl){
/* 49  */             this.dropZoneEl.clearListeners();
/* 50  */             this.dropZoneEl.remove();

/* FilesDropZone.js */

/* 51  */         }
/* 52  */     }
/* 53  */ 
/* 54  */     ,getTarget: function(e){
/* 55  */         var te = this.owner.getEl();
/* 56  */         var ce = e.getTarget('.x-grid-row');
/* 57  */ 
/* 58  */         if(!Ext.isEmpty(ce)){
/* 59  */             var rel = this.owner.findTargetByEvent(e)
/* 60  */                 ,rec = this.owner.getRecord(rel)
/* 61  */                 ,templateId = rec.data.template_id
/* 62  */                 ,acceptChildren = CB.DB.templates.acceptChildren(templateId);
/* 63  */ 
/* 64  */             if(acceptChildren) {
/* 65  */                 ce = Ext.get(ce);
/* 66  */                  if(te.contains(ce)) {
/* 67  */                     te = ce;
/* 68  */                 }
/* 69  */             }
/* 70  */         }
/* 71  */ 
/* 72  */         return te;
/* 73  */     }
/* 74  */ 
/* 75  */     ,getTargetData: function(e){
/* 76  */         var te = this.getTarget(e);
/* 77  */         this.targetId = null;
/* 78  */         this.targetPath = null;
/* 79  */ 
/* 80  */         if(te.hasCls('x-grid-row')){
/* 81  */             var rel = this.owner.findTargetByEvent(e);
/* 82  */             var rec = this.owner.getRecord(rel);
/* 83  */             if(rec){
/* 84  */                 this.targetId = rec.get(this.pidPropety);
/* 85  */                 this.targetPath = rec.get('path') + rec.get('name') + '/';
/* 86  */             }
/* 87  */         } else {
/* 88  */             var cmp = Ext.getCmp(te.id);
/* 89  */             if(cmp.grid && !Ext.isDefined(cmp.getProperty)) {
/* 90  */                 cmp = cmp.grid;
/* 91  */             }
/* 92  */             this.targetId = cmp.getProperty(this.pidPropety);
/* 93  */             this.targetPath = cmp.getProperty('pathtext');
/* 94  */         }
/* 95  */     }
/* 96  */ 
/* 97  */     ,onDragEnter: function(e){ // dataTransfer info is not available on drag enter, it's only available on drop
/* 98  */         this.getTarget(e).addCls('drop-target');
/* 99  */     }
/* 100 */ 

/* FilesDropZone.js */

/* 101 */     ,onDragLeave: function(e){ // dataTransfer info is not available on drag enter, it's only available on drop
/* 102 */         var te = this.getTarget(e);
/* 103 */         te.removeCls('drop-target');
/* 104 */     }
/* 105 */ 
/* 106 */     ,onDragOver: function(e, el, o){
/* 107 */         e.browserEvent.dataTransfer.dropEffect = 'copy';
/* 108 */ 
/* 109 */         var te = this.getTarget(e);
/* 110 */         if(Ext.isEmpty(te)) {
/* 111 */             return false;
/* 112 */         }
/* 113 */         te.addCls('drop-target');
/* 114 */ 
/* 115 */         if(this.lastEl == te) {
/* 116 */             return true;
/* 117 */         }
/* 118 */ 
/* 119 */         if(!Ext.isEmpty(this.lastEl)) {
/* 120 */             this.lastEl.removeCls('drop-target');
/* 121 */         }
/* 122 */ 
/* 123 */         this.lastEl = te;
/* 124 */ 
/* 125 */         return true;
/* 126 */     }
/* 127 */ 
/* 128 */     ,onDrop: function(e) {
/* 129 */         this.onDragLeave(e);
/* 130 */ 
/* 131 */         if(this.filesCount(e) < 1) {
/* 132 */             return false;
/* 133 */         }
/* 134 */ 
/* 135 */         this.getTargetData(e);
/* 136 */ 
/* 137 */         e.stopEvent();
/* 138 */ 
/* 139 */         this.hideDropZone();
/* 140 */ 
/* 141 */         this.getRecursiveFileList(e);
/* 142 */     }
/* 143 */ 
/* 144 */     ,getRecursiveFileList: function(e){
/* 145 */         var dt = e.browserEvent.dataTransfer;
/* 146 */ 
/* 147 */         if(Ext.isEmpty(dt.items)) {
/* 148 */             return this.processGetRecursiveFileList(dt.files);
/* 149 */         }
/* 150 */ 

/* FilesDropZone.js */

/* 151 */         var length = dt.items.length;
/* 152 */         var entries = [];
/* 153 */         for (var i = 0; i < length; i++) {
/* 154 */             entries.push( dt.items[i].webkitGetAsEntry() );
/* 155 */         }
/* 156 */ 
/* 157 */         Ext.ux.WebkitEntriesIterator.iterateEntries(
/* 158 */             entries
/* 159 */             ,this.processGetRecursiveFileList
/* 160 */             ,this
/* 161 */         );
/* 162 */ 
/* 163 */         return 0;
/* 164 */     }
/* 165 */ 
/* 166 */     ,processGetRecursiveFileList: function(filesArray){
/* 167 */         /* adding dorpped files to queue */
/* 168 */ 
/* 169 */         if(isNaN(this.targetId)) {
/* 170 */             this.filesArray = filesArray;
/* 171 */             this.owner.fireEvent(
/* 172 */                 'getdraftid'
/* 173 */                 ,this.onGetDraftIdCallback
/* 174 */                 ,this
/* 175 */             );
/* 176 */ 
/* 177 */             return false;
/* 178 */         }
/* 179 */ 
/* 180 */         App.addFilesToUploadQueue(
/* 181 */             filesArray
/* 182 */             ,{
/* 183 */                 pid: this.targetId
/* 184 */                 ,pathtext: this.targetPath
/* 185 */             }
/* 186 */         );
/* 187 */ 
/* 188 */         return true;
/* 189 */     }
/* 190 */ 
/* 191 */     ,onGetDraftIdCallback: function(draftId) {
/* 192 */         if(isNaN(draftId)) {
/* 193 */             return;
/* 194 */         }
/* 195 */ 
/* 196 */         this.targetId = draftId;
/* 197 */ 
/* 198 */         this.processGetRecursiveFileList(this.filesArray);
/* 199 */     }
/* 200 */ 

/* FilesDropZone.js */

/* 201 */     ,addFilesToQueue: function(e, targetPid){
/* 202 */ 
/* 203 */     }
/* 204 */ 
/* 205 */     ,filesCount: function(e){
/* 206 */         var files = e.browserEvent.dataTransfer.files; // FileList object.
/* 207 */ 
/* 208 */         if(Ext.isEmpty(files)) {
/* 209 */             return 0;
/* 210 */         }
/* 211 */ 
/* 212 */         for (var i = 0, f; f = files[i]; i++) {
/* 213 */         }
/* 214 */ 
/* 215 */         return i;
/* 216 */     }
/* 217 */ 
/* 218 */     ,showDropZone: function(e){
/* 219 */         var el = this.owner.getEl();
/* 220 */ 
/* 221 */         if(Ext.isEmpty(el) || Ext.isEmpty(el.dom) ){
/* 222 */             this.onBeforeDestroy();
/* 223 */             return;
/* 224 */         }
/* 225 */         if( !el.isVisible(true) ) {
/* 226 */             return;
/* 227 */         }
/* 228 */ 
/* 229 */         if(!this.dropZoneEl){
/* 230 */             this.dropZoneEl = this.owner.getEl().appendChild(document.createElement('div'));
/* 231 */             this.dropZoneEl.addCls('desktop-drop-zone');
/* 232 */             this.dropZoneEl.update(this.dropZoneConfig.text);
/* 233 */             this.dropZoneEl.on(
/* 234 */                 'dragenter'
/* 235 */                 ,function(e, el){
/* 236 */                     Ext.get(el).addCls('grid-drop-zone-over');
/* 237 */                 }
/* 238 */             );
/* 239 */             this.dropZoneEl.on(
/* 240 */                 'dragleave'
/* 241 */                 ,function(e, el){
/* 242 */                     Ext.get(el).removeCls('grid-drop-zone-over');
/* 243 */                 }
/* 244 */             );
/* 245 */ 
/* 246 */             this.dropZoneEl.addCls('grid-drop-zone');
/* 247 */         }
/* 248 */         this.dropZoneEl.applyStyles("display:block");
/* 249 */     }
/* 250 */ 

/* FilesDropZone.js */

/* 251 */     ,hideDropZone: function(e){
/* 252 */         var a = Ext.query('.desktop-drop-zone');
/* 253 */         if(!Ext.isEmpty(a)) {
/* 254 */             for (var i = a.length - 1; i >= 0; i--) {
/* 255 */                 a = Ext.get(a);
/* 256 */                 a.applyStyles("display:none");
/* 257 */                 a.removeCls('grid-drop-zone-over');
/* 258 */             }
/* 259 */         }
/* 260 */         // if(this.dropZoneEl){
/* 261 */         //     this.dropZoneEl.applyStyles("display:none");
/* 262 */         //     this.dropZoneEl.removeCls('grid-drop-zone-over');
/* 263 */         // }
/* 264 */     }
/* 265 */ });
/* 266 */ 

;
/* CB.Uploader.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.Uploader', {
/* 4   */     extend: 'Ext.util.Observable'
/* 5   */ 
/* 6   */     ,defaultConfig: {
/* 7   */         autoStart: true
/* 8   */         // ,autoRemoveUploaded: false
/* 9   */         ,autoShowWindow: true
/* 10  */         ,url: 'upload/'
/* 11  */     }
/* 12  */     ,group: 0 // files grouping id
/* 13  */     ,status: 0 // Ready to upload
/* 14  */         //1 - Uploading
/* 15  */         //2 - Upload complete
/* 16  */         //3 - Upload canceled
/* 17  */     ,stats:{
/* 18  */         totalSize: 0
/* 19  */         ,totalCount: 0
/* 20  */         ,totalLoadedSize: 0
/* 21  */         ,totalLoadedCount: 0
/* 22  */         ,currentFileSize: 0
/* 23  */         ,currentLoaded: 0
/* 24  */     }
/* 25  */     ,constructor: function(config){
/* 26  */         this.config = config || {};
/* 27  */         Ext.applyIf(this.config, this.defaultConfig);
/* 28  */ 
/* 29  */         this.callParent(arguments);
/* 30  */         // CB.Uploader.superclass.constructor.call(this, config);
/* 31  */     }
/* 32  */ 
/* 33  */     ,init: function(){
/* 34  */         if(!this.browserUploadingSupport()){
/* 35  */             return false;
/* 36  */         }
/* 37  */         this.store = new Ext.data.JsonStore({
/* 38  */             model: 'UploadRecord'
/* 39  */             ,proxy: {
/* 40  */                 type: 'memory'
/* 41  */                 ,reader: {
/* 42  */                     type: 'json'
/* 43  */                 }
/* 44  */             }
/* 45  */         });
/* 46  */ 
/* 47  */         this.xhr = new XMLHttpRequest();
/* 48  */         if(this.xhr.addEventListener){
/* 49  */             this.xhr.addEventListener("loadstart",      this.onFileUploadStart.bind(this), false);
/* 50  */             this.xhr.upload.addEventListener("progress",    this.onFileUploadProgress.bind(this), false);

/* CB.Uploader.js */

/* 51  */             this.xhr.addEventListener("abort",      this.onFileUploadAbort.bind(this), false);
/* 52  */             this.xhr.addEventListener("error",      this.onFileUploadError.bind(this), false);
/* 53  */             this.xhr.addEventListener("load",       this.onFileUploadLoad.bind(this), false);
/* 54  */             this.xhr.addEventListener("timeout",    this.onFileUploadTimeout.bind(this), false);
/* 55  */             this.xhr.addEventListener("loadend",    this.onFileUploadLoadEnd.bind(this), false);
/* 56  */         } else if (this.xhr.attachEvent){
/* 57  */             this.xhr.attachEvent("loadstart",       this.onFileUploadStart.bind(this), false);
/* 58  */             this.xhr.upload.attachEvent("progress", this.onFileUploadProgress.bind(this), false);
/* 59  */             this.xhr.attachEvent("abort",           this.onFileUploadAbort.bind(this), false);
/* 60  */             this.xhr.attachEvent("error",           this.onFileUploadError.bind(this), false);
/* 61  */             this.xhr.attachEvent("load",            this.onFileUploadLoad.bind(this), false);
/* 62  */             this.xhr.attachEvent("timeout",         this.onFileUploadTimeout.bind(this), false);
/* 63  */             this.xhr.attachEvent("loadend",         this.onFileUploadLoadEnd.bind(this), false);
/* 64  */         }
/* 65  */ 
/* 66  */         this.fileMD5 = new Ext.ux.fileMD5();
/* 67  */         this.fileMD5.on('done', this.onFileMD5Calculated, this);
/* 68  */         return true;
/* 69  */     }
/* 70  */ 
/* 71  */     /* check if Browser supports file uploading from desktop */
/* 72  */     ,browserUploadingSupport: function(){
/* 73  */         return (typeof(FileReader) !== 'undefined');
/* 74  */     }
/* 75  */     /* XHR listeners */
/* 76  */     ,onFileUploadStart: function(e){
/* 77  */         this.uploadingFile.set('status', 1);//uploading
/* 78  */     }
/* 79  */ 
/* 80  */     ,onFileUploadProgress: function(e){
/* 81  */         if (e.lengthComputable) {
/* 82  */             // var percentComplete = Math.round(e.loaded * 100 / e.total);
/* 83  */             this.uploadingFile.set('loaded', e.loaded);
/* 84  */             this.stats.currentLoaded = e.loaded;
/* 85  */             // document.getElementById('progressNumber').innerHTML = percentComplete.toString() + '%';
/* 86  */         } this.stats.currentLoaded = -1; //unable to compute
/* 87  */         this.progressChange();
/* 88  */     }
/* 89  */ 
/* 90  */     ,onFileUploadAbort: function(e){
/* 91  */         this.targetStatus = 4; //abort
/* 92  */     }
/* 93  */ 
/* 94  */     ,onFileUploadError: function(e){
/* 95  */         //Events order: onFileUploadStart, onFileUploadError, onFileUploadLoadEnd
/* 96  */         this.targetStatus = 2; //error
/* 97  */     }
/* 98  */ 
/* 99  */     ,onFileUploadLoad: function(e){
/* 100 */     }

/* CB.Uploader.js */

/* 101 */ 
/* 102 */     ,onFileUploadTimeout: function(e){
/* 103 */         this.targetStatus = 3; //timeout
/* 104 */     }
/* 105 */     ,onFileUploadLoadEnd: function(e){
/* 106 */         if(this.uploadingFile){
/* 107 */ 
/* 108 */             this.stats.totalLoadedSize += this.uploadingFile.get('size');
/* 109 */             this.stats.totalLoadedCount++;
/* 110 */             this.stats.currentLoaded = 0;
/* 111 */             this.stats.currentFileSize = 0;
/* 112 */             this.uploadingFile.set('loaded', this.uploadingFile.get('size'));
/* 113 */             this.progressChange();
/* 114 */ 
/* 115 */             var r = Ext.util.JSON.decode(e.target.response);
/* 116 */ 
/* 117 */             if(r && (r.success === true)) {
/* 118 */                 this.uploadingFile.set('status', this.targetStatus);
/* 119 */ 
/* 120 */                 if(Ext.isEmpty(this.uploadingFile.data.draftPid)) {
/* 121 */                     this.updatedPids.push(r.data.pid);
/* 122 */                 }
/* 123 */ 
/* 124 */                 this.fireEvent('fileuploadend', this.uploadingFile);
/* 125 */                 delete this.uploadingFile;
/* 126 */                 this.uploadNextFile();
/* 127 */             } else {
/* 128 */                 this.onUploadFailure(r, e);
/* 129 */             }
/* 130 */         }
/* 131 */     }
/* 132 */     /* end of XHR listeners */
/* 133 */ 
/* 134 */     ,onUploadFailure: function(r, e){
/* 135 */         if(r.type === 'filesexist'){
/* 136 */             r.count = this.getGroupPendingFilesCount(this.uploadingFile.get('group'));
/* 137 */             this.serverResponse = r;
/* 138 */ 
/* 139 */             var w = new CB.FilesConfirmationWindow({
/* 140 */                 title: L.FileExists
/* 141 */                 ,icon: Ext.MessageBox.QUESTION
/* 142 */                 ,data:{
/* 143 */                     msg: this.serverResponse.msg
/* 144 */                     ,single: (this.serverResponse.count == 1)
/* 145 */                     ,allow_new_version: this.serverResponse.allow_new_version
/* 146 */                     ,suggestedFilename: this.serverResponse.suggestedFilename
/* 147 */                     ,autorenameButton: true
/* 148 */                 }
/* 149 */                 ,listeners: {
/* 150 */                     scope: this

/* CB.Uploader.js */

/* 151 */                     ,hide: this.onConfirmResponse
/* 152 */                 }
/* 153 */             });
/* 154 */             w.show();
/* 155 */ 
/* 156 */         } else {
/* 157 */             this.uploadingFile.set('status', 2); //upload error
/* 158 */ 
/* 159 */             App.showException({
/* 160 */                 msg: L.ErrorUploadingFile.replace(
/* 161 */                     '{name}'
/* 162 */                     ,this.uploadingFile.get('name')
/* 163 */                 )
/* 164 */             });
/* 165 */ 
/* 166 */             this.uploadNextFile();
/* 167 */         }
/* 168 */     }
/* 169 */ 
/* 170 */     ,getGroupPendingFilesCount: function(group){
/* 171 */         var rez = 0;
/* 172 */         this.store.each(
/* 173 */             function(r){
/* 174 */                 if((r.get('group') == group) && (r.get('status') < 2)) {
/* 175 */                     rez++;
/* 176 */                 }
/* 177 */             }
/* 178 */             ,this
/* 179 */         );
/* 180 */ 
/* 181 */         return rez;
/* 182 */     }
/* 183 */ 
/* 184 */     /**
/* 185 *|      * get stats object for a given pid
/* 186 *|      * @param  int | varchar pid non numeric pids will be considered draft objects
/* 187 *|      *                           and searched by draftPid field
/* 188 *|      * @return object
/* 189 *|      */
/* 190 */     ,getStatsForPid: function(pid) {
/* 191 */         var field = Ext.isNumeric(pid)
/* 192 */             ? 'pid'
/* 193 */             : 'draftPid'
/* 194 */             ,rez = {
/* 195 */                 total: 0
/* 196 */                 ,complete: 0
/* 197 */                 ,pending: 0
/* 198 */             };
/* 199 */ 
/* 200 */         this.store.each(

/* CB.Uploader.js */

/* 201 */             function(r) {
/* 202 */                 if(r.get(field) == pid) {
/* 203 */                     rez.total += 1;
/* 204 */                     if(r.get('status') < 2) {
/* 205 */                         rez.pending += 1;
/* 206 */                     } else {
/* 207 */                         rez['complete'] += 1;
/* 208 */                     }
/* 209 */                 }
/* 210 */             }
/* 211 */             ,this
/* 212 */         );
/* 213 */ 
/* 214 */         return rez;
/* 215 */     }
/* 216 */ 
/* 217 */     ,onConfirmResponse: function(w){
/* 218 */         this.uploadingFile.set('response', w.response);
/* 219 */         if(w.response === 'rename'){
/* 220 */             Ext.Msg.prompt(L.Rename, L.NewFileName, function(btn, text){
/* 221 */                 if ((btn === 'ok') && !Ext.isEmpty(text)) {
/* 222 */                     CB_Browser.confirmUploadRequest(
/* 223 */                         {
/* 224 */                             response: 'rename'
/* 225 */                             ,newName: text
/* 226 */                         }
/* 227 */                         ,this.onConfirmResponseProcess
/* 228 */                         ,this
/* 229 */                     );
/* 230 */                 } else {
/* 231 */                     this.uploadingFile.set('status', 4);//abort
/* 232 */                     CB_Browser.confirmUploadRequest({response: 'cancel'}, this.onConfirmResponseProcess, this);
/* 233 */                 }
/* 234 */             }, this, false, this.serverResponse.suggestedFilename);
/* 235 */         } else {
/* 236 */             if (w.forAll) {
/* 237 */                 this.store.each(
/* 238 */                     function(r){
/* 239 */                         if ((r.get('status') < 2) && (r.get('group') == this.uploadingFile.get('group'))) {
/* 240 */                             r.set('response', w.response);
/* 241 */                         }
/* 242 */                     }
/* 243 */                     ,this
/* 244 */                 ); //set default response for all files in this group
/* 245 */             }
/* 246 */ 
/* 247 */             CB_Browser.confirmUploadRequest({response: w.response}, this.onConfirmResponseProcess, this);
/* 248 */         }
/* 249 */         w.destroy();
/* 250 */     }

/* CB.Uploader.js */

/* 251 */ 
/* 252 */     ,onConfirmResponseProcess: function(r, e){
/* 253 */         if(r && (r.success === true)) {
/* 254 */             this.uploadingFile.set('status', 5); //uploaded
/* 255 */ 
/* 256 */             if(Ext.isEmpty(r.data.draftPid)) {
/* 257 */                 this.updatedPids.push(r.data.pid);
/* 258 */             }
/* 259 */ 
/* 260 */             this.uploadNextFile();
/* 261 */         }else{
/* 262 */             this.onUploadFailure(r, e);
/* 263 */         }
/* 264 */     }
/* 265 */     /* Uploader methods */
/* 266 */     ,progressChange: function(){
/* 267 */         this.fireEvent('progresschange', this, this.status, this.stats);
/* 268 */     }
/* 269 */ 
/* 270 */     ,addFiles: function(FilesList, options){
/* 271 */         if(this.config.autoShowWindow) {
/* 272 */             //this.showUploadWindow();
/* 273 */         }
/* 274 */         this.group++;
/* 275 */ 
/* 276 */         Ext.each(
/* 277 */             FilesList
/* 278 */             ,function(f){
/* 279 */                 if(f && (f.size == 0)) {
/* 280 */                     return Ext.Msg.alert(L.Error, L.BrowserNoFolderUpload);
/* 281 */                 }
/* 282 */ 
/* 283 */                 var dir = Ext.valueFrom(f.fullPath, f.mozFullPath);
/* 284 */ 
/* 285 */                 if(!Ext.isEmpty(dir)){
/* 286 */                     dir = dir.split('/');
/* 287 */                     dir.pop();
/* 288 */                     dir = dir.join('/');
/* 289 */                 } else {
/* 290 */                     dir = '/';
/* 291 */                 }
/* 292 */ 
/* 293 */                 var name = Ext.util.Format.stripScripts(Ext.util.Format.stripTags(f.name))
/* 294 */                 ,record = Ext.create(
/* 295 */                     this.store.getModel().getName()
/* 296 */                     ,{
/* 297 */                         id: Ext.id()
/* 298 */                         ,group: this.group
/* 299 */                         ,name: name
/* 300 */                         ,type: f.type

/* CB.Uploader.js */

/* 301 */                         ,size: f.size
/* 302 */                         ,pid: options.pid
/* 303 */                         ,draftPid: options.draftPid
/* 304 */                         ,dir: dir
/* 305 */                         ,pathtext: options.pathtext
/* 306 */                         ,file: f
/* 307 */                         ,response: options.response
/* 308 */                         ,status: 0
/* 309 */                         ,loaded: 0
/* 310 */                         ,msg: ''
/* 311 */                         ,md5: false
/* 312 */                         ,md5_verified: 0
/* 313 */                     }
/* 314 */                 );
/* 315 */ 
/* 316 */                 this.store.add([record]);
/* 317 */                 this.stats.totalSize += record.get('size');
/* 318 */                 this.stats.totalCount++;
/* 319 */             }
/* 320 */             ,this
/* 321 */         );
/* 322 */ 
/* 323 */         this.progressChange();
/* 324 */         this.calculateFilesMd5();
/* 325 */     }
/* 326 */ 
/* 327 */     ,calculateFilesMd5: function(){
/* 328 */         var idx = this.store.findExact('md5', false);
/* 329 */         if(idx >= 0){
/* 330 */             this.md5FileRecord = this.store.getAt(idx);
/* 331 */             this.fileMD5.getMD5(this.md5FileRecord.get('file'));
/* 332 */ 
/* 333 */         } else {
/* 334 */             delete this.md5FileRecord;
/* 335 */             this.checkExistentContents();
/* 336 */         }
/* 337 */     }
/* 338 */ 
/* 339 */     ,onFileMD5Calculated: function(fileMD5, result){
/* 340 */         this.md5FileRecord.set('md5', result);
/* 341 */         this.calculateFilesMd5();
/* 342 */     }
/* 343 */ 
/* 344 */     ,checkExistentContents: function(){
/* 345 */         var md5array = {}
/* 346 */             ,i = 0;
/* 347 */ 
/* 348 */         this.store.each(
/* 349 */             function(r){
/* 350 */                 if(Ext.isEmpty(r.get('md5'))){

/* CB.Uploader.js */

/* 351 */                     r.set('md5_verified', 1);
/* 352 */                 } else if(r.get('md5_verified') == 0){
/* 353 */                     md5array[r.get('id')] = r.get('md5') + 's' + r.get('size');
/* 354 */                     i++;
/* 355 */                 }
/* 356 */             }
/* 357 */             ,this
/* 358 */         );
/* 359 */ 
/* 360 */         if(i > 0){
/* 361 */             CB_Files.checkExistentContents(
/* 362 */                 md5array
/* 363 */                 ,this.processCheckExistentContents
/* 364 */                 ,this
/* 365 */             );
/* 366 */ 
/* 367 */         } else if(this.config.autoStart) {
/* 368 */             this.start();
/* 369 */         }
/* 370 */     }
/* 371 */ 
/* 372 */     ,processCheckExistentContents: function(r, e){
/* 373 */         if(!r || (r.success !== true)) {
/* 374 */             return;
/* 375 */         }
/* 376 */ 
/* 377 */         Ext.iterate(
/* 378 */             r.data
/* 379 */             ,function(k, v, o){
/* 380 */                 var idx = this.store.findExact('id', k);
/* 381 */                 if(idx >= 0){
/* 382 */                     r = this.store.getAt(idx);
/* 383 */                     r.set('md5_verified', 1);
/* 384 */                     r.set('content_id', v);
/* 385 */                 }
/* 386 */             }
/* 387 */             ,this
/* 388 */         );
/* 389 */ 
/* 390 */         if(this.config.autoStart) {
/* 391 */             this.start();
/* 392 */         }
/* 393 */     }
/* 394 */ 
/* 395 */     ,start: function(){
/* 396 */         if(this.status == 1) {
/* 397 */             return; //alreaty uploading
/* 398 */         }
/* 399 */         var idx = this.store.findExact('status', 0);
/* 400 */         if(idx < 0) {

/* CB.Uploader.js */

/* 401 */             return; // no files to upload
/* 402 */         }
/* 403 */         this.status = 1;
/* 404 */         this.updatedPids = [];
/* 405 */         this.uploadNextFile();
/* 406 */     }
/* 407 */ 
/* 408 */     ,uploadNextFile: function(){
/* 409 */         if(this.status != 1) {
/* 410 */             return; //status flag can be changed on Cnacel or abort
/* 411 */         }
/* 412 */ 
/* 413 */         var idx = this.store.findExact('status', 0);
/* 414 */ 
/* 415 */         if(idx < 0){ // no files waiting to be uploaded
/* 416 */             this.status = 2; //upload complete
/* 417 */             this.stats = {
/* 418 */                 totalSize: 0
/* 419 */                 ,totalCount: 0
/* 420 */                 ,totalLoadedSize: 0
/* 421 */                 ,totalLoadedCount: 0
/* 422 */                 ,currentFileSize: 0
/* 423 */                 ,currentLoaded: 0
/* 424 */             };
/* 425 */ 
/* 426 */             this.progressChange();
/* 427 */ 
/* 428 */             if(!Ext.isEmpty(this.updatedPids)) {
/* 429 */                 App.fireEvent('filesuploaded', this.updatedPids);
/* 430 */             }
/* 431 */ 
/* 432 */             return;
/* 433 */         }
/* 434 */ 
/* 435 */         var r = this.store.getAt(idx);
/* 436 */         this.uploadingFile = r;
/* 437 */ 
/* 438 */         this.stats.currentFileSize = r.get('size');
/* 439 */         this.stats.currentLoaded = 0;
/* 440 */         this.targetStatus = 5; //DONE
/* 441 */ 
/* 442 */         var params = {
/* 443 */             name: encodeURIComponent(r.get('name'))
/* 444 */             ,type: r.get('type')
/* 445 */             ,size: r.get('size')
/* 446 */             ,pid: r.get('pid')
/* 447 */             ,draftPid: r.get('draftPid')
/* 448 */             ,dir: r.get('dir')
/* 449 */             ,md5: r.get('md5')
/* 450 */             ,content_id: r.get('content_id')

/* CB.Uploader.js */

/* 451 */             ,response: r.get('response')
/* 452 */         };
/* 453 */         this.xhr.open("POST", 'upload/', true);
/* 454 */ 
/* 455 */         this.xhr.setRequestHeader("X-FILE-OPTIONS", Ext.util.JSON.encode(params));
/* 456 */         if(r.get('content_id') > 0) {
/* 457 */             this.xhr.send('');
/* 458 */         } else {
/* 459 */             this.xhr.send(r.get('file'));
/* 460 */         }
/* 461 */ 
/* 462 */         this.progressChange();
/* 463 */     }
/* 464 */ 
/* 465 */     ,abort: function(){
/* 466 */         if(this.status != 1) {
/* 467 */             return;
/* 468 */         }
/* 469 */ 
/* 470 */         this.status = 3; //upload canceled
/* 471 */ 
/* 472 */         if(this.xhr.upload) {
/* 473 */             this.xhr.upload.abort();
/* 474 */         }
/* 475 */     }
/* 476 */ 
/* 477 */     ,showUploadWindow: function(){
/* 478 */         if(this.uploadWindow && !this.uploadWindow.isDestroyed) {
/* 479 */             return this.uploadWindow.show();
/* 480 */         }
/* 481 */ 
/* 482 */         this.uploadWindow = new CB.UploadWindow({uploader: this});
/* 483 */         this.uploadWindow.show();
/* 484 */     }
/* 485 */     /* end of Uploader methods */
/* 486 */ });
/* 487 */ 
/* 488 */ /* Uploader window */
/* 489 */ Ext.define('CB.UploadWindow', {
/* 490 */     extend: 'Ext.Window'
/* 491 */     ,title: L.UploadQueue
/* 492 */     ,closeAction: 'destroy'
/* 493 */     ,width: 640
/* 494 */     ,height: 380
/* 495 */     ,layout: 'fit'
/* 496 */     ,filterIndex: 0
/* 497 */ 
/* 498 */     ,initComponent: function(){
/* 499 */         this.uploader = this.uploader || App.getFileUploader();
/* 500 */ 

/* CB.Uploader.js */

/* 501 */         this.actions = {
/* 502 */             start: new Ext.Action({
/* 503 */                 text: L.Start
/* 504 */                 ,iconCls: 'i-start'
/* 505 */                 ,handler: this.onStartClick
/* 506 */                 ,scope: this
/* 507 */                 ,disabled: true
/* 508 */             })
/* 509 */             ,stop: new Ext.Action({
/* 510 */                 text: L.Stop
/* 511 */                 ,iconCls: 'i-stop'
/* 512 */                 ,handler: this.onStopClick
/* 513 */                 ,scope: this
/* 514 */                 ,hidden: true
/* 515 */             })
/* 516 */             ,cancel: new Ext.Action({
/* 517 */                 text: L.Cancel
/* 518 */                 ,iconCls: 'i-cancel'
/* 519 */                 ,handler: this.onCancelClick
/* 520 */                 ,scope: this
/* 521 */                 ,disabled: true
/* 522 */             })
/* 523 */             ,cancelAll: new Ext.Action({
/* 524 */                 text: L.CancelAll
/* 525 */                 ,iconCls: 'i-cancel'
/* 526 */                 ,handler: this.onCancelAllClick
/* 527 */                 ,scope: this
/* 528 */                 ,disabled: true
/* 529 */             })
/* 530 */             ,clear: new Ext.Action({
/* 531 */                 text: L.Clear
/* 532 */                 // ,iconCls: 'icon-eraser'
/* 533 */                 ,handler: this.onClearClick
/* 534 */                 ,scope: this
/* 535 */                 ,hidden: true
/* 536 */             })
/* 537 */         };
/* 538 */         this.statusLabel = new Ext.form.DisplayField({
/* 539 */             value: L.ReadyToUpload
/* 540 */         });
/* 541 */ 
/* 542 */                 // ,'name'
/* 543 */                 // ,'type'
/* 544 */                 // ,{name:'size', type: 'int'}
/* 545 */                 // ,{name:'loaded', type: 'int'}
/* 546 */                 // ,'pid'
/* 547 */                 // ,'pathtext'
/* 548 */                 // ,'file'
/* 549 */                 // ,{name: 'status', type: 'int'}
/* 550 */                 //   0 - ready to upload

/* CB.Uploader.js */

/* 551 */                 //  /* 1 - uploading */
/* 552 */                 //  /* 2 - upload error */
/* 553 */                 //  /* 3 - upload timeout */
/* 554 */                 //  /* 4 - upload abort */
/* 555 */                 //  /* 5 - uploaded */
/* 556 */                 // ,'msg']
/* 557 */ 
/* 558 */         this.cancelSplitButton = new Ext.SplitButton({
/* 559 */             xtype: 'splitbutton'
/* 560 */             ,iconCls: 'i-cancel'
/* 561 */             ,text: L.Cancel
/* 562 */             ,handler: this.onCancelClick
/* 563 */             ,scope: this
/* 564 */             ,disabled: true
/* 565 */             ,menu: [this.actions.cancelAll]
/* 566 */         });
/* 567 */ 
/* 568 */         this.viewButton = new Ext.Button({
/* 569 */             text: L.Pending
/* 570 */             ,iconCls: 'i-list'
/* 571 */             ,menu: [{
/* 572 */                     enableToggle: true
/* 573 */                     ,allowDepress: false
/* 574 */                     ,toggleGroup: 'viewMode'
/* 575 */                     ,pressed: true
/* 576 */                     ,text: L.Pending
/* 577 */                     ,filterIndex: 0
/* 578 */                     ,scope: this
/* 579 */                     ,handler: this.onChangeViewClick
/* 580 */                 },{
/* 581 */                     enableToggle: true
/* 582 */                     ,allowDepress: false
/* 583 */                     ,toggleGroup: 'viewMode'
/* 584 */                     ,text: L.AllCompleted
/* 585 */                     ,filterIndex: 1
/* 586 */                     ,scope: this
/* 587 */                     ,handler: this.onChangeViewClick
/* 588 */                 },{
/* 589 */                     enableToggle: true
/* 590 */                     ,allowDepress: false
/* 591 */                     ,toggleGroup: 'viewMode'
/* 592 */                     ,text: L.All
/* 593 */                     ,filterIndex: -1
/* 594 */                     ,scope: this
/* 595 */                     ,handler: this.onChangeViewClick
/* 596 */                 }
/* 597 */             ]
/* 598 */         });
/* 599 */ 
/* 600 */         this.storeFilters = [

/* CB.Uploader.js */

/* 601 */             function(r){ return (r.get('status') < 2); }
/* 602 */             ,function(r){ return (r.get('status') > 1); }
/* 603 */         ];
/* 604 */ 
/* 605 */         this.optionsButton = new Ext.Button({
/* 606 */             text: L.Options
/* 607 */             ,iconCls: 'i-settings'
/* 608 */             ,menu: [{
/* 609 */                     checked: true
/* 610 */                     ,text: L.AutoshowUpload
/* 611 */                     ,scope: this
/* 612 */                     ,name: 'autoShowWindow'
/* 613 */                     ,handler: this.onOptionsClick
/* 614 */                 },{
/* 615 */                     checked: true
/* 616 */                     ,text: L.UploadAutoStart
/* 617 */                     ,scope: this
/* 618 */                     ,name: 'autoStart'
/* 619 */                     ,handler: this.onOptionsClick
/* 620 */                 }
/* 621 */             ]
/* 622 */         });
/* 623 */ 
/* 624 */         this.grid = new Ext.grid.GridPanel({
/* 625 */             store: this.uploader.store
/* 626 */             ,stateful: true
/* 627 */             ,multiSelect: true
/* 628 */             ,stateId: 'uploadGrid'
/* 629 */             ,border: false
/* 630 */             ,columns: [
/* 631 */                 {
/* 632 */                     header: 'Name'
/* 633 */                     ,width: 150
/* 634 */                     ,sortable: false
/* 635 */                     ,dataIndex: 'name'
/* 636 */                     ,renderer: function(v, meta, r){
/* 637 */                         return Ext.util.Format.htmlEncode(v);
/* 638 */                     }
/* 639 */                 },{
/* 640 */                     header: 'Size'
/* 641 */                     ,width: 90
/* 642 */                     ,sortable: true
/* 643 */                     ,align: 'right'
/* 644 */                     ,renderer: Ext.util.Format.fileSize
/* 645 */                     ,dataIndex: 'size'
/* 646 */                 },{
/* 647 */                     header: 'status'
/* 648 */                     ,width: 75
/* 649 */                     // ,hidden: true
/* 650 */                     ,sortable: true

/* CB.Uploader.js */

/* 651 */                     ,dataIndex: 'status'
/* 652 */                     ,renderer: function(v, meta, r){
/* 653 */                         return Ext.valueFrom(L['fileUploadStatus' + v], '');
/* 654 */                         // 0 - ready to upload
/* 655 */                         // /* 1 - uploading */
/* 656 */                         // /* 2 - upload error */
/* 657 */                         // /* 3 - upload timeout */
/* 658 */                         // /* 4 - upload abort */
/* 659 */                         // /* 5 - uploaded/**/
/* 660 */                     }
/* 661 */                 },{
/* 662 */                     header: 'Percent'
/* 663 */                     ,width: 75
/* 664 */                     ,sortable: true
/* 665 */                     // ,hidden: true
/* 666 */                     ,dataIndex: 'loaded'
/* 667 */                     ,renderer: function(v, meta, r){
/* 668 */                         if(r.get('status') == 0) {
/* 669 */                             return '';
/* 670 */                         }
/* 671 */                         if(v == 0) {
/* 672 */                             return '';
/* 673 */                         }
/* 674 */ 
/* 675 */                         return Math.round(v*100/r.get('size')) + ' %';
/* 676 */                     }
/* 677 */                 },{
/* 678 */                     header: 'Path'
/* 679 */                     ,width: 200
/* 680 */                     ,sortable: true
/* 681 */                     ,dataIndex: 'pathtext'
/* 682 */                     ,renderer: function(v, m, r){
/* 683 */                         return (
/* 684 */                             Ext.valueFrom(v, '') +
/* 685 */                             Ext.valueFrom(r.get('dir').substr(1), '')
/* 686 */                         );
/* 687 */                     }
/* 688 */                 },{
/* 689 */                     header: 'msg'
/* 690 */                     ,width: 175
/* 691 */                     ,sortable: true
/* 692 */                     ,dataIndex: 'msg'
/* 693 */                     ,hidden: true
/* 694 */                 }
/* 695 */             ]
/* 696 */             ,viewConfig: {
/* 697 */                 stripeRows: false
/* 698 */                 ,markDirty: false
/* 699 */             }
/* 700 */             ,tbar: new Ext.Toolbar({

/* CB.Uploader.js */

/* 701 */                 enableOverflow: true
/* 702 */                 ,style: {
/* 703 */                     background: 'transparent'
/* 704 */                     ,border: 'none'
/* 705 */                     ,padding: '5px 0'
/* 706 */                 }
/* 707 */                 ,items: [
/* 708 */                     this.actions.start
/* 709 */                     ,this.actions.stop
/* 710 */                     ,this.cancelSplitButton
/* 711 */                     ,this.actions.clear
/* 712 */                     ,'->'
/* 713 */                     ,this.viewButton
/* 714 */                     ,this.optionsButton
/* 715 */ 
/* 716 */                 ]
/* 717 */             })
/* 718 */             ,bbar: [this.statusLabel]
/* 719 */         });
/* 720 */         this.grid.getSelectionModel().on('selectionchange', this.onSelectionChange, this);
/* 721 */ 
/* 722 */         this.uploader.on('progresschange', this.onProgressChange, this);
/* 723 */         this.uploader.on('fileuploadend', this.filterView, this);
/* 724 */ 
/* 725 */         Ext.apply(this, {
/* 726 */             items: [this.grid]
/* 727 */             ,listeners: {
/* 728 */                 afterrender: this.onAfterRender
/* 729 */                 ,beforedestroy: this.onBeforeDestroy
/* 730 */                 ,scope: this
/* 731 */             }
/* 732 */         });
/* 733 */ 
/* 734 */ 
/* 735 */         this.callParent(arguments);
/* 736 */     }
/* 737 */ 
/* 738 */     ,onAfterRender: function(){
/* 739 */         this.uploader.store.on('add', this.filterView, this);
/* 740 */     }
/* 741 */ 
/* 742 */     ,onBeforeDestroy: function(){
/* 743 */         this.uploader.store.un('add', this.filterView, this);
/* 744 */         this.uploader.un('progresschange', this.onProgressChange, this);
/* 745 */     }
/* 746 */ 
/* 747 */     ,onSelectionChange: function(sm){
/* 748 */         this.cancelSplitButton.setDisabled(!sm.hasSelection());
/* 749 */         this.actions.cancelAll.setDisabled(!sm.hasSelection());
/* 750 */     }

/* CB.Uploader.js */

/* 751 */ 
/* 752 */     ,onProgressChange: function(uploader, status, stats){
/* 753 */         // ,status:
/* 754 */         //  0 Ready to upload
/* 755 */         //  //1 - Uploading
/* 756 */         //  //2 - Upload complete
/* 757 */         //  //3 - Upload canceled
/* 758 */ 
/* 759 */         // stats:{
/* 760 */         //  totalSize: 0
/* 761 */         //  ,totalCount: 0
/* 762 */         //  ,totalLoadedSize: 0
/* 763 */         //  ,totalLoadedCount: 0
/* 764 */         //  ,currentFileSize: 0
/* 765 */         //  ,currentLoaded: 0
/* 766 */         // }
/* 767 */         this.actions.start.setDisabled( status == 1 );
/* 768 */         switch(status){
/* 769 */             case 0:
/* 770 */                 this.statusLabel.setValue(Ext.valueFrom(L.ReadyToUpload, 'Ready to upload'));
/* 771 */                 break;
/* 772 */             case 1:
/* 773 */                 this.statusLabel.setValue(Ext.valueFrom(L.UploadCompleted, 'Uploading ... '));
/* 774 */                 if(stats.currentLoaded < 0){//unable to compute
/* 775 */ 
/* 776 */                 } else{
/* 777 */                     var percent = stats.totalLoadedSize + stats.currentLoaded;
/* 778 */                     if(percent > 0) {
/* 779 */                         percent = Math.round(percent * 100 / stats.totalSize);
/* 780 */                     }
/* 781 */                     this.statusLabel.setValue(
/* 782 */                         Ext.String.format(
/* 783 */                             Ext.valueFrom(
/* 784 */                                 L.UploadCompleted
/* 785 */                                 ,'Uploading {0}% ({1} out of {2})'
/* 786 */                             )
/* 787 */                             ,percent
/* 788 */                             ,(stats.totalLoadedCount + 1)
/* 789 */                             ,stats.totalCount
/* 790 */                         )
/* 791 */                     );
/* 792 */                 }
/* 793 */                 break;
/* 794 */             case 2:
/* 795 */                 this.statusLabel.setValue(Ext.valueFrom(L.UploadCompleted, 'Upload completed'));
/* 796 */                 break;
/* 797 */             case 3:
/* 798 */                 this.statusLabel.setValue(Ext.valueFrom(L.UploadCanceled, 'Upload canceled'));
/* 799 */                 break;
/* 800 */         }

/* CB.Uploader.js */

/* 801 */ 
/* 802 */     }
/* 803 */ 
/* 804 */     ,onStartClick: function(b, e){
/* 805 */         this.uploader.start();
/* 806 */     }
/* 807 */ 
/* 808 */     ,onStopClick: function(b, e){
/* 809 */ 
/* 810 */     }
/* 811 */ 
/* 812 */     ,onCancelClick: function(b, e){
/* 813 */         this.uploader.abort( );
/* 814 */     }
/* 815 */ 
/* 816 */     ,onCancelAllClick: function(b, e){
/* 817 */         this.uploader.status = 3;
/* 818 */         this.uploader.abort( );
/* 819 */         /* mark all as aborted*/
/* 820 */     }
/* 821 */ 
/* 822 */     ,onClearClick: function(b, e){
/* 823 */         this.uploader.store.each(
/* 824 */             function(r){
/* 825 */                 if(r.get('status') > 1) {
/* 826 */                     this.store.remove(r);
/* 827 */                 }
/* 828 */             }
/* 829 */         );
/* 830 */     }
/* 831 */ 
/* 832 */     ,onChangeViewClick: function(b, e){
/* 833 */         // this.viewButton.setIconCls(b.iconCls)
/* 834 */         this.viewButton.setText(b.text);
/* 835 */         this.filterView(b.filterIndex);
/* 836 */         this.actions.clear.setHidden(b.filterIndex == 0);
/* 837 */ 
/* 838 */         // this.uploader.store.removeAll();
/* 839 */     }
/* 840 */ 
/* 841 */     ,filterView: function(filterIndex){
/* 842 */         if(!Ext.isNumber(filterIndex)) {
/* 843 */             filterIndex = undefined;
/* 844 */         }
/* 845 */         if(filterIndex !== undefined) {
/* 846 */             this.filterIndex = filterIndex;
/* 847 */         } else if(!Ext.isDefined(this.filterIndex)) {
/* 848 */             this.filterIndex = -1;
/* 849 */         }
/* 850 */ 

/* CB.Uploader.js */

/* 851 */         if(this.filterIndex < 0) {
/* 852 */             this.uploader.store.clearFilter();
/* 853 */         } else {
/* 854 */             this.uploader.store.filterBy(this.storeFilters[this.filterIndex]);
/* 855 */         }
/* 856 */     }
/* 857 */ 
/* 858 */     ,onOptionsClick: function(b, e){
/* 859 */         this.uploader.config[b.name] = !b.checked;
/* 860 */     }
/* 861 */ });
/* 862 */ 
/* 863 */ Ext.define('CB.UploadWindowButton', {
/* 864 */     extend: 'Ext.Button'
/* 865 */     ,alias: ['widget.uploadwindowbutton']
/* 866 */     // ,cls: 'upload-btn'
/* 867 */ 
/* 868 */     ,initComponent: function(){
/* 869 */         this.uploader = App.getFileUploader();
/* 870 */         // if cant create an uploader then hide/destroy the button
/* 871 */         if(!this.uploader){
/* 872 */             this.hide();
/* 873 */             this.destroy();
/* 874 */             return;
/* 875 */         }
/* 876 */ 
/* 877 */         this.resetLabelTask = new Ext.util.DelayedTask( this.resetLabel, this );
/* 878 */         Ext.apply(this, {
/* 879 */             text: L.UploadWindow
/* 880 */             ,handler: this.showUploadWindow
/* 881 */             ,scope: this
/* 882 */         });
/* 883 */ 
/* 884 */         this.callParent(arguments);
/* 885 */ 
/* 886 */         this.uploader.on('progresschange', this.onProgressChange, this);
/* 887 */     }
/* 888 */     ,showUploadWindow: function(b, e){
/* 889 */         this.uploader.showUploadWindow();
/* 890 */     }
/* 891 */     ,onProgressChange: function(uploader, status, stats){
/* 892 */         // ,stats:{
/* 893 */         //  totalSize: 0
/* 894 */         //  ,totalCount: 0
/* 895 */         //  ,totalLoadedSize: 0
/* 896 */         //  ,totalLoadedCount: 0
/* 897 */         //  ,currentFileSize: 0
/* 898 */         //  ,currentLoaded: 0
/* 899 */         // }
/* 900 */         this.resetLabelTask.cancel();

/* CB.Uploader.js */

/* 901 */         switch(status){
/* 902 */             case 0:
/* 903 */                 this.setText(L.UploadQueue);
/* 904 */                 break;
/* 905 */ 
/* 906 */             case 1:
/* 907 */                 this.setText(L.Uploading + ' ' + stats.totalLoadedCount+ ' ' + L.outOf + ' ' + stats.totalCount);
/* 908 */                 var pc = Math.round((stats.totalLoadedSize * 100) / stats.totalSize);
/* 909 */                 this.getEl().applyStyles('background-size: ' + pc + '% 100%');
/* 910 */                 break;
/* 911 */ 
/* 912 */             case 2: this.setText(L.UploadComplete);
/* 913 */                 this.resetLabelTask.delay(3000);
/* 914 */                 break;
/* 915 */         }
/* 916 */         // this.setText('status ' +status)
/* 917 */     }
/* 918 */     ,resetLabel: function(){
/* 919 */         this.getEl().applyStyles('background-size: 0% 100%');
/* 920 */         this.setText(L.UploadQueue);
/* 921 */     }
/* 922 */ });
/* 923 */ 

;
/* CB.Security.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.SecurityWindow', {
/* 4   */     extend: 'Ext.Window'
/* 5   */ 
/* 6   */     ,alias: 'CBSecurityWindow'
/* 7   */ 
/* 8   */     ,xtype: 'CBSecurityWindow'
/* 9   */ 
/* 10  */     ,closable: true
/* 11  */ 
/* 12  */     ,initComponent: function(){
/* 13  */         this.data = Ext.valueFrom(this.config.data, {});
/* 14  */ 
/* 15  */         this.actions = {
/* 16  */             edit: new Ext.Action({
/* 17  */                 text: L.Edit
/* 18  */                 ,scope: this
/* 19  */                 ,handler: this.onEditClick
/* 20  */             })
/* 21  */             ,add: new Ext.Action({
/* 22  */                 text: L.Add
/* 23  */                 ,scope: this
/* 24  */                 ,handler: this.onAddClick
/* 25  */                 ,hidden: true
/* 26  */             })
/* 27  */             ,del: new Ext.Action({
/* 28  */                 text: L.Delete
/* 29  */                 ,scope: this
/* 30  */                 ,handler: this.onDeleteClick
/* 31  */                 ,hidden: true
/* 32  */                 ,disabled: true
/* 33  */             })
/* 34  */ 
/* 35  */             ,advanced: new Ext.Action({
/* 36  */                 text: L.Advanced
/* 37  */                 ,scope: this
/* 38  */                 ,disabled: true
/* 39  */                 ,handler: this.onAdvancedClick
/* 40  */             })
/* 41  */             ,save: new Ext.Action({
/* 42  */                 text: L.Save
/* 43  */                 ,scope: this
/* 44  */                 ,handler: this.onSavePermissionsClick
/* 45  */                 ,hidden: true
/* 46  */                 ,disabled: true
/* 47  */             })
/* 48  */             ,apply: new Ext.Action({
/* 49  */                 text: L.Apply
/* 50  */                 ,scope: this

/* CB.Security.js */

/* 51  */                 ,handler: this.onApplyPermissionsClick
/* 52  */                 ,hidden: true
/* 53  */                 ,disabled: true
/* 54  */             })
/* 55  */             ,cancel: new Ext.Action({
/* 56  */                 text: L.Cancel
/* 57  */                 ,scope: this
/* 58  */                 ,handler: this.onCancelPermissionsChangeClick
/* 59  */                 ,hidden: true
/* 60  */                 ,disabled: true
/* 61  */             })
/* 62  */             ,removeChildPermissions: new Ext.Action({
/* 63  */                 text: L.RemoveChildPermissions
/* 64  */                 ,iconCls: 'icon-key-minus'
/* 65  */                 ,scope: this
/* 66  */                 ,handler: this.onRemoveChildPermissionsClick
/* 67  */             })
/* 68  */         };
/* 69  */ 
/* 70  */         this.objectLabel = new Ext.form.DisplayField({
/* 71  */             value: 'Object name: '
/* 72  */             ,style:'padding: 10px; background-color: #fff'
/* 73  */             ,reg_ion: 'north'
/* 74  */         });
/* 75  */ 
/* 76  */         this.editLabel = new Ext.form.DisplayField({
/* 77  */             value: 'To change permissions, click Edit'
/* 78  */         });
/* 79  */ 
/* 80  */         this.aclStore = new Ext.data.DirectStore({
/* 81  */             autoSave: false
/* 82  */             ,autoSync: false
/* 83  */             // ,restful: true
/* 84  */             ,model: 'AclRecord'
/* 85  */             ,proxy: {
/* 86  */                 type: 'direct'
/* 87  */                 ,paramsAsHash: true
/* 88  */                 ,extraParams:{ id: this.data.id }
/* 89  */                 ,api:{
/* 90  */                     read: CB_Security.getObjectAcl
/* 91  */                     ,create: CB_Security.addObjectAccess
/* 92  */                     ,update: CB_Security.updateObjectAccess
/* 93  */                     ,destroy: CB_Security.destroyObjectAccess
/* 94  */                 }
/* 95  */                 ,reader: {
/* 96  */                     type: 'json'
/* 97  */                     ,rootProperty: 'data'
/* 98  */                 }
/* 99  */                 ,writer: new Ext.data.JsonWriter({
/* 100 */                     encode: false

/* CB.Security.js */

/* 101 */                     ,writeAllFields: true
/* 102 */                     ,transform: Ext.Function.bind(
/* 103 */                         function(data, request) {
/* 104 */                             return {
/* 105 */                                 id: this.data.id
/* 106 */                                 ,data: data
/* 107 */                             };
/* 108 */                         }
/* 109 */                         ,this
/* 110 */                     )
/* 111 */                 })
/* 112 */             }
/* 113 */             ,listeners: {
/* 114 */                 scope: this
/* 115 */                 ,load: this.onAclStoreLoad
/* 116 */             }
/* 117 */         });
/* 118 */ 
/* 119 */         this.aclList = new Ext.list.ListView({
/* 120 */             store: this.aclStore
/* 121 */             ,singleSelect: true
/* 122 */             ,emptyText: L.noData
/* 123 */             ,reserveScrollOffset: true
/* 124 */             ,hideHeaders: true
/* 125 */             ,boxMinHeight: 100
/* 126 */             ,height: 300
/* 127 */             ,style: 'border: 1px solid #aeaeae'
/* 128 */             ,forceFit: true
/* 129 */             ,columns: [{
/* 130 */                 header: 'Group or user'
/* 131 */                 ,dataIndex: 'name'
/* 132 */                 ,renderer: function(v, m, r, ri, ci, s){
/* 133 */                     m.css = 'icon-grid-column-top '+ r.get('iconCls');
/* 134 */ 
/* 135 */                     return v;
/* 136 */                 }
/* 137 */             }]
/* 138 */             ,listeners: {
/* 139 */                 scope: this
/* 140 */                 ,selectionchange: this.onAclListSelectionChange
/* 141 */             }
/* 142 */         });
/* 143 */ 
/* 144 */         this.specialPermissionsLabel = new Ext.form.DisplayField({value: 'For special permissions or advanced settings,<br /> click Advanced.'});
/* 145 */ 
/* 146 */         this.permissionsStore = new Ext.data.ArrayStore({
/* 147 */             fields: [
/* 148 */                 'id'
/* 149 */                 ,'name'
/* 150 */                 ,'allow'

/* CB.Security.js */

/* 151 */                 ,'deny'
/* 152 */             ]
/* 153 */ 
/* 154 */             ,accessGroups: {
/* 155 */                 'FullControl':  [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
/* 156 */                 ,'Modify':  [ 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1 ]
/* 157 */                 ,'Read':    [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]
/* 158 */                 ,'Write':   [ 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0 ]
/* 159 */             }
/* 160 */         });
/* 161 */ 
/* 162 */         this.permissionsList = new Ext.list.ListView({
/* 163 */             store: this.permissionsStore
/* 164 */             ,singleSelect: true
/* 165 */             ,emptyText: L.noData
/* 166 */             ,reserveScrollOffset: true
/* 167 */             ,boxMinHeight: 100
/* 168 */             ,height: 300
/* 169 */             ,style: 'border: 1px solid #aeaeae'
/* 170 */             ,columnSort: false
/* 171 */             ,forceFit:true
/* 172 */             ,readOnly: true
/* 173 */             ,columns: [
/* 174 */                 {
/* 175 */                     header: 'Permission'
/* 176 */                     ,width: 100
/* 177 */                     ,dataIndex: 'name'
/* 178 */                 },{
/* 179 */                     header: 'Allow'
/* 180 */                     ,width: 50
/* 181 */                     ,dataIndex: 'allow'
/* 182 */                     ,renderer: function(v, m, r, ri, ci, s){
/* 183 */                         return (this.readOnly
/* 184 */                             ? ( (v > 0)
/* 185 */                                 ? '<input type="checkbox" disabled="disabled" checked="checked" value="'+v+'">'
/* 186 */                                 : ""
/* 187 */                             )
/* 188 */                             : '<input type="checkbox" ' + (
/* 189 */                                 (v == 2)
/* 190 */                                 ? 'disabled="disabled" value="2" '
/* 191 */                                 : 'value="1" '
/* 192 */                             ) + ((v > 0) ? 'checked="checked" ': "")+" />"
/* 193 */                         );
/* 194 */                     }
/* 195 */                     ,align: 'center'
/* 196 */                 },{
/* 197 */                     header: 'Deny'
/* 198 */                     ,dataIndex: 'deny'
/* 199 */                     ,renderer: function(v, m, r, ri, ci, s){
/* 200 */                         return (this.readOnly ?

/* CB.Security.js */

/* 201 */                             ((v < 0)
/* 202 */                                 ? '<input type="checkbox" disabled="disabled" checked="checked" value="' + v + '">'
/* 203 */                                 : ""
/* 204 */                             )
/* 205 */                             : '<input type="checkbox" ' +
/* 206 */                                 ((v == -2)
/* 207 */                                     ? 'disabled="disabled" value="-2" ': 'value="-1" '
/* 208 */                                 )+ ((v < 0) ? 'checked="checked" ': "")+" />"
/* 209 */                         );
/* 210 */                     }
/* 211 */                     ,align: 'center'
/* 212 */                 }
/* 213 */             ]
/* 214 */             ,listeners:{
/* 215 */                 scope: this
/* 216 */                 ,itemclick: this.onPermissionNodeClick
/* 217 */             }
/* 218 */         });
/* 219 */         this.cbInherit = new Ext.form.Checkbox({
/* 220 */             checked: true
/* 221 */             ,id: 'cb_inherit' + this.data.id
/* 222 */             ,listeners: {
/* 223 */                 scope: this
/* 224 */                 ,change: this.onCbInheritClick
/* 225 */             }
/* 226 */         });
/* 227 */ 
/* 228 */         var topToolbar = null;
/* 229 */ 
/* 230 */         if(App.loginData.admin){
/* 231 */             topToolbar = [ this.actions.removeChildPermissions ];
/* 232 */         }
/* 233 */ 
/* 234 */         Ext.apply(this, {
/* 235 */             title: L.Security
/* 236 */             ,iconCls: 'icon-key'
/* 237 */             ,autoHeight: true
/* 238 */             ,cls: 'x-panel-white'
/* 239 */             ,bodyStyle: 'background-color: white'
/* 240 */             ,tbar: topToolbar
/* 241 */ 
/* 242 */             ,items: [
/* 243 */                 this.objectLabel
/* 244 */                 ,{
/* 245 */                     layout: 'hbox'
/* 246 */                     ,border: false
/* 247 */                     ,autoHeight: true
/* 248 */                     ,scrollable: true
/* 249 */                     ,items: [{
/* 250 */                         title: L.GroupOrUserNames

/* CB.Security.js */

/* 251 */                         ,layout: 'fit'
/* 252 */                         ,items: this.aclList
/* 253 */                         ,unstyled: true
/* 254 */                         ,width: 400
/* 255 */                         ,padding: 10
/* 256 */                         ,border: 0
/* 257 */                         ,buttonAlign: 'left'
/* 258 */                         ,buttons: [
/* 259 */                             this.editLabel
/* 260 */                             ,'->'
/* 261 */                             ,this.actions.edit
/* 262 */                             ,this.actions.add
/* 263 */                             ,this.actions.del
/* 264 */                         ]
/* 265 */ 
/* 266 */                     },{
/* 267 */                         title: L.PermissionsForItem
/* 268 */                         ,layout: 'fit'
/* 269 */                         ,items: this.permissionsList
/* 270 */                         ,unstyled: true
/* 271 */                         ,width: 400
/* 272 */                         ,padding: 10
/* 273 */                         ,border: 0
/* 274 */                         ,style: 'margin-left: 50px'
/* 275 */                         ,buttonAlign: 'left'
/* 276 */                         ,buttons: [this.specialPermissionsLabel
/* 277 */                             ,'->'
/* 278 */                             ,this.actions.save
/* 279 */                             ,this.actions.apply
/* 280 */                             ,this.actions.cancel
/* 281 */                             ,this.actions.advanced
/* 282 */                         ]
/* 283 */ 
/* 284 */                     }
/* 285 */                     ]
/* 286 */                 },{
/* 287 */                     xtype: 'panel'
/* 288 */                     ,region: 'south'
/* 289 */                     ,layout: 'fit'
/* 290 */                     ,autoHeight: true
/* 291 */                     ,border: false
/* 292 */                     ,padding: 10
/* 293 */                     ,items:[
/* 294 */                         {
/* 295 */                             xtype: 'fieldcontainer'
/* 296 */                             ,layout: 'hbox'
/* 297 */                             ,items: [
/* 298 */                                 this.cbInherit
/* 299 */                                 ,{
/* 300 */                                     xtype: 'label'

/* CB.Security.js */

/* 301 */                                     ,text: ' ' + L.InheritPermissionsMsg
/* 302 */                                     ,style: 'margin-top:3px'
/* 303 */                                     ,forId: 'cb_inherit' + this.data.id
/* 304 */                                     ,listeners: {
/* 305 */                                         scope: this
/* 306 */                                         ,click: this.onCbInheritLabelClick
/* 307 */                                     }
/* 308 */                                 }
/* 309 */                             ]
/* 310 */                         }
/* 311 */ 
/* 312 */                     ]
/* 313 */                 }
/* 314 */             ]
/* 315 */             ,listeners:{
/* 316 */                 scope: this
/* 317 */                 ,afterrender: this.onAfterRender
/* 318 */             }
/* 319 */         });
/* 320 */ 
/* 321 */         this.callParent(arguments);
/* 322 */     }
/* 323 */ 
/* 324 */     ,onAfterRender: function(){
/* 325 */         this.getEl().mask(L.loading, 'x-mask-loading');
/* 326 */         this.aclStore.load();
/* 327 */     }
/* 328 */ 
/* 329 */     ,onAclStoreLoad: function(store, records, options){
/* 330 */         this.getEl().unmask();
/* 331 */ 
/* 332 */         var rawData = Ext.valueFrom(store.proxy.reader.rawData, {});
/* 333 */ 
/* 334 */         this.objectLabel.setValue('Object name: ' + Ext.valueFrom(rawData.path, '') + rawData.name);
/* 335 */         this.setTitle(rawData.name);
/* 336 */ 
/* 337 */         this.cbInherit.settingValue = true;
/* 338 */         this.cbInherit.setValue(rawData.inherit_acl == 1);
/* 339 */ 
/* 340 */         delete this.cbInherit.settingValue;
/* 341 */     }
/* 342 */ 
/* 343 */     ,onEditClick: function(b, e){
/* 344 */         this.setReadOnly(false);
/* 345 */     }
/* 346 */ 
/* 347 */     ,setReadOnly: function(readOnly){
/* 348 */         this.editLabel.setVisible(readOnly);
/* 349 */         this.actions.edit.setHidden(!readOnly);
/* 350 */         this.actions.add.setHidden(readOnly);

/* CB.Security.js */

/* 351 */         this.actions.del.setHidden(readOnly);
/* 352 */ 
/* 353 */         this.updateDeleteAction();
/* 354 */ 
/* 355 */         this.permissionsList.readOnly = readOnly;
/* 356 */ 
/* 357 */         this.permissionsList.getView().refresh();
/* 358 */ 
/* 359 */         this.specialPermissionsLabel.setVisible(readOnly);
/* 360 */         this.actions.advanced.setHidden(!readOnly);
/* 361 */         this.actions.save.setHidden(readOnly);
/* 362 */         this.actions.apply.setHidden(readOnly);
/* 363 */         this.actions.cancel.setHidden(readOnly);
/* 364 */     }
/* 365 */ 
/* 366 */     ,updateDeleteAction: function(){
/* 367 */         var canDelete = true
/* 368 */             ,sr = this.aclList.getSelectionModel().getSelection();
/* 369 */ 
/* 370 */         if(!Ext.isEmpty(sr)){
/* 371 */             var r = sr[0];
/* 372 */             canDelete = ( ( r.get('allow').indexOf('2') < 0 ) && ( r.get('deny').indexOf('-2') < 0 ));
/* 373 */         }
/* 374 */ 
/* 375 */         this.actions.del.setDisabled(!canDelete);
/* 376 */     }
/* 377 */ 
/* 378 */     ,onAddClick: function(b, e){
/* 379 */         var w = new CB.ObjectsSelectionForm({
/* 380 */             config: {
/* 381 */                 autoLoad: true
/* 382 */                 ,source: 'usersgroups'
/* 383 */                 ,renderer: 'listObjIcons'
/* 384 */             }
/* 385 */             ,data: {}
/* 386 */         });
/* 387 */ 
/* 388 */         w.on(
/* 389 */             'setvalue'
/* 390 */             ,function(data){
/* 391 */                 if(Ext.isEmpty(data)) {
/* 392 */                     return;
/* 393 */                 }
/* 394 */ 
/* 395 */                 var sm = this.aclList.getSelectionModel()
/* 396 */                     ,d = data[0]
/* 397 */                     ,rec = this.aclStore.findRecord('user_group_id', d.id, 0, false, false, true);
/* 398 */ 
/* 399 */                 if(rec){
/* 400 */                     sm.select([rec]);

/* CB.Security.js */

/* 401 */                     return;
/* 402 */                 }
/* 403 */ 
/* 404 */                 var rd = {
/* 405 */                     id: null
/* 406 */                     ,user_group_id: d.id
/* 407 */                     ,name: d.name
/* 408 */                     ,iconCls: d.iconCls
/* 409 */                     ,allow: '0,0,0,0,0,0,0,0,0,0,0,0'
/* 410 */                     ,deny: '0,0,0,0,0,0,0,0,0,0,0,0'
/* 411 */                     ,phantom: true
/* 412 */                 };
/* 413 */ 
/* 414 */                 this.aclStore.beginUpdate();
/* 415 */ 
/* 416 */                 rec = Ext.create(
/* 417 */                     this.aclStore.getModel().getName()
/* 418 */                     ,rd
/* 419 */                 );
/* 420 */ 
/* 421 */                 this.aclStore.add([rec]);
/* 422 */ 
/* 423 */                 this.aclStore.endUpdate();
/* 424 */ 
/* 425 */                 this.aclStore.sync();
/* 426 */                 sm.select(this.aclStore.getCount()-1);
/* 427 */             }
/* 428 */             ,this
/* 429 */         );
/* 430 */         w.show();
/* 431 */     }
/* 432 */ 
/* 433 */     ,onDeleteClick: function(b, e){
/* 434 */         var ra = this.aclList.getSelectionModel().getSelection();
/* 435 */ 
/* 436 */         if(Ext.isEmpty(ra)) {
/* 437 */             return;
/* 438 */         }
/* 439 */ 
/* 440 */         Ext.Msg.confirm(
/* 441 */             L.Delete
/* 442 */             ,L.DeleteSelectedConfirmationMessage
/* 443 */             ,function(b){
/* 444 */                 if(b === 'yes'){
/* 445 */                     this.aclStore.remove(ra);
/* 446 */                     this.aclStore.save();
/* 447 */                 }
/* 448 */             }
/* 449 */             ,this
/* 450 */         );

/* CB.Security.js */

/* 451 */     }
/* 452 */ 
/* 453 */     ,onAclListSelectionChange: function(listView, selections){
/* 454 */         this.permissionsStore.removeAll();
/* 455 */         if(!Ext.isEmpty(selections)) {
/* 456 */             this.reloadPermissionsStore();
/* 457 */         }
/* 458 */ 
/* 459 */         this.updateDeleteAction();
/* 460 */     }
/* 461 */ 
/* 462 */     ,onPermissionNodeClick: function(list, record, item, index, e, eOpts) { //dataView, index, node, e
/* 463 */         var cb = e.getTarget('input');
/* 464 */ 
/* 465 */         if(Ext.isEmpty(record) || Ext.isEmpty(cb) || cb.disabled ) {
/* 466 */             return;
/* 467 */         }
/* 468 */         this.changeAccesses(record, cb.checked ? cb.value : 0);
/* 469 */ 
/* 470 */         this.actions.save.setDisabled(false);
/* 471 */         this.actions.apply.setDisabled(false);
/* 472 */         this.actions.cancel.setDisabled(false);
/* 473 */     }
/* 474 */ 
/* 475 */     ,accessToGroupsData: function(accessRecord, groups){
/* 476 */         var rez = []
/* 477 */             ,allow = accessRecord.get('allow')
/* 478 */             ,deny = accessRecord.get('deny');
/* 479 */ 
/* 480 */         if(!Ext.isArray(allow)) {
/* 481 */             allow = allow.split(',');
/* 482 */         }
/* 483 */ 
/* 484 */         if(!Ext.isArray(deny)) {
/* 485 */             deny = deny.split(',');
/* 486 */         }
/* 487 */ 
/* 488 */         Ext.iterate(
/* 489 */             groups
/* 490 */             ,function(g, gv, obj){
/* 491 */                 rez.push( [g, L[g], this.accessToGroupValue(allow, gv), this.accessToGroupValue(deny, gv) ]);
/* 492 */             }
/* 493 */             ,this
/* 494 */         );
/* 495 */ 
/* 496 */         return rez;
/* 497 */     }
/* 498 */ 
/* 499 */     ,accessToGroupValue: function(accessArray, groupBitsArray){
/* 500 */         var lastBit = null

/* CB.Security.js */

/* 501 */             ,bitsMatch = true
/* 502 */             ,bitsCombinedMatch = false
/* 503 */             ,i = 0;
/* 504 */ 
/* 505 */         while( (i < accessArray.length ) && bitsMatch){
/* 506 */             var currentBit = parseInt(accessArray[i], 10);
/* 507 */             if (groupBitsArray[i] == 1){
/* 508 */                 if(Ext.isEmpty(lastBit)){
/* 509 */                     lastBit = currentBit;
/* 510 */                 } else if( (currentBit * lastBit) > 0 ){
/* 511 */                     if (currentBit != lastBit) {
/* 512 */                         bitsCombinedMatch = true;
/* 513 */                     }
/* 514 */                 } else {
/* 515 */                     bitsMatch = false;
/* 516 */                 }
/* 517 */             }
/* 518 */             i++;
/* 519 */         }
/* 520 */ 
/* 521 */         return bitsMatch
/* 522 */             ? ( bitsCombinedMatch
/* 523 */                     ? ( (lastBit < 0) ? -1 : 1 )
/* 524 */                     : lastBit
/* 525 */               )
/* 526 */             : 0;
/* 527 */     }
/* 528 */ 
/* 529 */     ,changeAccesses: function(groupRecord, newValue){
/* 530 */         var r = this.aclList.getSelectionModel().getSelection()[0]; //user or group record
/* 531 */ 
/* 532 */         if(Ext.isEmpty(r)) {
/* 533 */             return;
/* 534 */         }
/* 535 */ 
/* 536 */         var allow = r.get('allow').split(',')
/* 537 */             ,deny = r.get('deny').split(',')
/* 538 */             ,group = this.permissionsStore.accessGroups[groupRecord.get('id')];
/* 539 */ 
/* 540 */         if(Ext.isEmpty(group)) {
/* 541 */             return;
/* 542 */         }
/* 543 */ 
/* 544 */         newValue = parseInt(newValue, 10);
/* 545 */ 
/* 546 */         for (var i = 0; i < group.length; i++) {
/* 547 */             if (group[i] == 1) {
/* 548 */                 if (newValue > -1) {
/* 549 */                     if ((allow[i] > -2) && (allow[i] < 2)) {
/* 550 */                         allow[i] = newValue;

/* CB.Security.js */

/* 551 */                     }
/* 552 */                     if (deny[i] > -2) {
/* 553 */                         deny[i] = 0;
/* 554 */                     }
/* 555 */                 }
/* 556 */                 if (newValue < 1 ){
/* 557 */                     if ((deny[i] > -2) && (deny[i] < 2)) {
/* 558 */                         deny[i] = newValue;
/* 559 */                     }
/* 560 */ 
/* 561 */                     if(allow[i] < 2) {
/* 562 */                         allow[i] = 0;
/* 563 */                     }
/* 564 */                 }
/* 565 */             }
/* 566 */         }
/* 567 */ 
/* 568 */         r.set('allow', allow.join(','));
/* 569 */         r.set('deny', deny.join(','));
/* 570 */ 
/* 571 */         this.reloadPermissionsStore();
/* 572 */     }
/* 573 */ 
/* 574 */     ,reloadPermissionsStore: function(){
/* 575 */         var data = []
/* 576 */             ,sr = this.aclList.getSelectionModel().getSelection();
/* 577 */ 
/* 578 */         if(!Ext.isEmpty(sr)) {
/* 579 */             data = this.accessToGroupsData(sr[0], this.permissionsStore.accessGroups);
/* 580 */         }
/* 581 */ 
/* 582 */         this.permissionsStore.loadData(data);
/* 583 */     }
/* 584 */ 
/* 585 */     ,onSavePermissionsClick: function(){
/* 586 */         this.aclStore.sync();
/* 587 */ 
/* 588 */         this.setReadOnly(true);
/* 589 */     }
/* 590 */ 
/* 591 */     ,onApplyPermissionsClick: function(){
/* 592 */         this.aclStore.sync();
/* 593 */         this.actions.save.setDisabled(true);
/* 594 */         this.actions.apply.setDisabled(true);
/* 595 */         this.actions.cancel.setDisabled(true);
/* 596 */     }
/* 597 */ 
/* 598 */     ,onCancelPermissionsChangeClick: function(b, e){
/* 599 */         this.aclStore.rejectChanges();
/* 600 */         this.reloadPermissionsStore();

/* CB.Security.js */

/* 601 */         this.actions.save.setDisabled(true);
/* 602 */         this.actions.apply.setDisabled(true);
/* 603 */         this.actions.cancel.setDisabled(true);
/* 604 */     }
/* 605 */ 
/* 606 */     ,onRemoveChildPermissionsClick: function(b, e){
/* 607 */         Ext.Msg.confirm(
/* 608 */             L.Confirmation
/* 609 */             ,'Are you sure you want to remove child permissions and inherit all permissions from parent?'
/* 610 */             ,function (button){
/* 611 */                 if(button === 'yes'){
/* 612 */                     CB_Security.removeChildPermissions(
/* 613 */                         {id: this.data.id}
/* 614 */                         ,function(r, e) {
/* 615 */                             Ext.Msg.alert(L.Info, 'Child permissions revoked successfully.');
/* 616 */                         }
/* 617 */                     );
/* 618 */                 }
/* 619 */             }
/* 620 */             ,this
/* 621 */         );
/* 622 */     }
/* 623 */ 
/* 624 */     ,onCbInheritLabelClick: function(){
/* 625 */         cb.setValue(!cb.getValue());
/* 626 */     }
/* 627 */ 
/* 628 */     ,onCbInheritClick: function(cb, checked){
/* 629 */         if(cb.settingValue) {
/* 630 */             return;
/* 631 */         }
/* 632 */         if(checked){
/* 633 */             Ext.Msg.confirm(
/* 634 */                 L.Confirmation
/* 635 */                 ,'Are you sure you want to remove current rules and inherit all permissions from parent?'
/* 636 */                 ,this.onCbInheritSet
/* 637 */                 ,this
/* 638 */             );
/* 639 */         } else {
/* 640 */             Ext.Msg.show({
/* 641 */                 title: L.Confirmation
/* 642 */                 ,msg: 'Warning: If you proceed, inheritable parent permissions will no longer propagate to this object.<br />'+
/* 643 */                     '<br />'+
/* 644 */                     '- Click Add to convert and add inherited parent permissions as explicit permissions to this object.<br />'+
/* 645 */                     '- Click Remove to remove inherited parent permissions from this object.<br />'+
/* 646 */                     '- Click Cancel if you do not want to modify inheritance settings at this time.<br />'
/* 647 */ 
/* 648 */                 ,buttons: Ext.MessageBox.YESNOCANCEL
/* 649 */                 ,buttonText: {
/* 650 */                     yes: L.Add

/* CB.Security.js */

/* 651 */                     ,no: L.Remove
/* 652 */                 }
/* 653 */                 ,scope: this
/* 654 */                 ,fn: this.onCbInheritRemove
/* 655 */                 ,icon: Ext.MessageBox.WARNING
/* 656 */             });
/* 657 */         }
/* 658 */     }
/* 659 */ 
/* 660 */     ,onCbInheritSet: function(button){
/* 661 */         if(button === 'yes'){
/* 662 */             this.getEl().mask(L.loading, 'x-mask-loading');
/* 663 */             CB_Security.setInheritance(
/* 664 */                 {
/* 665 */                     id: this.data.id
/* 666 */                     ,inherit: true
/* 667 */                 }
/* 668 */                 ,this.onSetInheritanceProcess
/* 669 */                 ,this
/* 670 */             );
/* 671 */         } else{
/* 672 */             this.cbInherit.settingValue = true;
/* 673 */             this.cbInherit.setValue(false);
/* 674 */             delete this.cbInherit.settingValue;
/* 675 */         }
/* 676 */     }
/* 677 */ 
/* 678 */     ,onCbInheritRemove: function(button, text, cfg){
/* 679 */         if( (button === 'yes') || (button === 'no') ){
/* 680 */             this.getEl().mask(L.loading, 'x-mask-loading');
/* 681 */             CB_Security.setInheritance(
/* 682 */                 {
/* 683 */                     id: this.data.id
/* 684 */                     ,inherit: false
/* 685 */                     ,copyRules: button
/* 686 */                 }
/* 687 */                 ,this.onSetInheritanceProcess
/* 688 */                 ,this
/* 689 */             );
/* 690 */         } else{
/* 691 */             this.cbInherit.settingValue = true;
/* 692 */             this.cbInherit.setValue(true);
/* 693 */             delete this.cbInherit.settingValue;
/* 694 */         }
/* 695 */     }
/* 696 */ 
/* 697 */     ,onSetInheritanceProcess: function(r, e){
/* 698 */         this.getEl().unmask();
/* 699 */         this.aclStore.load();
/* 700 */     }

/* CB.Security.js */

/* 701 */ });
/* 702 */ 

;
/* CB.UsersGroups.js */

/* 1    */ Ext.namespace('CB');
/* 2    */ 
/* 3    */ // ----------------------------------------------------------- add user form
/* 4    */ Ext.define('CB.AddUserForm', {
/* 5    */     extend: 'Ext.Window'
/* 6    */ 
/* 7    */     ,layout: 'fit'
/* 8    */     ,autoWidth: true
/* 9    */     ,title: L.AddUser
/* 10   */     ,iconCls: 'icon-user-gray'
/* 11   */     ,data: {}
/* 12   */ 
/* 13   */     ,initComponent: function(){
/* 14   */         var recs = CB.DB.roles.queryBy(
/* 15   */             function(r){
/* 16   */                 return ( (r.get('id') !=3) &&
/* 17   */                     (r.get('id') !=1) &&
/* 18   */                     (App.loginData.manage || (r.get('id') !=2))
/* 19   */                 );
/* 20   */             }
/* 21   */         );
/* 22   */ 
/* 23   */         var data = [];
/* 24   */ 
/* 25   */         recs.each(function(r){data.push(r.data);}, this);
/* 26   */ 
/* 27   */         this.rolesStore = new Ext.data.JsonStore({
/* 28   */             autoLoad: true
/* 29   */             ,autoDestroy: true
/* 30   */             ,model: 'Generic2'
/* 31   */             ,proxy: {
/* 32   */                 type: 'memory'
/* 33   */             }
/* 34   */             ,data: data
/* 35   */         });
/* 36   */ 
/* 37   */         data = [];
/* 38   */ 
/* 39   */         CB.DB.groupsStore.each(
/* 40   */             function(r){
/* 41   */                 if(parseInt(r.get('system'), 10) === 0) {
/* 42   */                     data.push(r.data);
/* 43   */                 }
/* 44   */             }
/* 45   */             ,this
/* 46   */         );
/* 47   */ 
/* 48   */         this.groupsStore = new Ext.data.JsonStore({
/* 49   */             autoLoad: true
/* 50   */             ,model: 'Group'

/* CB.UsersGroups.js */

/* 51   */             ,proxy: {
/* 52   */                 type: 'memory'
/* 53   */             }
/* 54   */             ,sortInfo: {
/* 55   */                 field: 'title'
/* 56   */                 ,direction: 'ASC'
/* 57   */             }
/* 58   */             ,data: data
/* 59   */         });
/* 60   */ 
/* 61   */         var items = [{
/* 62   */                 xtype: 'textfield'
/* 63   */                 ,allowBlank: false
/* 64   */                 ,fieldLabel: L.Username
/* 65   */                 ,name: 'name'
/* 66   */             },{
/* 67   */                 xtype: 'textfield'
/* 68   */                 ,allowBlank: true
/* 69   */                 ,fieldLabel: L.FirstName
/* 70   */                 ,name: 'first_name'
/* 71   */             },{
/* 72   */                 xtype: 'textfield'
/* 73   */                 ,allowBlank: true
/* 74   */                 ,fieldLabel: L.LastName
/* 75   */                 ,name: 'last_name'
/* 76   */             },{
/* 77   */                 xtype: 'textfield'
/* 78   */                 ,allowBlank: false
/* 79   */                 ,fieldLabel: L.Email
/* 80   */                 ,name: 'email'
/* 81   */                 ,vtype: 'email'
/* 82   */             }
/* 83   */ 
/* 84   */             ,{
/* 85   */                 xtype: 'radiogroup'
/* 86   */                 ,fieldLabel: L.PasswordSetup
/* 87   */                 ,columns: 2
/* 88   */                 ,vertical: true
/* 89   */                 ,name: 'psw_setup'
/* 90   */                 ,items: [
/* 91   */                     {
/* 92   */                         boxLabel: L.EmailInvite
/* 93   */                         ,name: 'ps'
/* 94   */                         ,inputValue: '1'
/* 95   */                         ,checked: true
/* 96   */                     }
/* 97   */                     ,{
/* 98   */                         boxLabel: L.Manual
/* 99   */                         ,name: 'ps'
/* 100  */                         ,inputValue: '2'

/* CB.UsersGroups.js */

/* 101  */                     }
/* 102  */                 ]
/* 103  */                 ,listeners: {
/* 104  */                     scope: this
/* 105  */                     ,change: this.onPasswordSetupChange
/* 106  */                 }
/* 107  */             }
/* 108  */ 
/* 109  */             ,{
/* 110  */                 xtype: 'textfield'
/* 111  */                 ,allowBlank: true
/* 112  */                 ,fieldLabel: L.Password
/* 113  */                 ,inputType: 'password'
/* 114  */                 ,hidden: true
/* 115  */                 ,name: 'password'
/* 116  */             },{ xtype: 'textfield'
/* 117  */                 ,allowBlank: true
/* 118  */                 ,fieldLabel: L.PasswordConfirmation
/* 119  */                 ,inputType: 'password'
/* 120  */                 ,hidden: true
/* 121  */                 ,name: 'confirm_password'
/* 122  */             },
/* 123  */ 
/* 124  */             ,{
/* 125  */                 xtype: 'combo'
/* 126  */                 ,fieldLabel: L.Group
/* 127  */                 ,editable: false
/* 128  */                 ,name: 'group_id'
/* 129  */                 ,hiddenName: 'group_id'
/* 130  */                 ,store: this.groupsStore
/* 131  */                 ,valueField: 'id'
/* 132  */                 ,displayField: 'title'
/* 133  */                 ,triggerAction: 'all'
/* 134  */                 ,value: null
/* 135  */                 ,queryMode: 'local'
/* 136  */             },{
/* 137  */                 xtype: 'label'
/* 138  */                 ,name: 'E'
/* 139  */                 ,hideLabel: true
/* 140  */                 ,cls:'cR'
/* 141  */                 ,text: ''
/* 142  */             }];
/* 143  */ 
/* 144  */         Ext.apply(this, {
/* 145  */             buttons:[
/* 146  */                 {   text: L.Save
/* 147  */                     ,iconCls: 'icon-save'
/* 148  */                     ,disabled: true
/* 149  */                     ,handler: this.saveData
/* 150  */                     ,scope: this

/* CB.UsersGroups.js */

/* 151  */                 },{
/* 152  */                     text: L.Cancel
/* 153  */                     ,iconCls: 'icon-cancel'
/* 154  */                     ,handler: function(b, e){
/* 155  */                         this.destroy();
/* 156  */                     }
/* 157  */                     ,scope: this
/* 158  */                 }
/* 159  */             ]
/* 160  */             ,items: [{
/* 161  */                 xtype: 'fieldset'
/* 162  */                 ,border: false
/* 163  */                 ,autoHeight: true
/* 164  */                 ,autoWidth: true
/* 165  */                 ,labelWidth: 150
/* 166  */                 ,style: 'padding-top: 10px'
/* 167  */                 ,defaults: {
/* 168  */                     width: 250
/* 169  */                     ,bubbleEvents: ['change']
/* 170  */                 }
/* 171  */                 ,items: items
/* 172  */             }
/* 173  */             ]
/* 174  */             ,listeners: {
/* 175  */                 scope: this
/* 176  */                 ,change: function(e){
/* 177  */                     this.setDirty(true);
/* 178  */                 }
/* 179  */                 ,show: function(){
/* 180  */                     this.center();
/* 181  */                 }
/* 182  */             }
/* 183  */         });
/* 184  */         this.callParent(arguments);
/* 185  */ 
/* 186  */         this.on('close', function(){CB.DB.roles.clearFilter();}, this);
/* 187  */     }
/* 188  */ 
/* 189  */     ,setDirty: function(value){
/* 190  */         this._isDirty = value;
/* 191  */         var required = true
/* 192  */             ,a = this.query('[isFormField=true]');
/* 193  */ 
/* 194  */         Ext.each(
/* 195  */             a
/* 196  */             ,function(i){
/* 197  */                 required = required && i.isValid();
/* 198  */                 if(!i.allowBlank) {
/* 199  */                     required = required && !Ext.isEmpty(i.getValue());
/* 200  */                     return required;

/* CB.UsersGroups.js */

/* 201  */                 }
/* 202  */             }
/* 203  */             ,this
/* 204  */         );
/* 205  */ 
/* 206  */         var p = this.down('[name="password"]')
/* 207  */             ,pc = this.down('[name="confirm_password"]')
/* 208  */             ,pm = (p.getValue() != pc.getValue())
/* 209  */             ,msg = required
/* 210  */                 ? ''
/* 211  */                 : L.EmptyRequiredFields;
/* 212  */ 
/* 213  */         this.down('[name="E"]').setText( pm ? L.PasswordMissmatch : msg);
/* 214  */ 
/* 215  */         this.dockedItems.getAt(1).items.getAt(0).setDisabled(!value || !required);
/* 216  */     }
/* 217  */ 
/* 218  */     ,onPasswordSetupChange: function(rg, nv, ov, eOpts) {
/* 219  */         var p = this.down('[name="password"]')
/* 220  */             ,pc = this.down('[name="confirm_password"]');
/* 221  */ 
/* 222  */         p.setHidden(nv.ps == 1);
/* 223  */         pc.setHidden(nv.ps == 1);
/* 224  */     }
/* 225  */ 
/* 226  */     ,saveData: function(){
/* 227  */         var params = {};
/* 228  */         var a = this.query('[isFormField=true]');
/* 229  */ 
/* 230  */         Ext.each(
/* 231  */             a
/* 232  */             ,function(i){
/* 233  */                 params[i.name] = i.getValue();
/* 234  */             }
/* 235  */             ,this
/* 236  */         );
/* 237  */ 
/* 238  */         if(this.config.data.callback) {
/* 239  */             this.config.data.callback(params, this.config.ownerCt);
/* 240  */         }
/* 241  */     }
/* 242  */ });
/* 243  */ 
/* 244  */ // ----------------------------------------------------------- end of add user form
/* 245  */ Ext.define('CB.UsersGroupsTree', {
/* 246  */     extend: 'Ext.tree.TreePanel'
/* 247  */     ,scrollable: true
/* 248  */     ,containerScroll: true
/* 249  */     ,rootVisible: false
/* 250  */     ,animate: false

/* CB.UsersGroups.js */

/* 251  */     ,border: false
/* 252  */     ,enableDD: true
/* 253  */     ,tbarCssClass: 'x-panel-white'
/* 254  */ 
/* 255  */     ,initComponent: function(){
/* 256  */         this.actions = {
/* 257  */             addUser: new Ext.Action({
/* 258  */                 text: L.User
/* 259  */                 ,iconCls: 'icon-user'
/* 260  */                 ,handler: this.onAddUserClick
/* 261  */                 ,scope: this
/* 262  */             })
/* 263  */             ,addGroup: new Ext.Action({
/* 264  */                 text: L.AddGroup
/* 265  */                 ,iconCls: 'icon-users'
/* 266  */                 ,handler: this.onAddGroupClick
/* 267  */                 ,scope: this
/* 268  */             })
/* 269  */             ,del: new Ext.Action({
/* 270  */                 text: L.Delete
/* 271  */                 ,iconCls: 'im-trash'
/* 272  */                 ,scale: 'medium'
/* 273  */                 ,disabled: true
/* 274  */                 ,handler: this.delNode
/* 275  */                 ,scope: this
/* 276  */             })
/* 277  */             ,remove: new Ext.Action({
/* 278  */                 text: L.Remove
/* 279  */                 ,iconCls: 'im-cancel'
/* 280  */                 ,scale: 'medium'
/* 281  */                 ,disabled: true
/* 282  */                 ,handler: this.deassociateNode
/* 283  */                 ,scope: this
/* 284  */             })
/* 285  */             ,reload: new Ext.Action({
/* 286  */                 iconCls: 'im-refresh'
/* 287  */                 ,scale: 'medium'
/* 288  */                 ,qtip: L.Reload
/* 289  */                 ,scope:this
/* 290  */                 ,handler: function(){
/* 291  */                     var rn = this.getRootNode();
/* 292  */                     this.store.reload({node: rn});
/* 293  */                 }
/* 294  */             })
/* 295  */             ,rename: new Ext.Action({
/* 296  */                 text: L.Rename
/* 297  */                 ,scope:this
/* 298  */                 ,handler: this.onRenameClick
/* 299  */             })
/* 300  */ 

/* CB.UsersGroups.js */

/* 301  */         };
/* 302  */ 
/* 303  */         this.editor = new Ext.Editor({
/* 304  */             field: {
/* 305  */                 xtype: 'textfield'
/* 306  */             }
/* 307  */             ,allowBlank: false
/* 308  */             ,blankText: L.NameRequired
/* 309  */             ,selectOnFocus: true
/* 310  */             ,ignoreNoChange: true
/* 311  */         });
/* 312  */ 
/* 313  */         this.editor.on('beforestartedit', this.onBeforeStartEdit, this);
/* 314  */         this.editor.on('startedit', this.onStartEdit, this);
/* 315  */         this.editor.on('beforecomplete', this.onBeforeEditComplete, this);
/* 316  */ 
/* 317  */         Ext.apply(this, {
/* 318  */             cls: 'x-panel-white'
/* 319  */             ,store: Ext.create('Ext.data.TreeStore', {
/* 320  */                 root:  {
/* 321  */                     expanded: false
/* 322  */                     ,expandable: true
/* 323  */                     ,iconCls: 'icon-home'
/* 324  */                     ,leaf: false
/* 325  */                     ,nid: 'root'
/* 326  */                     ,text: 'root'
/* 327  */                 }
/* 328  */                 ,proxy: {
/* 329  */                     type: 'direct'
/* 330  */                     ,directFn: CB_UsersGroups.getChildren
/* 331  */                     ,paramsAsHash: true
/* 332  */                     ,extraParams: {
/* 333  */                         path: '/'
/* 334  */                     }
/* 335  */                 }
/* 336  */                 ,listeners: {
/* 337  */                     scope: this
/* 338  */                     ,beforeload: function(store, record, eOpts) {
/* 339  */                         store.proxy.extraParams.path = record.config.node.getPath('nid');
/* 340  */                     }
/* 341  */                     ,load: function(o, n, r) {
/* 342  */                         if(!Ext.isEmpty(this.lastPath)) {
/* 343  */                             this.selectPath(this.lastPath, 'nid', '/');
/* 344  */                         }
/* 345  */                     }
/* 346  */                 }
/* 347  */             })
/* 348  */ 
/* 349  */             ,tbar: [
/* 350  */                 {

/* CB.UsersGroups.js */

/* 351  */                     text: L.Add
/* 352  */                     ,iconCls: 'im-create'
/* 353  */                     ,scale: 'medium'
/* 354  */                     ,menu: [
/* 355  */                         this.actions.addUser
/* 356  */                         ,this.actions.addGroup
/* 357  */                     ]
/* 358  */                 }
/* 359  */                 ,this.actions.del
/* 360  */                 ,this.actions.remove
/* 361  */                 ,'-'
/* 362  */                 ,this.actions.reload
/* 363  */             ]
/* 364  */             ,listeners:{
/* 365  */                 scope: this
/* 366  */                 ,nodedragover: function(o){
/* 367  */                     if( (o.point !== 'append')
/* 368  */                         || (o.target == o.dropNode.parentNode)
/* 369  */                         || (o.target.getDepth() != 1)
/* 370  */                         || (o.target.data.nid < 1)
/* 371  */                         ){
/* 372  */                         o.cancel = true;
/* 373  */                         return;
/* 374  */                     }
/* 375  */                 }
/* 376  */                 ,beforenodedrop: function(o){
/* 377  */                     o.cancel = true;
/* 378  */                     o.dropStatus = true;
/* 379  */                 }
/* 380  */                 ,dragdrop: function( tree, node, dd, e ){
/* 381  */                     this.sourceNode = dd.dragOverData.dropNode;
/* 382  */                     this.targetNode = dd.dragOverData.target;
/* 383  */                     CB_UsersGroups.associate(
/* 384  */                         this.sourceNode.data.nid
/* 385  */                         ,this.targetNode.data.nid
/* 386  */                         ,this.processAssociate
/* 387  */                         ,this
/* 388  */                     );
/* 389  */                 }
/* 390  */                 ,beforeitemappend: function(parent, n){
/* 391  */                     var text = Ext.valueFrom(n.data.title, n.data.name);
/* 392  */                     n.data.title = text;
/* 393  */ 
/* 394  */                     if( parent.getDepth() == 1 ){
/* 395  */                         text += ' <span class="cG">(id:' + n.data.nid + ')</span>';
/* 396  */                         if(n.data.enabled != 1){
/* 397  */                             text += ' <span class="cG">' + L.Disabled + '</span>';
/* 398  */                         }
/* 399  */                         n.data.iconCls = 'icon-user-' + Ext.valueFrom(n.data.sex, '');
/* 400  */                     }

/* CB.UsersGroups.js */

/* 401  */                     if(n.data.type == 1){
/* 402  */                         n.data.cls = n.data.cls + ' fwB';
/* 403  */                         this.getView().addItemCls(n, 'fwB');
/* 404  */                     }
/* 405  */ 
/* 406  */                     if(n.data.cid == App.loginData.id){
/* 407  */                         n.data.cls = n.data.cls + ' cDB';
/* 408  */                         this.getView().addItemCls(n, 'fwB');
/* 409  */                     }
/* 410  */ 
/* 411  */                     n.set('text', text);
/* 412  */                 }
/* 413  */                 ,remove: this.updateChildrenCount
/* 414  */                 ,append: this.updateChildrenCount
/* 415  */                 ,afterrender: this.onAfterRender
/* 416  */                 ,beforeitemcontextmenu: this.onItemContextMenu
/* 417  */             }
/* 418  */             ,selType: 'treemodel'
/* 419  */             ,selModel: {
/* 420  */                 listeners: {
/* 421  */                     scope: this
/* 422  */                     ,selectionchange: function(sm, selection){
/* 423  */                         if(Ext.isEmpty(selection)){
/* 424  */                             this.actions.del.setDisabled(true);
/* 425  */                             this.actions.remove.setDisabled(true);
/* 426  */                         } else {
/* 427  */                             this.actions.del.setDisabled(selection[0].data.system == 1);
/* 428  */                             this.actions.remove.setDisabled(
/* 429  */                                 (selection[0].getDepth() <2) ||
/* 430  */                                 (selection[0].parentNode.data.nid <1)
/* 431  */                             );
/* 432  */                             this.actions.rename.setDisabled(
/* 433  */                                 selection[0].data.type !== '1'
/* 434  */                             );
/* 435  */                         }
/* 436  */                     }
/* 437  */                 }
/* 438  */             }
/* 439  */         });
/* 440  */         this.callParent(arguments);
/* 441  */ 
/* 442  */         this.enableBubble(['verify']);
/* 443  */     }
/* 444  */ 
/* 445  */     ,onAfterRender: function (tree, eOpts) {
/* 446  */         new Ext.util.KeyMap({
/* 447  */             target: this.getEl()
/* 448  */             ,key: Ext.event.Event.F2
/* 449  */             ,alt: false
/* 450  */             ,ctrl: false

/* CB.UsersGroups.js */

/* 451  */             ,stopEvent: true
/* 452  */             ,fn: this.onRenameClick
/* 453  */             ,scope: this
/* 454  */         });
/* 455  */     }
/* 456  */ 
/* 457  */     ,onRenameClick: function(b, e){
/* 458  */         var n = this.getSelectionModel().getSelection()[0];
/* 459  */ 
/* 460  */         if(!n || this.actions.rename.isDisabled()) {
/* 461  */             return;
/* 462  */         }
/* 463  */         this.editor.editNode = n;
/* 464  */         n.set('text', n.data.title);
/* 465  */         this.editor.startEdit(this.getView().getSelectedNodes()[0]);
/* 466  */     }
/* 467  */ 
/* 468  */     ,onBeforeStartEdit: function(editor, boundEl, value){
/* 469  */         var n = this.getSelectionModel().getSelection()[0];
/* 470  */ 
/* 471  */         if( (n.data.type != 1) || (n.data.nid < 1)) {
/* 472  */             return false;
/* 473  */         }
/* 474  */     }
/* 475  */ 
/* 476  */     ,onStartEdit: function(boundEl, value){
/* 477  */         var n = this.getSelectionModel().getSelection()[0];
/* 478  */         if(n.data.type != 1) {
/* 479  */             return false;
/* 480  */         }
/* 481  */         value = n.data.title;
/* 482  */         this.editor.setValue(value);
/* 483  */     }
/* 484  */ 
/* 485  */     ,onBeforeEditComplete: function(editor, newVal, oldVal) {
/* 486  */         var n = this.getSelectionModel().getSelection()[0];
/* 487  */         oldVal = n.data.title;
/* 488  */ 
/* 489  */         if(newVal === oldVal) {
/* 490  */             return;
/* 491  */         }
/* 492  */ 
/* 493  */         n = editor.editNode;
/* 494  */         editor.cancelEdit();
/* 495  */         this.getEl().mask(L.Processing, 'x-mask-loading');
/* 496  */         CB_UsersGroups.renameGroup({id: n.data.nid, title: newVal}, this.processRenameGroup, this);
/* 497  */         return false;
/* 498  */     }
/* 499  */ 
/* 500  */     ,processRenameGroup: function(r, e){

/* CB.UsersGroups.js */

/* 501  */         this.getEl().unmask();
/* 502  */         if(!r || (r.success !== true)) {
/* 503  */             return;
/* 504  */         }
/* 505  */         this.editor.editNode.data.title = r.title;
/* 506  */         this.updateChildrenCount(this, this.editor.editNode);
/* 507  */         this.getView().focusNode(this.editor.editNode, 100);
/* 508  */     }
/* 509  */ 
/* 510  */     ,onItemContextMenu: function(tree, record, item, index, e, eOpts) {
/* 511  */         e.stopEvent();
/* 512  */ 
/* 513  */         if(record.data.type === '1') {
/* 514  */             if(!this.contextMenu) {
/* 515  */                 this.contextMenu = new Ext.menu.Menu({
/* 516  */                     items: [
/* 517  */                         this.actions.rename
/* 518  */                     ]
/* 519  */                 });
/* 520  */             }
/* 521  */ 
/* 522  */             this.contextMenu.showAt(e.getXY());
/* 523  */         }
/* 524  */ 
/* 525  */         return false;
/* 526  */     }
/* 527  */ 
/* 528  */     ,onAddUserClick: function(b, e){
/* 529  */         this.addUserForm = new CB.AddUserForm({
/* 530  */             modal: true
/* 531  */             ,ownerCt: this
/* 532  */             ,data: {
/* 533  */                 callback: this.addUser
/* 534  */             }
/* 535  */         });
/* 536  */ 
/* 537  */         this.addUserForm.show();
/* 538  */     }
/* 539  */ 
/* 540  */     ,addUser: function(params, t){
/* 541  */         CB_UsersGroups.addUser(params, t.processAddUser, t);
/* 542  */     }
/* 543  */ 
/* 544  */     ,processAddUser: function(r, e){
/* 545  */         if(!r) {
/* 546  */             return;
/* 547  */         }
/* 548  */         if(r.success !== true) {
/* 549  */             if(!Ext.isEmpty(r.msg)) {
/* 550  */                 Ext.Msg.alert(L.Error, r.msg);

/* CB.UsersGroups.js */

/* 551  */             }
/* 552  */ 
/* 553  */             return false;
/* 554  */         } else if(this.addUserForm) {
/* 555  */             this.addUserForm.destroy();
/* 556  */             delete this.addUserForm;
/* 557  */         }
/* 558  */ 
/* 559  */         this.lastPath = '/root/'+r.data.group_id+'/'+r.data.nid;
/* 560  */ 
/* 561  */         this.store.clearFilter();
/* 562  */ 
/* 563  */         this.ownerCt.container.component.searchField.clear();
/* 564  */         var rn = this.getRootNode();
/* 565  */         this.store.reload({node: rn});
/* 566  */ 
/* 567  */         App.mainViewPort.fireEvent('useradded', r.data);
/* 568  */     }
/* 569  */ 
/* 570  */     ,onAddGroupClick: function(b, e){
/* 571  */         Ext.Msg.prompt(
/* 572  */             L.Group
/* 573  */             ,L.Name
/* 574  */             ,function(b, text){
/* 575  */                 if((b === 'ok') && !Ext.isEmpty(text)){
/* 576  */                     var rec = {
/* 577  */                         name: text
/* 578  */                         ,title: text
/* 579  */                     };
/* 580  */ 
/* 581  */                     CB.DB.groupsStore.beginUpdate();
/* 582  */                     CB.DB.groupsStore.add(rec);
/* 583  */                     CB.DB.groupsStore.endUpdate();
/* 584  */                     this.store.reload({node: this.getRootNode()});
/* 585  */                 }
/* 586  */             }
/* 587  */             ,this
/* 588  */         );
/* 589  */     }
/* 590  */ 
/* 591  */     ,sortTree: function(n1, n2){
/* 592  */         return (n1.text < n2.text) ? -1 : 1;
/* 593  */     }
/* 594  */ 
/* 595  */     ,deassociateNode: function(){
/* 596  */         var n = this.getSelectionModel().getSelection()[0];
/* 597  */         if(!n) {
/* 598  */             return;
/* 599  */         }
/* 600  */         Ext.Msg.confirm(

/* CB.UsersGroups.js */

/* 601  */             L.ExtractUser
/* 602  */             ,L.ExtractUserMessage.replace('{user}', n.data.name).replace('{group}', n.parentNode.data.text)
/* 603  */             ,function(b){
/* 604  */                 if(b === 'yes') {
/* 605  */                     CB_UsersGroups.deassociate(
/* 606  */                         n.data.nid
/* 607  */                         ,n.parentNode.data.nid
/* 608  */                         ,this.processDeassociate
/* 609  */                         ,this
/* 610  */                     );
/* 611  */                 }
/* 612  */             }
/* 613  */             ,this
/* 614  */         );
/* 615  */     }
/* 616  */ 
/* 617  */     ,processDeassociate: function(r, e){
/* 618  */         if(!r) {
/* 619  */             return;
/* 620  */         }
/* 621  */         if(r.success !== true) {
/* 622  */             if(r.verify) {
/* 623  */                 this.fireEvent('verify', this);
/* 624  */             }
/* 625  */             return false;
/* 626  */         }
/* 627  */         var n = this.getSelectionModel().getSelection()[0];
/* 628  */         var attr = n.data;
/* 629  */ 
/* 630  */         attr.iconCls = 'icon-user-gray';
/* 631  */         this.store.remove(n);
/* 632  */ 
/* 633  */         if(r.outOfGroup){
/* 634  */             var p = this.getRootNode().findChild( 'nid', '-1');
/* 635  */             if(p.loaded){
/* 636  */                 p.appendChild(attr);
/* 637  */                 p.sort(this.sortTree);
/* 638  */             } else {
/* 639  */                 p.data.users++;
/* 640  */                 p.set(
/* 641  */                     'text'
/* 642  */                     ,p.data.text.split('<')[0] + ' <span class="cG">(' + p.data.users + ')</span>'
/* 643  */                 );
/* 644  */             }
/* 645  */         }
/* 646  */     }
/* 647  */ 
/* 648  */     ,processAssociate: function(r, e){
/* 649  */         if(!r) {
/* 650  */             return;

/* CB.UsersGroups.js */

/* 651  */         }
/* 652  */ 
/* 653  */         if(r.success !== true) {
/* 654  */             if(r.verify) {
/* 655  */                 this.fireEvent('verify', this);
/* 656  */             }
/* 657  */             return false;
/* 658  */         }
/* 659  */         var attr = Ext.apply({}, this.sourceNode.data);
/* 660  */ 
/* 661  */         if(this.targetNode.loaded){
/* 662  */             attr.id = Ext.id();
/* 663  */             this.targetNode.appendChild(attr);
/* 664  */             this.targetNode.sort(this.sortTree);
/* 665  */         }else{
/* 666  */             this.targetNode.data.users++;
/* 667  */             this.targetNode.set(
/* 668  */                 'text'
/* 669  */                 ,this.targetNode.data.text.split('<')[0] + ' <span class="cG">(' + this.targetNode.data.users + ')</span>'
/* 670  */             );
/* 671  */         }
/* 672  */         if(this.sourceNode.parentNode.data.nid === '-1') {
/* 673  */             this.sourceNode.remove(true);
/* 674  */         }
/* 675  */     }
/* 676  */ 
/* 677  */     ,delNode: function(){
/* 678  */         var n = this.getSelectionModel().getSelection()[0];
/* 679  */ 
/* 680  */         if(!n) {
/* 681  */             return;
/* 682  */         }
/* 683  */ 
/* 684  */         switch(n.getDepth()){
/* 685  */             case 2:
/* 686  */                 this.deletedUserData = n.data;
/* 687  */                 Ext.MessageBox.confirm(L.Confirmation, L.DeleteUser + ' "'+n.data.text+'"?',
/* 688  */                 function(btn, text){
/* 689  */                     if(btn === 'yes'){
/* 690  */                         n = this.getSelectionModel().getSelection()[0];
/* 691  */                         CB_UsersGroups.deleteUser(n.data.nid, this.processDelNode, this);
/* 692  */                     }
/* 693  */                 }
/* 694  */                 , this);
/* 695  */                 break;
/* 696  */             case 1:
/* 697  */                 Ext.MessageBox.confirm(L.Confirmation, L.DeleteGroupConfirmationMessage + ' "'+n.data.text+'"?',
/* 698  */                 function(btn, text){
/* 699  */                     if(btn === 'yes') {
/* 700  */                         CB_Security.destroyUserGroup(

/* CB.UsersGroups.js */

/* 701  */                             n.data.nid
/* 702  */                             ,this.processDestroyUserGroup
/* 703  */                             ,this
/* 704  */                         );
/* 705  */                     }
/* 706  */                 }
/* 707  */                 , this);
/* 708  */                 break;
/* 709  */         }
/* 710  */     }
/* 711  */ 
/* 712  */     ,processDestroyUserGroup: function(r, e){
/* 713  */         if(!r) {
/* 714  */             return;
/* 715  */         }
/* 716  */ 
/* 717  */         if(r.success !== true) {
/* 718  */             if(r.verify) {
/* 719  */                 this.fireEvent('verify', this);
/* 720  */             }
/* 721  */             return false;
/* 722  */         }
/* 723  */         this.processDelNode(r, e);
/* 724  */         CB.DB.groupsStore.reload();
/* 725  */     }
/* 726  */ 
/* 727  */     ,processDelNode: function(r, e){
/* 728  */         if(!r) {
/* 729  */             return;
/* 730  */         }
/* 731  */ 
/* 732  */         if(r.success !== true) {
/* 733  */             if(r.verify) {
/* 734  */                 this.fireEvent('verify', this);
/* 735  */             }
/* 736  */             return false;
/* 737  */         }
/* 738  */         var nid = this.getSelectionModel().getSelection()[0].data.nid,
/* 739  */             deleteNodes = [];
/* 740  */         this.getRootNode().cascadeBy({
/* 741  */             before: function(n){
/* 742  */                 if(n.data.nid == nid) {
/* 743  */                     deleteNodes.push(n);
/* 744  */                 }
/* 745  */             }
/* 746  */             ,scope: this
/* 747  */         });
/* 748  */ 
/* 749  */         for(var i = 0; i < deleteNodes.length; i++) {
/* 750  */             deleteNodes[i].remove(true);

/* CB.UsersGroups.js */

/* 751  */         }
/* 752  */ 
/* 753  */         if(this.deletedUserData){
/* 754  */             App.mainViewPort.fireEvent('userdeleted', this.deletedUserData);
/* 755  */             delete this.deletedUserData;
/* 756  */         }
/* 757  */     }
/* 758  */ 
/* 759  */     ,updateChildrenCount: function(t, p){
/* 760  */         if(Ext.isEmpty(p)) {
/* 761  */             return;
/* 762  */         }
/* 763  */         if(Ext.isEmpty(p.childNodes)){
/* 764  */             if(!Ext.isEmpty(p.data)) {
/* 765  */                 p.set(
/* 766  */                     'text'
/* 767  */                     ,p.data.title
/* 768  */                 );
/* 769  */             }
/* 770  */             return;
/* 771  */         }
/* 772  */         p.data.users = p.childNodes.length;
/* 773  */         p.set(
/* 774  */             'text'
/* 775  */             ,p.data.title + ' <span class="cG">(' + p.data.users + ')</span>'
/* 776  */         );
/* 777  */     }
/* 778  */ 
/* 779  */     ,filter: function(text, property){
/* 780  */         var store = this.store;
/* 781  */ 
/* 782  */         store.clearFilter();
/* 783  */         if(Ext.isEmpty(text)){
/* 784  */             return;
/* 785  */         }
/* 786  */ 
/* 787  */         text = text.toLowerCase();
/* 788  */ 
/* 789  */         store.filterBy(
/* 790  */             function(record, id){
/* 791  */                 return ( (record.data.depth < 2) ||
/* 792  */                     (record.data[property].toLowerCase().indexOf(text) >= 0)
/* 793  */                 );
/* 794  */             }
/* 795  */             ,this
/* 796  */         );
/* 797  */     }
/* 798  */ 
/* 799  */     ,clearFilter: function(){
/* 800  */         this.store.clearFilter();

/* CB.UsersGroups.js */

/* 801  */     }
/* 802  */ });
/* 803  */ // ----------------------------------------------------------- edit user form
/* 804  */ Ext.define('CB.UserEditWindow', {
/* 805  */     extend: 'Ext.Window'
/* 806  */ 
/* 807  */     ,iconCls: 'icon-user'
/* 808  */     ,title: L.User
/* 809  */     ,modal: true
/* 810  */     ,closeAction: 'destroy'
/* 811  */     ,y: 150
/* 812  */     ,autoWidth: true
/* 813  */     ,autoHeight: true
/* 814  */     ,layout: 'fit'
/* 815  */     ,autoShow: true
/* 816  */ 
/* 817  */     ,initComponent: function() {
/* 818  */ 
/* 819  */         this.data = this.config.data;
/* 820  */ 
/* 821  */         this.profileForm = new CB.ProfileForm({
/* 822  */             header: false
/* 823  */             ,data: this.data
/* 824  */             ,autoHeight: true
/* 825  */             ,autoWidth: true
/* 826  */             ,border: false
/* 827  */             ,listeners: {
/* 828  */                 scope: this
/* 829  */                 ,savesuccess: function(f, a){
/* 830  */                     this.fireEvent('savesuccess', f, a);
/* 831  */                     App.fireEvent('userprofileupdated', f.data, a);
/* 832  */                     this.destroy();
/* 833  */                 }
/* 834  */                 ,cancel: this.destroy
/* 835  */             }
/* 836  */         });
/* 837  */ 
/* 838  */         Ext.apply(this, {
/* 839  */             items: this.profileForm
/* 840  */             ,listeners: {
/* 841  */                 scope: this
/* 842  */                 ,afterrender: this.onAfterRender
/* 843  */             }
/* 844  */         });
/* 845  */ 
/* 846  */         this.callParent(arguments);
/* 847  */ 
/* 848  */         this.enableBubble(['verify']);
/* 849  */     }
/* 850  */     ,onAfterRender: function(){

/* CB.UsersGroups.js */

/* 851  */         this.getEl().mask(L.LoadingData + ' ...');
/* 852  */         CB_User.getProfileData(this.data.id, this.onLoadProfileData, this);
/* 853  */     }
/* 854  */     ,onLoadProfileData: function(r, e){
/* 855  */         this.getEl().unmask();
/* 856  */         if(!r) {
/* 857  */             return;
/* 858  */         }
/* 859  */ 
/* 860  */         if (r.success !== true) {
/* 861  */             if(r.verify) {
/* 862  */                 this.fireEvent('verify', this);
/* 863  */             }
/* 864  */             this.destroy();
/* 865  */             return;
/* 866  */         }
/* 867  */ 
/* 868  */         this.profileForm.loadData(r);
/* 869  */     }
/* 870  */ });
/* 871  */ 
/* 872  */ // ----------------------------------------------------------- form
/* 873  */ Ext.define('CB.UsersGroupsForm', {
/* 874  */     extend: 'Ext.form.FormPanel'
/* 875  */ 
/* 876  */     ,border: false
/* 877  */     ,disabled: true
/* 878  */     ,fileUpload: true
/* 879  */     ,data: {}
/* 880  */ 
/* 881  */     ,initComponent: function(){
/* 882  */ 
/* 883  */         var bulletRenderer = function(v, m){
/* 884  */             m.css = 'taC';
/* 885  */             return (v == 1)
/* 886  */                 ? '<span class="icon-padding icon-tick"></span>'
/* 887  */                 : '';
/* 888  */         };
/* 889  */ 
/* 890  */         this.actions = {
/* 891  */             disableTSV: new Ext.Action({
/* 892  */                 text: L.Disable + ' ' + L.TSV
/* 893  */                 ,scope: this
/* 894  */                 ,disabled: true
/* 895  */                 ,handler: this.onDisableTSVClick
/* 896  */             })
/* 897  */             ,enableUser: new Ext.Action({
/* 898  */                 text: L.EnableUser
/* 899  */                 ,scope: this
/* 900  */                 ,handler: this.onUserToggleEnableClick

/* CB.UsersGroups.js */

/* 901  */             })
/* 902  */             ,disableUser: new Ext.Action({
/* 903  */                 text: L.DisableUser
/* 904  */                 ,scope: this
/* 905  */                 ,handler: this.onUserToggleEnableClick
/* 906  */             })
/* 907  */         };
/* 908  */ 
/* 909  */         this.userInfo = new Ext.DataView({
/* 910  */             tpl: ['<img class="fl user-photo-field click icon-user32-{sex}" src="' + App.config.photoPath + '{id}.png?32={[ CB.DB.usersStore.getPhotoParam(values.id) ]}">'
/* 911  */                 ,'<span class="fwB click">{title}</span>{[ (values.enabled != 1) ? \' - \' + L.Disabled : \'\' ]}<br />'
/* 912  */                 ,'<span class="cG">'+L.User+':</span> {name}, <span class="cG">'+L.lastAction+':</span> '
/* 913  */                   ,'{[ Ext.isEmpty(values.last_action_time) ? "" : values.last_action_time ]}<br />'
/* 914  */                 ,'<span class="cG">'+L.addedByUser+':</span> {owner}, {cdate}<br />'
/* 915  */                 ,'<span class="cG">'+L.TSV+':</span> {tsv}<br />'
/* 916  */             ]
/* 917  */             ,itemSelector:'.none'
/* 918  */             ,autoHeight: true
/* 919  */             ,listeners:{
/* 920  */                 scope: this
/* 921  */                 ,containerclick: this.onUserInfoContainerCLick
/* 922  */             }
/* 923  */         });
/* 924  */ 
/* 925  */         Ext.apply(this, {
/* 926  */             layout: 'border'
/* 927  */             ,api: {submit: CB_User.uploadPhoto }
/* 928  */             ,border: false
/* 929  */             ,cls: 'x-panel-white'
/* 930  */             ,tbar:[
/* 931  */                 {
/* 932  */                     text: L.Save
/* 933  */                     ,iconCls: 'im-save'
/* 934  */                     ,scale: 'medium'
/* 935  */                     ,disabled: true
/* 936  */                     ,handler: this.saveData
/* 937  */                     ,scope: this
/* 938  */                 },{
/* 939  */                     text: L.Cancel
/* 940  */                     ,iconCls: 'im-cancel'
/* 941  */                     ,scale: 'medium'
/* 942  */                     ,disabled: true
/* 943  */                     ,handler: function(b, e){
/* 944  */                         e.stopPropagation();
/* 945  */                         this.loadData();
/* 946  */                     }
/* 947  */                     ,scope: this
/* 948  */                 },{xtype: 'tbseparator', hidden: true}
/* 949  */                 ,{
/* 950  */                     text: L.Edit

/* CB.UsersGroups.js */

/* 951  */                     ,iconCls: 'im-edit-obj'
/* 952  */                     ,scale: 'medium'
/* 953  */                     ,handler: this.onEditUserDataClick
/* 954  */                     ,scope: this
/* 955  */                     ,hidden: true
/* 956  */                 },{xtype: 'tbseparator', hidden: true}
/* 957  */                 ,{
/* 958  */                     text: L.Options
/* 959  */                     ,iconCls:'im-apps'
/* 960  */                     ,scale: 'medium'
/* 961  */                     ,hidden: true
/* 962  */                     ,menu: [
/* 963  */                         {text: L.SendResetPassMail, iconCls: 'icon-key', handler: this.onSendResetPassMailClick, scope: this}
/* 964  */                         ,{text: L.ChangePassword, iconCls: 'icon-key', handler: this.onEditUserPasswordClick, scope: this}
/* 965  */                         ,'-'
/* 966  */                         ,{text: L.ChangeUsername, iconCls: 'icon-pencil', handler: this.onEditUsernameClick, scope: this}
/* 967  */                         ,'-'
/* 968  */                         ,this.actions.disableTSV
/* 969  */                         ,'-'
/* 970  */                         ,this.actions.enableUser
/* 971  */                         ,this.actions.disableUser
/* 972  */                     ]
/* 973  */                 }
/* 974  */             ]
/* 975  */             ,items: [{
/* 976  */                     region: 'north'
/* 977  */                     ,height: 75
/* 978  */                     ,bodyStyle: 'padding: 10px'
/* 979  */                     ,border: false
/* 980  */                     ,items: [{
/* 981  */                         xtype: 'filefield'
/* 982  */                         ,name: 'photo'
/* 983  */                         ,cls: 'fl'
/* 984  */                         ,style: 'position:absolute;width:1px;height:1px;opacity:0;top:-100px'
/* 985  */                         ,buttonOnly: true
/* 986  */                         ,allowBlank: false
/* 987  */                         ,clearOnSubmit: false
/* 988  */                         ,listeners:{
/* 989  */                             scope: this
/* 990  */                             ,afterrender: function(c){
/* 991  */                                 c.button.fileInputEl.on('change', this.onPhotoChanged, this);
/* 992  */                             }
/* 993  */                         }
/* 994  */                     }, this.userInfo ]
/* 995  */                 },{
/* 996  */                 region: 'center'
/* 997  */                 ,border: false
/* 998  */                 ,scrollable: true
/* 999  */                 ,bodyStyle: 'padding: 0 20px'
/* 1000 */                 ,items: [{

/* CB.UsersGroups.js */

/* 1001 */                         border: false
/* 1002 */                         ,anchor: '100%'
/* 1003 */                         ,minHeight: 100
/* 1004 */                         ,autoHeight: true
/* 1005 */                         ,xtype: 'grid'
/* 1006 */                         ,style: 'margin-top: 15px'
/* 1007 */                         ,selType: 'cellmodel'
/* 1008 */                         ,store: new Ext.data.JsonStore({
/* 1009 */                             autoDestroy: true
/* 1010 */                             ,model: 'Facet'
/* 1011 */                         })
/* 1012 */ 
/* 1013 */                         ,columns: [
/* 1014 */                             {
/* 1015 */                                 header: L.Groups
/* 1016 */                                 ,width: 150
/* 1017 */                                 ,dataIndex: 'name'
/* 1018 */                             }
/* 1019 */                             ,{
/* 1020 */                                 header: L.Active
/* 1021 */                                 ,dataIndex: 'active'
/* 1022 */                                 ,renderer: bulletRenderer
/* 1023 */                             }
/* 1024 */                         ]
/* 1025 */                         ,viewConfig: {
/* 1026 */                             forceFit: true
/* 1027 */                             ,stripeRows: false
/* 1028 */                             ,markDirty: false
/* 1029 */                             ,getRowClass: function(r, index) {
/* 1030 */                                 return (r.get('active') != 1) ? '' : 'fwB';
/* 1031 */                             }
/* 1032 */                         }
/* 1033 */                         ,listeners:{
/* 1034 */                             scope: this
/* 1035 */                             ,celldblclick: function(cmp, td, cellIndex, record, tr, rowIndex, e, eOpts){
/* 1036 */                                 switch(cmp.headerCt.columnManager.columns[cellIndex].dataIndex){
/* 1037 */                                     case 'active':
/* 1038 */                                         record.set('active', (record.get('active') == 1) ? null : 1);
/* 1039 */                                         break;
/* 1040 */                                     default: return;
/* 1041 */                                 }
/* 1042 */                                 this.fireEvent('change');
/* 1043 */                             }
/* 1044 */                         }
/* 1045 */                     }
/* 1046 */                 ]
/* 1047 */             },{
/* 1048 */                 region: 'south'
/* 1049 */                 ,height: 300
/* 1050 */                 ,split: true

/* CB.UsersGroups.js */

/* 1051 */                 ,collapseMode: 'mini'
/* 1052 */                 ,collapsed: true
/* 1053 */                 ,tbar: [{xtype: 'label', cls:'fwB', text: L.ChangeLog + ': '}]
/* 1054 */             }
/* 1055 */             ]
/* 1056 */             ,listeners: {
/* 1057 */                 scope: this
/* 1058 */                 ,change: function(e){
/* 1059 */                     this.setDirty(true);
/* 1060 */                 }
/* 1061 */                 ,show: function() {
/* 1062 */                     var f = function(){
/* 1063 */                         var a = this.down('[isFormField=true]');
/* 1064 */                         a.focus();
/* 1065 */                     };
/* 1066 */ 
/* 1067 */                     Ext.Function.defer(f, 500, this);
/* 1068 */                 }
/* 1069 */             }
/* 1070 */         });
/* 1071 */ 
/* 1072 */         this.callParent(arguments);
/* 1073 */ 
/* 1074 */         this.grid = this.down('grid');
/* 1075 */     }
/* 1076 */     ,setDirty: function(value){
/* 1077 */         this._isDirty = (value !== false);
/* 1078 */ 
/* 1079 */         var ttb = this.dockedItems.getAt(0);
/* 1080 */         ttb.items.getAt(0).setDisabled(!this._isDirty);
/* 1081 */         ttb.items.getAt(1).setDisabled(!this._isDirty);
/* 1082 */     }
/* 1083 */     //------------------------------------------------------------------------------------------------------------------------------------------------
/* 1084 */     ,loadData: function(id){
/* 1085 */         if(!Ext.isEmpty(id)) {
/* 1086 */             this.data = {id: id};
/* 1087 */         }
/* 1088 */         this.getEl().mask(L.LoadingData + ' ...');
/* 1089 */         CB_UsersGroups.getAccessData(this.data.id, this.processLoadedData, this);
/* 1090 */     }
/* 1091 */ 
/* 1092 */     ,processLoadedData: function(response, e){
/* 1093 */         if(!response) {
/* 1094 */             return;
/* 1095 */         }
/* 1096 */ 
/* 1097 */         if(response.success !== true) {
/* 1098 */             if(response.verify) {
/* 1099 */                 this.fireEvent('verify', this);
/* 1100 */             }

/* CB.UsersGroups.js */

/* 1101 */         } else {
/* 1102 */             this.data.title = Ext.valueFrom(response.data.title, response.data.name);
/* 1103 */             this.data.enabled = response.data.enabled;
/* 1104 */ 
/* 1105 */             response.data.title = this.data.title;
/* 1106 */             this.data.template_id = response.data.template_id;
/* 1107 */             this.userInfo.data = response.data;
/* 1108 */             this.userInfo.update(response.data);
/* 1109 */ 
/* 1110 */             this.grid.setDisabled(response.data.id == App.loginData.id);//disable editing access for self
/* 1111 */ 
/* 1112 */             var accessData = [];
/* 1113 */             CB.DB.groupsStore.each(
/* 1114 */                 function(r){
/* 1115 */                     if(parseInt(r.get('system'), 10) === 0) {
/* 1116 */                         accessData.push({
/* 1117 */                             id: r.get('id')
/* 1118 */                             ,'name': r.get('title')
/* 1119 */                             ,'active': (response.data.groups.indexOf(String(r.get('id') ) ) >=0 ) ? 1: 0
/* 1120 */                         });
/* 1121 */                     }
/* 1122 */                 }
/* 1123 */                 ,this
/* 1124 */             );
/* 1125 */ 
/* 1126 */             this.grid.getStore().loadData(accessData, false);
/* 1127 */ 
/* 1128 */             this.canEditUserData = (
/* 1129 */                 App.loginData.admin ||
/* 1130 */                 (response.data.cid == App.loginData.id) ||
/* 1131 */                 (response.data.id == App.loginData.id)
/* 1132 */             );
/* 1133 */ 
/* 1134 */             var ttb = this.dockedItems.getAt(0)
/* 1135 */                 ,eb = ttb.down('[iconCls="im-edit-obj"]')
/* 1136 */                 ,idx = ttb.items.indexOf(eb)
/* 1137 */                 ,enabled = (response.data.enabled == 1);
/* 1138 */ 
/* 1139 */             eb.setVisible(this.canEditUserData); // edit button
/* 1140 */             ttb.items.getAt(idx -1).setVisible(this.canEditUserData);// divider for edit button
/* 1141 */ 
/* 1142 */             var visible = (this.canEditUserData || (response.data.id == App.loginData.id));
/* 1143 */             ttb.items.getAt(idx + 1).setVisible(visible); //divider for options button
/* 1144 */             ttb.items.getAt(idx + 2).setVisible(visible); // options button
/* 1145 */             this.updatePhoto(response.data.photo);
/* 1146 */             this.setDisabled(false);
/* 1147 */ 
/* 1148 */             this.actions.disableTSV.setDisabled(!this.canEditUserData || (response.data.tsv === 'none'));
/* 1149 */             this.actions.enableUser.setHidden(enabled);
/* 1150 */             this.actions.disableUser.setHidden(!enabled);

/* CB.UsersGroups.js */

/* 1151 */ 
/* 1152 */             this.fireEvent('loaded', this.data);
/* 1153 */         }
/* 1154 */         this.getEl().unmask();
/* 1155 */         this.setDirty(false);
/* 1156 */     }
/* 1157 */ 
/* 1158 */     ,saveData: function(){
/* 1159 */         this.fireEvent('beforesave');
/* 1160 */         this.getEl().mask(L.SavingChanges + ' ...');
/* 1161 */ 
/* 1162 */         var params = {
/* 1163 */             groups: []
/* 1164 */         };
/* 1165 */ 
/* 1166 */         this.grid.getStore().each(
/* 1167 */             function(r){
/* 1168 */                 if(r.get('active') == 1) {
/* 1169 */                     params.groups.push(r.get('id'));
/* 1170 */                 }
/* 1171 */             },
/* 1172 */             this
/* 1173 */         );
/* 1174 */ 
/* 1175 */         params.id = this.data.id;
/* 1176 */ 
/* 1177 */         CB_UsersGroups.saveAccessData(
/* 1178 */             params,
/* 1179 */             function(r, e){
/* 1180 */                 if(!r) {
/* 1181 */                     return;
/* 1182 */                 }
/* 1183 */                 if(r.success !== true) {
/* 1184 */                     if(r.verify) {
/* 1185 */                         this.fireEvent('verify', this);
/* 1186 */                     }
/* 1187 */                     return false;
/* 1188 */                 }
/* 1189 */                 this.setDirty(false);
/* 1190 */                 this.getEl().unmask();
/* 1191 */                 this.fireEvent('save');
/* 1192 */             },
/* 1193 */             this
/* 1194 */         );
/* 1195 */     }
/* 1196 */ 
/* 1197 */     ,onUserInfoContainerCLick: function(cmp, e, eOpts){
/* 1198 */         if(e) {
/* 1199 */             var target = e.getTarget();
/* 1200 */             if(target.localName == "img") {

/* CB.UsersGroups.js */

/* 1201 */                 var el = this.down('[name="photo"]').button.fileInputEl;
/* 1202 */                 el.dom.click();
/* 1203 */             } else if(target.classList.contains('click')) {
/* 1204 */                 this.onEditUserDataClick();
/* 1205 */             }
/* 1206 */         }
/* 1207 */     }
/* 1208 */ 
/* 1209 */     ,onEditUserDataClick: function(cmp, e, eOpts){
/* 1210 */         this.fireEvent('edit');
/* 1211 */     }
/* 1212 */ 
/* 1213 */     ,onPhotoChanged: function(ev, el, o){
/* 1214 */         if(!this.getForm().isValid()) {
/* 1215 */             return;
/* 1216 */         }
/* 1217 */         this.getForm().submit({
/* 1218 */             clientValidation: true
/* 1219 */             ,params: {
/* 1220 */                     id: this.data.id
/* 1221 */                 }
/* 1222 */             ,scope: this
/* 1223 */             ,success: function(form, action) { this.updatePhoto(action.result.photo); }
/* 1224 */                 ,failure: App.formSubmitFailure
/* 1225 */         });
/* 1226 */     }
/* 1227 */ 
/* 1228 */     ,updatePhoto: function(name){
/* 1229 */         if(Ext.isEmpty(name)) {
/* 1230 */             return;
/* 1231 */         }
/* 1232 */ 
/* 1233 */         var del = this.userInfo.getEl().query('img.user-photo-field')[0];
/* 1234 */         del.src = App.config.photoPath + name;
/* 1235 */     }
/* 1236 */ 
/* 1237 */     ,onEditUsernameClick: function(){
/* 1238 */         Ext.Msg.prompt(L.ChangeUsername, L.ChangeUsernameMessage, function(btn, text){
/* 1239 */             if (btn === 'ok'){
/* 1240 */                 if(Ext.isEmpty(text)) {
/* 1241 */                     return Ext.Msg.alert(L.Error, L.UsernameCannotBeEmpty);
/* 1242 */                 }
/* 1243 */ 
/* 1244 */                 var r = /^[a-z0-9\._]+$/i;
/* 1245 */ 
/* 1246 */                 if(Ext.isEmpty(r.exec(text))) {
/* 1247 */                     return Ext.Msg.alert(L.Error, L.UsernameInvalid);
/* 1248 */                 }
/* 1249 */ 
/* 1250 */                 CB_UsersGroups.renameUser(

/* CB.UsersGroups.js */

/* 1251 */                     {
/* 1252 */                         id: this.data.id
/* 1253 */                         ,name: text
/* 1254 */                     }
/* 1255 */                     ,function(r, e){
/* 1256 */                         if(!r) {
/* 1257 */                             return;
/* 1258 */                         }
/* 1259 */ 
/* 1260 */                         if(r.success !== true) {
/* 1261 */                             if(r.verify) {
/* 1262 */                                 this.fireEvent('verify', this);
/* 1263 */                             } else {
/* 1264 */                                 return Ext.Msg.alert(L.Error, Ext.valueFrom(e.msg, L.ErrorOccured) );
/* 1265 */                             }
/* 1266 */                         }
/* 1267 */                         this.data.name = r.name;
/* 1268 */                         this.userInfo.data.name = r.name;
/* 1269 */                         this.userInfo.update(this.userInfo.data);
/* 1270 */                     }
/* 1271 */                     ,this
/* 1272 */                 );
/* 1273 */             }
/* 1274 */         }, this, false, this.data.name);
/* 1275 */     }
/* 1276 */ 
/* 1277 */     ,onSendResetPassMailClick: function() {
/* 1278 */         CB_UsersGroups.sendResetPassMail(
/* 1279 */             this.data.id
/* 1280 */             ,function(r, e) {
/* 1281 */                 if(r) {
/* 1282 */                     Ext.Msg.alert(
/* 1283 */                         L.Info
/* 1284 */                         ,r.success ? L.EmailSent: L.ErrorOccured
/* 1285 */                     );
/* 1286 */                 }
/* 1287 */             }
/* 1288 */             ,this
/* 1289 */         );
/* 1290 */     }
/* 1291 */ 
/* 1292 */     ,onEditUserPasswordClick: function(){
/* 1293 */         var w = new CB.ChangePasswordWindow({data: this.data});
/* 1294 */         w.show();
/* 1295 */     }
/* 1296 */ 
/* 1297 */     ,onDisableTSVClick: function(){
/* 1298 */         Ext.Msg.confirm(
/* 1299 */             L.Disable + ' ' + L.TSV
/* 1300 */             ,L.DisableTSVConfirmation

/* CB.UsersGroups.js */

/* 1301 */             ,function(b){
/* 1302 */                 if(b === 'yes') {
/* 1303 */                     CB_UsersGroups.disableTSV(
/* 1304 */                         this.data.id
/* 1305 */                         ,this.processDisableTSV
/* 1306 */                         ,this
/* 1307 */                     );
/* 1308 */                 }
/* 1309 */             }
/* 1310 */             ,this
/* 1311 */         );
/* 1312 */     }
/* 1313 */     ,processDisableTSV: function(r, e) {
/* 1314 */         if(!r || (r.success !== true)) {
/* 1315 */             return;
/* 1316 */         }
/* 1317 */ 
/* 1318 */         this.loadData(this.data.id);
/* 1319 */     }
/* 1320 */ 
/* 1321 */     ,onUserToggleEnableClick: function(b, e) {
/* 1322 */         var enable = (b.baseAction == this.actions.enableUser);
/* 1323 */         CB_UsersGroups.setUserEnabled(
/* 1324 */             {
/* 1325 */                 id: this.data.id
/* 1326 */                 ,enabled: enable
/* 1327 */             }
/* 1328 */             ,this.processToggleUserEnable
/* 1329 */             ,this
/* 1330 */         );
/* 1331 */     }
/* 1332 */ 
/* 1333 */     ,processToggleUserEnable: function(r, e) {
/* 1334 */         if(!r || (r.success !== true)) {
/* 1335 */             return;
/* 1336 */         }
/* 1337 */ 
/* 1338 */         this.actions.enableUser.setHidden(r.enabled);
/* 1339 */         this.actions.disableUser.setHidden(!r.enabled);
/* 1340 */ 
/* 1341 */         var d = Ext.apply(this.userInfo.data, {enabled: r.enabled});
/* 1342 */ 
/* 1343 */         this.userInfo.update(d);
/* 1344 */     }
/* 1345 */ 
/* 1346 */ });
/* 1347 */ // ----------------------------------------------------------- end of form
/* 1348 */ 
/* 1349 */ // ---------------------------------------------- Main panel
/* 1350 */ Ext.define('CB.UsersGroups', {

/* CB.UsersGroups.js */

/* 1351 */     extend: 'Ext.Window'
/* 1352 */ 
/* 1353 */     ,alias: 'CBUsersGroups'
/* 1354 */     ,xtype: 'CBUsersGroups'
/* 1355 */ 
/* 1356 */     ,layout: 'border'
/* 1357 */     ,border: false
/* 1358 */     ,closable: true
/* 1359 */     ,minimizable: true
/* 1360 */ 
/* 1361 */     ,iconCls: 'icon-users'
/* 1362 */     ,title: L.UserManagement
/* 1363 */     ,width: 850
/* 1364 */     ,height: 600
/* 1365 */ 
/* 1366 */     ,initComponent: function(){
/* 1367 */         this.tree = new CB.UsersGroupsTree({
/* 1368 */             region: 'center'
/* 1369 */             ,split: true
/* 1370 */             ,collapseMode: 'mini'
/* 1371 */         });
/* 1372 */ 
/* 1373 */         this.tree.getSelectionModel().on( 'selectionchange', this.onTreeSelectionChange, this );
/* 1374 */         this.tree.getSelectionModel().on( 'beforeselect', this.onTreeBeforeSelect, this );
/* 1375 */ 
/* 1376 */         this.form = new CB.UsersGroupsForm( {
/* 1377 */             region: 'center'
/* 1378 */             ,api: {submit: CB_User.uploadPhoto }
/* 1379 */             ,listeners:{
/* 1380 */                 scope: this
/* 1381 */                 ,beforesave: this.onBeforeFormSave
/* 1382 */                 ,save: this.onFormSave
/* 1383 */                 ,loaded: this.onLoadFormData
/* 1384 */                 ,edit: this.onEditUserData
/* 1385 */                 ,verify: this.onVerifyEvent
/* 1386 */             }
/* 1387 */         } );
/* 1388 */ 
/* 1389 */         this.searchField = new CB.search.Field({
/* 1390 */             region: 'south'
/* 1391 */             ,listeners: {
/* 1392 */                 scope: this
/* 1393 */                 ,'search': this.onSearchQuery
/* 1394 */             }
/* 1395 */         });
/* 1396 */ 
/* 1397 */         Ext.apply(this, {
/* 1398 */             items: [
/* 1399 */                 {
/* 1400 */                     layout: 'border'

/* CB.UsersGroups.js */

/* 1401 */                     ,region: 'west'
/* 1402 */                     ,width: 265
/* 1403 */                     ,border: false
/* 1404 */                     ,split: true
/* 1405 */                     ,items: [
/* 1406 */                         this.tree
/* 1407 */                         ,this.searchField
/* 1408 */                     ]
/* 1409 */                 }
/* 1410 */                 ,this.form
/* 1411 */             ]
/* 1412 */             ,listeners: {
/* 1413 */                 scope: this
/* 1414 */                 ,verify: this.onVerifyEvent
/* 1415 */             }
/* 1416 */         });
/* 1417 */ 
/* 1418 */         this.callParent(arguments);
/* 1419 */     }
/* 1420 */     ,onSearchQuery: function(text, e){
/* 1421 */         this.tree.filter(text, 'title');
/* 1422 */     }
/* 1423 */     ,onBeforeFormSave: function(){
/* 1424 */         this.lastPath = '';
/* 1425 */         var n = this.tree.getSelectionModel().getSelection()[0];
/* 1426 */         if(n) this.lastPath = n.getPath('nid');
/* 1427 */     }
/* 1428 */     ,onFormSave: function(){
/* 1429 */         this.tree.store.clearFilter();
/* 1430 */ 
/* 1431 */         this.tree.store.reload({
/* 1432 */             node: this.tree.getRootNode()
/* 1433 */             ,scope: this
/* 1434 */             ,callback: function(){
/* 1435 */                 //restore tree filter
/* 1436 */                 this.tree.filter(this.searchField.getValue(), 'title');
/* 1437 */ 
/* 1438 */                 //select same user
/* 1439 */                 this.tree.selectPath(
/* 1440 */                     this.lastPath
/* 1441 */                     ,'nid'
/* 1442 */                     ,'/'
/* 1443 */                     ,function(success){
/* 1444 */                         if(!success){
/* 1445 */                             this.form.setDisabled(true);
/* 1446 */                             this.tree.getRootNode().cascadeBy({
/* 1447 */                                 before: function(n){
/* 1448 */                                     if(n.data.id == this.form.data.id) {
/* 1449 */                                         this.tree.getSelectionModel().select(n);
/* 1450 */                                         this.form.setDisabled(false);

/* CB.UsersGroups.js */

/* 1451 */                                         return false;
/* 1452 */                                     }
/* 1453 */                                 }
/* 1454 */                                 ,scope: this
/* 1455 */                             });
/* 1456 */                         }
/* 1457 */                     }.bind(this)
/* 1458 */                 );
/* 1459 */             }
/* 1460 */         });
/* 1461 */     }
/* 1462 */ 
/* 1463 */     ,onTreeSelectionChange: function(sm, node){
/* 1464 */         var n = this.tree.getSelectionModel().getSelection()[0];
/* 1465 */         if((!n) || (n.getDepth() != 2)){
/* 1466 */             this.form.setDisabled(true);
/* 1467 */             if(this.loadFormTask) {
/* 1468 */                 this.loadFormTask.cancel();
/* 1469 */             }
/* 1470 */ 
/* 1471 */             return ;
/* 1472 */         }
/* 1473 */         this.loadId = n.data.nid;
/* 1474 */         this.onLoadFormTask();
/* 1475 */     }
/* 1476 */ //------------------------------------------------------------------------------------------------------------------------------------------------
/* 1477 */     ,onTreeBeforeSelect: function(sm, newNode, oldNode){
/* 1478 */         if(Ext.valueFrom(this._forceSelection, 0)){
/* 1479 */             this._forceSelection = 0;
/* 1480 */             return true;
/* 1481 */         }
/* 1482 */ 
/* 1483 */         if(oldNode && this.form._isDirty){
/* 1484 */             this.newNode = newNode;
/* 1485 */             Ext.Msg.show({
/* 1486 */                 buttons: Ext.Msg.YESNO
/* 1487 */                 ,title: L.Confirmation
/* 1488 */                 ,msg: L.SaveChangesConfirmationMessage
/* 1489 */                 ,scope: this
/* 1490 */                 ,fn: function(btn, text){
/* 1491 */                     if (btn === 'yes') {
/* 1492 */                         this.form.saveData();
/* 1493 */                     } else{
/* 1494 */                         this._forceSelection = 1;
/* 1495 */                         this.tree.getSelectionModel().select(this.newNode);
/* 1496 */                         this.form.setDirty(false);
/* 1497 */                     }
/* 1498 */                 }
/* 1499 */             });
/* 1500 */             return false;

/* CB.UsersGroups.js */

/* 1501 */         }
/* 1502 */     }
/* 1503 */ 
/* 1504 */     ,onLoadFormTask: function(){
/* 1505 */         if(!this.loadFormTask) {
/* 1506 */             this.loadFormTask = new Ext.util.DelayedTask(
/* 1507 */                 function(){
/* 1508 */                     this.form.loadData(this.loadId);
/* 1509 */                 },
/* 1510 */                 this
/* 1511 */             );
/* 1512 */         }
/* 1513 */         this.loadFormTask.delay(500);
/* 1514 */     }
/* 1515 */     ,onLoadFormData: function(data){
/* 1516 */         this.tree.getRootNode().cascadeBy({
/* 1517 */             before: function(n){
/* 1518 */                 if(n.data.nid == data.id) {
/* 1519 */                     n.set(
/* 1520 */                         'text'
/* 1521 */                         ,Ext.valueFrom(n.data.title, n.data.name) +
/* 1522 */                             ' <span class="cG">(id:' + data.id + ')</span>' +
/* 1523 */                             ((data.enabled != 1)
/* 1524 */                                 ? ' <span class="cG">' + L.Disabled + '</span>'
/* 1525 */                                 : ''
/* 1526 */                             )
/* 1527 */                     );
/* 1528 */                 }
/* 1529 */             }
/* 1530 */             ,scope: this
/* 1531 */         });
/* 1532 */     }
/* 1533 */     ,onEditUserData: function(){
/* 1534 */         if(!this.form.canEditUserData) {
/* 1535 */             return;
/* 1536 */         }
/* 1537 */         var data = Ext.apply({}, this.form.data);
/* 1538 */         data.id = data.id.split('-').pop();
/* 1539 */         var n = this.tree.getSelectionModel().getSelection()[0]
/* 1540 */             ,iconCls = n ? n.data.iconCls : 'icon-user'
/* 1541 */             ,w = new CB.UserEditWindow({
/* 1542 */                 title: data.title
/* 1543 */                 ,iconCls: iconCls
/* 1544 */                 ,data: data
/* 1545 */                 ,listeners: {
/* 1546 */                     scope: this
/* 1547 */                     ,savesuccess: function(){
/* 1548 */                         this.form.loadData();
/* 1549 */                     }
/* 1550 */                     ,verify: this.onVerifyEvent

/* CB.UsersGroups.js */

/* 1551 */                 }
/* 1552 */             });
/* 1553 */         w.show();
/* 1554 */     }
/* 1555 */ 
/* 1556 */     ,onVerifyEvent: function(cmp) {
/* 1557 */         this.destroy();
/* 1558 */         Ext.Msg.alert(L.Info, 'User management session has expired. Please access it and authenticate again.');
/* 1559 */     }
/* 1560 */ });
/* 1561 */ 
/* 1562 */ // ----------------------------------------------------------- change password window
/* 1563 */ Ext.define('CB.ChangePasswordWindow', {
/* 1564 */     extend: 'Ext.Window'
/* 1565 */     ,modal: true
/* 1566 */     ,title: L.ChangePassword
/* 1567 */     ,autoWidth: true
/* 1568 */     ,autoHeight: true
/* 1569 */     ,border: false
/* 1570 */     ,iconCls: 'icon-key'
/* 1571 */ 
/* 1572 */     ,initComponent: function() {
/* 1573 */         var items = [];
/* 1574 */ 
/* 1575 */         this.data = this.config.data;
/* 1576 */ 
/* 1577 */         if(this.data.id == App.loginData.id)
/* 1578 */             items = [{
/* 1579 */                 xtype: 'textfield'
/* 1580 */                 ,fieldLabel: L.CurrentPassword
/* 1581 */                 ,inputType: 'password'
/* 1582 */                 ,name: 'currentpassword'
/* 1583 */                 ,allowBlank: (this.data.id != App.loginData.id)
/* 1584 */             }];
/* 1585 */         items.push({
/* 1586 */                 xtype: 'textfield'
/* 1587 */                 ,fieldLabel: L.Password
/* 1588 */                 ,inputType: 'password'
/* 1589 */                 ,name: 'password'
/* 1590 */                 ,allowBlank: false
/* 1591 */                 ,shouldMatch: true
/* 1592 */             },{
/* 1593 */                 xtype: 'textfield'
/* 1594 */                 ,fieldLabel: L.ConfirmPassword
/* 1595 */                 ,inputType: 'password'
/* 1596 */                 ,name: 'confirmpassword'
/* 1597 */                 ,allowBlank: false
/* 1598 */                 ,shouldMatch: true
/* 1599 */             },{
/* 1600 */                 xtype: 'displayfield'

/* CB.UsersGroups.js */

/* 1601 */                 ,hideLabel: true
/* 1602 */                 ,cls: 'cR taC'
/* 1603 */                 ,anchor: '100%'
/* 1604 */                 ,id: 'msgTarget'
/* 1605 */                 ,value: '&nbsp;'
/* 1606 */             });
/* 1607 */ 
/* 1608 */         Ext.apply(this, {
/* 1609 */             items: {
/* 1610 */                 xtype: 'form'
/* 1611 */                 ,autoWidth: true
/* 1612 */                 ,autoHeight: true
/* 1613 */                 ,border: false
/* 1614 */                 ,monitorValid: true
/* 1615 */                 ,extraParams: this.data
/* 1616 */                 ,api: {
/* 1617 */                     submit: CB_UsersGroups.changePassword
/* 1618 */                 }
/* 1619 */                 ,items: {
/* 1620 */                     xtype: 'fieldset'
/* 1621 */                     ,labelWidth: 150
/* 1622 */                     ,autoWidth: true
/* 1623 */                     ,autoHeight: true
/* 1624 */                     ,border: false
/* 1625 */                     ,layout: 'anchor'
/* 1626 */                     ,style: 'padding-top: 10px'
/* 1627 */                     ,defaults: {
/* 1628 */                         anchor: '100%'
/* 1629 */                         ,listeners: {
/* 1630 */                             scope: this
/* 1631 */                             ,invalid: function(field, msg){
/* 1632 */                                 if(field.getEl().hasCls('x-form-invalid')) this.hasInvalidFields = true;
/* 1633 */                             }
/* 1634 */                         }
/* 1635 */                     }
/* 1636 */                     ,items: items
/* 1637 */                 }
/* 1638 */                 ,listeners: {
/* 1639 */                     scope: this
/* 1640 */                     ,clientvalidation: function(form, valid){
/* 1641 */                         var label = this.down('[id="msgTarget"]');
/* 1642 */ 
/* 1643 */                         if(!valid && this.hasInvalidFields){
/* 1644 */                             label.setValue(L.EmptyRequiredFields);
/* 1645 */                             return;
/* 1646 */                         }
/* 1647 */ 
/* 1648 */                         var a = this.query('[shouldMatch=true]');
/* 1649 */ 
/* 1650 */                         if(a[0].getValue() != a[1].getValue()){

/* CB.UsersGroups.js */

/* 1651 */                             this.down('form').buttons[0].setDisabled(true);
/* 1652 */                             label.setValue(L.PasswordMissmatch);
/* 1653 */                             return;
/* 1654 */                         }
/* 1655 */ 
/* 1656 */                         label.setValue('&nbsp;');
/* 1657 */                     }
/* 1658 */                 }
/* 1659 */                 ,buttons: [
/* 1660 */                     {
/* 1661 */                         text: Ext.MessageBox.buttonText.ok
/* 1662 */                         ,iconCls:'icon-tick'
/* 1663 */                         ,formBind: true
/* 1664 */                         ,type: 'submit'
/* 1665 */                         ,scope: this
/* 1666 */                         ,plugins: 'defaultButton'
/* 1667 */                         ,handler: function(){
/* 1668 */                             var f = this.down('form');
/* 1669 */                             f.getForm().submit({
/* 1670 */                                 clientValidation: true
/* 1671 */                                 ,params: this.data
/* 1672 */                                 ,scope: this
/* 1673 */                                 ,success: this.onSubmitSuccess
/* 1674 */                             });
/* 1675 */                         }
/* 1676 */                     },{
/* 1677 */                         text: L.Cancel
/* 1678 */                         ,iconCls:'icon-cancel'
/* 1679 */                         ,handler: this.destroy
/* 1680 */                         ,scope: this
/* 1681 */                     }
/* 1682 */                 ]
/* 1683 */             }
/* 1684 */ 
/* 1685 */             ,listeners: {
/* 1686 */                 afterrender: function(){
/* 1687 */                     // var f = this.down('form');
/* 1688 */                     // App.focusFirstField(f);
/* 1689 */                 }
/* 1690 */             }
/* 1691 */         });
/* 1692 */ 
/* 1693 */         this.callParent(arguments);
/* 1694 */     }
/* 1695 */     ,onSubmitSuccess: function(r, e){
/* 1696 */         this.fireEvent('passwordchanged');
/* 1697 */         this.destroy();
/* 1698 */     }
/* 1699 */ }
/* 1700 */ );

/* CB.UsersGroups.js */

/* 1701 */ 

;
/* CB.Account.js */

/* 1    */ Ext.namespace('CB');
/* 2    */ 
/* 3    */ Ext.define('CB.Account', {
/* 4    */     extend: 'Ext.Window'
/* 5    */ 
/* 6    */     ,alias: 'CBAccount'
/* 7    */ 
/* 8    */     ,xtype: 'CBAccount'
/* 9    */ 
/* 10   */     ,title: L.Account
/* 11   */     ,border: false
/* 12   */     ,closable: true
/* 13   */     ,minimizable: true
/* 14   */     ,width: 850
/* 15   */     ,height: 600
/* 16   */ 
/* 17   */     ,initComponent: function() {
/* 18   */ 
/* 19   */         this.menu = new Ext.Panel({
/* 20   */             region: 'west'
/* 21   */             ,collapsible: false
/* 22   */             ,width: 130
/* 23   */             ,animCollapse: false
/* 24   */             ,plain: true
/* 25   */             ,cls: 'account-menu'
/* 26   */             ,style: 'border-right: 1px solid #cacaca'
/* 27   */             ,border: false
/* 28   */             ,layout: 'anchor'
/* 29   */             ,defaults: {
/* 30   */                 enableToggle: true
/* 31   */                 ,toggleGroup: 'menu'
/* 32   */                 ,allowDepress: false
/* 33   */                 ,scope: this
/* 34   */                 ,handler: this.onMenuButtonClick
/* 35   */             }
/* 36   */             ,items:[
/* 37   */                 {
/* 38   */                     xtype: 'button'
/* 39   */                     ,html: L.Profile
/* 40   */                     ,anchor: '100%'
/* 41   */                     ,pressed: true
/* 42   */                 },{
/* 43   */                     xtype: 'button'
/* 44   */                     ,html: L.Security
/* 45   */                     ,anchor: '100%'
/* 46   */                 }
/* 47   */             ]
/* 48   */         });
/* 49   */ 
/* 50   */         this.cards = new Ext.Panel({

/* CB.Account.js */

/* 51   */             region: 'center'
/* 52   */             ,border: false
/* 53   */             ,tbarCssClass: 'x-panel-gray'
/* 54   */             ,layout:'card'
/* 55   */             ,activeItem: 0
/* 56   */             ,items: [{
/* 57   */                 xtype: 'CBProfileForm'
/* 58   */                 ,listeners: {
/* 59   */                     scope: this
/* 60   */                     ,change: function(){ /*this.autoCloseTask.delay(1000*60*5);/**/ }
/* 61   */                 }
/* 62   */             },{
/* 63   */                 xtype: 'CBSecurityForm'
/* 64   */                 ,listeners: {
/* 65   */                     scope: this
/* 66   */                     ,change: function(){ /*this.autoCloseTask.delay(1000*60*5);/**/ }
/* 67   */                 }
/* 68   */             }
/* 69   */             ]
/* 70   */             ,deferredRender: true
/* 71   */         });
/* 72   */ 
/* 73   */         Ext.apply(
/* 74   */             this
/* 75   */             ,{
/* 76   */                 iconCls: 'icon-user-' + App.loginData.sex
/* 77   */                 ,layout: 'border'
/* 78   */                 ,items:[
/* 79   */                     this.menu
/* 80   */                     ,this.cards
/* 81   */ 
/* 82   */                 ]
/* 83   */             }
/* 84   */         );
/* 85   */ 
/* 86   */         this.callParent(arguments);
/* 87   */ 
/* 88   */         /* autoclose form if no activity in 5 minutes */
/* 89   */         // this.autoCloseTask = new Ext.util.DelayedTask(this.destroy, this);
/* 90   */         // this.autoCloseTask.delay(1000*60*5);
/* 91   */ 
/* 92   */         CB_User.getAccountData( this.onGetData, this);
/* 93   */ 
/* 94   */     }
/* 95   */ 
/* 96   */     ,onGetData: function(r, e){
/* 97   */         if(!r) {
/* 98   */             return;
/* 99   */         }
/* 100  */ 

/* CB.Account.js */

/* 101  */         if(r.success !== true) {
/* 102  */             if(r.verify === true){
/* 103  */                 // show verification form
/* 104  */                 var w = new CB.VerifyPassword({
/* 105  */                     listeners:{
/* 106  */                         scope: this
/* 107  */                         ,beforeclose: function(cmp){
/* 108  */                             if(w.success !== true) {
/* 109  */                                 this.destroy();
/* 110  */                             } else {
/* 111  */                                 CB_User.getAccountData( this.onGetData, this);
/* 112  */                             }
/* 113  */                         }
/* 114  */                     }
/* 115  */                 });
/* 116  */                 w.show();
/* 117  */             } else {
/* 118  */                 this.destroy();
/* 119  */             }
/* 120  */             return;
/* 121  */         }
/* 122  */         this.cards.items.getAt(0).loadData(r.profile);
/* 123  */         this.cards.items.getAt(1).loadData(r.security);
/* 124  */     }
/* 125  */ 
/* 126  */     ,onMenuButtonClick: function(b, e){
/* 127  */         this.cards.getLayout().setActiveItem(this.menu.items.indexOf(b));
/* 128  */         // this.autoCloseTask.delay(1000*60*5);
/* 129  */     }
/* 130  */ }
/* 131  */ );
/* 132  */ 
/* 133  */ Ext.define('CB.ProfileForm', {
/* 134  */     extend: 'Ext.form.FormPanel'
/* 135  */     ,alias: 'widget.CBProfileForm'
/* 136  */ 
/* 137  */     ,border: false
/* 138  */     ,fileUpload: true
/* 139  */     ,scrollable: true
/* 140  */     ,bodyPadding: 10
/* 141  */     ,data: {}
/* 142  */     ,initComponent: function(){
/* 143  */ 
/* 144  */         this.data = this.config.data;
/* 145  */ 
/* 146  */         this.objectsStore = new CB.DB.ObjectsStore();
/* 147  */ 
/* 148  */         this.photoField = new Ext.form.field.File({
/* 149  */             cls: 'fl'
/* 150  */             ,style: 'position:absolute;width:1px;height:1px;opacity:0;top:-100px'

/* CB.Account.js */

/* 151  */             ,buttonOnly: true
/* 152  */             ,name: 'photo'
/* 153  */             ,border: false
/* 154  */             ,listeners:{
/* 155  */                 scope: this
/* 156  */                 ,afterrender: function(c){
/* 157  */                     c.button.fileInputEl.on('change', this.onPhotoChanged, this);
/* 158  */                 }
/* 159  */             }
/* 160  */         });
/* 161  */ 
/* 162  */         this.photoView = new Ext.DataView({
/* 163  */             tpl: ['<tpl for="."><div>'
/* 164  */                 ,'<img width="70" height="70" class="user-photo-field2 click icon-user70-{sex}" src="' + App.config.photoPath + '{id}.png?{[ Ext.Date.format(new Date(), "His") ]}">'
/* 165  */                 ,'</div>'
/* 166  */                 ,'<div><a name="change" class="click">'+L.Change+'</a> &nbsp; <a name="remove" class="click">'+L.Delete+'</a></div>'
/* 167  */                 ,'</tpl>'
/* 168  */             ]
/* 169  */             ,data: [{}]
/* 170  */             ,itemSelector:'.none'
/* 171  */             ,autoHeight: true
/* 172  */             ,listeners:{
/* 173  */                 scope: this
/* 174  */                 ,containerclick: this.onPhotoContainerClick
/* 175  */             }
/* 176  */         });
/* 177  */ 
/* 178  */         var fields = [
/* 179  */             {
/* 180  */                 xtype: 'textfield'
/* 181  */                 ,name: 'first_name'
/* 182  */                 ,fieldLabel: L.FirstName
/* 183  */                 ,listeners: {scope: this, change: this.onChange }
/* 184  */             },{
/* 185  */                 xtype: 'textfield'
/* 186  */                 ,name: 'last_name'
/* 187  */                 ,fieldLabel: L.LastName
/* 188  */                 ,listeners: {scope: this, change: this.onChange }
/* 189  */             },{
/* 190  */                 xtype: 'combo'
/* 191  */                 ,name: 'sex'
/* 192  */                 ,hiddenName: 'sex'
/* 193  */                 ,fieldLabel: L.Gender
/* 194  */                 ,queryMode: 'local'
/* 195  */                 ,triggerAction: 'all'
/* 196  */                 ,editable: false
/* 197  */                 ,store: CB.DB.sex
/* 198  */                 ,valueField: 'id'
/* 199  */                 ,displayField: 'name'
/* 200  */             },{

/* CB.Account.js */

/* 201  */                 xtype: 'textfield'
/* 202  */                 ,name: 'email'
/* 203  */                 ,fieldLabel: L.PrimaryEmail
/* 204  */                 ,vtype: 'email'
/* 205  */             },{
/* 206  */                 xtype: 'combo'
/* 207  */                 ,name: 'country_code'
/* 208  */                 ,hiddenName: 'country_code'
/* 209  */                 ,fieldLabel: L.Country
/* 210  */                 ,queryMode: 'local'
/* 211  */                 ,triggerAction: 'all'
/* 212  */                 ,editable: true
/* 213  */                 ,forceSelection: true
/* 214  */                 ,typeAhead: true
/* 215  */                 ,store: CB.DB.phone_codes
/* 216  */                 ,valueField: 'code'
/* 217  */                 ,displayField: 'name'
/* 218  */                 ,value: null
/* 219  */                 ,width: 250
/* 220  */             },{
/* 221  */                 xtype: 'textfield'
/* 222  */                 ,name: 'phone'
/* 223  */                 ,fieldLabel: L.Phone
/* 224  */                 ,allowDecimals: false
/* 225  */                 ,allowNegative: false
/* 226  */             },{
/* 227  */ 
/* 228  */                 html: '&nbsp;'
/* 229  */                 ,border: false
/* 230  */             },{
/* 231  */                 xtype: 'combo'
/* 232  */                 ,name: 'language_id'
/* 233  */                 ,hiddenName: 'language_id'
/* 234  */                 ,fieldLabel: L.Language
/* 235  */                 ,queryMode: 'local'
/* 236  */                 ,triggerAction: 'all'
/* 237  */                 ,editable: true
/* 238  */                 ,forceSelection: true
/* 239  */                 ,typeAhead: true
/* 240  */                 ,store: CB.DB.languages
/* 241  */                 ,valueField: 'id'
/* 242  */                 ,displayField: 'name'
/* 243  */             },{
/* 244  */                 xtype: 'combo'
/* 245  */                 ,name: 'timezone'
/* 246  */                 ,hiddenName: 'timezone'
/* 247  */                 ,fieldLabel: L.Timezone
/* 248  */                 ,queryMode: 'local'
/* 249  */                 ,triggerAction: 'all'
/* 250  */                 ,editable: false

/* CB.Account.js */

/* 251  */                 ,store: CB.DB.timezones
/* 252  */                 ,valueField: 'id'
/* 253  */                 ,displayField: 'caption'
/* 254  */                 ,value: null
/* 255  */             },{
/* 256  */                 xtype: 'combo'
/* 257  */                 ,name: 'short_date_format'
/* 258  */                 ,hiddenName: 'short_date_format'
/* 259  */                 ,fieldLabel: L.DateFormat
/* 260  */                 ,queryMode: 'local'
/* 261  */                 ,triggerAction: 'all'
/* 262  */                 ,editable: false
/* 263  */                 ,store: CB.DB.shortDateFormats
/* 264  */                 ,valueField: 'id'
/* 265  */                 ,displayField: 'name'
/* 266  */                 ,value: null
/* 267  */             }
/* 268  */         ];
/* 269  */ 
/* 270  */         if(App.loginData.id != this.data.id) {
/* 271  */             if(App.loginData.admin || App.loginData.cfg.canAddUsers) {
/* 272  */                 fields.push({
/* 273  */                     xtype: 'checkbox'
/* 274  */                     ,name: 'canAddUsers'
/* 275  */                     ,fieldLabel: Ext.valueFrom(L.CanAddUsers, 'Can add users')
/* 276  */                     ,inputValue: true
/* 277  */                 });
/* 278  */             }
/* 279  */             if(App.loginData.admin || App.loginData.cfg.canAddGroups) {
/* 280  */                 fields.push({
/* 281  */                     xtype: 'checkbox'
/* 282  */                     ,name: 'canAddGroups'
/* 283  */                     ,fieldLabel: Ext.valueFrom(L.CanAddGroups, 'Can add groups')
/* 284  */                     ,inputValue: true
/* 285  */                 });
/* 286  */             }
/* 287  */         }
/* 288  */ 
/* 289  */         Ext.apply(this,{
/* 290  */             items:[{
/* 291  */                 border: false
/* 292  */                 ,layout: 'hbox'
/* 293  */                 ,layoutConfig: {
/* 294  */                     align: 'stretchmax'
/* 295  */                 }
/* 296  */                 ,autoHeight: true
/* 297  */                 ,items: [{
/* 298  */                     autoHeight: true
/* 299  */                     ,border: false
/* 300  */                     ,width: 500

/* CB.Account.js */

/* 301  */                     ,items: {
/* 302  */                             xtype: 'fieldset'
/* 303  */                             ,padding: 10
/* 304  */                             ,autoHeight: true
/* 305  */                             ,labelWidth: 140
/* 306  */                             ,defaults:{
/* 307  */                                 width: 250
/* 308  */                                 ,matchFieldWidth: false
/* 309  */                                 ,listeners: {
/* 310  */                                     scope: this
/* 311  */                                     ,change: this.onChange
/* 312  */                                     ,select: this.onChange
/* 313  */                                 }
/* 314  */                             }
/* 315  */                             ,items: fields
/* 316  */                         }
/* 317  */                 },{
/* 318  */                     xtype: 'panel'
/* 319  */                     ,width: 300
/* 320  */                     ,padding: 45
/* 321  */                     ,border: false
/* 322  */                     ,items: [
/* 323  */                         this.photoField
/* 324  */                         ,this.photoView
/* 325  */                     ]
/* 326  */                 }
/* 327  */ 
/* 328  */                 ]
/* 329  */             },{
/* 330  */                 xtype: 'CBVerticalEditGrid'
/* 331  */                 ,refOwner: this
/* 332  */                 ,width: 500
/* 333  */                 ,style: 'margin-bottom: 50px'
/* 334  */                 ,autoHeight: true
/* 335  */                 ,viewConfig: {
/* 336  */                     forceFit: true
/* 337  */                     ,autoFill: true
/* 338  */                 }
/* 339  */ 
/* 340  */             }
/* 341  */             ]
/* 342  */             ,buttonAlign: 'left'
/* 343  */             ,buttons: [{
/* 344  */                 text: L.Save
/* 345  */                 ,scope: this
/* 346  */                 ,handler: this.onSaveClick
/* 347  */             },{
/* 348  */                 text: L.Reset
/* 349  */                 ,scope: this
/* 350  */                 ,handler: this.onResetClick

/* CB.Account.js */

/* 351  */             }
/* 352  */ 
/* 353  */             ]
/* 354  */             ,listeners: {
/* 355  */                 scope: this
/* 356  */                 ,afterrender: this.onAfterRender
/* 357  */                 ,change: this.onChange
/* 358  */             }
/* 359  */         });
/* 360  */ 
/* 361  */         this.callParent(arguments);
/* 362  */ 
/* 363  */         this.grid = this.items.getAt(1);
/* 364  */ 
/* 365  */         if(CB.DB.countries.getCount() === 0) {
/* 366  */             CB.DB.countries.load();
/* 367  */         }
/* 368  */ 
/* 369  */         if(CB.DB.timezones.getCount() === 0) {
/* 370  */             CB.DB.timezones.load();
/* 371  */         }
/* 372  */ 
/* 373  */         this.enableBubble(['verify']);
/* 374  */     }
/* 375  */     ,onAfterRender: function(cmp){
/* 376  */ 
/* 377  */     }
/* 378  */ 
/* 379  */     ,loadData: function(data){
/* 380  */         if(!Ext.isEmpty(data.assocObjects) && Ext.isArray(data.assocObjects)) {
/* 381  */             for (var i = 0; i < data.assocObjects.length; i++) {
/* 382  */                 data.assocObjects[i].iconCls = getItemIcon(data.assocObjects[i]);
/* 383  */             }
/* 384  */             this.objectsStore.loadData(data.assocObjects);
/* 385  */             delete data.assocObjects;
/* 386  */         }
/* 387  */ 
/* 388  */         if(Ext.isDefined(data.language_id)) {
/* 389  */             data.language_id = parseInt(data.language_id, 10);
/* 390  */         }
/* 391  */ 
/* 392  */         this.data = data;
/* 393  */         this.getForm().setValues(data);
/* 394  */         this.grid.reload();
/* 395  */         this.photoView.update([{id: this.data.id }]);
/* 396  */         // this.syncSize();
/* 397  */         this.setDirty(false);
/* 398  */     }
/* 399  */ 
/* 400  */     ,onPhotoContainerClick: function(cmp, e, eOpts){ //w, idx, el, ev

/* CB.Account.js */

/* 401  */         if(!e) {
/* 402  */             return;
/* 403  */         }
/* 404  */         var target = e.getTarget();
/* 405  */ 
/* 406  */         if((target.localName == "img") || (target.name === 'change')) {
/* 407  */             return this.photoField.button.fileInputEl.dom.click();
/* 408  */         }
/* 409  */ 
/* 410  */         if (target.name === 'remove') {
/* 411  */             return this.onPhotoRemoveClick();
/* 412  */         }
/* 413  */     }
/* 414  */ 
/* 415  */     ,onPhotoChanged: function(ev, el, o){
/* 416  */         if(Ext.isEmpty(this.photoField.getValue())) {
/* 417  */             return;
/* 418  */         }
/* 419  */         var form = this.getForm();
/* 420  */ 
/* 421  */         form.api = {submit: CB_User.uploadPhoto};
/* 422  */ 
/* 423  */         form.submit({
/* 424  */             clientValidation: false
/* 425  */             ,params: {
/* 426  */                     id: this.data.id
/* 427  */                 }
/* 428  */             ,scope: this
/* 429  */             ,success: function(form, action) {
/* 430  */                 this.photoField.reset();
/* 431  */                 this.photoField.button.fileInputEl.on('change', this.onPhotoChanged, this);
/* 432  */                 this.photoView.update([{id: this.data.id }]);
/* 433  */             }
/* 434  */             ,failure: App.formSubmitFailure
/* 435  */         });
/* 436  */     }
/* 437  */ 
/* 438  */     ,onPhotoRemoveClick: function(){
/* 439  */         Ext.Msg.confirm(
/* 440  */             L.Confirmation
/* 441  */             ,L.RemovePhotoConfirm
/* 442  */             ,function(b, e){
/* 443  */                 if(b === 'yes'){
/* 444  */                     CB_User.removePhoto( { id: this.data.id }, function(){
/* 445  */                         this.photoView.update([{id: this.data.id }]);
/* 446  */                     }, this);
/* 447  */                 }
/* 448  */             }
/* 449  */             ,this
/* 450  */         );

/* CB.Account.js */

/* 451  */     }
/* 452  */ 
/* 453  */     ,onSaveClick: function(){
/* 454  */         delete this.data.canAddUsers;
/* 455  */         delete this.data.canAddGroups;
/* 456  */         Ext.apply(this.data, this.getForm().getValues());
/* 457  */ 
/* 458  */         if (this.data.phone == this.down('[name="phone"]').emptyText) {
/* 459  */             this.data.phone = null;
/* 460  */         }
/* 461  */ 
/* 462  */         this.grid.readValues();
/* 463  */         CB_User.saveProfileData(this.data, this.onSaveProcess, this);
/* 464  */     }
/* 465  */ 
/* 466  */     ,onSaveProcess: function(r, e){
/* 467  */         if (!r) {
/* 468  */             return;
/* 469  */         }
/* 470  */ 
/* 471  */         if(r.success !== true) {
/* 472  */             if(r.verify) {
/* 473  */                 this.fireEvent('verify', this);
/* 474  */             } else if(!Ext.isEmpty(r.msg)) {
/* 475  */                 Ext.Msg.alert(L.Error, r.msg);
/* 476  */             }
/* 477  */             return;
/* 478  */         }
/* 479  */         this.setDirty(false);
/* 480  */         this.fireEvent('savesuccess', this, e);
/* 481  */         App.fireEvent('userprofileupdated', this.data, e);
/* 482  */     }
/* 483  */ 
/* 484  */     ,onResetClick: function(){
/* 485  */         this.getForm().reset();
/* 486  */         this.loadData(this.data);
/* 487  */     }
/* 488  */ 
/* 489  */     ,onChange: function(){
/* 490  */         this.setDirty(true);
/* 491  */     }
/* 492  */ 
/* 493  */     ,setDirty: function(dirty){
/* 494  */         this._isDirty = (dirty !== false);
/* 495  */ 
/* 496  */         var bbar = this.dockedItems.getAt(0);
/* 497  */         bbar.items.getAt(0).setDisabled(!this._isDirty);
/* 498  */         bbar.items.getAt(1).setDisabled(!this._isDirty);
/* 499  */     }
/* 500  */ });

/* CB.Account.js */

/* 501  */ 
/* 502  */ 
/* 503  */ Ext.define('CB.SecurityForm', {
/* 504  */     extend: 'Ext.form.FormPanel'
/* 505  */     ,alias: 'widget.CBSecurityForm'
/* 506  */ 
/* 507  */     ,border: false
/* 508  */     ,scrollable: true
/* 509  */ 
/* 510  */     ,initComponent: function(){
/* 511  */ 
/* 512  */         Ext.apply(this,{
/* 513  */             padding: 10
/* 514  */             ,items: [{
/* 515  */                 title: L.Password
/* 516  */                 ,componentCls: 'x-panel-header panel-header-nobg block-header'
/* 517  */                 ,border: false
/* 518  */                 ,defaults: {style: 'padding: 5px 25px'}
/* 519  */                 ,items: [
/* 520  */                     {
/* 521  */                         xtype: 'displayfield'
/* 522  */                         ,name: 'passwordchanged'
/* 523  */                         ,value: L.PasswordNeverChanged
/* 524  */                     },{
/* 525  */                         xtype: 'displayfield'
/* 526  */                         ,frame: false
/* 527  */                         ,value: '<a>'+L.ChangePassword+'</a>'
/* 528  */                         ,listeners: {
/* 529  */                             scope: this
/* 530  */                             ,afterrender: function(cmp, eOpts) {
/* 531  */                                 cmp.getEl().on('click', this.onChangePasswordClick, this);
/* 532  */                             }
/* 533  */                         }
/* 534  */                     }
/* 535  */                 ]
/* 536  */             },{
/* 537  */                 title: L.RecoveryOptions
/* 538  */                 ,componentCls: 'x-panel-header panel-header-nobg block-header'
/* 539  */                 ,border: false
/* 540  */                 ,style: 'margin-top: 20px'
/* 541  */                 ,defaults: {style: 'padding: 5px 0 15px 25px', border: false}
/* 542  */                 ,items: [
/* 543  */                     {
/* 544  */                         xtype: 'fieldcontainer'
/* 545  */                         ,layout: 'hbox'
/* 546  */                         ,hidden: true
/* 547  */                         ,items: [{
/* 548  */                             xtype: 'checkbox'
/* 549  */                             ,name: 'recovery_mobile'
/* 550  */                             ,listeners: {

/* CB.Account.js */

/* 551  */                                 scope: this
/* 552  */                                 // ,check: this.onCheckboxCheck
/* 553  */                             }
/* 554  */                         },{
/* 555  */                             xtype: 'displayfield'
/* 556  */                             ,cls: 'fwB'
/* 557  */                             ,value: L.Mobile
/* 558  */                         }
/* 559  */                         ]
/* 560  */                     },{
/* 561  */                         hidden: true
/* 562  */                         ,name: 'recovery_mobile_panel'
/* 563  */                         ,layout: 'form'
/* 564  */                         ,defaults: {
/* 565  */                             width: 200
/* 566  */                             ,listeners: {
/* 567  */                                 scope: this
/* 568  */                                 ,change: this.onChange
/* 569  */                                 ,select: this.onChange
/* 570  */                             }
/* 571  */                         }
/* 572  */                         ,items: [{
/* 573  */                             xtype: 'combo'
/* 574  */                             ,name: 'country_code'
/* 575  */                             ,hiddenName: 'country_code'
/* 576  */                             ,fieldLabel: L.Country
/* 577  */                             ,queryMode: 'local'
/* 578  */                             ,triggerAction: 'all'
/* 579  */                             ,editable: true
/* 580  */                             ,forceSelection: true
/* 581  */                             ,typeAhead: true
/* 582  */                             ,store: CB.DB.phone_codes
/* 583  */                             ,valueField: 'code'
/* 584  */                             ,displayField: 'name'
/* 585  */                         },{
/* 586  */                             xtype: 'numberfield'
/* 587  */                             ,name: 'phone_number'
/* 588  */                             ,fieldLabel: L.PhoneNumber
/* 589  */                             ,allowDecimals: false
/* 590  */                             ,allowNegative: false
/* 591  */                         }
/* 592  */                         ]
/* 593  */                     },{
/* 594  */                         xtype: 'fieldcontainer'
/* 595  */                         ,layout: 'hbox'
/* 596  */                         ,items: [{
/* 597  */                             xtype: 'checkbox'
/* 598  */                             ,name: 'recovery_email'
/* 599  */                             ,boxLabel: L.Email
/* 600  */                             ,inputValue: 1

/* CB.Account.js */

/* 601  */                             ,listeners: {
/* 602  */                                 scope: this
/* 603  */                                 ,change: this.onCheckboxCheck
/* 604  */                             }
/* 605  */                         }
/* 606  */                         ]
/* 607  */                     },{
/* 608  */                         hidden: true
/* 609  */                         ,name: 'recovery_email_panel'
/* 610  */                         ,layout: 'form'
/* 611  */                         ,width: 350
/* 612  */                         ,items: [{
/* 613  */                             xtype: 'textfield'
/* 614  */                             ,fieldLabel: 'Email'
/* 615  */                             ,name: 'email'
/* 616  */                             ,vtype: 'email'
/* 617  */                             ,width: 200
/* 618  */                             ,listeners: {
/* 619  */                                 scope: this
/* 620  */                                 ,change: this.onChange
/* 621  */                             }
/* 622  */                         }
/* 623  */                         ]
/* 624  */                     },{
/* 625  */                         xtype: 'fieldcontainer'
/* 626  */                         ,layout: 'hbox'
/* 627  */                         ,hidden: true
/* 628  */                         ,items: [{
/* 629  */                             xtype: 'checkbox'
/* 630  */                             ,name: 'recovery_question'
/* 631  */                             ,listeners: {
/* 632  */                                 scope: this
/* 633  */                                 // ,check: this.onCheckboxCheck
/* 634  */                             }
/* 635  */                         },{
/* 636  */                             xtype: 'displayfield'
/* 637  */                             ,cls: 'fwB'
/* 638  */                             ,value: L.SecurityQuestion
/* 639  */                         }
/* 640  */                         ]
/* 641  */                     },{
/* 642  */                         hidden: true
/* 643  */                         ,name: 'recovery_question_panel'
/* 644  */                         ,layout: 'form'
/* 645  */                         ,defaults: {
/* 646  */                             width: 200
/* 647  */                             ,listeners: {
/* 648  */                                 scope: this
/* 649  */                                 ,change: this.onChange
/* 650  */                                 ,select: this.onChange

/* CB.Account.js */

/* 651  */                             }
/* 652  */                         }
/* 653  */                         ,items: [{
/* 654  */                             xtype: 'combo'
/* 655  */                             ,store: CB.DB.securityQuestions
/* 656  */                             ,name: 'question_idx'
/* 657  */                             ,hiddenName: 'question_idx'
/* 658  */                             ,fieldLabel: L.Question
/* 659  */                             ,queryMode: 'local'
/* 660  */                             ,triggerAction: 'all'
/* 661  */                             ,editable: false
/* 662  */                             ,forceSelection: true
/* 663  */                             //,typeAhead: true
/* 664  */                             ,valueField: 'id'
/* 665  */                             ,displayField: 'text'
/* 666  */                             ,width: 400
/* 667  */                         },{
/* 668  */                             xtype: 'textfield'
/* 669  */                             ,fieldLabel: L.Answer
/* 670  */                             ,name: 'answer'
/* 671  */                             //,inputType: 'password'
/* 672  */                         }
/* 673  */                         ]
/* 674  */                     }
/* 675  */                 ]
/* 676  */                 ,buttonAlign: 'left'
/* 677  */                 ,buttons: [{
/* 678  */                     text: L.Save
/* 679  */                     ,itemId: 'saveButton'
/* 680  */                     ,style: 'margin-left: 18px'
/* 681  */                     ,disabled: true
/* 682  */                     ,scope: this
/* 683  */                     ,handler: this.onSaveClick
/* 684  */                 },{
/* 685  */                     text: L.Reset
/* 686  */                     ,itemId: 'resetButton'
/* 687  */                     ,disabled: true
/* 688  */                     ,scope: this
/* 689  */                     ,handler: this.onResetClick
/* 690  */                 }
/* 691  */ 
/* 692  */                 ]
/* 693  */             },{
/* 694  */                 title: L.TSV
/* 695  */                 ,componentCls: 'x-panel-header panel-header-nobg block-header'
/* 696  */                 ,border: false
/* 697  */                 ,style: 'margin-top: 20px'
/* 698  */                 ,defaults: {style: 'padding: 5px 25px', border: false}
/* 699  */                 ,buttonAlign: 'left'
/* 700  */                 ,items: [{

/* CB.Account.js */

/* 701  */                     xtype: 'displayfield'
/* 702  */                     ,itemId: 'tsvStatusText'
/* 703  */                     ,value: L.Status +': <span class="cG">'+ L.Disabled + '</span>'
/* 704  */                 }]
/* 705  */ 
/* 706  */                 ,dockedItems: [
/* 707  */                     {
/* 708  */                         xtype: 'toolbar'
/* 709  */                         ,dock: 'bottom'
/* 710  */                         ,ui: 'footer'
/* 711  */                         ,layout: {
/* 712  */                             type: 'hbox'
/* 713  */                             ,pack: 'left'
/* 714  */                         }
/* 715  */                         //,defaults: {minWidth: minButtonWidth}
/* 716  */                         ,items: [
/* 717  */                             {
/* 718  */                                 xtype: 'displayfield'
/* 719  */                                 ,value: '<a>'+L.Enable+'</a>'
/* 720  */                                 ,itemId: 'btnEnableTsv'
/* 721  */                                 ,width: 50
/* 722  */                                 ,listeners:{
/* 723  */                                     scope: this
/* 724  */                                     ,afterrender: function(c){
/* 725  */                                         c.getEl().on('click', this.enableTSV, this);
/* 726  */                                     }
/* 727  */                                 }
/* 728  */                             },{
/* 729  */                                 xtype: 'displayfield'
/* 730  */                                 ,value: '<a>'+L.Disable+'</a>'
/* 731  */                                 ,itemId: 'btnDisableTsv'
/* 732  */                                 ,width: 50
/* 733  */                                 ,listeners:{
/* 734  */                                     scope: this
/* 735  */                                     ,afterrender: function(c){
/* 736  */                                         c.getEl().on('click', this.disableTSV, this);
/* 737  */                                     }
/* 738  */                                 }
/* 739  */                                 ,hidden: true
/* 740  */                             },{
/* 741  */                                 xtype: 'displayfield'
/* 742  */                                 ,value: '<a>'+L.Change+'</a>'
/* 743  */                                 ,itemId: 'btnChangeTsv'
/* 744  */                                 ,width: 50
/* 745  */                                 ,listeners:{
/* 746  */                                     scope: this
/* 747  */                                     ,afterrender: function(c){
/* 748  */                                         c.getEl().on('click', this.enableTSV, this);
/* 749  */                                     }
/* 750  */                                 }

/* CB.Account.js */

/* 751  */                                 ,hidden: true
/* 752  */                             }
/* 753  */                        ]
/* 754  */                     }
/* 755  */                 ]
/* 756  */             }
/* 757  */             ]
/* 758  */         });
/* 759  */ 
/* 760  */         this.callParent(arguments);
/* 761  */ 
/* 762  */         this.saveButton = this.down('#saveButton');
/* 763  */         this.resetButton = this.down('#resetButton');
/* 764  */     }
/* 765  */ 
/* 766  */     ,loadData: function( data ){
/* 767  */         // this.items.getAt(0).update(data)
/* 768  */         this.data = data;
/* 769  */         if(!Ext.isEmpty(data.password_change)) {
/* 770  */             this.down('[name="passwordchanged"]').setValue(L.PasswordChanged+': '+data.password_change);
/* 771  */         }
/* 772  */ 
/* 773  */         var cb = this.items.getAt(1).items.first().items.first();
/* 774  */         cb.setValue(data.recovery_mobile === true);
/* 775  */         this.down('[name="country_code"]').setValue( Ext.valueFrom(data.country_code, null) );
/* 776  */         this.down('[name="phone_number"]').setValue( Ext.valueFrom(data.phone_number, null) );
/* 777  */ 
/* 778  */         cb = this.items.getAt(1).items.getAt(2).items.first();
/* 779  */         cb.setValue(data.recovery_email === true);
/* 780  */         this.down('[name="email"]').setValue( Ext.valueFrom(data.email, null) );
/* 781  */ 
/* 782  */         cb = this.items.getAt(1).items.getAt(4).items.first();
/* 783  */         cb.setValue(data.recovery_question === true);
/* 784  */         this.down('[name="question_idx"]').setValue( Ext.valueFrom(data.question_idx, null) );
/* 785  */         this.down('[name="answer"]').setValue( Ext.valueFrom(data.answer, null) );
/* 786  */ 
/* 787  */         this.updateTSVStatus();
/* 788  */ 
/* 789  */         this.setDirty(false);
/* 790  */     }
/* 791  */ 
/* 792  */     ,onCheckboxCheck: function(cb){
/* 793  */         var p = this.down('[name="' + cb.name + '_panel"]');
/* 794  */         p.setVisible(cb.checked);
/* 795  */         //this.data[cb.name] = cb.checked;
/* 796  */         this.setDirty();
/* 797  */     }
/* 798  */ 
/* 799  */     ,onChangePasswordClick: function(b){
/* 800  */         var pw = new CB.ChangePasswordWindow({

/* CB.Account.js */

/* 801  */             data: {id: App.loginData.id}
/* 802  */             ,listeners: {
/* 803  */                 scope: this
/* 804  */                 ,passwordchanged: this.onPasswordChanged
/* 805  */             }
/* 806  */         });
/* 807  */         pw.show();
/* 808  */     }
/* 809  */ 
/* 810  */     ,onPasswordChanged: function(w){
/* 811  */         this.down('[name="passwordchanged"]').setValue(L.PasswordChanged+': '+L.today);
/* 812  */     }
/* 813  */ 
/* 814  */     ,onSaveClick: function(){
/* 815  */         cb = this.items.getAt(1).items.first().items.first();
/* 816  */         this.data.recovery_mobile = cb.getValue();
/* 817  */         this.data.country_code = this.down('[name="country_code"]').getValue();
/* 818  */         this.data.phone_number = this.down('[name="phone_number"]').getValue();
/* 819  */ 
/* 820  */         cb = this.items.getAt(1).items.getAt(2).items.first();
/* 821  */         this.data.recovery_email = cb.getValue();
/* 822  */         this.data.email = this.down('[name="email"]').getValue();
/* 823  */ 
/* 824  */         cb = this.items.getAt(1).items.getAt(4).items.first();
/* 825  */         this.data.recovery_question = cb.getValue();
/* 826  */         this.data.question_idx = this.down('[name="question_idx"]').getValue();
/* 827  */         this.data.answer = this.down('[name="answer"]').getValue();
/* 828  */ 
/* 829  */         CB_User.saveSecurityData(this.data, this.onSaveProcess, this);
/* 830  */     }
/* 831  */ 
/* 832  */     ,onSaveProcess: function(r, e){
/* 833  */         if(!r || (r.success !== true)) {
/* 834  */             return;
/* 835  */         }
/* 836  */ 
/* 837  */         this.setDirty(false);
/* 838  */     }
/* 839  */ 
/* 840  */     ,onResetClick: function(){
/* 841  */         this.loadData(this.data);
/* 842  */     }
/* 843  */ 
/* 844  */     ,onChange: function(){
/* 845  */         this.setDirty(true);
/* 846  */     }
/* 847  */ 
/* 848  */     ,setDirty: function(dirty){
/* 849  */         this._isDirty = (dirty !== false);
/* 850  */         this.saveButton.setDisabled(!this._isDirty);

/* CB.Account.js */

/* 851  */         this.resetButton.setDisabled(!this._isDirty);
/* 852  */     }
/* 853  */ 
/* 854  */     ,enableTSV: function(b, e){
/* 855  */         var data = Ext.valueFrom(this.data.TSV, {});
/* 856  */ 
/* 857  */         data.country_code = Ext.valueFrom(data.country_code, this.data.country_code );
/* 858  */         data.phone_number = Ext.valueFrom(data.phone_number, this.data.phone_number );
/* 859  */ 
/* 860  */         var w = new CB.TSVWindow({
/* 861  */             data: data
/* 862  */             ,listeners:{
/* 863  */                 scope: this
/* 864  */                 ,tsvchange: this.onTSVChange
/* 865  */             }
/* 866  */         });
/* 867  */ 
/* 868  */         w.show();
/* 869  */     }
/* 870  */ 
/* 871  */     ,onTSVChange: function(w, tsv){
/* 872  */         if(Ext.isEmpty(this.data['TSV'])) {
/* 873  */             this.data.TSV = {};
/* 874  */         }
/* 875  */         this.data.TSV.method = tsv;
/* 876  */         this.updateTSVStatus();
/* 877  */     }
/* 878  */ 
/* 879  */     ,updateTSVStatus: function(){
/* 880  */         var text = '<span class="cG">'+ L.Disabled + '</span>';
/* 881  */ 
/* 882  */         if(Ext.isEmpty(this.data.TSV)) {
/* 883  */             this.data.TSV = {};
/* 884  */         }
/* 885  */ 
/* 886  */         switch(this.data.TSV.method){
/* 887  */             case 'ga':
/* 888  */                 text = 'Mobile Google Aplication';
/* 889  */                 break;
/* 890  */ 
/* 891  */             case 'sms':
/* 892  */                 text = 'Google Authentication using SMS';
/* 893  */                 break;
/* 894  */ 
/* 895  */             case 'ybk':
/* 896  */                 text = 'Yubikey';
/* 897  */                 break;
/* 898  */         }
/* 899  */ 
/* 900  */         this.down('#tsvStatusText').setValue(L.Status+': ' + text);

/* CB.Account.js */

/* 901  */         this.down('#btnEnableTsv').setVisible(Ext.isEmpty(this.data.TSV.method));
/* 902  */         this.down('#btnDisableTsv').setVisible(!Ext.isEmpty(this.data.TSV.method));
/* 903  */         this.down('#btnChangeTsv').setVisible(!Ext.isEmpty(this.data.TSV.method));
/* 904  */     }
/* 905  */ 
/* 906  */     ,disableTSV: function(){
/* 907  */         Ext.Msg.show({
/* 908  */             title: L.Confirm
/* 909  */             ,message: L.DisableTSVConfirmation
/* 910  */             ,buttons: Ext.Msg.YESNO
/* 911  */             ,icon: Ext.window.MessageBox.INFO
/* 912  */             ,scope: this
/* 913  */             ,fn: function(b, e){
/* 914  */                 if(b === 'yes'){
/* 915  */                     CB_User.disableTSV(
/* 916  */                         function(r, e){
/* 917  */                             if(r && (r.success === true)) {
/* 918  */                                 delete this.data.TSV.method;
/* 919  */                                 this.updateTSVStatus();
/* 920  */                             }
/* 921  */                         }
/* 922  */                         ,this
/* 923  */                     );
/* 924  */                 }
/* 925  */             }
/* 926  */         });
/* 927  */     }
/* 928  */ });
/* 929  */ 
/* 930  */ 
/* 931  */ /*
/* 932  *| 2-step verification
/* 933  *| Keep the bad guys out of your account by using both your password and your phone.
/* 934  *|  */
/* 935  */ Ext.define('CB.TSVWindow', {
/* 936  */     extend: 'Ext.Window'
/* 937  */     ,modal: true
/* 938  */     ,title: L.TSV
/* 939  */     ,autoWidth: true
/* 940  */     ,autoHeight: true
/* 941  */     ,border: false
/* 942  */     ,iconCls: 'icon-key'
/* 943  */     ,layout: 'card'
/* 944  */ 
/* 945  */     ,initComponent: function() {
/* 946  */         Ext.apply(this, {
/* 947  */             activeItem: 0
/* 948  */             ,bodyBorder: false
/* 949  */             ,items: [{
/* 950  */                 items: [{

/* CB.Account.js */

/* 951  */                     xtype: 'displayfield'
/* 952  */                     ,style: 'padding: 10px; font-size: 20px;'
/* 953  */                     ,value: 'Select authentication method'
/* 954  */                 },{
/* 955  */                     xtype: 'displayfield'
/* 956  */                     ,value: '<a class="click" name="ga">Google Authenticator</a>'
/* 957  */                     ,style: 'padding:10px'
/* 958  */                     ,name: 'ga'
/* 959  */                     ,listeners:{
/* 960  */                         scope: this
/* 961  */                         ,afterrender: function(c){
/* 962  */                             c.getEl().on('click', this.onTSVMechanismClick, this);
/* 963  */                         }
/* 964  */                     }
/* 965  */                 // },{
/* 966  */                 //     xtype: 'button'
/* 967  */                 //     ,html: '<a>Sms message</a>'
/* 968  */                 //     ,style: 'padding:10px'
/* 969  */                 //     ,name: 'sms'
/* 970  */                 //     ,scope: this
/* 971  */                 //     ,handler: this.onTSVMechanismClick
/* 972  */                 },{
/* 973  */                     xtype: 'displayfield'
/* 974  */                     ,value: '<a class="click" name="ybk">Yubikey</a>'
/* 975  */                     ,style: 'padding:10px'
/* 976  */                     ,name: 'ybk'
/* 977  */                     ,listeners:{
/* 978  */                         scope: this
/* 979  */                         ,afterrender: function(c){
/* 980  */                             c.getEl().on('click', this.onTSVMechanismClick, this);
/* 981  */                         }
/* 982  */                         ,loaded: this.onViewLoaded
/* 983  */                         ,verifyandsave: this.onVerifyAndSave
/* 984  */                     }
/* 985  */                 }
/* 986  */                 ]
/* 987  */             },{
/* 988  */                 xtype: 'TSVgaForm'
/* 989  */                 ,itemId: 'ga'
/* 990  */                 ,listeners: {
/* 991  */                     scope: this
/* 992  */                     ,loaded: this.onViewLoaded
/* 993  */                     ,verifyandsave: this.onVerifyAndSave
/* 994  */                 }
/* 995  */             // },{
/* 996  */             //     xtype: 'TSVsmsForm'
/* 997  */             },{
/* 998  */                 xtype: 'TSVybkForm'
/* 999  */                 ,itemId: 'ybk'
/* 1000 */                 ,listeners: {

/* CB.Account.js */

/* 1001 */                     scope: this
/* 1002 */                     ,loaded: this.onViewLoaded
/* 1003 */                     ,verifyandsave: this.onVerifyAndSave
/* 1004 */                 }
/* 1005 */             }]
/* 1006 */         });
/* 1007 */ 
/* 1008 */         this.callParent(arguments);
/* 1009 */ 
/* 1010 */         this.form = this.down('form');
/* 1011 */     }
/* 1012 */ 
/* 1013 */     ,onTSVMechanismClick: function(ev, el){
/* 1014 */         this.TSVmethod = el.name;
/* 1015 */ 
/* 1016 */         this.getLayout().setActiveItem(el.name);
/* 1017 */         this.getLayout().activeItem.prepareInterface(this.data);
/* 1018 */     }
/* 1019 */ 
/* 1020 */     ,onVerifyAndSave: function(data){
/* 1021 */         this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 1022 */         CB_User.enableTSV({
/* 1023 */             method: this.TSVmethod
/* 1024 */             ,data: data
/* 1025 */         }, this.processEnableTSV, this);
/* 1026 */     }
/* 1027 */ 
/* 1028 */     ,onYubikeySaveClick: function(){
/* 1029 */         this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 1030 */         CB_User.TSVSaveYubikey( { code: this.getLayout().activeItem.buttons[1].getValue() }, this.processEnableTSV, this);
/* 1031 */     }
/* 1032 */ 
/* 1033 */     ,processEnableTSV: function(r, e){
/* 1034 */         this.getEl().unmask();
/* 1035 */ 
/* 1036 */         if(r && (r.success === true)) {
/* 1037 */             this.fireEvent('tsvchange', this, this.TSVmethod);
/* 1038 */             this.destroy();
/* 1039 */         } else {
/* 1040 */             this.getLayout().activeItem.showError(r.msg);
/* 1041 */             // this.syncSize();
/* 1042 */         }
/* 1043 */     }
/* 1044 */ 
/* 1045 */     ,onViewLoaded: function() {
/* 1046 */         this.center();
/* 1047 */         this.center();
/* 1048 */ 
/* 1049 */     }
/* 1050 */ }

/* CB.Account.js */

/* 1051 */ );
/* 1052 */ 
/* 1053 */ 
/* 1054 */ Ext.define('CB.TSVgaForm', {
/* 1055 */     extend: 'Ext.Panel'
/* 1056 */     ,alias: 'widget.TSVgaForm'
/* 1057 */ 
/* 1058 */     ,style: 'background-color: #fff'
/* 1059 */     ,width:500
/* 1060 */ 
/* 1061 */     ,initComponent: function(){
/* 1062 */         Ext.apply(this, {
/* 1063 */             bodyStyle: 'padding: 10px'
/* 1064 */             ,items: [{
/* 1065 */                 xtype: 'displayfield'
/* 1066 */                 ,style: 'font-size: 20px; padding-bottom:15px'
/* 1067 */                 ,value: 'Set up Google Authenticator'
/* 1068 */             },{
/* 1069 */                 autoHeight: true
/* 1070 */                 ,autoWidth:true
/* 1071 */                 ,border: false
/* 1072 */                 ,tpl: [
/* 1073 */                     '<tpl for="data">'
/* 1074 */                     ,'<p class="fwB">Install the Google Authenticator app for your phone</p>'
/* 1075 */                     ,'<ol class="ol p10">'
/* 1076 */                     ,'<li> On your phone, open a web browser. </li>'
/* 1077 */                     ,'<li> Go to <span class="fwB">m.google.com/authenticator</span>. </li>'
/* 1078 */                     ,'<li> Download and install the Google Authenticator application. </li>'
/* 1079 */                     ,'</ol>'
/* 1080 */                     ,'<p class="fwB"> Now open and configure Google Authenticator. </p>'
/* 1081 */                     ,'<br /><p>Scan following Barcode to register the application automaticly:<p>'
/* 1082 */                     ,'<div class="taC p10">'
/* 1083 */                     ,'    <img src="{url}" width="100" height="100" />'
/* 1084 */                     ,'</div>'
/* 1085 */                     ,'<p> Or use the following secret key to register the aplication manually:</p>'
/* 1086 */                     ,'<div class="taC p10 bgcY">'
/* 1087 */                     ,'    <div class="fs14 fwB" dir="ltr">{sd}</div>'
/* 1088 */                     ,'    <div class="fs10 cG">Spaces don\'t matter.</div>'
/* 1089 */                     ,'</div><br />'
/* 1090 */                     ,'<p> Once you manually entered and saved your key, enter the 6-digit verification code generated<br /> by the Authenticator app. </p>'
/* 1091 */                     ,'</tpl>'
/* 1092 */                 ]
/* 1093 */                 ,data: {}
/* 1094 */             }
/* 1095 */             ]
/* 1096 */             ,buttonAlign: 'left'
/* 1097 */             ,buttons: [{
/* 1098 */                     xtype: 'displayfield'
/* 1099 */                     ,value: 'Code: '
/* 1100 */                 },{

/* CB.Account.js */

/* 1101 */                     xtype: 'textfield'
/* 1102 */                     ,name: 'code'
/* 1103 */                     ,width: '50'
/* 1104 */                     ,enableKeyEvents: true
/* 1105 */                     ,listeners: {
/* 1106 */                         scope: this
/* 1107 */                         ,keyup: function(field, e){
/* 1108 */                             this.down('[name="btnVS"]').setDisabled(Ext.isEmpty(field.getValue()));
/* 1109 */                         }
/* 1110 */                     }
/* 1111 */                 },{
/* 1112 */                     xtype: 'button'
/* 1113 */                     ,text: L.VerifyAndSave
/* 1114 */                     ,name: 'btnVS'
/* 1115 */                     ,disabled: true
/* 1116 */                     ,scope: this
/* 1117 */                     ,handler: this.onVerifyAndSaveClick
/* 1118 */                 },{
/* 1119 */                     xtype: 'displayfield'
/* 1120 */                     ,style: 'padding: 0 0 0 20px'
/* 1121 */                     ,name: 'errorMsg'
/* 1122 */                     ,cls: 'cR'
/* 1123 */                     ,value: ''
/* 1124 */                     ,hidden: true
/* 1125 */                 }
/* 1126 */             ]
/* 1127 */         });
/* 1128 */ 
/* 1129 */         this.callParent(arguments);
/* 1130 */         // this.enableBubble(['verifyandsave']);
/* 1131 */     }
/* 1132 */ 
/* 1133 */     ,prepareInterface: function(data){
/* 1134 */         this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 1135 */         CB_User.getTSVTemplateData('ga', this.processGetTSVTemplateData, this);
/* 1136 */     }
/* 1137 */ 
/* 1138 */     ,processGetTSVTemplateData: function(r, e){
/* 1139 */         this.getEl().unmask();
/* 1140 */ 
/* 1141 */         if(!r || (r.success !== true)) {
/* 1142 */             return;
/* 1143 */         }
/* 1144 */ 
/* 1145 */         var p = this.items.getAt(1);
/* 1146 */ 
/* 1147 */         p.data = r;
/* 1148 */         p.update(r);
/* 1149 */ 
/* 1150 */         this.down('[name="code"]').focus();

/* CB.Account.js */

/* 1151 */         this.fireEvent('loaded', this, e);
/* 1152 */     }
/* 1153 */ 
/* 1154 */     ,onVerifyAndSaveClick: function(){
/* 1155 */         this.fireEvent('verifyandsave', {
/* 1156 */             code: this.down('[name="code"]').getValue()
/* 1157 */         });
/* 1158 */     }
/* 1159 */ 
/* 1160 */     ,showError: function(msg){
/* 1161 */         if(Ext.isEmpty(msg)) {
/* 1162 */             msg = 'The code is incorrect. Try again';
/* 1163 */         }
/* 1164 */         msg = '<img class="icon icon-exclamation fl" style="margin-right: 15px" src="/css/i/s.gif">'+ msg;
/* 1165 */ 
/* 1166 */         var t = this.down('[name="errorMsg"]');
/* 1167 */         t.setValue(msg);
/* 1168 */         t.setVisible(true);
/* 1169 */     }
/* 1170 */ });
/* 1171 */ 
/* 1172 */ Ext.define('CB.TSVsmsForm', {
/* 1173 */     extend: 'Ext.form.FormPanel'
/* 1174 */     ,monitorValid: true
/* 1175 */     ,autoWidth: true
/* 1176 */     ,autoHeight: true
/* 1177 */     ,labelWidth: 120
/* 1178 */     ,buttonAlign: 'left'
/* 1179 */     ,cls: 'bgcW'
/* 1180 */ 
/* 1181 */     ,initComponent: function(){
/* 1182 */         Ext.apply(this, {
/* 1183 */             items: [{
/* 1184 */                 xtype: 'displayfield'
/* 1185 */                 ,hideLabel: true
/* 1186 */                 ,value: L.SpecifyPhone
/* 1187 */                 ,style: 'font-size: 20px'
/* 1188 */             },{
/* 1189 */                 xtype: 'displayfield'
/* 1190 */                 ,hideLabel: true
/* 1191 */                 ,value: L.SpecifyPhoneMsg
/* 1192 */                 ,style: 'padding: 15px 0'
/* 1193 */             },{
/* 1194 */                 xtype: 'combo'
/* 1195 */                 ,name: 'country_code'
/* 1196 */                 ,hiddenName: 'country_code'
/* 1197 */                 ,fieldLabel: L.Country
/* 1198 */                 ,queryMode: 'local'
/* 1199 */                 ,triggerAction: 'all'
/* 1200 */                 ,editable: true

/* CB.Account.js */

/* 1201 */                 ,forceSelection: true
/* 1202 */                 ,typeAhead: true
/* 1203 */                 ,store: CB.DB.phone_codes
/* 1204 */                 ,valueField: 'code'
/* 1205 */                 ,displayField: 'name'
/* 1206 */                 ,width: 200
/* 1207 */                 ,allowBlank: false
/* 1208 */             },{
/* 1209 */                 xtype: 'numberfield'
/* 1210 */                 ,name: 'phone_number'
/* 1211 */                 ,fieldLabel: L.PhoneNumber
/* 1212 */                 ,allowDecimals: false
/* 1213 */                 ,allowNegative: false
/* 1214 */                 ,width: 200
/* 1215 */                 ,allowBlank: false
/* 1216 */             }
/* 1217 */             ]
/* 1218 */             ,buttons: [{
/* 1219 */                 text: L.Verify
/* 1220 */                 ,formBind: true
/* 1221 */                 ,scope: this
/* 1222 */                 ,handler: this.onVerifyPhoneClick
/* 1223 */             },{
/* 1224 */                 text: L.SendCode
/* 1225 */                 ,type: 'submit'
/* 1226 */                 ,formBind: true
/* 1227 */                 ,scope: this
/* 1228 */                 ,handler: this.onSendCodeClick
/* 1229 */             }
/* 1230 */             ]
/* 1231 */         });
/* 1232 */ 
/* 1233 */         this.callParent(arguments);
/* 1234 */     }
/* 1235 */     ,prepareInterface: function(data){
/* 1236 */         this.getForm().setValues(data);
/* 1237 */         // this.syncSize();
/* 1238 */     }
/* 1239 */     ,onVerifyPhoneClick: function(){
/* 1240 */         if(this.form.getForm().isValid()){
/* 1241 */             this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 1242 */             CB_User.verifyPhone(
/* 1243 */                 this.form.getForm().getValues()
/* 1244 */                 ,this.processPhoneVerification
/* 1245 */                 ,this
/* 1246 */             );
/* 1247 */         }
/* 1248 */     }
/* 1249 */     ,onSendCodeClick: function(b, e){
/* 1250 */     }

/* CB.Account.js */

/* 1251 */     ,processPhoneVerification: function(r, e){
/* 1252 */         this.getEl().unmask();
/* 1253 */     }
/* 1254 */     ,showError: function(msg){}
/* 1255 */ 
/* 1256 */ });
/* 1257 */ 
/* 1258 */ Ext.define('CB.TSVybkForm', {
/* 1259 */     extend: 'Ext.form.FormPanel'
/* 1260 */     ,alias: 'widget.TSVybkForm'
/* 1261 */     ,xtype: 'CBTSVybkForm'
/* 1262 */ 
/* 1263 */     ,monitorValid: true
/* 1264 */     ,autoWidth: true
/* 1265 */     ,autoHeight: true
/* 1266 */     ,labelWidth: 70
/* 1267 */     ,buttonAlign: 'left'
/* 1268 */     ,cls: 'bgcW'
/* 1269 */ 
/* 1270 */     ,initComponent: function(){
/* 1271 */         Ext.apply(this, {
/* 1272 */             bodyStyle: 'padding: 10px'
/* 1273 */             ,items: [{
/* 1274 */                 xtype: 'displayfield'
/* 1275 */                 ,hideLabel: true
/* 1276 */                 ,style: 'font-size: 20px; padding-bottom:15px'
/* 1277 */                 ,value: 'Set up Yubikey Authenticator'
/* 1278 */             },{
/* 1279 */                 autoHeight: true
/* 1280 */                 ,autoWidth:true
/* 1281 */                 ,border: false
/* 1282 */                 ,style: 'font-size: 13px; padding-bottom:15px'
/* 1283 */                 ,tpl: ['<tpl for=".">'
/* 1284 */                     ,'<ol>'
/* 1285 */                     ,'<li>1. Insert your YubiKey into a USB port.</li>'
/* 1286 */                     ,'<li>2. Enter your email in the email field. </li>'
/* 1287 */                     ,'<li>3. Select/Click the Code field, and touch the YubiKey button. </li>'
/* 1288 */                     ,'<li>4. Click Save.</li>'
/* 1289 */                     ,'</ol>'
/* 1290 */                     ,'<br />'
/* 1291 */                     ,'<p>Note that it may take up until 5 minutes until all validation servers know about your newly generated client.</p>'
/* 1292 */                     ,'</tpl>'
/* 1293 */                 ]
/* 1294 */                 ,data: {}
/* 1295 */             },{
/* 1296 */                 xtype: 'textfield'
/* 1297 */                 ,vtype: 'email'
/* 1298 */                 ,name: 'email'
/* 1299 */                 ,fieldLabel: L.Email
/* 1300 */                 ,width: 250

/* CB.Account.js */

/* 1301 */                 ,allowBlank: false
/* 1302 */                 ,value: App.loginData.email
/* 1303 */             },{
/* 1304 */                 xtype: 'textfield'
/* 1305 */                 ,name: 'code'
/* 1306 */                 ,fieldLabel: L.Code
/* 1307 */                 ,width: 250
/* 1308 */                 ,allowBlank: false
/* 1309 */             },{
/* 1310 */                 xtype: 'displayfield'
/* 1311 */                 ,style: 'padding: 0 0 0 20px; display: block'
/* 1312 */                 ,cls: 'cR'
/* 1313 */                 ,value: ''
/* 1314 */                 ,hideLabel: true
/* 1315 */                 ,hidden: true
/* 1316 */             }
/* 1317 */             ]
/* 1318 */             ,buttonAlign: 'left'
/* 1319 */             ,buttons: [{
/* 1320 */                     xtype: 'button'
/* 1321 */                     ,text: L.Save
/* 1322 */                     ,formBind: true
/* 1323 */                     ,scope: this
/* 1324 */                     ,handler: this.onSaveClick
/* 1325 */                 }
/* 1326 */             ]
/* 1327 */         });
/* 1328 */ 
/* 1329 */         this.callParent(arguments);
/* 1330 */         // this.enableBubble(['verifyandsave']);
/* 1331 */     }
/* 1332 */     ,prepareInterface: function(data){
/* 1333 */         this.getForm().setValues(data);
/* 1334 */     }
/* 1335 */     ,onSaveClick: function(){
/* 1336 */         this.fireEvent('verifyandsave', this.getForm().getValues());
/* 1337 */     }
/* 1338 */     ,showError: function(msg){
/* 1339 */         if(Ext.isEmpty(msg)) {
/* 1340 */             msg = 'The code is incorrect. Try again';
/* 1341 */         }
/* 1342 */         msg = '<img class="icon icon-exclamation fl" style="margin-right: 15px" src="/css/i/s.gif">'+ msg;
/* 1343 */         this.items.getAt(4).setValue(msg);
/* 1344 */         this.items.getAt(4).setVisible(true);
/* 1345 */     }
/* 1346 */ });
/* 1347 */ 

;
/* Validators.js */

/* 1  */ Ext.namespace('CB.Validators');
/* 2  */ 
/* 3  */ CB.Validators.json = function (jsonString){
/* 4  */     try {
/* 5  */         // var o = Ext.decode(jsonString);
/* 6  */         var o = JSON.parse(jsonString);
/* 7  */ 
/* 8  */         // Handle non-exception-throwing cases:
/* 9  */         // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,
/* 10 */         // but... JSON.parse(null) returns 'null', and typeof null === "object",
/* 11 */         // so we must check for that, too.
/* 12 */         if (o && typeof o === "object" && o !== null) {
/* 13 */             return true;
/* 14 */         }
/* 15 */     }
/* 16 */     catch (e) { }
/* 17 */ 
/* 18 */     return false;
/* 19 */ };
/* 20 */ 
/* 21 */ CB.Validators.geoPoint = function (value){
/* 22 */     // Point must be in 'lat,​ lon' or 'x y'
/* 23 */     var re = /^-?\d+\.?\d*\,-?\d+\.?\d*$/;
/* 24 */ 
/* 25 */     rez = !Ext.isEmpty(re.exec(value));
/* 26 */ 
/* 27 */     //check if in correct diapazon
/* 28 */     if(rez) {
/* 29 */         var a = value.split(',')
/* 30 */             ,y = parseFloat(a[0])
/* 31 */             ,x = parseFloat(a[1]);
/* 32 */ 
/* 33 */         rez = ((y >= -90) && (y <= 90) && (x >= -180) && (x <= 180));
/* 34 */     }
/* 35 */ 
/* 36 */     return rez;
/* 37 */ };
/* 38 */ 

;
/* Util.js */

/* 1   */ // JavaScript Document
/* 2   */ function isEmptyObject(ob){
/* 3   */     for(var i in ob){ if(ob.hasOwnProperty(i)){return false;}}
/* 4   */     return true;
/* 5   */ }
/* 6   */ 
/* 7   */ /**
/* 8   *|  * create date object from iso string
/* 9   *|  * @param  varchar date_string [description]
/* 10  *|  * @return Date | null
/* 11  *|  */
/* 12  */ function date_ISO_to_date(date_string){
/* 13  */     if(Ext.isEmpty(date_string)) {
/* 14  */         return null;
/* 15  */     }
/* 16  */ 
/* 17  */     if(Ext.isDate(date_string)) {
/* 18  */         return date_string;
/* 19  */     }
/* 20  */ 
/* 21  */     var d = Date.parse(date_string);
/* 22  */     if(Ext.isEmpty(d)) {
/* 23  */         return null;
/* 24  */     }
/* 25  */ 
/* 26  */     return new Date(d);
/* 27  */ }
/* 28  */ 
/* 29  */ function date_ISO_to_local_date(date_string){
/* 30  */     var d = date_ISO_to_date(date_string);
/* 31  */ 
/* 32  */     if(Ext.isEmpty(d)) {
/* 33  */         return null;
/* 34  */     }
/* 35  */ 
/* 36  */     if(!isNaN(App.loginData.cfg.gmt_offset)) {
/* 37  */         var localOffset = -d.getTimezoneOffset();
/* 38  */         var userOffset = App.loginData.cfg.gmt_offset;
/* 39  */ 
/* 40  */         if(localOffset != userOffset) {
/* 41  */             // decrease date with local offset and encrease with user offset
/* 42  */             d = Ext.Date.add(d, Ext.Date.MINUTE, -localOffset + userOffset);
/* 43  */         }
/* 44  */     }
/* 45  */ 
/* 46  */     return d;
/* 47  */ }
/* 48  */ 
/* 49  */ function date_local_to_ISO_string(date) {
/* 50  */     if(!Ext.isDate(date)) {

/* Util.js */

/* 51  */         return null;
/* 52  */     }
/* 53  */ 
/* 54  */     if(!isNaN(App.loginData.cfg.gmt_offset)) {
/* 55  */         var localOffset = - date.getTimezoneOffset();
/* 56  */         var userOffset = Ext.Number.from(App.loginData.cfg.gmt_offset, 0);
/* 57  */ 
/* 58  */         if(localOffset != userOffset) {
/* 59  */             // decrease date with user offset and encrease with local offset
/* 60  */             date = Ext.Date.add(date, Ext.Date.MINUTE, localOffset - userOffset);
/* 61  */         }
/* 62  */     }
/* 63  */ 
/* 64  */     return date.toISOString();
/* 65  */ }
/* 66  */ 
/* 67  */ function getUserDisplayName(withEmail) {
/* 68  */     var rez = App.loginData.first_name + ' ' + App.loginData.last_name;
/* 69  */ 
/* 70  */     rez = rez.trim();
/* 71  */ 
/* 72  */     if (Ext.isEmpty(rez)) {
/* 73  */         rez = App.loginData.name;
/* 74  */     }
/* 75  */ 
/* 76  */     if ((withEmail === true) && (!Ext.isEmpty(App.loginData.email))) {
/* 77  */         rez += "\n(" + App.loginData.email + ")";
/* 78  */     }
/* 79  */ 
/* 80  */     return rez;
/* 81  */ }
/* 82  */ 
/* 83  */ function displayDateTime(date){
/* 84  */     var d = date_ISO_to_local_date(date);
/* 85  */     if(Ext.isDate(d)) {
/* 86  */         return Ext.Date.format(d, App.longDateFormat + ' ' + App.timeFormat);
/* 87  */     }
/* 88  */     return '';
/* 89  */ }
/* 90  */ /**
/* 91  *|  * Convert a date to a date string with time filled with 0
/* 92  *|  * // 2014-02-17T00:00:00Z
/* 93  *|  * @param  date
/* 94  *|  * @return varchar
/* 95  *|  */
/* 96  */ function dateToDateString(date) {
/* 97  */     var rez = null;
/* 98  */     if(Ext.isPrimitive(date)) {
/* 99  */         rez = date;
/* 100 */     } else if(Ext.isDate(date)) {

/* Util.js */

/* 101 */         rez = Ext.Date.format(date, 'Y-m-d') + 'T00:00:00Z';
/* 102 */     }
/* 103 */     return rez;
/* 104 */ }
/* 105 */ 
/* 106 */ function getItemIcon(d){
/* 107 */     var rez = Ext.valueFrom(d.iconCls, '');
/* 108 */ 
/* 109 */     if(!rez && Ext.isEmpty(d.template_id) && d['type'] == 2){
/* 110 */         rez = 'icon-shortcut';
/* 111 */     }
/* 112 */ 
/* 113 */     if (Ext.isEmpty(rez)) {
/* 114 */         rez = CB.DB.templates.getIcon(d.template_id);
/* 115 */ 
/* 116 */         var type = CB.DB.templates.getType(d.template_id);
/* 117 */ 
/* 118 */         switch(type){
/* 119 */             case 'file':
/* 120 */                 rez = getFileIcon(d['name']);
/* 121 */                 break;
/* 122 */ 
/* 123 */             case 'task':
/* 124 */                 if(d['task_status'] == 3) {
/* 125 */                     rez = 'icon-task-completed';
/* 126 */                 }
/* 127 */         }
/* 128 */     }
/* 129 */ 
/* 130 */     return rez;
/* 131 */ }
/* 132 */ 
/* 133 */ /**
/* 134 *|  * detect the editor group used for given filename from App.config['files.edit']
/* 135 *|  * @param  varchar filename
/* 136 *|  * @return varchar | false
/* 137 *|  */
/* 138 */ function detectFileEditor(filename) {
/* 139 */     var rez = false;
/* 140 */ 
/* 141 */     if(Ext.isEmpty(App.config['files.edit'])) {
/* 142 */         return rez;
/* 143 */     }
/* 144 */ 
/* 145 */     var extension = getFileExtension(filename);
/* 146 */ 
/* 147 */     Ext.iterate(
/* 148 */         App.config['files.edit']
/* 149 */         ,function(k, v, o) {
/* 150 */             if(v.indexOf(extension) > -1) {

/* Util.js */

/* 151 */                 rez = k;
/* 152 */                 return false;
/* 153 */             }
/* 154 */         }
/* 155 */         ,this
/* 156 */     );
/* 157 */ 
/* 158 */     return rez;
/* 159 */ }
/* 160 */ 
/* 161 */ function getFileExtension(filename)
/* 162 */ {
/* 163 */     var ext = String(filename).split('.');
/* 164 */     if (ext.length < 2) {
/* 165 */         return '';
/* 166 */     }
/* 167 */     ext = ext.pop();
/* 168 */     ext = ext.trim();
/* 169 */ 
/* 170 */     return ext.toLowerCase();
/* 171 */ }
/* 172 */ 
/* 173 */ function getFileIcon(filename){
/* 174 */     if(Ext.isEmpty(filename)) {
/* 175 */         return 'file-';
/* 176 */     }
/* 177 */ 
/* 178 */     var a = String(filename).split('.');
/* 179 */ 
/* 180 */     if(a.length <2 ) {
/* 181 */         return 'file-';
/* 182 */     }
/* 183 */ 
/* 184 */     return 'file- file-'+ Ext.util.Format.lowercase(a.pop());
/* 185 */ }
/* 186 */ 
/* 187 */ function getFileIcon32(filename){
/* 188 */     if(Ext.isEmpty(filename)) {
/* 189 */         return 'file-unknown32';
/* 190 */     }
/* 191 */ 
/* 192 */     var a = String(filename).split('.');
/* 193 */ 
/* 194 */     if(a.length <2 ) {
/* 195 */         return 'file-unknown32';
/* 196 */     }
/* 197 */ 
/* 198 */     return 'file-unknown32 file-'+ Ext.util.Format.lowercase(a.pop())+'32';
/* 199 */ }
/* 200 */ 

/* Util.js */

/* 201 */ function getStoreTitles(v){
/* 202 */     if(Ext.isEmpty(v)) {
/* 203 */         return '';
/* 204 */     }
/* 205 */     var ids = String(v).split(',')
/* 206 */         ,texts = [];
/* 207 */ 
/* 208 */     Ext.each(
/* 209 */         ids
/* 210 */         ,function(id){
/* 211 */             var r = this.findRecord('id', parseInt(id, 10), 0, false, false, true);
/* 212 */             if(r) {
/* 213 */                 texts.push(Ext.valueFrom(r.data.title, r.data.name));
/* 214 */             }
/* 215 */         }
/* 216 */         ,this
/* 217 */     );
/* 218 */ 
/* 219 */     return texts.join(',');
/* 220 */ }
/* 221 */ function getStoreNames(v){
/* 222 */     if(Ext.isEmpty(v)) {
/* 223 */         return '';
/* 224 */     }
/* 225 */ 
/* 226 */     var ids = String(v).split(',')
/* 227 */         ,texts = [];
/* 228 */ 
/* 229 */     Ext.each(
/* 230 */         ids
/* 231 */         ,function(id){
/* 232 */             var idx = this.findExact('id', parseInt(id, 10));
/* 233 */ 
/* 234 */             if(idx < 0) {
/* 235 */                 idx = this.findExact('id', String(id));
/* 236 */             }
/* 237 */ 
/* 238 */             if(idx >= 0) {
/* 239 */                 var d = this.getAt(idx).data;
/* 240 */                 texts.push(d.name);
/* 241 */             }
/* 242 */         }
/* 243 */         ,this
/* 244 */     );
/* 245 */ 
/* 246 */     return texts.join(',');
/* 247 */ }
/* 248 */ 
/* 249 */ function toNumericArray(v, delimiter){
/* 250 */     if (Ext.isEmpty(v)) {

/* Util.js */

/* 251 */         return [];
/* 252 */     }
/* 253 */ 
/* 254 */     if(Ext.isEmpty(delimiter)) {
/* 255 */         delimiter = ',';
/* 256 */     }
/* 257 */ 
/* 258 */     if (!Ext.isArray(v)) {
/* 259 */         v = String(v).split(delimiter);
/* 260 */     }
/* 261 */ 
/* 262 */     var rez = [];
/* 263 */ 
/* 264 */     for (var i = 0; i < v.length; i++) {
/* 265 */         var w = String(v[i]).trim()
/* 266 */             ,iw = parseInt(w, 10);
/* 267 */ 
/* 268 */         if (iw == w) {
/* 269 */             rez.push(iw);
/* 270 */         } else if(!isNaN(iw)){
/* 271 */             rez.push(parseFloat(w));
/* 272 */         }
/* 273 */     }
/* 274 */ 
/* 275 */     return rez;
/* 276 */ }
/* 277 */ 
/* 278 */ setsGetIntersection = function(set1, set2){
/* 279 */     var i, rez = [];
/* 280 */     if(Ext.isEmpty(set1) || Ext.isEmpty(set2)) {
/* 281 */         return rez;
/* 282 */     }
/* 283 */ 
/* 284 */     if(!Ext.isArray(set1)) {
/* 285 */         set1 = String(set1).split(',');
/* 286 */     }
/* 287 */ 
/* 288 */     if(!Ext.isArray(set2)) {
/* 289 */         set2 = String(set2).split(',');
/* 290 */     }
/* 291 */ 
/* 292 */     for (i = 0; i < set1.length; i++) {
/* 293 */         set1[i] = String(set1[i]);
/* 294 */     }
/* 295 */ 
/* 296 */     for (i = 0; i < set2.length; i++) {
/* 297 */         set2[i] = String(set2[i]);
/* 298 */     }
/* 299 */ 
/* 300 */     for (i = 0; i < set1.length; i++) {

/* Util.js */

/* 301 */         if( (set2.indexOf(set1[i]) >= 0) && (rez.indexOf(set1[i]) < 0 )) {
/* 302 */             rez.push(set1[i]);
/* 303 */         }
/* 304 */     }
/* 305 */ 
/* 306 */     for (i = 0; i < set2.length; i++) {
/* 307 */         if( (set1.indexOf(set2[i]) >= 0) && (rez.indexOf(set2[i]) < 0 )) {
/* 308 */             rez.push(set2[i]);
/* 309 */         }
/* 310 */     }
/* 311 */ 
/* 312 */     return rez;
/* 313 */ };
/* 314 */ 
/* 315 */ setsHaveIntersection = function(set1, set2){
/* 316 */     return !Ext.isEmpty(setsGetIntersection(set1, set2));
/* 317 */ };
/* 318 */ 
/* 319 */ function getMenuUserItems(handler, scope, excludeId){
/* 320 */     var rez = [];
/* 321 */     excludeId = parseInt(excludeId, 10);
/* 322 */ 
/* 323 */     CB.DB.usersStore.each(
/* 324 */         function(u) {
/* 325 */             var d = u.data;
/* 326 */             if(d.id !== excludeId) {
/* 327 */                 rez.push({
/* 328 */                     text: d.name
/* 329 */                     ,iconCls: d.iconCls
/* 330 */                     ,userId: d.id
/* 331 */                     ,handler: handler
/* 332 */                     ,scope: scope
/* 333 */                 });
/* 334 */             }
/* 335 */         }
/* 336 */         ,this
/* 337 */     );
/* 338 */ 
/* 339 */     return rez;
/* 340 */ }
/* 341 */ 
/* 342 */ function updateMenu(menuButton, menuConfig, handler, scope){
/* 343 */     if(Ext.isEmpty(menuButton)) {
/* 344 */         return;
/* 345 */     }
/* 346 */ 
/* 347 */     menuButton.menu.removeAll();
/* 348 */     menuConfig = String(menuConfig).split(',');
/* 349 */ 
/* 350 */     var menu = [];

/* Util.js */

/* 351 */ 
/* 352 */     for (var i = 0; i < menuConfig.length; i++) {
/* 353 */         switch (menuConfig[i]) {
/* 354 */             case 'case': break;
/* 355 */             case 'task': break;
/* 356 */             case 'event': break;
/* 357 */             case 'folder': break;
/* 358 */ 
/* 359 */             case '-': //obsolete for upgraded menu model
/* 360 */                 menu.push('-');
/* 361 */                 break;
/* 362 */ 
/* 363 */             default:
/* 364 */                 var idx = CB.DB.templates.findExact('id', parseInt(menuConfig[i], 10));
/* 365 */                 if(idx >= 0){
/* 366 */                     var tr = CB.DB.templates.getAt(idx)
/* 367 */                         ,title = Ext.valueFrom(tr.get('title'), tr.get('name'));
/* 368 */ 
/* 369 */                     if(['-', '- Menu separator -'].indexOf(title) >= 0) {
/* 370 */                         menu.push('-');
/* 371 */                     } else {
/* 372 */                         var data = {
/* 373 */                                 template_id: tr.get('id')
/* 374 */                                 // ,type: tr.get('type')
/* 375 */                                 ,title: title
/* 376 */                         };
/* 377 */ 
/* 378 */                         if(!Ext.isEmpty(tr.get('cfg').data)) {
/* 379 */                             Ext.apply(data, tr.get('cfg').data);
/* 380 */                         }
/* 381 */ 
/* 382 */                         menu.push({
/* 383 */                             text: title
/* 384 */                             ,iconCls: tr.get('iconCls')
/* 385 */                             ,scope: scope
/* 386 */                             ,handler: handler
/* 387 */                             ,data: data
/* 388 */                         });
/* 389 */                     }
/* 390 */                 }
/* 391 */             break;
/* 392 */ 
/* 393 */         }
/* 394 */     }
/* 395 */ 
/* 396 */     for(i = 0; i < menu.length; i++) {
/* 397 */         menuButton.menu.add(menu[i]);
/* 398 */     }
/* 399 */ }
/* 400 */ 

/* Util.js */

/* 401 */ /**
/* 402 *|  * equivalent function to php html_entity_decode
/* 403 *|  * @param  varchar str
/* 404 *|  * @return varchar
/* 405 *|  */
/* 406 */ function htmlEntityDecode(str){
/* 407 */     if(Ext.isEmpty(str)) {
/* 408 */         return '';
/* 409 */     }
/* 410 */ 
/* 411 */     if(!document.hedTA) {
/* 412 */         document.hedTA = document.createElement("textarea");
/* 413 */     }
/* 414 */ 
/* 415 */     var ta = document.hedTA;
/* 416 */ 
/* 417 */     ta.innerHTML = str.replace(/</g,"&lt;").replace(/>/g,"&gt;");
/* 418 */ 
/* 419 */     return ta.value;
/* 420 */ }
/* 421 */ 

;
/* CB.DD.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ /**
/* 4   *|  * Base class for processing Drag and Drop requests
/* 5   *|  *
/* 6   *|  * On this class relies other Drang and Drop plugins created for Panels, Trees, Grids etc.
/* 7   *|  * An instance of CB.DD class will be crated in App.DD
/* 8   *|  *     and any component would be able to listen to DD events through this instance.
/* 9   *|  */
/* 10  */ 
/* 11  */ Ext.define('CB.DD', {
/* 12  */     extend: 'Ext.util.Observable'
/* 13  */     ,data: []
/* 14  */     ,action: 'copy' // copy / move / shortcut
/* 15  */ 
/* 16  */     ,constructor: function(config){
/* 17  */         this.callParent(arguments);
/* 18  */         // CB.DD.superclass.constructor.call(this, config);
/* 19  */     }
/* 20  */     /**
/* 21  *|      * Execute a Drag and Drop operation
/* 22  *|      * object  params {
/* 23  *|      *     @param  varchar/event   action   'copy' | 'move' | 'shortcut'.
/* 24  *|      *             When drag event is passed - the action will be guessed from the event, relying on pressed keys.
/* 25  *|      *             Shift - move
/* 26  *|      *             Ctrl - copy
/* 27  *|      *             Alt - shortcut
/* 28  *|      *             <none> - default "move" action
/* 29  *|      *     @param  object   targetData     generic data for target object
/* 30  *|      *     @param  object/array   sourceData     generic data for source object(s)
/* 31  *|      *     @param  boolean   confirm     set to false wen you don't need a confirmation dialog for the action. Default to true
/* 32  *|      * }
/* 33  *|      *     @param  function|null callback
/* 34  *|      *     @param  object|null   scope
/* 35  *|      * @return void
/* 36  *|      */
/* 37  */     ,execute: function (params, callback, scope){
/* 38  */         if(Ext.isObject(params.action)) {
/* 39  */             params.action = this.detectActionFromEvent(params.action);
/* 40  */         }
/* 41  */         if(callback) {
/* 42  */             this.callback = scope ? Ext.Function.bind(callback, scope) : callback;
/* 43  */         }
/* 44  */         switch(params.action){
/* 45  */             case 'copy':
/* 46  */                 this.postEvent = 'copied';
/* 47  */                 break;
/* 48  */             case 'move':
/* 49  */                 this.postEvent = 'moved';
/* 50  */                 break;

/* CB.DD.js */

/* 51  */             case 'shortcut':
/* 52  */                 this.postEvent = 'shortcuted';
/* 53  */                 break;
/* 54  */             default:
/* 55  */                 return Ext.Msg.alert('Error', 'CB.DD: Invalid action specified for execute');
/* 56  */         }
/* 57  */ 
/* 58  */         if(!Ext.isArray(params.sourceData)){
/* 59  */             params.sourceData = [params.sourceData];
/* 60  */         }
/* 61  */         this.params = params;
/* 62  */         if(params.confirm !== false){
/* 63  */             var sourceText = (params.sourceData.length == 1)
/* 64  */                 ? params.sourceData[0].name
/* 65  */                 : params.sourceData.length + ' objects'
/* 66  */                 ,targetName = Ext.valueFrom(params.targetData.name, params.targetData.title);
/* 67  */ 
/* 68  */             Ext.Msg.confirm(
/* 69  */                 L.Confirmation
/* 70  */                 ,L['DDActionMsg_' + params.action].replace('{source}', sourceText).replace('{target}', targetName)
/* 71  */                 ,this.onConfirmExecution
/* 72  */                 ,this
/* 73  */             );
/* 74  */         } else {
/* 75  */             this.onConfirmExecution('yes');
/* 76  */         }
/* 77  */     }
/* 78  */     /**
/* 79  *|      * confirm action execution function
/* 80  *|      * @param  varchar b pressed button text
/* 81  *|      * @return void
/* 82  *|      */
/* 83  */     ,onConfirmExecution: function (b){
/* 84  */         if(b !== 'yes'){
/* 85  */             return;
/* 86  */         }
/* 87  */         this.fireEvent('beforeexecute', this.params);
/* 88  */         CB_Browser_Actions[this.params.action](this.params, this.processExecute, this);
/* 89  */     }
/* 90  */     /**
/* 91  *|      * detect desired action from event
/* 92  *|      * @param  object event
/* 93  *|      * @return varchar
/* 94  *|      */
/* 95  */     ,detectActionFromEvent: function(event){
/* 96  */         if(event.ctrlKey) {
/* 97  */             return 'copy';
/* 98  */         } else if(event.altKey) {
/* 99  */             return 'shortcut';
/* 100 */         }

/* CB.DD.js */

/* 101 */         return 'move';
/* 102 */     }
/* 103 */     /**
/* 104 *|      * processing execution
/* 105 *|      * @param  json r server responce
/* 106 *|      * @param  event e event
/* 107 *|      * @return void
/* 108 *|      */
/* 109 */     ,processExecute: function(r, e){
/* 110 */ 
/* 111 */         if(!r || (r.success !== true)) {
/* 112 */             if(r.confirm === true) {
/* 113 */                 Ext.Msg.confirm(L.Confirmation, r.msg, function(b){
/* 114 */                     if(b === 'yes'){
/* 115 */                         this.params.confirmedOverwrite = true;
/* 116 */                         this.onConfirmExecution('yes');
/* 117 */                     }
/* 118 */                 }, this);
/* 119 */             } else {
/* 120 */                 Ext.Msg.alert(L.Error, Ext.valueFrom(r.msg, L.ErrorOccured));
/* 121 */             }
/* 122 */         } else {
/* 123 */             Ext.copyTo(r, this.params, 'sourceData,targetData');
/* 124 */             r.targetId = r.targetData.id;
/* 125 */             App.fireEvent('objectsaction', this.params.action, r, e);
/* 126 */         }
/* 127 */ 
/* 128 */         if(this.callback) {
/* 129 */             this.callback(r.pids);
/* 130 */             delete this.callback;
/* 131 */         }
/* 132 */     }
/* 133 */ }
/* 134 */ );
/* 135 */ 

;
/* Tree.js */

/* 1   */ Ext.namespace('CB.DD');
/* 2   */ /**
/* 3   *|  * Plugin for drag and drop from/to tree components in casebox
/* 4   *|  *
/* 5   *|  */
/* 6   */ 
/* 7   */ Ext.define('CB.DD.Tree', {
/* 8   */     extend: 'Ext.tree.plugin.TreeViewDragDrop'
/* 9   */     ,alias: 'plugin.CBDDTree'
/* 10  */ 
/* 11  */     ,idProperty: 'id'
/* 12  */     ,enableDrag: true
/* 13  */     ,enableDrop: true
/* 14  */     ,appendOnly: true
/* 15  */     ,containerScroll: true
/* 16  */     ,ddGroup: 'CBO'
/* 17  */     // ,displayField: 'name'
/* 18  */ 
/* 19  */     /**
/* 20  *|      * just pass the idProperty used in tree for nodes.
/* 21  *|      * @param  json config
/* 22  *|      * @return void
/* 23  *|      */
/* 24  */     ,constructor: function(config){
/* 25  */         var idProperty = Ext.valueFrom(config.idProperty, this.idProperty);
/* 26  */         var defaultConfig = {
/* 27  */             dragZone: {
/* 28  */                 idProperty: idProperty
/* 29  */                 ,onBeforeDrag: this.onBeforeDrag
/* 30  */             }
/* 31  */             ,dropZone: {
/* 32  */                 idProperty: idProperty
/* 33  */ 
/* 34  */                 ,dropCopy: 'drag-drop-copy'
/* 35  */                 ,dropMove: 'drag-drop-move'
/* 36  */                 ,dropShortcut: 'drag-drop-shortcut'
/* 37  */ 
/* 38  */                 ,onNodeOver: this.onNodeOver
/* 39  */                 ,onNodeDrop: this.onNodeDrop
/* 40  */                 ,getActionFromEvent: this.getActionFromEvent
/* 41  */             }
/* 42  */         };
/* 43  */ 
/* 44  */         if(config) {
/* 45  */             Ext.apply(defaultConfig, config);
/* 46  */         }
/* 47  */ 
/* 48  */         Ext.apply(this, defaultConfig);
/* 49  */ 
/* 50  */         this.callParent(defaultConfig);

/* Tree.js */

/* 51  */     }
/* 52  */     /**
/* 53  *|      * init method called by the tree when initializing plugins
/* 54  *|      *
/* 55  *|      * In this method we set all required configurantion and listeners to the tree
/* 56  *|      *
/* 57  *|      * @param  Ext.tree.TreePanel owner
/* 58  *|      * @return void
/* 59  *|      */
/* 60  */     ,init: function(treeView) {
/* 61  */         this.treeView = treeView;
/* 62  */ 
/* 63  */         treeView.on('beforedestroy', this.onBeforeDestroy, this);
/* 64  */         App.on('objectsaction', this.onObjectsAction, this);
/* 65  */ 
/* 66  */         this.callParent(arguments);
/* 67  */     }
/* 68  */ 
/* 69  */     /**
/* 70  *|      * unset all assigned listeners
/* 71  *|      * @return void
/* 72  *|      */
/* 73  */     ,onBeforeDestroy: function()
/* 74  */     {
/* 75  */         this.treeView.un('beforedestroy', this.onBeforeDestroy, this);
/* 76  */         App.un('objectsaction', this.onObjectsAction, this);
/* 77  */     }
/* 78  */ 
/* 79  */     /**
/* 80  *|      * function used to update tree nodes for actions on abjects like create/copy/move/update/delete
/* 81  *|      *
/* 82  *|      * @param  object r responce
/* 83  *|      * @param  event e
/* 84  *|      * @return void
/* 85  *|      */
/* 86  */     ,onObjectsAction: function(action, r, e){
/* 87  */         switch(action){
/* 88  */             case 'copy':
/* 89  */                     this.reloadNode(r.targetId);
/* 90  */                 break;
/* 91  */             case 'move':
/* 92  */                 if(!Ext.isEmpty(r.processedIds)){
/* 93  */                     // remove moved nodes
/* 94  */                     for (var i = 0; i < r.processedIds.length; i++) {
/* 95  */                         this.removeNode(r.processedIds[i]);
/* 96  */                     }
/* 97  */                     this.reloadNode(r.targetId);
/* 98  */                 }
/* 99  */                 break;
/* 100 */             case 'create':

/* Tree.js */

/* 101 */                 break;
/* 102 */             case 'update':
/* 103 */                 break;
/* 104 */             case 'delete':
/* 105 */                 break;
/* 106 */         }
/* 107 */     }
/* 108 */ 
/* 109 */     ,onBeforeDrag: function(data, e){
/* 110 */         if(Ext.isEmpty(data.records)) {
/* 111 */             return;
/* 112 */         }
/* 113 */ 
/* 114 */         return (data.records[0].data.system != 1);
/* 115 */     }
/* 116 */ 
/* 117 */     ,getActionFromEvent: function(ev) {
/* 118 */         var rez = (ev.ctrlKey || ev.altKey || ev.shiftKey)
/* 119 */             ? App.DD.detectActionFromEvent(ev)
/* 120 */             : Ext.valueFrom(this.defaultAction, 'move');
/* 121 */ 
/* 122 */         return rez;
/* 123 */     }
/* 124 */ 
/* 125 */     ,onNodeOver: function (node, dragZone, e, data){
/* 126 */         /* deny drop on:
/* 127 *|             - node itself
/* 128 *|             - direct parent of dragged node
/* 129 *|             - any descendant of dragged node
/* 130 *|         */
/* 131 */ 
/* 132 */         var action = this.getActionFromEvent(e)
/* 133 */             ,rez = this['drop' + action.charAt(0).toUpperCase() + action.slice(1)];
/* 134 */ 
/* 135 */         var i = 0;
/* 136 */ 
/* 137 */         var targetRecord = this.view.getRecord(node)
/* 138 */             ,templateId = targetRecord.data.template_id
/* 139 */             ,acceptChildren = CB.DB.templates.acceptChildren(templateId);
/* 140 */ 
/* 141 */         while ((i < data.records.length) && (rez != this.dropNotAllowed))  {
/* 142 */             var r = data.records[i];
/* 143 */ 
/* 144 */             if(!acceptChildren ||
/* 145 */                 isNaN(r.data[this.idProperty]) ||
/* 146 */                 isNaN(targetRecord.data[this.idProperty]) ||
/* 147 */                 (targetRecord.data[this.idProperty] == r.data[this.idProperty]) ||
/* 148 */                 (targetRecord.data[this.idProperty] == r.data.pid) ||
/* 149 */                 targetRecord.isAncestor(r)
/* 150 */             ) {

/* Tree.js */

/* 151 */                 rez = this.dropNotAllowed;
/* 152 */             }
/* 153 */             i++;
/* 154 */         }
/* 155 */ 
/* 156 */         return rez;
/* 157 */     }
/* 158 */ 
/* 159 */     ,onNodeDrop: function(node, dragZone, e, data){//targetData, source, e, sourceData
/* 160 */         if(this.onNodeOver(node, dragZone, e, data) != this.dropNotAllowed){
/* 161 */             var d, sourceData = [];
/* 162 */ 
/* 163 */             d = this.view.getRecord(node).data;
/* 164 */             var targetData = {
/* 165 */                 id: d[this.idProperty]
/* 166 */                 ,name: d['name']
/* 167 */                 ,path: d['path']
/* 168 */                 ,template_id: d['template_id']
/* 169 */             };
/* 170 */ 
/* 171 */             for (var i = 0; i < data.records.length; i++) {
/* 172 */                 if(data.records[i].collapse) {
/* 173 */                     data.records[i].collapse();
/* 174 */                 }
/* 175 */ 
/* 176 */                 d = data.records[i].data;
/* 177 */                 sourceData.push({
/* 178 */                     id: d[this.idProperty]
/* 179 */                     ,name: d['name']
/* 180 */                     ,path: d['path']
/* 181 */                     ,template_id: d['template_id']
/* 182 */                 });
/* 183 */             }
/* 184 */ 
/* 185 */             App.DD.execute({
/* 186 */                 action: e
/* 187 */                 ,targetData: targetData
/* 188 */                 ,sourceData: sourceData
/* 189 */             });
/* 190 */ 
/* 191 */             return true;
/* 192 */         }
/* 193 */     }
/* 194 */ 
/* 195 */     /**
/* 196 *|      * remove a node by its id
/* 197 *|      * @param  int nodeId
/* 198 *|      * @return boolean
/* 199 *|      */
/* 200 */     ,removeNode: function(nodeId){

/* Tree.js */

/* 201 */         var st = this.treeView.ownerGrid.store;
/* 202 */         var recs = st.query(this.idProperty, nodeId, false, false, true);
/* 203 */ 
/* 204 */         if(recs.getCount() > 0) {
/* 205 */             for (var i = 0; i < recs.getCount(); i++) {
/* 206 */                 st.remove(recs.getAt(i));
/* 207 */             }
/* 208 */         }
/* 209 */     }
/* 210 */ 
/* 211 */     /**
/* 212 *|      * reload a node by its id
/* 213 *|      * @param  int nodeId
/* 214 *|      * @return boolean
/* 215 *|      */
/* 216 */     ,reloadNode: function(nodeId){
/* 217 */         var st = this.treeView.ownerGrid.store;
/* 218 */         var recs = st.query(this.idProperty, nodeId, false, false, true);
/* 219 */ 
/* 220 */         if(Ext.isEmpty(recs) || (recs.getCount() < 1)) {
/* 221 */             return false;
/* 222 */         }
/* 223 */ 
/* 224 */         var node = recs.getAt(0);
/* 225 */ 
/* 226 */         if(node && !node.isExpanded()) {
/* 227 */             node.expand();
/* 228 */         } else {
/* 229 */             st.reload({
/* 230 */                 node: node
/* 231 */             });
/* 232 */         }
/* 233 */     }
/* 234 */ });
/* 235 */ 

;
/* Grid.js */

/* 1   */ Ext.namespace('CB.DD');
/* 2   */ 
/* 3   */ /**
/* 4   *|  * Plugin for drag and drop from/to grid components in casebox
/* 5   *|  *
/* 6   *|  */
/* 7   */ 
/* 8   */ Ext.define('CB.DD.Grid', {
/* 9   */     extend: 'Ext.grid.plugin.DragDrop'
/* 10  */     ,alias: 'plugin.CBDDGrid'
/* 11  */ 
/* 12  */     ,ddGroup: 'CBO'
/* 13  */     ,idProperty: 'id'
/* 14  */ 
/* 15  */     /**
/* 16  *|      * pass another ddGroup if needed
/* 17  *|      * @param  json config
/* 18  *|      * @return void
/* 19  *|      */
/* 20  */     ,constructor: function(config){
/* 21  */         var idProperty = Ext.valueFrom(config.idProperty, this.idProperty);
/* 22  */         var defaultConfig = {
/* 23  */ 
/* 24  */             dragZone: {
/* 25  */ 
/* 26  */             }
/* 27  */ 
/* 28  */             ,dropZone: {
/* 29  */                 idProperty: idProperty
/* 30  */                 ,onNodeEnter: this.onNodeEnter
/* 31  */                 ,onNodeOver: this.onNodeOver
/* 32  */                 ,onNodeOut: this.onNodeOut
/* 33  */                 ,onNodeDrop: this.onNodeDrop
/* 34  */             }
/* 35  */         };
/* 36  */ 
/* 37  */         if(config) {
/* 38  */             Ext.apply(defaultConfig, config);
/* 39  */ 
/* 40  */             if(config.dropZoneConfig) {
/* 41  */                 Ext.apply(defaultConfig.dropZone, config.dropZoneConfig);
/* 42  */             }
/* 43  */         }
/* 44  */         Ext.apply(this, defaultConfig);
/* 45  */ 
/* 46  */         this.callParent(defaultConfig);
/* 47  */     }
/* 48  */     /**
/* 49  *|      * init method called by the grid when initializing plugins
/* 50  *|      *

/* Grid.js *|

/* 51  *|      * In this method we set all required configurantion and listeners to the grid
/* 52  *|      *
/* 53  *|      * @param  Ext.grid.GridPanel owner
/* 54  *|      * @return void
/* 55  *|      */
/* 56  */     ,init: function(owner) {
/* 57  */         this.owner = owner;
/* 58  */ 
/* 59  */         this.idProperty = owner.store.proxy.reader.config.idProperty;
/* 60  */ 
/* 61  */         var cfg = {};
/* 62  */         if(!Ext.isDefined(this.enableDragDrop) &&
/* 63  */             !Ext.isDefined(this.enableDrag) &&
/* 64  */             !Ext.isDefined(this.enableDrop)
/* 65  */         ) {
/* 66  */             this.enableDragDrop = true;
/* 67  */         }
/* 68  */ 
/* 69  */         cfg.enableDrag = this.enableDragDrop || this.enableDrag;
/* 70  */         cfg.enableDrop = this.enableDragDrop || this.enableDrop;
/* 71  */ 
/* 72  */         if(cfg.enableDrag && cfg.enableDrop) {
/* 73  */             cfg.enableDragDrop = true;
/* 74  */         }
/* 75  */ 
/* 76  */         Ext.apply(this, cfg);
/* 77  */         // Ext.apply(this.owner, cfg);
/* 78  */ 
/* 79  */         // owner.on('render', this.onRender, this);
/* 80  */         owner.on('beforedestroy', this.onBeforeDestroy, this);
/* 81  */ 
/* 82  */         this.callParent(arguments);
/* 83  */         // for general case we don't know there the grid stores its params
/* 84  */         // so listeners for actions on objects should be implemented by grid itself
/* 85  */     }
/* 86  */ 
/* 87  */     // ,onRender: function(grid){
/* 88  */     //     if(this.enableDrag) {
/* 89  */     //         var dragZoneConfig = this.dragZoneConfig || {};
/* 90  */     //         Ext.apply(dragZoneConfig, {
/* 91  */     //             idProperty: this.idProperty
/* 92  */     //             ,ddGroup: this.ddGroup
/* 93  */     //             ,nodeToGenericData: this.nodeToGenericData
/* 94  */     //         });
/* 95  */     //         this.owner.getView().dragZone = new CB.DD.GridDragZone(this.owner, dragZoneConfig);
/* 96  */     //     }
/* 97  */ 
/* 98  */     //     if(this.enableDrop) {
/* 99  */     //         var dropZoneConfig = this.dropZoneConfig || {};
/* 100 */     //         Ext.apply(dropZoneConfig, {

/* Grid.js */

/* 101 */     //             idProperty: this.idProperty
/* 102 */     //             ,ddGroup: this.ddGroup
/* 103 */     //             ,nodeToGenericData: this.nodeToGenericData
/* 104 */     //         });
/* 105 */     //         this.owner.dropZone = new CB.DD.GridDropZone(this.owner, dropZoneConfig);
/* 106 */     //     }
/* 107 */     // }
/* 108 */ 
/* 109 */     /**
/* 110 *|      * unset all assigned listeners
/* 111 *|      * @return void
/* 112 *|      */
/* 113 */     ,onBeforeDestroy: function()
/* 114 */     {
/* 115 */         // this.owner.un('render', this.onRender, this);
/* 116 */         this.owner.un('beforedestroy', this.onBeforeDestroy, this);
/* 117 */     }
/* 118 */ 
/* 119 */     /**
/* 120 *|      * transfers grid record data to generic structured object for D&D
/* 121 *|      * @param  record/data record record or its data
/* 122 *|      * @return object
/* 123 *|      */
/* 124 */     ,nodeToGenericData: function(record){
/* 125 */         if(Ext.isEmpty(record)){
/* 126 */             return {};
/* 127 */         }
/* 128 */         var na = record.data
/* 129 */                 ? record.data
/* 130 */                 : record
/* 131 */             ,pid = record.pid
/* 132 */                 ? record.pid
/* 133 */                 : null;
/* 134 */ 
/* 135 */         var data = {
/* 136 */             id: na[this.idProperty]
/* 137 */             ,pid: pid
/* 138 */             ,name: na.name
/* 139 */             ,path: na.path
/* 140 */             ,template_id: na.template_id
/* 141 */         };
/* 142 */ 
/* 143 */         return data;
/* 144 */     }
/* 145 */ 
/* 146 */     ,onNodeEnter: function(el, source, ev, data){
/* 147 */         Ext.get(el).addCls('drop-target');
/* 148 */     }
/* 149 */ 
/* 150 */     ,onNodeOver: function (el, source, ev, data){

/* Grid.js */

/* 151 */         /* deny drop on:
/* 152 *|             - node itself
/* 153 *|             - direct parent of dragged node
/* 154 *|             - any descendant of dragged node
/* 155 *|         */
/* 156 */        var targetRecord = this.view.getRecord(el)
/* 157 */             ,templateId = targetRecord.data.template_id
/* 158 */             ,acceptChildren = CB.DB.templates.acceptChildren(templateId);
/* 159 */ 
/* 160 */         var rez = this.dropAllowed;
/* 161 */         if(Ext.isEmpty(targetRecord) ||
/* 162 */             !data ||
/* 163 */             Ext.isEmpty(data.records) ||
/* 164 */             isNaN(data.records[0].get(this.idProperty))
/* 165 */         ) {
/* 166 */             return this.dropNotAllowed;
/* 167 */         }
/* 168 */ 
/* 169 */         var sourceData = Ext.isArray(data.records)
/* 170 */             ? data.records
/* 171 */             : [data.records];
/* 172 */         var i = 0;
/* 173 */ 
/* 174 */         while ((i < sourceData.length) && (rez == this.dropAllowed))  {
/* 175 */             if( !acceptChildren ||
/* 176 */                 (targetRecord.data[this.idProperty] == sourceData[i].get(this.idProperty))
/* 177 */                 || (targetRecord.data[this.idProperty] == sourceData[i].get('pid'))
/* 178 */             ) {
/* 179 */                 rez = this.dropNotAllowed;
/* 180 */             }
/* 181 */             i++;
/* 182 */         }
/* 183 */ 
/* 184 */         return rez;
/* 185 */     }
/* 186 */ 
/* 187 */     ,onNodeOut: function(el, source, ev, data){
/* 188 */         Ext.get(el).removeCls('drop-target');
/* 189 */     }
/* 190 */ 
/* 191 */     ,onNodeDrop: function(el, source, e, data){
/* 192 */         if(Ext.isElement(el)) {
/* 193 */             if(this.onNodeOver(el, source, e, data) == this.dropAllowed){
/* 194 */                 var targetRecord = this.view.getRecord(el);
/* 195 */                 if(targetRecord) {
/* 196 */                     var d, sourceData = [];
/* 197 */                     for (var i = 0; i < data.records.length; i++) {
/* 198 */                         d = data.records[i].data;
/* 199 */                         sourceData.push({
/* 200 */                             id: d[this.idProperty]

/* Grid.js */

/* 201 */                             ,name: d['name']
/* 202 */                             ,path: d['path']
/* 203 */                             ,template_id: d['template_id']
/* 204 */                         });
/* 205 */                     }
/* 206 */ 
/* 207 */                     d = targetRecord.data;
/* 208 */                     var targetData = {
/* 209 */                         id: d[this.idProperty]
/* 210 */                         ,name: d['name']
/* 211 */                         ,path: d['path']
/* 212 */                         ,template_id: d['template_id']
/* 213 */                     };
/* 214 */                     App.DD.execute({
/* 215 */                         action: e
/* 216 */                         ,targetData: targetData
/* 217 */                         ,sourceData: sourceData
/* 218 */                     });
/* 219 */                 }
/* 220 */             }
/* 221 */ 
/* 222 */         } else { //drop over scroller area of the grid
/* 223 */             var callback = this.scope
/* 224 */                 ? this.onScrollerDragDrop.bind(this.scope)
/* 225 */                 : this.onScrollerDragDrop;
/* 226 */             callback(el, source, e, data);
/* 227 */         }
/* 228 */ 
/* 229 */         return true;
/* 230 */     }
/* 231 */ });
/* 232 */ 

;
/* Panel.js */

/* 1   */ Ext.namespace('CB.DD');
/* 2   */ 
/* 3   */ /**
/* 4   *|  * Plugin for drag and drop casebox objects over a panel
/* 5   *|  *
/* 6   *|  */
/* 7   */ 
/* 8   */ Ext.define('CB.DD.Panel', {
/* 9   */     extend: 'Ext.dd.DropZone'
/* 10  */     ,alias: 'plugin.CBDDPanel'
/* 11  */ 
/* 12  */     ,ddGroup: 'CBO'
/* 13  */     ,selector: '.files-drop'
/* 14  */ 
/* 15  */ 
/* 16  */     //,defaultAction: 'move'
/* 17  */ 
/* 18  */     // ,dropAllowed:
/* 19  */     // ,dropNotAllowed:
/* 20  */     ,dropCopy: 'drag-drop-copy'
/* 21  */     ,dropMove: 'drag-drop-move'
/* 22  */     ,dropShortcut: 'drag-drop-shortcut'
/* 23  */ 
/* 24  */     ,showPopup: false
/* 25  */     /**
/* 26  *|      * pass another ddGroup if needed
/* 27  *|      * @param  json config
/* 28  *|      * @return void
/* 29  *|      */
/* 30  */     ,constructor: function(el, config){
/* 31  */         var idProperty = Ext.valueFrom(config.idProperty, this.idProperty);
/* 32  */         var defaultConfig = {
/* 33  */ 
/* 34  */             dragZone: {
/* 35  */ 
/* 36  */             }
/* 37  */             ,dropZone: {
/* 38  */                 onNodeEnter: this.onNodeEnter
/* 39  */                 ,onNodeOver: this.onNodeOver
/* 40  */                 ,onNodeOut: this.onNodeOut
/* 41  */                 ,onNodeDrop: this.onNodeDrop
/* 42  */             }
/* 43  */         };
/* 44  */ 
/* 45  */         if(config) {
/* 46  */             Ext.apply(defaultConfig, config);
/* 47  */ 
/* 48  */             if(config.dropZoneConfig) {
/* 49  */                 Ext.apply(defaultConfig.dropZone, config.dropZoneConfig);
/* 50  */             }

/* Panel.js */

/* 51  */         }
/* 52  */         Ext.apply(this, defaultConfig);
/* 53  */ 
/* 54  */         this.callParent([el, defaultConfig]);
/* 55  */     }
/* 56  */     /**
/* 57  *|      * @param  Ext.Panel
/* 58  *|      * @return void
/* 59  *|      */
/* 60  */     ,init: function(owner) {
/* 61  */         this.owner = owner;
/* 62  */ 
/* 63  */         var cfg = {};
/* 64  */         if(!Ext.isDefined(this.enableDragDrop) &&
/* 65  */             !Ext.isDefined(this.enableDrag) &&
/* 66  */             !Ext.isDefined(this.enableDrop)
/* 67  */         ) {
/* 68  */             this.enableDragDrop = true;
/* 69  */         }
/* 70  */ 
/* 71  */         cfg.enableDrag = this.enableDragDrop || this.enableDrag;
/* 72  */         cfg.enableDrop = this.enableDragDrop || this.enableDrop;
/* 73  */ 
/* 74  */         if(cfg.enableDrag && cfg.enableDrop) {
/* 75  */             cfg.enableDragDrop = true;
/* 76  */         }
/* 77  */ 
/* 78  */         Ext.apply(this, cfg);
/* 79  */ 
/* 80  */         this.callParent(arguments);
/* 81  */     }
/* 82  */ 
/* 83  */     ,getTargetFromEvent: function(e) {
/* 84  */         return e.getTarget(this.selector);
/* 85  */     }
/* 86  */ 
/* 87  */     ,onNodeEnter: function(el, source, ev, data){
/* 88  */         this.owner.getEl().addCls('drop-target');
/* 89  */ 
/* 90  */         //check if object has an id and try to create it if doesnt
/* 91  */         var id = Ext.valueFrom(this.owner.params.nid, this.owner.params.id);
/* 92  */ 
/* 93  */         if(Ext.isEmpty(this.getDraftIdTriggered) && isNaN(id)) {
/* 94  */             var w, wel = ev.getTarget('.x-window');
/* 95  */             if(wel) {
/* 96  */                 w = Ext.getCmp(wel.id);
/* 97  */                 if(w) {
/* 98  */                     w.fireEvent(
/* 99  */                         'getdraftid'
/* 100 */                         ,function(id, r) {

/* Panel.js */

/* 101 */                             this.owner.params.id = id;
/* 102 */                             this.owner.params.name = r.result.data.name;
/* 103 */                         }
/* 104 */                         ,this
/* 105 */                     );
/* 106 */                     this.getDraftIdTriggered = true;
/* 107 */                 }
/* 108 */             }
/* 109 */         }
/* 110 */ 
/* 111 */     }
/* 112 */ 
/* 113 */     ,getActionFromEvent: function(ev) {
/* 114 */         var rez = (ev.ctrlKey || ev.altKey || ev.shiftKey)
/* 115 */             ? App.DD.detectActionFromEvent(ev)
/* 116 */             : Ext.valueFrom(this.defaultAction, 'move');
/* 117 */ 
/* 118 */         return rez;
/* 119 */     }
/* 120 */ 
/* 121 */     ,onNodeOver: function (el, source, ev, data){
/* 122 */         /* deny drop on:
/* 123 *|             - node itself
/* 124 *|             - direct parent of dragged node
/* 125 *|         */
/* 126 */        var targetData = this.owner.params || {}
/* 127 */             ,targetId = Ext.valueFrom(targetData.nid, targetData.id);
/* 128 */ 
/* 129 */         var action = this.getActionFromEvent(ev)
/* 130 */             ,rez = this['drop' + action.charAt(0).toUpperCase() + action.slice(1)];
/* 131 */ 
/* 132 */         if(Ext.isEmpty(targetId) ||
/* 133 */             !data ||
/* 134 */             Ext.isEmpty(data.records)
/* 135 */         ) {
/* 136 */             return this.dropNotAllowed;
/* 137 */         }
/* 138 */ 
/* 139 */         if(isNaN(Ext.valueFrom(data.records[0].data.nid, data.records[0].data.id)) ||
/* 140 */             isNaN(targetId)
/* 141 */         ) {
/* 142 */             return this.dropNotAllowed;
/* 143 */         }
/* 144 */ 
/* 145 */         var sourceData = Ext.isArray(data.records)
/* 146 */             ? data.records
/* 147 */             : [data.records];
/* 148 */         var i = 0;
/* 149 */         while ((i < sourceData.length) && (rez != this.dropNotAllowed))  {
/* 150 */             var id = Ext.valueFrom(sourceData[i].data.nid, sourceData[i].data.id);

/* Panel.js */

/* 151 */ 
/* 152 */             if( (targetId == id)
/* 153 */                 || (targetId == sourceData[i].data.pid)
/* 154 */             ) {
/* 155 */                 rez = this.dropNotAllowed;
/* 156 */             }
/* 157 */             i++;
/* 158 */         }
/* 159 */ 
/* 160 */         return rez;
/* 161 */     }
/* 162 */ 
/* 163 */     ,onNodeOut: function(el, source, ev, data){
/* 164 */         this.owner.getEl().removeCls('drop-target');
/* 165 */         // Ext.get(el).removeCls('drop-target');
/* 166 */     }
/* 167 */ 
/* 168 */     ,onNodeDrop: function(el, source, e, data){
/* 169 */         if(Ext.isElement(el)) {
/* 170 */             if(this.onNodeOver(el, source, e, data) != this.dropNotAllowed){
/* 171 */                 var targetData = this.owner.params || {}
/* 172 */                     ,targetId = Ext.valueFrom(targetData.nid, targetData.id);
/* 173 */ 
/* 174 */                 if(!isNaN(targetId)) {
/* 175 */                     var d, sourceData = [];
/* 176 */                     for (var i = 0; i < data.records.length; i++) {
/* 177 */                         d = data.records[i].data;
/* 178 */                         sourceData.push({
/* 179 */                             id: Ext.valueFrom(d.nid, d.id)
/* 180 */                             ,name: d['name']
/* 181 */                             ,path: d['path']
/* 182 */                             ,template_id: d['template_id']
/* 183 */                         });
/* 184 */                     }
/* 185 */ 
/* 186 */                     d = {
/* 187 */                         id: targetId
/* 188 */                         ,name: targetData['name']
/* 189 */                         ,path: targetData['path']
/* 190 */                         ,template_id: targetData['template_id']
/* 191 */                     };
/* 192 */ 
/* 193 */                     App.DD.execute({
/* 194 */                         action: this.getActionFromEvent(e)
/* 195 */                         ,targetData: d
/* 196 */                         ,sourceData: sourceData
/* 197 */                     });
/* 198 */ 
/* 199 */                 }
/* 200 */             }

/* Panel.js */

/* 201 */         } else { //drop over scroller area of the grid
/* 202 */             var callback = this.scope
/* 203 */                 ? this.onScrollerDragDrop.bind(this.scope)
/* 204 */                 : this.onScrollerDragDrop;
/* 205 */             callback(el, source, e, data);
/* 206 */         }
/* 207 */ 
/* 208 */         //dont return anything to avoid dd repair by ext
/* 209 */         // return false;
/* 210 */     }
/* 211 */ });
/* 212 */ 

;
/* CB.VerticalEditGridHelperTree.js */

/* 1   */ 
/* 2   */ Ext.namespace('CB');
/* 3   */ 
/* 4   */ Ext.define('CB.VerticalEditGridHelperTree', {
/* 5   */     extend: 'Ext.tree.TreePanel'
/* 6   */ 
/* 7   */     ,initComponent: function(){
/* 8   */ 
/* 9   */         this.store = Ext.create('Ext.data.TreeStore', {
/* 10  */             root: {
/* 11  */                 text: 'root'
/* 12  */                 ,nid: 0
/* 13  */                 ,expanded: true
/* 14  */                 ,leaf: false
/* 15  */                 ,value: {}
/* 16  */             }
/* 17  */             ,proxy: {
/* 18  */                 type: 'memory'
/* 19  */                 ,paramsAsHash: true
/* 20  */             }
/* 21  */         });
/* 22  */ 
/* 23  */         Ext.apply(this, {
/* 24  */             listeners:{
/* 25  */                 scope: this
/* 26  */                 ,beforeitemappend: this.onBeforeNodeAppend
/* 27  */             }
/* 28  */         });
/* 29  */ 
/* 30  */         this.callParent(arguments);
/* 31  */     }
/* 32  */     ,onBeforeNodeAppend: function(parent, node){
/* 33  */         node.set('id', Ext.id());
/* 34  */     }
/* 35  */ 
/* 36  */     ,loadData: function (data, templateStore){
/* 37  */         this.data = data;
/* 38  */         this.templateStore = templateStore;
/* 39  */ 
/* 40  */         var rn = this.getRootNode();
/* 41  */         rn.removeAll();
/* 42  */ 
/* 43  */         this.addNodes(rn, this.data);
/* 44  */ 
/* 45  */         this.updateVisibility();
/* 46  */     }
/* 47  */ 
/* 48  */     ,readValues: function ()
/* 49  */     {
/* 50  */         this.data = this.readChilds(this.getRootNode());

/* CB.VerticalEditGridHelperTree.js */

/* 51  */ 
/* 52  */         return this.data;
/* 53  */     }
/* 54  */ 
/* 55  */     ,readChilds: function(parentNode){
/* 56  */         var rez = {};
/* 57  */         parentNode.eachChild(
/* 58  */             function(node){
/* 59  */                 var fieldName = node.data.templateRecord.get('name');
/* 60  */                 var value = node.data.value;
/* 61  */ 
/* 62  */                 switch (node.data.templateRecord.get('type')) {
/* 63  */                     case 'datetime':
/* 64  */                         if(Ext.isDate(value.value)) {
/* 65  */                             value.value = date_local_to_ISO_string(value.value);
/* 66  */                         }
/* 67  */                         break;
/* 68  */                     case 'date':
/* 69  */                         if(Ext.isDate(value.value)) {
/* 70  */                             value.value = dateToDateString(value.value);
/* 71  */                         }
/* 72  */                         break;
/* 73  */                 }
/* 74  */                 value.childs = this.readChilds(node);
/* 75  */                 value = this.simplifyValue(value);
/* 76  */ 
/* 77  */                 if(Ext.isEmpty(value) || (Ext.isObject(value) && isEmptyObject(value))) {
/* 78  */                 } else {
/* 79  */                     if(Ext.isEmpty(rez[fieldName])) {
/* 80  */                         rez[fieldName] = [];
/* 81  */                     }
/* 82  */ 
/* 83  */                     rez[fieldName].push(value);
/* 84  */                 }
/* 85  */             }
/* 86  */             ,this
/* 87  */         );
/* 88  */ 
/* 89  */         for(var fieldName in rez) {
/* 90  */             if(rez.hasOwnProperty(fieldName)){
/* 91  */                 if(rez[fieldName].length == 1) {
/* 92  */                     rez[fieldName] = rez[fieldName][0];
/* 93  */                 }
/* 94  */ 
/* 95  */             }
/* 96  */         }
/* 97  */ 
/* 98  */         return rez;
/* 99  */     }
/* 100 */ 

/* CB.VerticalEditGridHelperTree.js */

/* 101 */     ,simplifyValue: function(value) {
/* 102 */         if(Ext.isEmpty(value.info) &&
/* 103 */             Ext.isEmpty(value.files) &&
/* 104 */             (Ext.isEmpty(value.cond) || Ext.isEmpty(value.value))&&
/* 105 */             isEmptyObject(value.childs)
/* 106 */         ) {
/* 107 */             return value.value;
/* 108 */         }
/* 109 */         if(Ext.isEmpty(value.info)) {
/* 110 */             delete value.info;
/* 111 */         }
/* 112 */         if(Ext.isEmpty(value.files)) {
/* 113 */             delete value.files;
/* 114 */         }
/* 115 */         if(isEmptyObject(value.childs)) {
/* 116 */             delete value.childs;
/* 117 */         }
/* 118 */         if(Ext.isDefined(value.cond) && Ext.isEmpty(value.value)) {
/* 119 */             delete value.cond;
/* 120 */         }
/* 121 */ 
/* 122 */         return value;
/* 123 */     }
/* 124 */ 
/* 125 */     ,getGenericArrayDataForNodes: function(fieldData){
/* 126 */         var rez = [{}];
/* 127 */         if(Ext.isEmpty(fieldData)) {
/* 128 */             return rez;
/* 129 */         }
/* 130 */         if(Ext.isPrimitive(fieldData) || Ext.isDate(fieldData)) {
/* 131 */             rez[0].value = fieldData;
/* 132 */             return rez;
/* 133 */         }
/* 134 */ 
/* 135 */         if(Ext.isDefined(fieldData.value) ||
/* 136 */             Ext.isDefined(fieldData.info) ||
/* 137 */             Ext.isDefined(fieldData.childs) ||
/* 138 */             Ext.isDefined(fieldData.cond)
/* 139 */         ){
/* 140 */             rez[0] = fieldData;
/* 141 */             return rez;
/* 142 */         }
/* 143 */ 
/* 144 */         if(Ext.isArray(fieldData)) {
/* 145 */             for (var i = 0; i < fieldData.length; i++) {
/* 146 */                 if(Ext.isPrimitive(fieldData[i])) {
/* 147 */                     rez[i] = {value: fieldData[i]};
/* 148 */                 }
/* 149 */                 if(Ext.isDefined(fieldData[i].value) ||
/* 150 */                     Ext.isDefined(fieldData[i].info) ||

/* CB.VerticalEditGridHelperTree.js */

/* 151 */                     Ext.isDefined(fieldData[i].childs) ||
/* 152 */                     Ext.isDefined(fieldData[i].cond)
/* 153 */                 ){
/* 154 */                     rez[i] = fieldData[i];
/* 155 */                 }
/* 156 */             }
/* 157 */         } else {
/* 158 */             rez[0].value = Ext.util.JSON.encode(fieldData);
/* 159 */         }
/* 160 */ 
/* 161 */         return rez;
/* 162 */     }
/* 163 */ 
/* 164 */     ,adjustValueToType: function(value, type){
/* 165 */         if(Ext.isEmpty(value)){
/* 166 */             return value;
/* 167 */         }
/* 168 */         switch(type){
/* 169 */             case 'date':
/* 170 */                 if(Ext.isString(value)) {
/* 171 */                     value = Ext.Date.parse(value.substr(0,10), 'Y-m-d');
/* 172 */                 }
/* 173 */                 break;
/* 174 */             case 'datetime':
/* 175 */                 value = date_ISO_to_local_date(value);
/* 176 */                 break;
/* 177 */         }
/* 178 */         return value;
/* 179 */     }
/* 180 */ 
/* 181 */     ,addNodes: function(parentNode, data, beforeNode){
/* 182 */         var pid = parentNode.data.nid;
/* 183 */         data = data || {};
/* 184 */         if(Ext.isEmpty(this.templateStore)) {
/* 185 */             return;
/* 186 */         }
/* 187 */         this.templateStore.each(
/* 188 */             function(record) {
/* 189 */                 if(record.get('pid') == pid) {
/* 190 */                     /* no check to see if we have more duplicates and have to duplicate this node */
/* 191 */                     var fieldName = record.get('name');
/* 192 */                     var nodeValues = this.getGenericArrayDataForNodes(data[fieldName]);
/* 193 */ 
/* 194 */                     //set default values for new objects
/* 195 */                     if(Ext.isEmpty(nodeValues[0].value) &&
/* 196 */                         this.newItem &&
/* 197 */                         !Ext.isEmpty(record.get('cfg').value)
/* 198 */                     ) {
/* 199 */                         var v = record.get('cfg').value;
/* 200 */                         if(v === 'now') {

/* CB.VerticalEditGridHelperTree.js */

/* 201 */                             v = new Date();
/* 202 */                         }
/* 203 */                         nodeValues[0].value = v;
/* 204 */                     }
/* 205 */                     //set default condition for new objects
/* 206 */                     if(Ext.isEmpty(nodeValues[0].cond) &&
/* 207 */                         this.newItem &&
/* 208 */                         !Ext.isEmpty(record.get('cfg').cond)
/* 209 */                     ) {
/* 210 */                         nodeValues[0].cond = record.get('cfg').cond;
/* 211 */                     }
/* 212 */ 
/* 213 */                     for (var i = 0; i < nodeValues.length; i++) {
/* 214 */                         var node = this.addNode(parentNode, record, beforeNode);
/* 215 */                         nodeValues[i].value = this.adjustValueToType(nodeValues[i].value, record.get('type'));
/* 216 */                         node.data.value = nodeValues[i];
/* 217 */                         this.addNodes(node, nodeValues[i].childs);
/* 218 */                     }
/* 219 */                 }
/* 220 */             }
/* 221 */             ,this
/* 222 */         );
/* 223 */     }
/* 224 */ 
/* 225 */     ,addNode: function(parentNode, templateRecord, beforeNode){
/* 226 */         return parentNode.insertBefore(
/* 227 */             {
/* 228 */                 nid: templateRecord.get('id')
/* 229 */                 ,templateRecord: templateRecord
/* 230 */                 ,value: {}
/* 231 */             }
/* 232 */             ,beforeNode
/* 233 */         );
/* 234 */     }
/* 235 */ 
/* 236 */     /**
/* 237 *|      * upate all nodes visibility
/* 238 *|      * @return boolean  true if visibility changed for any node
/* 239 *|      */
/* 240 */     ,updateVisibility: function(){
/* 241 */         //flag for checking if any node visibility have been updated
/* 242 */         var rez = false;
/* 243 */         do{
/* 244 */             this.visibilityUpdated = false;
/* 245 */             this.getRootNode().cascadeBy({
/* 246 */                 before: this.updateNodeVisibility
/* 247 */                 ,scope: this
/* 248 */             });
/* 249 */             if(this.visibilityUpdated) {
/* 250 */                 rez = true;

/* CB.VerticalEditGridHelperTree.js */

/* 251 */             }
/* 252 */         } while (this.visibilityUpdated);
/* 253 */ 
/* 254 */         return rez;
/* 255 */     }
/* 256 */ 
/* 257 */     /**
/* 258 *|      * update visibility for a single node
/* 259 *|      * @param  TreeNode node
/* 260 *|      * @return void
/* 261 *|      */
/* 262 */     ,updateNodeVisibility: function (node) {
/* 263 */         // skip root node processing
/* 264 */         if(node == this.getRootNode()) {
/* 265 */             return;
/* 266 */         }
/* 267 */         // if the node isn't a subnode then it's always visible
/* 268 */ 
/* 269 */         if(Ext.isEmpty(node.data.templateRecord.get('pid'))){
/* 270 */             if(node.data.visible === false) {
/* 271 */                 this.visibilityUpdated = true;
/* 272 */             }
/* 273 */             node.data.visible = true;
/* 274 */             return true;
/* 275 */         }
/* 276 */ 
/* 277 */ 
/* 278 */         var r = node.data.templateRecord;
/* 279 */         var pr = node.parentNode.data.templateRecord;
/* 280 */         if(node.parentNode.data.visible === false) {
/* 281 */             if(node.data.visible !== false) {
/* 282 */                 this.visibilityUpdated = true;
/* 283 */                 node.data.visible = false;
/* 284 */             }
/* 285 */         } else { // if parent node is visible
/* 286 */             var v = ''; //dependency value
/* 287 */             var va = []; //dependency array value
/* 288 */             var parentNodeValue = node.parentNode.data.value.value;
/* 289 */             if(Ext.isDefined(r.get('cfg').dependency) && !Ext.isEmpty(r.get('cfg').dependency.pidValues)){
/* 290 */                 v = r.get('cfg').dependency.pidValues;
/* 291 */                 va = toNumericArray(v);
/* 292 */             }
/* 293 */ 
/* 294 */             if( node.data.visible !== false ){
/* 295 */                 if( ( !Ext.isEmpty(v) &&
/* 296 */                     !setsHaveIntersection( va, parentNodeValue) ) //if not empty pidValues specified and parent value out of pidValues then hide the field
/* 297 */                     || ( (r.get('cfg').thesauriId === 'dependent') && Ext.isEmpty(parentNodeValue) ) // OR if the field is dinamic and parent has no selected value
/* 298 */                     || ( (r.get('cfg').scope === 'variable') && Ext.isEmpty(parentNodeValue) ) // OR if the field is dinamic and parent has no selected value
/* 299 */                     || ( Ext.isDefined(r.get('cfg').dependency) && Ext.isEmpty(parentNodeValue) && !Ext.isEmpty(va) ) // OR if the field is dinamic and parent has no selected value
/* 300 */                 ) {

/* CB.VerticalEditGridHelperTree.js */

/* 301 */                     node.data.visible = false;
/* 302 */                     this.visibilityUpdated = true;
/* 303 */                 }
/* 304 */             }else{ //when record is not visible
/* 305 */                 if( (pr &&
/* 306 */                         (pr.get('type') === 'G') &&
/* 307 */                         (pr.get('type') === 'G')
/* 308 */                         // (node.parentNode.data.visible !==
/* 309 */                     ) || (
/* 310 */                     !Ext.isEmpty(parentNodeValue) && (Ext.isEmpty(v) || setsHaveIntersection( va, parentNodeValue ))
/* 311 */                     && ( (r.get('cfg').thesauriId !== 'dependent') ||  !Ext.isEmpty(parentNodeValue))
/* 312 */                     && ( (r.get('cfg').scope !== 'variable') ||  !Ext.isEmpty(parentNodeValue))
/* 313 */                     && ( Ext.isDefined(r.get('cfg').dependency) ||  !Ext.isEmpty(parentNodeValue))
/* 314 */                     )
/* 315 */                 ) { //if no pidValues specified or pidValues contains the parent selected value then show the field
/* 316 */                     node.data.visible = true;
/* 317 */                     this.visibilityUpdated = true;
/* 318 */                 }
/* 319 */             }
/* 320 */         }
/* 321 */     }
/* 322 */ 
/* 323 */     ,queryNodeListBy: function(filterFunction){
/* 324 */         var rez = [];
/* 325 */         this.getRootNode().cascadeBy({
/* 326 */             before: function(node){
/* 327 */                 if(filterFunction(node)) {
/* 328 */                     rez.push(node);
/* 329 */                 }
/* 330 */             }
/* 331 */             ,scope: this
/* 332 */         });
/* 333 */ 
/* 334 */         return rez;
/* 335 */     }
/* 336 */ 
/* 337 */     ,getNode: function(nodeId){
/* 338 */         return this.getRootNode().findChild('id', nodeId, true);
/* 339 */     }
/* 340 */ 
/* 341 */     ,getNodesByFieldName: function(fieldName){
/* 342 */         return this.queryNodeListBy(
/* 343 */             function(n) {
/* 344 */                 return (
/* 345 */                     n.data.templateRecord &&
/* 346 */                     (n.data.templateRecord.get('name') == fieldName)
/* 347 */                 );
/* 348 */             }
/* 349 */         );
/* 350 */     }

/* CB.VerticalEditGridHelperTree.js */

/* 351 */ 
/* 352 */     /**
/* 353 *|      * set value for first found node in tree wich has given name
/* 354 *|      * (i.e. duplications are not analyzed)
/* 355 *|      *
/* 356 *|      * TODO: review for duplicated fields
/* 357 *|      *
/* 358 *|      * @param varchar fieldName
/* 359 *|      * @param variant value
/* 360 *|      *
/* 361 *|      * @return treeNode | null  modified node
/* 362 *|      */
/* 363 */ 
/* 364 */     ,setFieldValue: function(fieldName, value) {
/* 365 */         var v, rez = null;
/* 366 */ 
/* 367 */         if(Ext.isPrimitive(value) || Ext.isEmpty(value)) {
/* 368 */             v = {value: value};
/* 369 */         } else {
/* 370 */             if(Ext.isDefined(value.value)) {
/* 371 */                 v = value;
/* 372 */             } else {
/* 373 */                 v = {
/* 374 */                     value: value
/* 375 */                 };
/* 376 */             }
/* 377 */         }
/* 378 */ 
/* 379 */         this.getRootNode().cascadeBy({
/* 380 */             before: function(node) {
/* 381 */                 if(node.data.templateRecord && (node.data.templateRecord.get('name') == fieldName)) {
/* 382 */                     node.data.value = v;
/* 383 */                     rez = node;
/* 384 */                     return false;
/* 385 */                 }
/* 386 */             }
/* 387 */             ,scope: this
/* 388 */         });
/* 389 */ 
/* 390 */         return rez;
/* 391 */     }
/* 392 */ 
/* 393 */     /**
/* 394 *|      * get parent value (of field_id) for a ghiven nodeId with
/* 395 *|      * @param  varchar nodeId
/* 396 *|      * @param  int field_id     template field id
/* 397 *|      * @return variant
/* 398 *|      */
/* 399 */     ,getParentValue: function (nodeId, field_id){
/* 400 */         var node = this.getNode(nodeId);

/* CB.VerticalEditGridHelperTree.js */

/* 401 */         if(node && node.data.templateRecord) {
/* 402 */             var pn = node.parentNode;
/* 403 */             while(pn &&
/* 404 */                 pn.data.templateRecord &&
/* 405 */                 (pn.data.templateRecord.get('id') != field_id)
/* 406 */             ) {
/* 407 */                 pn = pn.parentNode;
/* 408 */             }
/* 409 */ 
/* 410 */             if (pn &&
/* 411 */                 pn.data.templateRecord &&
/* 412 */                 (pn.data.templateRecord.get('id') == field_id)
/* 413 */             ) {
/* 414 */                 return pn.data.value.value;
/* 415 */             }
/* 416 */         }
/* 417 */ 
/* 418 */         return null;
/* 419 */     }
/* 420 */ 
/* 421 */     ,resetChildValues: function(nodeId) {
/* 422 */ 
/* 423 */         var node = this.getNode(nodeId);
/* 424 */         if(node && node.data.templateRecord) {
/* 425 */             node.cascadeBy({
/* 426 */                 before: function(n) {
/* 427 */                     var tr = n.data.templateRecord
/* 428 */                         ,cfg = tr.get('cfg');
/* 429 */                     if( tr &&
/* 430 */                         n.isAncestor(node) &&
/* 431 */                         (
/* 432 */                             cfg.thesauriId === 'dependent' ||
/* 433 */                             Ext.isDefined(cfg.dependency)
/* 434 */                         ) &&
/* 435 */                         (tr.get('pid') == node.data.templateRecord.get('id')) &&
/* 436 */                         (cfg.readOnly !==true) &&
/* 437 */                         (cfg.type === '_objects') //resetting only object fields
/* 438 */                     ){
/* 439 */                         n.data.value.value = null;
/* 440 */                     }
/* 441 */                 }
/* 442 */                 ,scope: this
/* 443 */             });
/* 444 */ 
/* 445 */             this.updateVisibility();
/* 446 */         }
/* 447 */     }
/* 448 */ 
/* 449 */     ,duplicate: function(nodeId){
/* 450 */         var node = this.getNode(nodeId);

/* CB.VerticalEditGridHelperTree.js */

/* 451 */         if(!node || !node.data.templateRecord) {
/* 452 */             return false;
/* 453 */         }
/* 454 */ 
/* 455 */ 
/* 456 */         var dn = this.addNode(node.parentNode, node.data.templateRecord, node.nextSibling);
/* 457 */         this.addNodes(dn);
/* 458 */         node.data.templateRecord.get('cfg').maxInstances--;
/* 459 */     }
/* 460 */ 
/* 461 */     ,deleteDuplicate: function(nodeId){
/* 462 */         var node = this.getNode(nodeId);
/* 463 */         if(!node || !node.data.templateRecord) {
/* 464 */             return false;
/* 465 */         }
/* 466 */         node.data.templateRecord.get('cfg').maxInstances++;
/* 467 */ 
/* 468 */         node.remove(true);
/* 469 */     }
/* 470 */ 
/* 471 */     /**
/* 472 *|      * check if a given node is a duplicate node (that could be duplicated)
/* 473 *|      * @param  varchar  nodeId
/* 474 *|      * @return boolean
/* 475 *|      */
/* 476 */     ,isDuplicate: function(nodeId){
/* 477 */         if(this.canDuplicate(nodeId)){
/* 478 */             return true;
/* 479 */         }
/* 480 */         var node = this.getNode(nodeId);
/* 481 */         if(node) {
/* 482 */             var ps = node.previousSibling;
/* 483 */             if(ps && ps.data.templateRecord) {
/* 484 */                 if(ps.data.templateRecord.get('id') == node.data.templateRecord.get('id')) {
/* 485 */                     return true;
/* 486 */                 }
/* 487 */             } else {
/* 488 */                 return false;
/* 489 */             }
/* 490 */         }
/* 491 */         return null;
/* 492 */     }
/* 493 */ 
/* 494 */     /**
/* 495 *|      * check if a given node could be duplicated (and did not exceed maxLimit)
/* 496 *|      * @param  varchar nodeId
/* 497 *|      * @return boolean
/* 498 *|      */
/* 499 */     ,canDuplicate: function(nodeId){
/* 500 */         var node = this.getNode(nodeId);

/* CB.VerticalEditGridHelperTree.js */

/* 501 */         if(node && node.data.templateRecord) {
/* 502 */             return (node.data.templateRecord.get('cfg').maxInstances > 1);
/* 503 */         }
/* 504 */         return false;
/* 505 */     }
/* 506 */ 
/* 507 */     ,getDuplicateIndex: function(nodeId){
/* 508 */         var index = -1;
/* 509 */         if(!this.isDuplicate(nodeId)) {
/* 510 */             return index;
/* 511 */         }
/* 512 */ 
/* 513 */         var node = this.getNode(nodeId);
/* 514 */         if(node && node.data.templateRecord) {
/* 515 */             index = 0;
/* 516 */             var pn = node.previousSibling;
/* 517 */             while(pn &&
/* 518 */                 pn.data.templateRecord &&
/* 519 */                 pn.data.templateRecord.get('id') == node.data.templateRecord.get('id')
/* 520 */             ) {
/* 521 */                 index++;
/* 522 */                 pn = pn.previousSibling;
/* 523 */             }
/* 524 */             return index;
/* 525 */         }
/* 526 */ 
/* 527 */         return index;
/* 528 */     }
/* 529 */ 
/* 530 */     ,isFirstDuplicate: function(nodeId){
/* 531 */         if(!this.isDuplicate(nodeId)) {
/* 532 */             return false;
/* 533 */         }
/* 534 */         var node = this.getNode(nodeId);
/* 535 */         if(node && node.data.templateRecord) {
/* 536 */             var pn = node.previousSibling;
/* 537 */             if(pn &&
/* 538 */                 pn.data.templateRecord
/* 539 */                 && pn.data.templateRecord.get('id') !== node.data.templateRecord.get('id')
/* 540 */             ) {
/* 541 */                 return true;
/* 542 */             }
/* 543 */         }
/* 544 */         return false;
/* 545 */     }
/* 546 */ 
/* 547 */     ,isLastDuplicate: function(nodeId){
/* 548 */         var node = this.getNode(nodeId);
/* 549 */         if(node && node.data.templateRecord) {
/* 550 */             var s = node.nextSibling;

/* CB.VerticalEditGridHelperTree.js */

/* 551 */             return (
/* 552 */                 !s ||
/* 553 */                 !s.data.templateRecord ||
/* 554 */                 (s.data.templateRecord.get('id') !== node.data.templateRecord.get('id'))
/* 555 */             );
/* 556 */         }
/* 557 */         return null;
/* 558 */     }
/* 559 */ 
/* 560 */ });
/* 561 */ 

;
/* ObjectsStore.js */

/* 1  */ Ext.namespace('CB.DB');
/* 2  */ 
/* 3  */ /**
/* 4  *| * generic JsonStore class for objects store, used in different components
/* 5  *| **/
/* 6  */ 
/* 7  */ Ext.define('CB.DB.ObjectsStore', {
/* 8  */     extend: 'Ext.data.JsonStore'
/* 9  */ 
/* 10 */     ,constructor: function(){
/* 11 */         this.callParent([{
/* 12 */             model: 'ObjectsRecord'
/* 13 */             ,proxy: {
/* 14 */                 type: 'memory'
/* 15 */                 ,reader: {
/* 16 */                     type: 'json'
/* 17 */                 }
/* 18 */             }
/* 19 */         }]);
/* 20 */ 
/* 21 */         this.getTexts = getStoreNames;
/* 22 */     }
/* 23 */ 
/* 24 */     /**
/* 25 *|      * check record existance for a record data
/* 26 *|      * @param  array data record data
/* 27 *|      * @return void
/* 28 *|      */
/* 29 */     ,checkRecordExistance: function(data){
/* 30 */         if(Ext.isEmpty(data)) {
/* 31 */             return false;
/* 32 */         }
/* 33 */ 
/* 34 */         var id = Ext.valueFrom(data.nid, data.id);
/* 35 */         if(Ext.isEmpty(id)) {
/* 36 */             return false;
/* 37 */         }
/* 38 */ 
/* 39 */         var rec = this.findRecord('id', id, 0, false, false, true);
/* 40 */ 
/* 41 */         if (!rec) {
/* 42 */             data = Ext.apply({}, data);
/* 43 */             data.id = id;
/* 44 */             var r = Ext.create(
/* 45 */                 this.getModel().getName()
/* 46 */                 ,data
/* 47 */             );
/* 48 */ 
/* 49 */             r.set('iconCls', getItemIcon(data));
/* 50 */             this.add(r);

/* ObjectsStore.js */

/* 51 */         }
/* 52 */     }
/* 53 */ 
/* 54 */     /**
/* 55 *|      * check record existance for a set of records
/* 56 *|      * @param  array arr
/* 57 *|      * @return void
/* 58 *|      */
/* 59 */     ,checkRecordsExistance: function(arr){
/* 60 */         Ext.each(
/* 61 */             arr
/* 62 */             ,function(d){
/* 63 */                 this.checkRecordExistance(d);
/* 64 */             }
/* 65 */             ,this
/* 66 */         );
/* 67 */     }
/* 68 */ });
/* 69 */ 

;
/* DirectObjectsStore.js */

/* 1  */ Ext.namespace('CB.DB');
/* 2  */ 
/* 3  */ /**
/* 4  *| * generic DirectStore class for objects store, used in different components
/* 5  *| **/
/* 6  */ 
/* 7  */ Ext.define('CB.DB.DirectObjectsStore', {
/* 8  */     extend: 'Ext.data.DirectStore'
/* 9  */ 
/* 10 */     ,autoLoad: false
/* 11 */     ,restful: false
/* 12 */ 
/* 13 */     ,constructor: function(){
/* 14 */         var params = arguments[0];
/* 15 */ 
/* 16 */         params = Ext.apply(
/* 17 */             params
/* 18 */             ,{
/* 19 */                 model: 'ObjectsRecord'
/* 20 */                 ,proxy: {
/* 21 */                     type: 'direct'
/* 22 */                     ,paramsAsHash: true
/* 23 */                     ,api: { read: CB_Objects.getAssociatedObjects }
/* 24 */                     ,reader: {
/* 25 */                         type: 'json'
/* 26 */                         ,successProperty: 'success'
/* 27 */                         ,rootProperty: 'data'
/* 28 */                         ,messageProperty: 'msg'
/* 29 */                     }
/* 30 */                     ,listeners:{
/* 31 */                         load: function(proxy, obj, opt){
/* 32 */                             for (var i = 0; i < obj.result.data.length; i++) {
/* 33 */                                 obj.result.data[i].date = date_ISO_to_local_date(obj.result.data[i].date);
/* 34 */                                 if(!Ext.isEmpty(obj.result.data[i].cfg.iconCls)) {
/* 35 */                                     obj.result.data[i].iconCls = obj.result.data[i].cfg.iconCls;
/* 36 */                                 }
/* 37 */                             }
/* 38 */                         }
/* 39 */                     }
/* 40 */                 }
/* 41 */             }
/* 42 */         );
/* 43 */ 
/* 44 */         // Ext.apply(this, params);
/* 45 */         this.callParent([params]);
/* 46 */ 
/* 47 */         this.getTexts = getStoreNames;
/* 48 */     }
/* 49 */ });
/* 50 */ 

/* DirectObjectsStore.js */

/* 51 */ CB.DB.DirectObjectsStore.borrow(
/* 52 */     CB.DB.ObjectsStore
/* 53 */     ,[
/* 54 */         'checkRecordExistance'
/* 55 */         ,'checkRecordsExistance'
/* 56 */     ]
/* 57 */ );
/* 58 */ 

;
/* TemplateStore.js */

/* 1  */ Ext.namespace('CB.DB');
/* 2  */ 
/* 3  */ /**
/* 4  *| * generic JsonStore class for template stores
/* 5  *| **/
/* 6  */ 
/* 7  */ Ext.define('CB.DB.TemplateStore', {
/* 8  */     extend: 'Ext.data.JsonStore'
/* 9  */ 
/* 10 */     ,defaultParams: {
/* 11 */         autoLoad: true
/* 12 */         ,model: 'Template'
/* 13 */         // ,fields: [
/* 14 */         //     {name: 'id', type: 'int'}
/* 15 */         //     ,{name:'pid', type: 'int'}
/* 16 */         //     ,'tag'
/* 17 */         //     ,'name'
/* 18 */         //     ,'title'
/* 19 */         //     ,'type'
/* 20 */         //     ,{name: 'order', type: 'int'}
/* 21 */         //     ,{name: 'cfg', convert: function(v, r){ return Ext.isEmpty(v) ? {} : v;} }
/* 22 */         // ]
/* 23 */     }
/* 24 */ 
/* 25 */     ,constructor: function(params){
/* 26 */         Ext.applyIf(params, this.defaultParams);
/* 27 */         if(Ext.isEmpty(params.proxy)) {
/* 28 */             params.proxy = new Ext.data.MemoryProxy(params.data || []);
/* 29 */         }
/* 30 */ 
/* 31 */         this.callParent(arguments);
/* 32 */         // CB.DB.TemplateStore.superclass.constructor.call(this, params);
/* 33 */     }
/* 34 */ });
/* 35 */ 

;
/* ViewPort.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.ViewPort', {
/* 4   */     extend: 'Ext.Viewport'
/* 5   */ 
/* 6   */     ,layout: 'fit'
/* 7   */     ,border: false
/* 8   */ 
/* 9   */     ,initComponent: function(){
/* 10  */ 
/* 11  */         this.initComponents();
/* 12  */ 
/* 13  */         Ext.apply(this, {
/* 14  */             items: {
/* 15  */                 lbar: App.mainLBar
/* 16  */                 ,layout: 'fit'
/* 17  */                 ,border: false
/* 18  */                 ,items: [
/* 19  */                     {
/* 20  */                         region: 'center'
/* 21  */                         ,layout: 'border'
/* 22  */                         ,border: false
/* 23  */                         ,bbar: App.mainStatusBar
/* 24  */                         ,items: [
/* 25  */                             App.mainLPanel
/* 26  */                             ,{
/* 27  */                                 layout: 'fit'
/* 28  */                                 ,region: 'center'
/* 29  */                                 ,bodyStyle: 'border: 0'
/* 30  */                                 ,tbar: App.mainTBar
/* 31  */                                 ,items: [App.mainTabPanel]
/* 32  */                             }
/* 33  */                         ]
/* 34  */                     }
/* 35  */                 ]
/* 36  */             }
/* 37  */             ,listeners: {
/* 38  */                 scope: this
/* 39  */                 ,login: this.onLogin
/* 40  */                 ,fileupload: this.onFileUpload
/* 41  */                 ,filedownload: this.onFilesDownload
/* 42  */                 ,createobject: this.createObject
/* 43  */                 ,deleteobject: this.onDeleteObject
/* 44  */                 ,opencalendar: this.openCalendar
/* 45  */                 ,useradded: this.onUsersChange
/* 46  */                 ,userdeleted: this.onUsersChange
/* 47  */             }
/* 48  */         });
/* 49  */ 
/* 50  */         this.callParent(arguments);

/* ViewPort.js */

/* 51  */     }
/* 52  */ 
/* 53  */     /**
/* 54  *|      * init main components for this viewport
/* 55  *|      * @return void
/* 56  *|      */
/* 57  */     ,initComponents: function() {
/* 58  */ 
/* 59  */         this.initButtons();
/* 60  */ 
/* 61  */         var items = [ {
/* 62  */                 xtype: 'panel'
/* 63  */                 ,border: false
/* 64  */                 ,style: 'border-bottom: 1px solid #5f5f5f'
/* 65  */                 ,bodyStyle: 'background: transparent'
/* 66  */                 ,height: 49
/* 67  */                 ,items: [
/* 68  */                     this.buttons.toggleLeftRegion
/* 69  */                 ]
/* 70  */             }
/* 71  */             ,this.buttons.create
/* 72  */             ,this.buttons.toggleFilterPanel
/* 73  */             ,this.buttons.toggleNotificationsView
/* 74  */         ];
/* 75  */ 
/* 76  */         //add config buttons if present
/* 77  */         if(Ext.isObject(App.config.leftRibbonButtons)) {
/* 78  */             Ext.iterate(
/* 79  */                 App.config.leftRibbonButtons
/* 80  */                 ,function(k, cfg) {
/* 81  */                     cfg.scale = 'large';
/* 82  */                     cfg.scope = this;
/* 83  */                     cfg.handler = this.onLeftRibbonButtonClick;
/* 84  */                     items.push(cfg);
/* 85  */                 }
/* 86  */                 ,this
/* 87  */             );
/* 88  */         }
/* 89  */ 
/* 90  */         //add rest buttons
/* 91  */         items.push(
/* 92  */             '->'
/* 93  */             ,{
/* 94  */                 scale: 'large'
/* 95  */                 ,arrowVisible: false
/* 96  */                 ,cls: 'user-menu-button'
/* 97  */                 ,iconCls: 'bgs32'
/* 98  */                 ,menuAlign: 'bl-br'
/* 99  */                 ,menu: []
/* 100 */                 ,name: 'userMenu'

/* ViewPort.js */

/* 101 */                 ,listeners: {
/* 102 */                     menushow: this.onButtonMenuShow
/* 103 */                 }
/* 104 */             }
/* 105 */             ,{
/* 106 */                 text: '<span style="margin-right: 10px">&nbsp;</span>'
/* 107 */                 ,xtype: 'tbtext'
/* 108 */             }
/* 109 */         );
/* 110 */ 
/* 111 */         //application main left bar (left docked)
/* 112 */         App.mainLBar = new Ext.Toolbar({
/* 113 */             cls: 'ribbon-black'
/* 114 */             ,autoWidth: true
/* 115 */             ,dock: 'left'
/* 116 */             ,items: items
/* 117 */             ,plugins: [{
/* 118 */                 ptype: 'CBPluginSearchButton'
/* 119 */             }]
/* 120 */         });
/* 121 */ 
/* 122 */         //main left panel where the tree is added
/* 123 */         App.mainLPanel = new Ext.Panel({
/* 124 */             region: 'west'
/* 125 */             ,layout: 'card'
/* 126 */             ,width: 250
/* 127 */             ,split: {
/* 128 */                 size: 2
/* 129 */                 ,collapsible: false
/* 130 */             }
/* 131 */             ,collapsible: true
/* 132 */             ,collapseMode: 'mini'
/* 133 */             ,hideCollapseTool: true
/* 134 */             ,header: false
/* 135 */             ,animCollapse: false
/* 136 */             ,plain: true
/* 137 */             ,border: false
/* 138 */             ,bodyBorder: false
/* 139 */             ,bodyStyle: 'background-color: #F4F4F4'
/* 140 */             ,bodyCls: 'main-nav'
/* 141 */             ,defaults: {
/* 142 */                 border: false
/* 143 */                 ,bodyBoder: false
/* 144 */                 ,bodyStyle: 'background-color: #F4F4F4'
/* 145 */                 ,lazyrender: true
/* 146 */                 ,scrollable: true
/* 147 */             }
/* 148 */             ,stateful: true
/* 149 */             ,stateId: 'mAc'
/* 150 */             ,stateEvents: ['resize']

/* ViewPort.js */

/* 151 */             ,tbar: Ext.create({
/* 152 */                 xtype: 'panel'
/* 153 */                 ,height: 51
/* 154 */                 ,border: false
/* 155 */                 ,style: 'background: #f4f4f4; text-align: center; border-bottom: 1px solid #99bce8 !important'
/* 156 */                 ,bodyStyle: 'background: #f4f4f4'
/* 157 */                 ,html: '<img src="/css/i/casebox-logo-small.png" style="padding: 9px" />'
/* 158 */             })
/* 159 */             ,getState: function(){
/* 160 */                 var rez = {
/* 161 */                     // collapsed: this.collapsed
/* 162 */                     width: this.width
/* 163 */                 };
/* 164 */ 
/* 165 */                 return rez;
/* 166 */             }
/* 167 */         });
/* 168 */ 
/* 169 */         // prepare components for main top toolbar
/* 170 */         this.breadcrumb = Ext.create({
/* 171 */             xtype: 'CBBreadcrumb'
/* 172 */             ,cls: 'fs18'
/* 173 */             ,flex: 1
/* 174 */         });
/* 175 */ 
/* 176 */         this.searchField = Ext.create({
/* 177 */                 xtype: 'CBSearchField'
/* 178 */                 ,cls: 'mainSearch'
/* 179 */                 ,emptyText: L.Search + ' Casebox'
/* 180 */                 ,minListWidth: 150
/* 181 */                 ,width: 350
/* 182 */             }
/* 183 */         );
/* 184 */ 
/* 185 */         App.mainTBar = new Ext.Toolbar({
/* 186 */             height: 50
/* 187 */             ,style:'background: #f4f4f4; border: 0;'
/* 188 */             ,items: [
/* 189 */                 this.breadcrumb
/* 190 */                 // ,'->'
/* 191 */                 ,this.searchField
/* 192 */                 ,{
/* 193 */                     xtype: 'tbspacer'
/* 194 */                     ,width: 10
/* 195 */                 }
/* 196 */             ]
/* 197 */         });
/* 198 */ 
/* 199 */         App.mainTabPanel = new Ext.TabPanel({
/* 200 */             tabWidth: 205

/* ViewPort.js */

/* 201 */             ,minTabWidth: 100
/* 202 */             ,enableTabScroll: true
/* 203 */             ,resizeTabs: true
/* 204 */             ,activeTab: 0
/* 205 */             ,header: false
/* 206 */             ,region: 'center'
/* 207 */             ,plain: true
/* 208 */             ,bodyStyle: 'background-color: #FFF'
/* 209 */             ,componentCls: 'mainTabPanel'
/* 210 */             ,border: false
/* 211 */             ,defaults: {
/* 212 */                 tabConfig: {
/* 213 */                     textAlign: 'left'
/* 214 */                 }
/* 215 */             }
/* 216 */             ,items: []
/* 217 */         });
/* 218 */ 
/* 219 */         App.mainStatusBar = new CB.widget.TaskBar({
/* 220 */                 style:'border-top: 1px solid #aeaeae'
/* 221 */                 ,height: 25
/* 222 */                 ,trayItems: [
/* 223 */                     {xtype: 'uploadwindowbutton'}
/* 224 */                 ]
/* 225 */         });
/* 226 */     }
/* 227 */ 
/* 228 */     /**
/* 229 *|      * define main actions used in viewport
/* 230 *|      * @return object
/* 231 *|      */
/* 232 */     ,initActions: function() {
/* 233 */         this.actions = {
/* 234 */             toggleLeftRegion: new Ext.Action({
/* 235 */                 tooltip: L.Back
/* 236 */                 ,itemId: 'togglelr'
/* 237 */                 ,pressed: true
/* 238 */                 ,enableToggle: true
/* 239 */                 ,iconCls: 'im-menu-negative'
/* 240 */                 ,scale: 'large'
/* 241 */                 ,scope: this
/* 242 */                 ,handler: this.toggleLeftRegion
/* 243 */             })
/* 244 */ 
/* 245 */             ,toggleFilterPanel: new Ext.Action({
/* 246 */                 tooltip: L.Filter
/* 247 */                 ,itemId: 'togglefp'
/* 248 */                 ,enableToggle: true
/* 249 */                 ,iconCls: 'im-filter-negative'
/* 250 */                 ,scale: 'large'

/* ViewPort.js */

/* 251 */                 ,scope: this
/* 252 */                 ,handler: this.onToggleFilterPanelClick
/* 253 */             })
/* 254 */ 
/* 255 */             ,toggleNotificationsView: new Ext.Action({
/* 256 */                 tooltip: L.Notifications
/* 257 */                 ,itemId: 'toggleNotifications'
/* 258 */                 ,enableToggle: true
/* 259 */                 ,iconCls: 'im-notifications-negative'
/* 260 */                 ,cls: 'numbersButton'
/* 261 */                 ,text: ''
/* 262 */                 ,scale: 'large'
/* 263 */                 ,scope: this
/* 264 */                 ,handler: this.onToggleNotificationsViewClick
/* 265 */             })
/* 266 */         };
/* 267 */ 
/* 268 */         return this.actions;
/* 269 */     }
/* 270 */ 
/* 271 */     /**
/* 272 *|      * define main buttons
/* 273 *|      * @return object
/* 274 *|      */
/* 275 */     ,initButtons: function() {
/* 276 */         this.initActions();
/* 277 */ 
/* 278 */         this.buttons = {
/* 279 */             toggleLeftRegion: new Ext.Button(this.actions.toggleLeftRegion)
/* 280 */             ,toggleFilterPanel: new Ext.Button(this.actions.toggleFilterPanel)
/* 281 */             ,toggleNotificationsView: new Ext.Button(this.actions.toggleNotificationsView)
/* 282 */             ,create: new Ext.Button({
/* 283 */                 qtip: L.New
/* 284 */                 ,itemId: 'create'
/* 285 */                 ,arrowVisible: false
/* 286 */                 ,iconCls: 'im-create-negative'
/* 287 */                 ,disabled: true
/* 288 */                 ,scale: 'large'
/* 289 */                 ,menuAlign: 'tl-tr'
/* 290 */                 ,menu: [
/* 291 */                 ]
/* 292 */                 ,listeners: {
/* 293 */                     menushow: this.onButtonMenuShow
/* 294 */                 }
/* 295 */             })
/* 296 */         };
/* 297 */ 
/* 298 */         this.buttons.toggleLeftRegion.on(
/* 299 */             'afterrender'
/* 300 */             ,function(b, e) {

/* ViewPort.js */

/* 301 */                 b.toggle(App.mainLPanel.getCollapsed() === false);
/* 302 */             }
/* 303 */             ,this
/* 304 */         );
/* 305 */ 
/* 306 */         App.on('notificationsUpdated', this.updateNotificationsCount, this);
/* 307 */ 
/* 308 */         return this.actions;
/* 309 */     }
/* 310 */ 
/* 311 */     ,toggleLeftRegion: function(b, e) {
/* 312 */         if(b.pressed) {
/* 313 */             App.mainLPanel.expand();
/* 314 */         } else {
/* 315 */             App.mainLPanel.collapse();
/* 316 */         }
/* 317 */     }
/* 318 */ 
/* 319 */     ,onToggleFilterPanelClick: function(b, e) {
/* 320 */         this.buttons.toggleFilterPanel.setPressed(b.pressed);
/* 321 */ 
/* 322 */         App.mainLPanel.getLayout().setActiveItem(
/* 323 */             b.pressed
/* 324 */                 ? 1
/* 325 */                 : 0
/* 326 */         );
/* 327 */     }
/* 328 */ 
/* 329 */     ,updateNotificationsCount: function(counts) {
/* 330 */         var text = (counts.unseen > 0)
/* 331 */             ? counts.unseen
/* 332 */ 
/* 333 */             : '';
/* 334 */ 
/* 335 */         this.buttons.toggleNotificationsView.setText(text);
/* 336 */ 
/* 337 */         if(!this.originalDocTitle) {
/* 338 */             this.originalDocTitle = document.title;
/* 339 */         }
/* 340 */ 
/* 341 */         document.title = (
/* 342 */             Ext.isEmpty(text)
/* 343 */                 ? ''
/* 344 */                 : '(' + text + ') '
/* 345 */             ) + this.originalDocTitle;
/* 346 */     }
/* 347 */ 
/* 348 */     ,onToggleNotificationsViewClick: function(b, e) {
/* 349 */         var cpl = App.explorer.containersPanel.getLayout();
/* 350 */ 

/* ViewPort.js */

/* 351 */         cpl.setActiveItem(b.pressed ? 1 : 0);
/* 352 */ 
/* 353 */         if(b.pressed) {
/* 354 */             App.mainViewPort.breadcrumb.setValue([
/* 355 */                 {
/* 356 */                     id: -1
/* 357 */                     ,name: L.Notifications
/* 358 */                 }
/* 359 */             ]);
/* 360 */             // set Notifications title
/* 361 */         } else {
/* 362 */             //set browser title
/* 363 */             var proxy = App.explorer.store.getProxy()
/* 364 */                 ,action = Ext.valueFrom(proxy.reader.rawData, {})
/* 365 */                 ,options = proxy.extraParams;
/* 366 */ 
/* 367 */             App.controller.onVCViewLoaded(
/* 368 */                 proxy
/* 369 */                 ,action
/* 370 */                 ,options
/* 371 */             );
/* 372 */         }
/* 373 */     }
/* 374 */ 
/* 375 */     ,onLogin: function(){
/* 376 */         /* adding menu items */
/* 377 */         var um, umIdx = App.mainLBar.items.findIndex( 'name', 'userMenu');
/* 378 */         if(umIdx > -1) {
/* 379 */             um = App.mainLBar.items.getAt(umIdx);
/* 380 */             um.setIcon(App.config.photoPath + App.loginData.id + '.jpg?32=' + CB.DB.usersStore.getPhotoParam(App.loginData.id));
/* 381 */         }
/* 382 */ 
/* 383 */         // adding available languages to setting menu
/* 384 */         var langs = [];
/* 385 */         CB.DB.languages.each(
/* 386 */             function(r){
/* 387 */                 langs.push({
/* 388 */                     text: r.get('name')
/* 389 */                     ,xtype: 'menucheckitem'
/* 390 */                     ,checked: (r.get('id') == App.loginData.language_id)
/* 391 */                     ,data:{id: r.get('id')}
/* 392 */                     ,scope: this
/* 393 */                     ,handler: this.setUserLanguage
/* 394 */                     ,group: 'language'
/* 395 */                 });
/* 396 */             }
/* 397 */             ,this
/* 398 */         );
/* 399 */ 
/* 400 */ 

/* ViewPort.js */

/* 401 */         // creating menu config for available themes
/* 402 */         var themes = [];
/* 403 */         CB.DB.themes.each(
/* 404 */             function(r){
/* 405 */                 themes.push({
/* 406 */                     text: r.get('name')
/* 407 */                     ,xtype: 'menucheckitem'
/* 408 */                     ,checked: (r.get('id') == App.loginData.theme)
/* 409 */                     ,data:{id: r.get('id')}
/* 410 */                     ,scope: this
/* 411 */                     ,handler: this.setUserTheme
/* 412 */                     ,group: 'theme'
/* 413 */                 });
/* 414 */             }
/* 415 */             ,this
/* 416 */         );
/* 417 */ 
/* 418 */         um.menu.add(
/* 419 */             {
/* 420 */                 text: L.Account
/* 421 */                 // ,iconCls: 'icon-user-' + App.loginData.sex
/* 422 */                 ,iconCls: 'icon-user-account'
/* 423 */                 ,handler: function(){
/* 424 */                     App.openWindow({
/* 425 */                         xtype: 'CBAccount'
/* 426 */                         ,id: 'accountWnd'
/* 427 */                     });
/* 428 */                 }
/* 429 */             }
/* 430 */             ,'-'
/* 431 */             ,{
/* 432 */                 text: L.NotifySettings
/* 433 */                 // ,iconCls: 'i-settings'
/* 434 */                 // ,itemId: 'notify-settings'
/* 435 */                 ,scope: this
/* 436 */                 ,handler: this.onNotifySettingsClick
/* 437 */             },{
/* 438 */                 text: L.Theme
/* 439 */                 ,menu: themes
/* 440 */             },{
/* 441 */                 text: L.Language
/* 442 */                 // ,iconCls: 'icon-language'
/* 443 */                 ,hideOnClick: false
/* 444 */                 ,menu: langs
/* 445 */             }
/* 446 */             ,'-'
/* 447 */             ,{
/* 448 */                 text: L.Exit
/* 449 */                 ,iconCls: 'icon-exit'
/* 450 */                 ,handler: this.logout, scope: this

/* ViewPort.js */

/* 451 */             }
/* 452 */         );
/* 453 */ 
/* 454 */         var managementItems = [];
/* 455 */         if(App.loginData.manage) {
/* 456 */             managementItems.push(
/* 457 */                 {
/* 458 */                     text: L.Users
/* 459 */                     ,iconCls: 'icon-users'
/* 460 */                     ,handler: function(){
/* 461 */                         var w = new CB.VerifyPassword({
/* 462 */                             listeners:{
/* 463 */                                 scope: this
/* 464 */                                 ,beforeclose: function(cmp){
/* 465 */                                     if(cmp.success !== true) {
/* 466 */                                         cmp.destroy();
/* 467 */                                     } else {
/* 468 */                                         App.openWindow({
/* 469 */                                             xtype: 'CBUsersGroups'
/* 470 */                                             ,id: 'usersGroupsWnd'
/* 471 */                                         });
/* 472 */                                     }
/* 473 */                                 }
/* 474 */                             }
/* 475 */                         });
/* 476 */                         w.show();
/* 477 */ 
/* 478 */                     }
/* 479 */                 }
/* 480 */             );
/* 481 */         }
/* 482 */ 
/* 483 */         if(App.loginData.admin) {
/* 484 */             managementItems.push(
/* 485 */                 {
/* 486 */                     text: L.ReloadTemplates
/* 487 */                     ,iconCls: 'icon-templates'
/* 488 */                     ,handler: function(){
/* 489 */                         reloadTemplates();
/* 490 */                     }
/* 491 */                 }
/* 492 */             );
/* 493 */         }
/* 494 */ 
/* 495 */         if(!Ext.isEmpty(managementItems)) {
/* 496 */             App.mainLBar.insert(
/* 497 */                 App.mainLBar.items.getCount() - 2
/* 498 */                 ,{
/* 499 */                     qtip: L.Settings
/* 500 */                     ,iconCls: 'im-settings-negative'

/* ViewPort.js */

/* 501 */                     ,arrowVisible: false
/* 502 */                     ,hideOnClick: false
/* 503 */                     ,scale: 'large'
/* 504 */                     ,menuAlign: 'bl-br'
/* 505 */                     ,menu: managementItems
/* 506 */                     ,listeners: {
/* 507 */                         menushow: this.onButtonMenuShow
/* 508 */                     }
/* 509 */                 }
/* 510 */             );
/* 511 */         }
/* 512 */ 
/* 513 */         App.mainLBar.doLayout();
/* 514 */ 
/* 515 */         /* end of adding menu items */
/* 516 */ 
/* 517 */         this.populateMainMenu();
/* 518 */     }
/* 519 */ 
/* 520 */     ,initCB: function(){
/* 521 */         if( CB.DB && CB.DB.templates && (CB.DB.templates.getCount() > 0) ){
/* 522 */             this.onLogin();
/* 523 */             App.DD = new CB.DD();
/* 524 */ 
/* 525 */             Ext.Function.defer(this.checkUrlLocate, 1500);
/* 526 */ 
/* 527 */             App.initialized = true;
/* 528 */ 
/* 529 */             App.fireEvent('cbinit', this);
/* 530 */ 
/* 531 */             // depress notifications button when view deactivated
/* 532 */             App.explorer.notificationsView.on(
/* 533 */                 'deactivate'
/* 534 */                 ,function(){
/* 535 */                     this.buttons.toggleNotificationsView.toggle(false, true);
/* 536 */                 }
/* 537 */                 ,this
/* 538 */             );
/* 539 */ 
/* 540 */         } else {
/* 541 */ 
/* 542 */             Ext.Function.defer(this.initCB, 500, this);
/* 543 */         }
/* 544 */     }
/* 545 */ 
/* 546 */     //check if a locate id is specified in url
/* 547 */     ,checkUrlLocate: function() {
/* 548 */         var locateId = String(window.location.search.split('locate=')[1]).split('&')[0];
/* 549 */ 
/* 550 */         if(!Ext.isEmpty(locateId)) {

/* ViewPort.js */

/* 551 */             // App.locateObject(locateId);
/* 552 */             App.controller.openObjectWindowById(locateId);
/* 553 */         }
/* 554 */     }
/* 555 */ 
/* 556 */     ,onLeftRibbonButtonClick: function(b, e) {
/* 557 */         App.openPath(b.path);
/* 558 */     }
/* 559 */ 
/* 560 */     ,logout: function () {
/* 561 */         return Ext.Msg.show({
/* 562 */             buttons: Ext.Msg.YESNO
/* 563 */             , title: L.ExitConfirmation
/* 564 */             , msg: L.ExitConfirmationMessage
/* 565 */             , fn: function (btn, text) {
/* 566 */                 if (btn === 'yes') {
/* 567 */                     CB_User.logout(function (r, e) {
/* 568 */                         if (r && (r.success === true)) {
/* 569 */                             App.confirmLeave = false;
/* 570 */                             window.location.reload();
/* 571 */                         } else if(r.msg) {
/* 572 */                             Ext.Msg.show({title: 'error', msg: r.msg});
/* 573 */                         }
/* 574 */                     });
/* 575 */                 }
/* 576 */             }
/* 577 */         });
/* 578 */     }
/* 579 */ 
/* 580 */     ,populateMainMenu: function(){
/* 581 */         App.mainTree = App.mainLPanel.add({
/* 582 */             layout: 'border'
/* 583 */             ,border: false
/* 584 */             ,scrollable: false
/* 585 */             ,items: [
/* 586 */                 {
/* 587 */                     xtype: 'CBBrowserTree'
/* 588 */                     ,region: 'center'
/* 589 */                     ,border: false
/* 590 */                     ,bodyStyle: 'border: 0'
/* 591 */                     ,data: {
/* 592 */                         rootNode: App.config.rootNode
/* 593 */                     }
/* 594 */                 }
/* 595 */                 , {
/* 596 */                     region: 'south'
/* 597 */                     ,xtype: 'tabpanel'
/* 598 */                     ,tabPosition: 'bottom'
/* 599 */                     ,cls: 'left-bottom-tabpanel'
/* 600 */                     ,split: {

/* ViewPort.js */

/* 601 */                         size: 3
/* 602 */                         ,collapsible: true
/* 603 */                         ,style: 'background-color: #dfe8f6'
/* 604 */                     }
/* 605 */                     ,stateful: true
/* 606 */                     ,stateId: 'lpsr'
/* 607 */                     ,collapseMode: 'mini'
/* 608 */                     ,border: false
/* 609 */                     ,bodyBorder: false
/* 610 */                     ,bodyStyle: 'background-color: transparent'
/* 611 */                     ,minHeight: 100
/* 612 */                     ,hidden: true
/* 613 */                     ,items: [
/* 614 */                         {
/* 615 */                             xtype: 'CBFavoritesPanel'
/* 616 */                         }
/* 617 */                     ]
/* 618 */                 }
/* 619 */             ]
/* 620 */         }).items.getAt(0);
/* 621 */ 
/* 622 */         App.Favorites = App.mainLPanel.down('CBFavoritesPanel');
/* 623 */ 
/* 624 */         App.mainLPanel.getLayout().setActiveItem(0);
/* 625 */ 
/* 626 */         App.mainFilterPanel = App.mainLPanel.add({
/* 627 */             xtype: 'CBFilterPanel'
/* 628 */             ,header: false
/* 629 */             ,border: false
/* 630 */             ,cls: 'x-panel-gray'
/* 631 */             ,tbar: [
/* 632 */                 '->'
/* 633 */                 ,{
/* 634 */                     iconCls: 'im-cancel'
/* 635 */                     ,itemId: 'close'
/* 636 */                     ,scale: 'medium'
/* 637 */                     ,scope: this
/* 638 */                     ,handler: function(b, e){
/* 639 */                         this.buttons.toggleFilterPanel.toggle(false);
/* 640 */                         this.onToggleFilterPanelClick(this.buttons.toggleFilterPanel, e);
/* 641 */                     }
/* 642 */                 }
/* 643 */             ]
/* 644 */         });
/* 645 */ 
/* 646 */         if(App.mainTree){
/* 647 */             App.mainTree.getRootNode().data.name = 'My CaseBox';
/* 648 */         }
/* 649 */ 
/* 650 */         this.openDefaultExplorer();

/* ViewPort.js */

/* 651 */ 
/* 652 */         App.mainTabPanel.setActiveTab(0);
/* 653 */     }
/* 654 */ 
/* 655 */     ,selectTreeRootNode: function() {
/* 656 */         if(App.mainTree && App.explorer) {
/* 657 */             if(App.mainTree.rendered) {
/* 658 */                 var rn = App.mainTree.getRootNode();
/* 659 */                 App.mainTree.selectPath('/'+ rn.get('nid'), 'nid', '/');
/* 660 */             }
/* 661 */         }
/* 662 */     }
/* 663 */ 
/* 664 */     ,createObject: function(data, e){
/* 665 */         App.activateBrowserTab().editObject(data);
/* 666 */     }
/* 667 */ 
/* 668 */     ,onAccordionLinkClick: function(p, animate){
/* 669 */         p = App.openUniqueTabbedWidget(p.link, null, {iconCls: p.iconCls, title: p.title});
/* 670 */         return false;
/* 671 */     }
/* 672 */ 
/* 673 */     ,openCalendar: function(ev){
/* 674 */         if(ev && ev. stopPropagation) {
/* 675 */             ev.stopPropagation();
/* 676 */         }
/* 677 */ 
/* 678 */         App.openUniqueTabbedWidget('CBCalendarPanel');
/* 679 */     }
/* 680 */ 
/* 681 */     ,openDefaultExplorer: function(rootId){
/* 682 */         if(Ext.isEmpty(rootId) && App.mainTree) {
/* 683 */             rootId = Ext.valueFrom( App.mainTree.rootId, '/' );
/* 684 */         }
/* 685 */ 
/* 686 */         if(!App.activateTab(App.mainTabPanel, 'explorer')) {
/* 687 */             App.explorer = App.addTab(
/* 688 */                 App.mainTabPanel
/* 689 */                 ,new CB.browser.ViewContainer({
/* 690 */                     rootId: rootId
/* 691 */                     ,data: {id: 'explorer' }
/* 692 */                     ,closable: false
/* 693 */                 })
/* 694 */             );
/* 695 */         }
/* 696 */     }
/* 697 */ 
/* 698 */     ,showNotificationsView: function(){
/* 699 */         if(!App.activateTab(App.mainTabPanel, 'notificationsView')) {
/* 700 */             App.addTab(

/* ViewPort.js */

/* 701 */                 App.mainTabPanel
/* 702 */                 ,new CB.notifications.View({
/* 703 */                     data: {id: 'notificationsView' }
/* 704 */                     ,closable: false
/* 705 */                 })
/* 706 */             );
/* 707 */         }
/* 708 */     }
/* 709 */ 
/* 710 */     ,openPermissions: function(objectId) {
/* 711 */         if(isNaN(objectId)) {
/* 712 */             return;
/* 713 */         }
/* 714 */ 
/* 715 */         App.openWindow({
/* 716 */             xtype: 'CBSecurityWindow'
/* 717 */             ,id: 'opw' + objectId //objects permission window
/* 718 */             ,data: {
/* 719 */                 id: objectId
/* 720 */             }
/* 721 */         });
/* 722 */     }
/* 723 */ 
/* 724 */     ,onNotifySettingsClick: function(b, e) {
/* 725 */         var w = new CB.notifications.SettingsWindow();
/* 726 */         w.show();
/* 727 */     }
/* 728 */ 
/* 729 */     ,setUserLanguage: function(b, e){
/* 730 */         var d = b.config.data;
/* 731 */ 
/* 732 */         if(d.id == App.loginData.language_id) {
/* 733 */             return;
/* 734 */         }
/* 735 */ 
/* 736 */         Ext.Msg.confirm(
/* 737 */             L.LanguageChange
/* 738 */             ,L.LanguageChangeMessage
/* 739 */             ,function(pb){
/* 740 */                 if(pb === 'yes') {
/* 741 */                     CB_User.setLanguage(d.id, this.processSetUserOption, this);
/* 742 */                 }
/* 743 */                 if(d.ownerCt) {
/* 744 */                     d.ownerCt.items.each(
/* 745 */                         function(i){
/* 746 */                             i.setChecked(i.data.id == App.loginData.language_id);
/* 747 */                         }
/* 748 */                         ,this
/* 749 */                     );
/* 750 */                 }

/* ViewPort.js */

/* 751 */             }
/* 752 */             ,this
/* 753 */         );
/* 754 */     }
/* 755 */ 
/* 756 */     ,setUserTheme: function(b, e){
/* 757 */         var d = b.config.data;
/* 758 */ 
/* 759 */         if(d.id == App.loginData.theme) {
/* 760 */             return;
/* 761 */         }
/* 762 */ 
/* 763 */         Ext.Msg.confirm(
/* 764 */             L.Theme
/* 765 */             ,L.ThemeChangeMessage
/* 766 */             ,function(pb){
/* 767 */                 if(pb === 'yes') {
/* 768 */                     CB_User.setTheme(d.id, this.processSetUserOption, this);
/* 769 */                 }
/* 770 */                 if(d.ownerCt) {
/* 771 */                     d.ownerCt.items.each(
/* 772 */                         function(i){
/* 773 */                             i.setChecked(i.data.id == App.loginData.theme);
/* 774 */                         }
/* 775 */                         ,this
/* 776 */                     );
/* 777 */                 }
/* 778 */             }
/* 779 */             ,this
/* 780 */         );
/* 781 */     }
/* 782 */ 
/* 783 */     ,processSetUserOption: function(r, e){
/* 784 */         if(r && (r.success === true)) {
/* 785 */             App.confirmLeave = false;
/* 786 */             document.location.reload();
/* 787 */         } else {
/* 788 */             Ext.Msg.alert(L.Error, L.ErrorOccured);
/* 789 */         }
/* 790 */     }
/* 791 */ 
/* 792 */     ,focusLastElement: function(){
/* 793 */         if(this.lastFocusedElement){
/* 794 */             this.lastFocusedElement.focus(500);
/* 795 */         }
/* 796 */     }
/* 797 */ 
/* 798 */     ,onUsersChange: function(){
/* 799 */         CB.DB.usersStore.reload();
/* 800 */     }

/* ViewPort.js */

/* 801 */ 
/* 802 */     ,onDeleteObject: function(data){
/* 803 */         Ext.Msg.confirm(
/* 804 */             L.DeleteConfirmation
/* 805 */             ,L.DeleteConfirmationMessage + ' "' + Ext.valueFrom(data.title, data.name) +'"?'
/* 806 */             ,function(btn){
/* 807 */                 if(btn === 'yes') {
/* 808 */                     CB_Browser['delete'](data.id, this.onProcessObjectsDeleted, this);
/* 809 */                 }
/* 810 */             }
/* 811 */             ,this
/* 812 */         );
/* 813 */ 
/* 814 */     }
/* 815 */ 
/* 816 */     ,onProcessObjectsDeleted: function(r, e){
/* 817 */         if(!r || (r.success !== true)) {
/* 818 */             return;
/* 819 */         }
/* 820 */         if(!Ext.isEmpty(r.ids)) {
/* 821 */             this.fireEvent('objectsdeleted', r.ids, e);
/* 822 */         }
/* 823 */     }
/* 824 */ 
/* 825 */     ,onFileUpload: function(data, e){
/* 826 */         if(e && e.stopEvent) {
/* 827 */             e.stopEvent();
/* 828 */         }
/* 829 */ 
/* 830 */         if(!this.fileField) {
/* 831 */             this.fileField = document.createElement("INPUT");
/* 832 */             this.fileField.setAttribute("type", "file");
/* 833 */             this.fileField.setAttribute("multiple", "true");
/* 834 */ 
/* 835 */             this.fileField.onchange = Ext.Function.bind(
/* 836 */                 function(ev){
/* 837 */                     if(this.fileField.files.length > 0) {
/* 838 */                         App.addFilesToUploadQueue(this.fileField.files, this.fileField.data);
/* 839 */                     }
/* 840 */                 }
/* 841 */                 ,this
/* 842 */             );
/* 843 */         }
/* 844 */         this.fileField.data = data;
/* 845 */ 
/* 846 */         this.fileField.value = null;
/* 847 */         this.fileField.click();
/* 848 */     }
/* 849 */ 
/* 850 */     ,onFileUploaded: function(w, data){

/* ViewPort.js */

/* 851 */         this.fireEvent('fileuploaded', {data: data});
/* 852 */     }
/* 853 */ 
/* 854 */     ,onFilesDownload: function(ids, zipped, e){
/* 855 */         if(e) {
/* 856 */             e.stopPropagation();
/* 857 */         }
/* 858 */ 
/* 859 */         if(zipped !== true){
/* 860 */             if(!Ext.isArray(ids)) {
/* 861 */                 ids = String(ids).split(',');
/* 862 */             }
/* 863 */ 
/* 864 */             Ext.each(
/* 865 */                 ids
/* 866 */                 ,function(id){
/* 867 */                     if(isNaN(id)) {
/* 868 */                         return false;
/* 869 */                     }
/* 870 */                     App.downloadFile(id);
/* 871 */                 }
/* 872 */                 ,this
/* 873 */             );
/* 874 */         } else {
/* 875 */             if(Ext.isArray(ids)) {
/* 876 */                 ids = ids.join(',');
/* 877 */             }
/* 878 */             App.downloadFile(ids, true);
/* 879 */         }
/* 880 */     }
/* 881 */ 
/* 882 */     ,onButtonMenuShow: function(btn, menu, eOpts) {
/* 883 */         menu.showBy(
/* 884 */             btn
/* 885 */             ,Ext.valueFrom(btn.menuAlign, 'tl-tr')
/* 886 */             ,[2, 0]
/* 887 */         );
/* 888 */     }
/* 889 */ });
/* 890 */ 

;
/* Panel.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ /**
/* 4   *|  * Basic plugins panel for an item, that requires an api to be set
/* 5   *|  * It contains main functionality for loading plugins data from given api,
/* 6   *|  * instanciate plugin classes and add them tho the panel body
/* 7   *|  * Also display object title at the top if not a task
/* 8   *|  */
/* 9   */ 
/* 10  */ Ext.define('CB.plugin.Panel', {
/* 11  */     extend: 'Ext.Panel'
/* 12  */     ,alias: 'CBPluginPanel'
/* 13  */ 
/* 14  */     ,autoHeight: true
/* 15  */     ,scrollable: true
/* 16  */     ,cls: 'plugins-panel'
/* 17  */     ,padding:0
/* 18  */ 
/* 19  */     ,initComponent: function(){
/* 20  */ 
/* 21  */         Ext.apply(this, {
/* 22  */             layout: {
/* 23  */                 type: 'vbox'
/* 24  */                 ,align: 'stretch'
/* 25  */             }
/* 26  */         });
/* 27  */ 
/* 28  */         this.callParent(arguments);
/* 29  */ 
/* 30  */         App.on('filesuploaded', this.onFilesUploaded, this);
/* 31  */         App.on('objectsaction', this.onObjectsAction, this);
/* 32  */ 
/* 33  */         this.delayLoadTask = new Ext.util.DelayedTask(this.doLoad, this);
/* 34  */     }
/* 35  */ 
/* 36  */     ,load: function (params) {
/* 37  */         if(!isNaN(params)) {
/* 38  */             params = {id: params};
/* 39  */         }
/* 40  */ 
/* 41  */         var el = this.getEl();
/* 42  */         if(Ext.isEmpty(el) || !el.isVisible(true)) {
/* 43  */             return;
/* 44  */         }
/* 45  */ 
/* 46  */         this.delayLoadTask.cancel();
/* 47  */ 
/* 48  */         /* check if not the same as current params */
/* 49  */         if(Ext.encode(params) == Ext.encode(this.loadedParams)) {
/* 50  */             return;

/* Panel.js */

/* 51  */         }
/* 52  */ 
/* 53  */         /* delay task */
/* 54  */         this.delayLoadTask.delay(60, this.doLoad, this, arguments);
/* 55  */ 
/* 56  */     }
/* 57  */ 
/* 58  */     ,doLoad: function(params) {
/* 59  */         if(Ext.isEmpty(this.api)) {
/* 60  */             return;
/* 61  */         }
/* 62  */ 
/* 63  */         if(!isNaN(params)) {
/* 64  */             params = {id: params};
/* 65  */         }
/* 66  */ 
/* 67  */         this.clear();
/* 68  */ 
/* 69  */         if(Ext.isEmpty(params) || (Ext.isEmpty(params.id) && Ext.isEmpty(params.template_id))) {
/* 70  */             this.fireEvent('loaded', this);
/* 71  */             return;
/* 72  */         }
/* 73  */ 
/* 74  */         this.loadedParams = params; //Ext.apply({}, params);
/* 75  */         this.api(params, this.onLoadData, this);
/* 76  */     }
/* 77  */ 
/* 78  */     ,onLoadData: function(r, e) {
/* 79  */         var items = []
/* 80  */             ,params = Ext.valueFrom(this.loadedParams, {});
/* 81  */ 
/* 82  */         //check if object was found (success = true)
/* 83  */         if(!r || (r.success !== true)) {
/* 84  */             this.update('<div class="x-preview-mask">' + L.RecordIdNotFound.replace('{id}', '#' + params.id) + '</div>');
/* 85  */ 
/* 86  */         } else {
/* 87  */             var commonInfo = r.common
/* 88  */                 ? r.common.data
/* 89  */                 : Ext.valueFrom(r.data.systemProperties, {}).data;
/* 90  */ 
/* 91  */             Ext.apply(params, commonInfo);
/* 92  */ 
/* 93  */             this.removeAll(true);
/* 94  */ 
/* 95  */             this.createMenu = r.menu;
/* 96  */             Ext.iterate(
/* 97  */                 r.data
/* 98  */                 ,function(k, v, o) {
/* 99  */                     var cl = Ext.util.Format.capitalize(k.substr(0,1)) + k.substr(1);
/* 100 */                     cl = 'CBObjectPlugin' + cl;

/* Panel.js */

/* 101 */ 
/* 102 */                     var c = Ext.create(
/* 103 */                         cl
/* 104 */                         ,{
/* 105 */                             params: params
/* 106 */                         }
/* 107 */                     );
/* 108 */ 
/* 109 */                     c.createMenu = r.menu;
/* 110 */ 
/* 111 */                     items.push(c);
/* 112 */ 
/* 113 */                     if(!Ext.isDefined(v.data)) {
/* 114 */                         c.setVisible(false);
/* 115 */                     } else {
/* 116 */                         c.onLoadData(v);
/* 117 */                     }
/* 118 */                 }
/* 119 */                 ,this
/* 120 */             );
/* 121 */ 
/* 122 */             if(!Ext.isEmpty(items)) {
/* 123 */                 this.add(items);
/* 124 */             }
/* 125 */ 
/* 126 */             /**
/* 127 *|              * we make this check for title after all plugins have been added
/* 128 *|              * because objectProperties plugin applies loaded data (including object name)
/* 129 *|              * to the params
/* 130 *|              */
/* 131 */             if(params &&
/* 132 */                 // (CB.DB.templates.getType(params.template_id) !== 'task') &&
/* 133 */                 (params.from !== 'window') &&
/* 134 */                 !Ext.isEmpty(params.name)
/* 135 */             ){
/* 136 */                 var data = Ext.copyTo(
/* 137 */                     {}
/* 138 */                     ,params
/* 139 */                     ,'id,pids,path,name,template_id,status,statusCls,cid,cdate_ago_text,uid,udate_ago_text'
/* 140 */                 );
/* 141 */                 data.name = Ext.String.htmlEncode(data.name);
/* 142 */ 
/* 143 */                 var titleView = new CB.object.TitleView({
/* 144 */                     data: data
/* 145 */                     ,getContainerToolbarItems: function(){
/* 146 */                         return {};
/* 147 */                     }
/* 148 */                 });
/* 149 */ 
/* 150 */                 this.insert(0, titleView);

/* Panel.js */

/* 151 */             }
/* 152 */ 
/* 153 */             this.doLayout(true, true);
/* 154 */         }
/* 155 */ 
/* 156 */         this.fireEvent('loaded', this, params);
/* 157 */     }
/* 158 */ 
/* 159 */     ,clear: function() {
/* 160 */         this.removeAll(true);
/* 161 */         delete this.loadedParams;
/* 162 */     }
/* 163 */ 
/* 164 */     ,onFilesUploaded: function(pids) {
/* 165 */         if(!Ext.isEmpty(this.loadedParams)) {
/* 166 */             if(pids.indexOf(String(this.loadedParams.id)) >=0 ) {
/* 167 */                 this.reload();
/* 168 */             }
/* 169 */         }
/* 170 */     }
/* 171 */ 
/* 172 */     ,onObjectsAction: function(action, data, e) {
/* 173 */         if(this.loadedParams && (data.targetId == this.loadedParams.id)) {
/* 174 */             this.reload();
/* 175 */         }
/* 176 */     }
/* 177 */ 
/* 178 */     ,reload: function() {
/* 179 */         this.doLoad(this.loadedParams);
/* 180 */     }
/* 181 */ 
/* 182 */     /**
/* 183 *|      * method to be overriden for returning needed buttons for container toolbar
/* 184 *|      * @return object
/* 185 *|      *         Example: rez = {
/* 186 *|      *              tbar: {}
/* 187 *|      *              ,menu: {
/* 188 *|      *                   reload: {}
/* 189 *|      *              }
/* 190 *|      *          }
/* 191 *|      */
/* 192 */     ,getContainerToolbarItems: function() {
/* 193 */ 
/* 194 */     }
/* 195 */ });
/* 196 */ 

;
/* Preview.js */

/* 1   */ Ext.namespace('CB.form.view.object');
/* 2   */ 
/* 3   */ Ext.define('CB.object.view.Preview', {
/* 4   */     extend: 'Ext.Panel'
/* 5   */     ,alias: 'widget.CBObjectPreview'
/* 6   */     ,scrollable: true
/* 7   */     ,html: ''
/* 8   */     ,tbarCssClass: 'x-panel-white'
/* 9   */     ,loadMask: false
/* 10  */     ,padding: 0
/* 11  */     ,width: 300
/* 12  */     ,layout: 'fit'
/* 13  */     ,fitImagePreview: true
/* 14  */     ,loader: {
/* 15  */         autoLoad: false
/* 16  */     }
/* 17  */ 
/* 18  */     ,initComponent: function(){
/* 19  */         Ext.apply(this, {
/* 20  */             listeners: {
/* 21  */                 scope: this
/* 22  */                 ,afterrender: this.onAfterRender
/* 23  */             }
/* 24  */         });
/* 25  */ 
/* 26  */         this.callParent(arguments);
/* 27  */ 
/* 28  */         App.on('objectchanged', this.onObjectChanged, this);
/* 29  */     }
/* 30  */ 
/* 31  */     ,onAfterRender: function(){
/* 32  */         // this.getUpdater().showLoading = Ext.emptyFn;
/* 33  */     }
/* 34  */ 
/* 35  */     ,loadPreview: function(id, versionId){
/* 36  */         var el = this.getEl();
/* 37  */         if(Ext.isEmpty(el) || !el.isVisible(true)) {
/* 38  */             return;
/* 39  */         }
/* 40  */         if(this.delayedReloadTask) {
/* 41  */             this.delayedReloadTask.cancel();
/* 42  */         }
/* 43  */         this.newId = id;
/* 44  */         this.newVersionId = Ext.valueFrom(versionId, '');
/* 45  */         this.delayReload(100);
/* 46  */     }
/* 47  */ 
/* 48  */     ,delayReload: function(ms){
/* 49  */         if(!this.delayedReloadTask) {
/* 50  */             this.delayedReloadTask = new Ext.util.DelayedTask(this.reload, this);

/* Preview.js */

/* 51  */         }
/* 52  */         this.delayedReloadTask.delay(Ext.valueFrom(ms, 1000), this.reload, this);
/* 53  */ 
/* 54  */     }
/* 55  */ 
/* 56  */     ,reload: function(){
/* 57  */         var el = this.getEl();
/* 58  */ 
/* 59  */         if(Ext.isEmpty(this.newId) || isNaN(this.newId) || !el || !el.isVisible(true)) {
/* 60  */             return this.clear();
/* 61  */         }
/* 62  */ 
/* 63  */         this.doLoad(this.newId, this.newVersionId);
/* 64  */     }
/* 65  */ 
/* 66  */     ,doLoad: function(id, vId) {
/* 67  */ 
/* 68  */         this.loader.load({
/* 69  */             url: '/' + App.config.coreName + '/view/'+ id +'_' + vId + '/?i=1'
/* 70  */             ,callback: this.processLoad
/* 71  */             ,scope: this // optional scope for the callback
/* 72  */             ,discardUrl: false
/* 73  */             ,nocache: true
/* 74  */             ,scripts: false
/* 75  */ 
/* 76  */         });
/* 77  */     }
/* 78  */ 
/* 79  */     ,processLoad: function(el, success, r, e){
/* 80  */         this.data = {id: this.newId};
/* 81  */         this.loadedVersionId = this.newVersionId;
/* 82  */         this.body.scrollTo('top', 0);
/* 83  */         switch(r.responseText){
/* 84  */             case '<authenticate />':
/* 85  */                 window.location.reload();
/* 86  */                 break;
/* 87  */             case '&#160':
/* 88  */                 this.update(
/* 89  */                     '<div style="margin-top: 40px; text-align:center; color: 555; font-weight: bold">'+
/* 90  */                     '<img src="'+Ext.BLANK_IMAGE_URL+'" class="i16 d-loader" style="vertical-align:middle; margin-right: 5px"> '+L.generatingPreview+' &hellip; </div>'
/* 91  */                 );
/* 92  */                 this.delayReload();
/* 93  */                 break;
/* 94  */             case 'PDF':
/* 95  */                 var url = '/c/' + App.config.coreName + "/download/" + this.data.id + "/?pw=";
/* 96  */                 this.update(
/* 97  */                     '<object data="' + url + '" type="application/pdf" width="100%" height="100%">' +
/* 98  */                     'alt : <a href="' + url + '">' + this.data.name + '</a></object>'
/* 99  */                 );
/* 100 */                 break;

/* Preview.js */

/* 101 */         }
/* 102 */         this.attachEvents();
/* 103 */         this.fireEvent('loaded', this);
/* 104 */         if(this.params) {
/* 105 */             switch(detectFileEditor(this.params.name)) {
/* 106 */                  // case 'html':
/* 107 */                  case 'text':
/* 108 */                     hljs.highlightBlock(this.body.dom);
/* 109 */                     break;
/* 110 */             }
/* 111 */         }
/* 112 */     }
/* 113 */ 
/* 114 */     ,attachEvents: function(){
/* 115 */         var a = this.getEl().query('a.locate');
/* 116 */ 
/* 117 */         Ext.each(
/* 118 */             a
/* 119 */             ,function(t){
/* 120 */                 Ext.get(t).addListener(
/* 121 */                     'click'
/* 122 */                     ,function(ev, el){
/* 123 */                         App.locateObject(
/* 124 */                             el.attributes.getNamedItem('nid').value
/* 125 */                             ,el.attributes.getNamedItem('path').value
/* 126 */                         );
/* 127 */                     }
/* 128 */                     ,this
/* 129 */                 );
/* 130 */             }
/* 131 */             ,this
/* 132 */         );
/* 133 */ 
/* 134 */         a = this.getEl().query('a.taskA');
/* 135 */         Ext.each(
/* 136 */             a
/* 137 */             ,function(t){
/* 138 */                 Ext.get(t).addListener(
/* 139 */                     'click'
/* 140 */                     ,function(ev, el){
/* 141 */                         switch(el.attributes.getNamedItem('action').value) {
/* 142 */                             case 'close':
/* 143 */                                 Ext.Msg.show({
/* 144 */                                     title: L.CompletingTask
/* 145 */                                     ,msg: L.Message
/* 146 */                                     ,width: 400
/* 147 */                                     ,height: 200
/* 148 */                                     ,buttons: Ext.MessageBox.OKCANCEL
/* 149 */                                     ,multiline: true
/* 150 */                                     ,fn: function(b, message){

/* Preview.js */

/* 151 */                                         if(b === 'ok'){
/* 152 */                                             this.getEl().mask(L.CompletingTask + ' ...', 'x-mask-loading');
/* 153 */                                             CB_Tasks.close(this.data.id, this.onTaskChanged, this);
/* 154 */                                         }
/* 155 */                                     }
/* 156 */                                     ,scope: this
/* 157 */                                 });
/* 158 */                                 break;
/* 159 */                             case 'reopen':
/* 160 */                                 Ext.Msg.confirm( L.ReopeningTask, L.ReopenTaskConfirmationMsg, function(b){
/* 161 */                                         if(b === 'yes'){
/* 162 */                                             this.getEl().mask(L.ReopeningTask + ' ...', 'x-mask-loading');
/* 163 */                                             CB_Tasks.reopen(this.data.id, this.onTaskChanged, this);
/* 164 */                                         }
/* 165 */                                     }
/* 166 */                                     ,this
/* 167 */                                 );
/* 168 */                                 break;
/* 169 */                             case 'complete':
/* 170 */                                 Ext.Msg.show({
/* 171 */                                     title: L.CompletingTask
/* 172 */                                     ,msg: L.Message
/* 173 */                                     ,width: 400
/* 174 */                                     ,height: 200
/* 175 */                                     ,buttons: Ext.MessageBox.OKCANCEL
/* 176 */                                     ,multiline: true
/* 177 */                                     ,fn: function(b, message){
/* 178 */                                         if(b === 'ok') {
/* 179 */                                             CB_Tasks.complete(
/* 180 */                                                 {
/* 181 */                                                     id: this.data.id
/* 182 */                                                     ,message: message
/* 183 */                                                 }
/* 184 */                                                 ,this.onTaskChanged
/* 185 */                                                 ,this
/* 186 */                                             );
/* 187 */                                         }
/* 188 */                                     }
/* 189 */                                     ,scope: this
/* 190 */                                 });
/* 191 */                                 break;
/* 192 */                             case 'markcomplete':
/* 193 */                                 this.forUserId = el.attributes.getNamedItem('uid').value;
/* 194 */                                 Ext.Msg.show({
/* 195 */                                     title: L.SetCompleteStatusFor+ ' ' + CB.DB.usersStore.getName(this.forUserId)
/* 196 */                                     ,msg: L.Message
/* 197 */                                     ,width: 400
/* 198 */                                     ,height: 200
/* 199 */                                     ,buttons: Ext.MessageBox.OKCANCEL
/* 200 */                                     ,multiline: true

/* Preview.js */

/* 201 */                                     ,fn: function(b, message){
/* 202 */                                         if(b === 'ok') {
/* 203 */                                             CB_Tasks.setUserStatus(
/* 204 */                                                 {
/* 205 */                                                     id: this.data.id
/* 206 */                                                     ,user_id: this.forUserId
/* 207 */                                                     ,status: 1
/* 208 */                                                     ,message: message
/* 209 */                                                 }
/* 210 */                                                 ,this.onTaskChanged
/* 211 */                                                 ,this
/* 212 */                                             );
/* 213 */                                         }
/* 214 */                                     }
/* 215 */                                     ,scope: this
/* 216 */                                 });
/* 217 */                                 break;
/* 218 */                             case 'markincomplete':
/* 219 */                                 this.forUserId = el.attributes.getNamedItem('uid').value;
/* 220 */                                 Ext.Msg.show({
/* 221 */                                     title: L.SetIncompleteStatusFor + CB.DB.usersStore.getName(this.forUserId)
/* 222 */                                     ,msg: L.Message
/* 223 */                                     ,width: 400
/* 224 */                                     ,height: 200
/* 225 */                                     ,buttons: Ext.MessageBox.OKCANCEL
/* 226 */                                     ,multiline: true
/* 227 */                                     ,fn: function(b, message){
/* 228 */                                         if(b === 'ok') {
/* 229 */                                             CB_Tasks.setUserStatus(
/* 230 */                                                 {
/* 231 */                                                     id: this.data.id
/* 232 */                                                     ,user_id: this.forUserId
/* 233 */                                                     ,status: 0
/* 234 */                                                     ,message: message
/* 235 */                                                 }
/* 236 */                                                 ,this.onTaskChanged
/* 237 */                                                 ,this
/* 238 */                                             );
/* 239 */                                         }
/* 240 */                                     }
/* 241 */                                     ,scope: this
/* 242 */                                 });
/* 243 */                                 break;
/* 244 */                         }
/* 245 */                     }
/* 246 */                     ,this
/* 247 */                 );
/* 248 */             }
/* 249 */             ,this
/* 250 */         );

/* Preview.js */

/* 251 */ 
/* 252 */         a = this.getEl().query('a.path');
/* 253 */         Ext.each(
/* 254 */             a
/* 255 */             ,function(t){
/* 256 */                 Ext.get(t).addListener(
/* 257 */                     'click'
/* 258 */                     ,function(ev, el){
/* 259 */                         App.locateObject(
/* 260 */                             this.data.id
/* 261 */                             ,el.attributes.getNamedItem('path').value
/* 262 */                         );
/* 263 */                     }
/* 264 */                     ,this
/* 265 */                 );
/* 266 */             }
/* 267 */             ,this
/* 268 */         );
/* 269 */         a = this.getEl().query('.file-unknown a');
/* 270 */         Ext.each(
/* 271 */             a
/* 272 */             ,function(t){
/* 273 */                 Ext.get(t).addListener(
/* 274 */                     'click'
/* 275 */                     ,function(ev, el){
/* 276 */                         App.mainViewPort.fireEvent(
/* 277 */                             'fileopen'
/* 278 */                             ,{
/* 279 */                                 id: el.attributes.getNamedItem('nid').value
/* 280 */                             }
/* 281 */                         );
/* 282 */                     }
/* 283 */                     ,this
/* 284 */                 );
/* 285 */             }
/* 286 */             ,this
/* 287 */         );
/* 288 */ 
/* 289 */         //detect if it's a image preview
/* 290 */         this.viewingImage = null;
/* 291 */         a = this.getEl().query('img.fit-img');
/* 292 */         Ext.each(
/* 293 */             a
/* 294 */             ,function(t){
/* 295 */                 this.viewingImage = Ext.get(t);
/* 296 */                 if(!this.fitImagePreview) {
/* 297 */                     this.viewingImage.dom.setAttribute('class', '');
/* 298 */                 }
/* 299 */             }
/* 300 */             ,this

/* Preview.js */

/* 301 */         );
/* 302 */     }
/* 303 */ 
/* 304 */     ,onTaskChanged: function(r, e){
/* 305 */         this.getEl().unmask();
/* 306 */         this.reload();
/* 307 */         App.fireEvent('objectchanged', this.data, this);
/* 308 */         // App.mainViewPort.fireEvent('taskupdated', this, e);
/* 309 */     }
/* 310 */ 
/* 311 */     ,clear: function(){
/* 312 */         delete this.data;
/* 313 */         delete this.loadedVersionId;
/* 314 */ 
/* 315 */         this.update('<div class="x-preview-mask">' + L.SelectPreviewItem + '</div>');
/* 316 */ 
/* 317 */         if(this.getEl().isVisible(true)) {
/* 318 */             this.body.scrollTo('top', 0);
/* 319 */         }
/* 320 */     }
/* 321 */ 
/* 322 */     ,getContainerToolbarItems: function() {
/* 323 */         var rez = {
/* 324 */             tbar: {
/* 325 */             }
/* 326 */             ,menu: {
/* 327 */                 reload: {}
/* 328 */             }
/* 329 */         };
/* 330 */ 
/* 331 */         if(this.params) {
/* 332 */             rez.tbar['openExternal'] = {};
/* 333 */ 
/* 334 */             if(CB.DB.templates.getType(this.params.template_id) === 'file') {
/* 335 */                 if(this.viewingImage) {
/* 336 */                     rez.tbar['fitImage']  = {
/* 337 */                         allowToggle: true
/* 338 */                         ,pressed: this.fitImagePreview
/* 339 */                     };
/* 340 */                 } else if(detectFileEditor(this.params.name)) {
/* 341 */                     rez.tbar['edit']  = {};
/* 342 */                 }
/* 343 */ 
/* 344 */                 rez.tbar['download']  = {};
/* 345 */                 rez.tbar['preview']  = {};
/* 346 */ 
/* 347 */                 rez.menu['delete'] = { addDivider: 'top' };
/* 348 */                 rez.menu['webdavlink']  = { addDivider: 'top' };
/* 349 */                 rez.menu['permalink']  = {};
/* 350 */             }

/* Preview.js */

/* 351 */         }
/* 352 */ 
/* 353 */         return rez;
/* 354 */     }
/* 355 */ 
/* 356 */     ,onObjectChanged: function(data, component) {
/* 357 */         if(!isNaN(data)) {
/* 358 */             data = {id: data};
/* 359 */         }
/* 360 */         if(!Ext.isEmpty(this.data)) {
/* 361 */             if(data.id == this.data.id) {
/* 362 */                 this.reload();
/* 363 */             }
/* 364 */         }
/* 365 */     }
/* 366 */ 
/* 367 */     ,onFitImageClick: function(b, e) {
/* 368 */         if(this.viewingImage) {
/* 369 */             if(this.fitImagePreview) {
/* 370 */                 this.fitImagePreview = false;
/* 371 */                 this.viewingImage.dom.setAttribute('class', '');
/* 372 */             } else {
/* 373 */                 this.fitImagePreview = true;
/* 374 */                 this.viewingImage.dom.setAttribute('class', 'fit-img');
/* 375 */             }
/* 376 */         }
/* 377 */     }
/* 378 */ });
/* 379 */ 

;
/* Properties.js */

/* 1   */ Ext.namespace('CB.form.view.object');
/* 2   */ 
/* 3   */ Ext.define('CB.object.view.Properties', {
/* 4   */     extend: 'CB.plugin.Panel'
/* 5   */ 
/* 6   */     ,alias: 'widget.CBObjectProperties'
/* 7   */ 
/* 8   */     ,getContainerToolbarItems: function() {
/* 9   */         var rez = {
/* 10  */             tbar: {}
/* 11  */             ,menu: {
/* 12  */                 reload: {order: 12, addDivider: 'top'}
/* 13  */                 ,rename: {order: 13}
/* 14  */                 ,permalink: {order: 14}
/* 15  */                 ,setOwner: {order: 15}
/* 16  */                 ,permissions: {order: 16}
/* 17  */                 ,'delete': {order: 20, addDivider: 'top'}
/* 18  */             }
/* 19  */         };
/* 20  */ 
/* 21  */         var objType = '';
/* 22  */         if(!Ext.isEmpty(this.loadedParams)) {
/* 23  */             objType = CB.DB.templates.getType(this.loadedParams.template_id);
/* 24  */             if((objType !== 'file') || detectFileEditor(this.loadedParams.name)) {
/* 25  */                 rez.tbar['edit'] = {};
/* 26  */             }
/* 27  */         }
/* 28  */         rez.tbar['openExternal'] = {};
/* 29  */ 
/* 30  */         if(!Ext.isEmpty(this.loadedParams)) {
/* 31  */             switch(objType) {
/* 32  */                 case 'file':
/* 33  */                     rez.tbar['download'] = {};
/* 34  */                     rez.tbar['preview'] = {};
/* 35  */                     break;
/* 36  */                 case 'search':
/* 37  */                     rez.tbar['search'] = {};
/* 38  */                     break;
/* 39  */             }
/* 40  */         }
/* 41  */ 
/* 42  */         this.items.each(
/* 43  */             function(i) {
/* 44  */                 var pi = i.getContainerToolbarItems();
/* 45  */ 
/* 46  */                 if(pi.tbar) {
/* 47  */                     rez.tbar = Ext.apply(rez.tbar, pi.tbar);
/* 48  */                 }
/* 49  */                 if(pi.menu) {
/* 50  */                     /* adding dividesrs for first item of each plugin */

/* Properties.js */

/* 51  */                     var isFirstItem = true;
/* 52  */                     Ext.iterate(
/* 53  */                         pi.menu
/* 54  */                         ,function(key, value){
/* 55  */                             if(isFirstItem) {
/* 56  */                                 value.addDivider = 'top';
/* 57  */                                 isFirstItem = false;
/* 58  */                             } else {
/* 59  */                                 return false;
/* 60  */                             }
/* 61  */                         }
/* 62  */                         ,this
/* 63  */                     );
/* 64  */ 
/* 65  */                     rez.menu = Ext.apply(rez.menu, pi.menu);
/* 66  */                 }
/* 67  */             }
/* 68  */             ,this
/* 69  */         );
/* 70  */ 
/* 71  */         // sort menu elements by order property
/* 72  */         var a = []
/* 73  */             ,sortedMenu = {};
/* 74  */ 
/* 75  */         Ext.iterate(
/* 76  */             rez.menu
/* 77  */             ,function(k, v, o) {
/* 78  */                 var order = Ext.valueFrom(v.order, 0);
/* 79  */                 if(!Ext.isDefined(a[order])) {
/* 80  */                     a[order] = {};
/* 81  */                 }
/* 82  */                 a[order][k] = v;
/* 83  */             }
/* 84  */             ,this
/* 85  */         );
/* 86  */ 
/* 87  */         for (var i = 0; i < a.length; i++) {
/* 88  */             Ext.apply(sortedMenu, a[i]);
/* 89  */         }
/* 90  */ 
/* 91  */         rez.menu = sortedMenu;
/* 92  */ 
/* 93  */         return rez;
/* 94  */     }
/* 95  */ 
/* 96  */     ,setSelectedVersion: function(params) {
/* 97  */         this.items.each(
/* 98  */             function(i) {
/* 99  */                 if(i.setSelectedVersion) {
/* 100 */                     i.setSelectedVersion(params);

/* Properties.js */

/* 101 */                 }
/* 102 */             }
/* 103 */             ,this
/* 104 */         );
/* 105 */     }
/* 106 */ 
/* 107 */     ,onLoadData: function(r, e) {
/* 108 */         this.update('');
/* 109 */         this.callParent(arguments);
/* 110 */     }
/* 111 */ 
/* 112 */     ,clear: function(){
/* 113 */         this.callParent(arguments);
/* 114 */         this.update('<div class="x-preview-mask">' + L.SelectPreviewItem + '</div>');
/* 115 */     }
/* 116 */ 
/* 117 */     ,getCommentComponent: function() {
/* 118 */         return this.down('textarea[cls=comment-input]');
/* 119 */     }
/* 120 */ 
/* 121 */     ,getCommentValue: function() {
/* 122 */         var ci = this.getCommentComponent();
/* 123 */ 
/* 124 */         if(Ext.isEmpty(ci)) {
/* 125 */             return '';
/* 126 */         }
/* 127 */ 
/* 128 */         return Ext.valueFrom(ci.getValue(), '');
/* 129 */     }
/* 130 */ 
/* 131 */     ,setCommentValue: function(value) {
/* 132 */         var ci = this.getCommentComponent();
/* 133 */ 
/* 134 */         if(!Ext.isEmpty(ci)) {
/* 135 */             ci.setValue(value);
/* 136 */         }
/* 137 */     }
/* 138 */ 
/* 139 */ });
/* 140 */ 

;
/* Form.js */

/* 1   */ Ext.namespace('CB.form.edit');
/* 2   */ 
/* 3   */ Ext.define('CB.object.edit.Form', {
/* 4   */     extend: 'Ext.Panel'
/* 5   */ 
/* 6   */     ,alias: 'widget.CBEditObject'
/* 7   */ 
/* 8   */     ,tbarCssClass: 'x-panel-white'
/* 9   */     ,padding: 0
/* 10  */     ,scrollable: false
/* 11  */     ,layout: 'anchor'
/* 12  */     ,data: {}
/* 13  */ 
/* 14  */     ,initComponent: function(){
/* 15  */ 
/* 16  */         this.data = Ext.apply({}, this.config.data);
/* 17  */         this.objectsStore = new CB.DB.DirectObjectsStore({
/* 18  */             listeners:{
/* 19  */                 scope: this
/* 20  */                 ,add: this.onObjectsStoreChange
/* 21  */                 ,load: this.onObjectsStoreLoad
/* 22  */             }
/* 23  */         });
/* 24  */ 
/* 25  */         this.titleView = new Ext.DataView({
/* 26  */             autoHeight: true
/* 27  */             ,hidden: (this.hideTitle === true)
/* 28  */             ,cls: 'obj-plugin-title'
/* 29  */             ,tpl: [
/* 30  */                 '<tpl for=".">'
/* 31  */                 ,'<div class="obj-header">{[ Ext.util.Format.htmlEncode(Ext.valueFrom(values.name, \'\')) ]}</div>'
/* 32  */                 ,'</tpl>'
/* 33  */             ]
/* 34  */             ,itemSelector: 'div'
/* 35  */             ,data: {}
/* 36  */         });
/* 37  */ 
/* 38  */         this.fieldsZone = new Ext.form.FormPanel({
/* 39  */             title: L.Fields
/* 40  */             ,header: false
/* 41  */             ,border: false
/* 42  */             ,autoHeight: true
/* 43  */             ,labelAlign: 'top'
/* 44  */             ,bodyStyle: 'margin:0; padding: 0 7px'
/* 45  */             ,items: []
/* 46  */             ,api: {
/* 47  */                 submit: CB_Objects.save
/* 48  */             }
/* 49  */         });
/* 50  */ 

/* Form.js */

/* 51  */         Ext.apply(this, {
/* 52  */             defaults: {
/* 53  */                 anchor: '-1'
/* 54  */                 ,style: 'margin: 0 0 15px 0'
/* 55  */             }
/* 56  */             ,items: [
/* 57  */                 this.titleView
/* 58  */                 ,{
/* 59  */                     xtype: 'panel'
/* 60  */                     ,autoHeight: true
/* 61  */                     ,border: false
/* 62  */                     ,items: []
/* 63  */                 }
/* 64  */                 ,this.fieldsZone
/* 65  */             ]
/* 66  */             ,listeners: {
/* 67  */                 scope: this
/* 68  */                 ,change: this.onChange
/* 69  */                 ,afterrender: this.onAfterRender
/* 70  */             }
/* 71  */         });
/* 72  */ 
/* 73  */         this.callParent(arguments);
/* 74  */ 
/* 75  */         this.enableBubble(['saveobject']);
/* 76  */     }
/* 77  */ 
/* 78  */     ,onChange: function(fieldName, newValue, oldValue){
/* 79  */         this._isDirty = true;
/* 80  */ 
/* 81  */         if(!Ext.isEmpty(fieldName) && Ext.isString(fieldName)) {
/* 82  */             this.fireEvent('fieldchange', fieldName, newValue, oldValue);
/* 83  */         }
/* 84  */         // this.updateLayout();
/* 85  */ 
/* 86  */         //fire event after change event process
/* 87  */         this.fireEvent('changed', this);
/* 88  */     }
/* 89  */ 
/* 90  */     ,onAfterRender: function(c) {
/* 91  */ 
/* 92  */         // map multiple keys to multiple actions by strings and array of codes
/* 93  */         var map = new Ext.KeyMap(
/* 94  */             c.getEl()
/* 95  */             ,[{
/* 96  */                 key: "s"
/* 97  */                 ,ctrl:true
/* 98  */                 ,shift:false
/* 99  */                 ,stopEvent: true
/* 100 */                 ,scope: this

/* Form.js */

/* 101 */                 ,fn: this.onSaveObjectEvent
/* 102 */             }]
/* 103 */         );
/* 104 */     }
/* 105 */ 
/* 106 */     ,load: function(objectData) {
/* 107 */         if(Ext.isEmpty(objectData)) {
/* 108 */             return;
/* 109 */         }
/* 110 */ 
/* 111 */         if(!isNaN(objectData)) {
/* 112 */             objectData = {id: objectData};
/* 113 */         }
/* 114 */         this.loadData(objectData);
/* 115 */     }
/* 116 */ 
/* 117 */     ,loadData: function(objectData) {
/* 118 */         this.requestedLoadData = objectData;
/* 119 */         if(this._isDirty) {
/* 120 */             this.confirmDiscardChanges();
/* 121 */             return;
/* 122 */         }
/* 123 */ 
/* 124 */         this.clear();
/* 125 */         // this.getEl().mask(L.LoadingData + ' ...', 'x-mask-loading');
/* 126 */ 
/* 127 */         if(isNaN(objectData.id)) {
/* 128 */ 
/* 129 */             if(Ext.isEmpty(objectData.name)) {
/* 130 */                 objectData.name = L.New + ' ' + CB.DB.templates.getName(objectData.template_id);
/* 131 */             }
/* 132 */ 
/* 133 */             this.processLoadData({
/* 134 */                     success: true
/* 135 */                     ,data: objectData
/* 136 */                 }
/* 137 */             );
/* 138 */         } else {
/* 139 */             CB_Objects.load(
/* 140 */                 {id: objectData.id}
/* 141 */                 ,this.processLoadData
/* 142 */                 ,this
/* 143 */             );
/* 144 */         }
/* 145 */     }
/* 146 */ 
/* 147 */     ,processLoadData: function(r, e) {
/* 148 */         this.getEl().unmask();
/* 149 */         if (!r || (r.success !== true)) {
/* 150 */             return;

/* Form.js */

/* 151 */         }
/* 152 */         this.data = r.data;
/* 153 */         if(Ext.isEmpty(this.data.data)) {
/* 154 */             this.data.data = {};
/* 155 */         }
/* 156 */ 
/* 157 */         this.titleView.update(this.data);
/* 158 */ 
/* 159 */         this.objectsStore.proxy.extraParams = {
/* 160 */             id: r.data.id
/* 161 */             ,template_id: r.data.template_id
/* 162 */             ,data: r.data.data
/* 163 */         };
/* 164 */ 
/* 165 */         this.startEditAfterObjectsStoreLoadIfNewObject = true;
/* 166 */         this.objectsStore.reload();
/* 167 */ 
/* 168 */         /* detect template type of the opened object and create needed grid */
/* 169 */         var gridType = (CB.DB.templates.getType(this.data.template_id) === 'search')
/* 170 */             ? 'CBVerticalSearchEditGrid'
/* 171 */             : 'CBVerticalEditGrid';
/* 172 */ 
/* 173 */         if(this.lastgGridType != gridType) {
/* 174 */             this.items.getAt(1).removeAll(true);
/* 175 */             this.grid = Ext.create(
/* 176 */                 gridType
/* 177 */                 ,{
/* 178 */                     title: L.Details
/* 179 */                     ,autoHeight: true
/* 180 */                     ,hidden: true
/* 181 */                     ,refOwner: this
/* 182 */                     ,includeTopFields: true
/* 183 */                     ,stateId: 'oevg' //object edit vertical grid
/* 184 */                     ,autoExpandColumn: 'value'
/* 185 */                     ,scrollable: false
/* 186 */                     ,keys: [{
/* 187 */                         key: "s"
/* 188 */                         ,ctrl:true
/* 189 */                         ,shift:false
/* 190 */                         ,scope: this
/* 191 */                         ,stopEvent: true
/* 192 */                         ,fn: this.onSaveObjectEvent
/* 193 */                     }]
/* 194 */                     ,viewConfig: {
/* 195 */                         forceFit: true
/* 196 */                         ,autoFill: true
/* 197 */                     }
/* 198 */                     ,listeners: {
/* 199 */                         scope: this
/* 200 */ 

/* Form.js */

/* 201 */                         ,beforeedit: this.saveScroll
/* 202 */                         ,edit: this.restoreScroll
/* 203 */ 
/* 204 */                         ,savescroll: this.saveScroll
/* 205 */                         ,restorescroll: this.restoreScroll
/* 206 */                     }
/* 207 */                 }
/* 208 */             );
/* 209 */             this.lastgGridType = gridType;
/* 210 */ 
/* 211 */             this.items.getAt(1).add(this.grid);
/* 212 */         }
/* 213 */ 
/* 214 */         this.grid.reload();
/* 215 */ 
/* 216 */         if(this.grid.store.getCount() > 0) {
/* 217 */             this.grid.show();
/* 218 */ 
/* 219 */             if(this.grid.rendered) {
/* 220 */                 this.grid.getView().refresh(true);
/* 221 */             }
/* 222 */         }
/* 223 */ 
/* 224 */         if(this.grid.templateStore) {
/* 225 */             var fields = [];
/* 226 */             this.grid.templateStore.each(
/* 227 */                 function(r) {
/* 228 */                     if(r.get('cfg').showIn === 'tabsheet') {
/* 229 */                         var cfg = {
/* 230 */                             border: false
/* 231 */                             ,title: r.get('title')
/* 232 */                             ,isTemplateField: true
/* 233 */                             ,name: r.get('name')
/* 234 */                             ,value: this.data.data[r.get('name')]
/* 235 */                             ,height: Ext.valueFrom(r.get('cfg').height, 200)
/* 236 */                             ,anchor: '100%'
/* 237 */                             // ,style: 'resize: vertical'
/* 238 */                             ,grow: true
/* 239 */                             ,fieldLabel: r.get('title')
/* 240 */                             ,labelAlign: 'top'
/* 241 */                             ,labelCls: 'fwB ttU'
/* 242 */                             ,listeners: {
/* 243 */                                 scope: this
/* 244 */                                 ,change: function(field, newValue, oldValue) {
/* 245 */                                     this.fireEvent('change', field.name, newValue, oldValue);
/* 246 */                                 }
/* 247 */                                 ,sync: function(){
/* 248 */                                     this.fireEvent('change');
/* 249 */                                 }
/* 250 */                             }

/* Form.js */

/* 251 */                             ,xtype: (r.get('type') === 'html')
/* 252 */                                 ? 'CBHtmlEditor'
/* 253 */                                 : 'textarea'
/* 254 */                         };
/* 255 */                         this.fieldsZone.add(cfg);
/* 256 */                     }
/* 257 */                 }
/* 258 */                 ,this
/* 259 */             );
/* 260 */         }
/* 261 */         this._isDirty = false;
/* 262 */ 
/* 263 */         if(!this.hasLayout && this.doLayout) {
/* 264 */             this.doLayout();
/* 265 */             // this.syncSize();
/* 266 */         }
/* 267 */ 
/* 268 */         this.fireEvent('loaded', this);
/* 269 */     }
/* 270 */ 
/* 271 */     ,saveScroll: function() {
/* 272 */         this.lastScroll = this.body.getScroll();
/* 273 */ 
/* 274 */         return this.lastScroll;
/* 275 */     }
/* 276 */ 
/* 277 */     ,restoreScroll: function() {
/* 278 */         this.body.setScrollLeft(this.lastScroll.left);
/* 279 */         this.body.setScrollTop(this.lastScroll.top);
/* 280 */     }
/* 281 */ 
/* 282 */     /**
/* 283 *|      * focus value column in first row, and start editing if it's a new object
/* 284 *|      * @return void
/* 285 *|      */
/* 286 */     ,focusDefaultCell: function() {
/* 287 */         if(this.grid &&
/* 288 */             !this.grid.editing &&
/* 289 */             this.grid.getEl() &&
/* 290 */             (this.grid.store.getCount() > 0)
/* 291 */         ) {
/* 292 */             var valueCol = this.grid.headerCt.child('[dataIndex="value"]');
/* 293 */             var colIdx = valueCol.getVisibleIndex();
/* 294 */ 
/* 295 */             this.grid.getSelectionModel().select({row: 0, column: colIdx});
/* 296 */             this.grid.getNavigationModel().setPosition(0, colIdx);
/* 297 */ 
/* 298 */             if(this.startEditAfterObjectsStoreLoadIfNewObject && isNaN(this.data.id)) {
/* 299 */                 this.grid.editingPlugin.startEditByPosition({row: 0, column: colIdx});
/* 300 */             }

/* Form.js */

/* 301 */ 
/* 302 */             delete this.startEditAfterObjectsStoreLoadIfNewObject;
/* 303 */         }
/* 304 */ 
/* 305 */     }
/* 306 */ 
/* 307 */     ,onObjectsStoreLoad: function(store, records, options) {
/* 308 */         this.onObjectsStoreChange(store, records, options);
/* 309 */ 
/* 310 */         if(!this.grid.editing) {
/* 311 */             this.grid.getView().refresh();
/* 312 */ 
/* 313 */             if(this.startEditAfterObjectsStoreLoadIfNewObject === true) {
/* 314 */                 this.focusDefaultCell();
/* 315 */             }
/* 316 */         }
/* 317 */     }
/* 318 */ 
/* 319 */     ,onObjectsStoreChange: function(store, records, options){
/* 320 */         Ext.each(
/* 321 */             records
/* 322 */             ,function(r){
/* 323 */                 r.set('iconCls', getItemIcon(r.data));
/* 324 */             }
/* 325 */             ,this
/* 326 */         );
/* 327 */     }
/* 328 */ 
/* 329 */     ,confirmDiscardChanges: function(){
/* 330 */         //if confirmed
/* 331 */         //save
/* 332 */         //  save and load new requested data
/* 333 */         //no
/* 334 */         //  load new requested data
/* 335 */         //  cancel
/* 336 */         //      discard requested data
/* 337 */         //
/* 338 */         Ext.Msg.show({
/* 339 */             title:  L.Confirmation
/* 340 */             ,msg:   L.SavingChangedDataMessage
/* 341 */             ,icon:  Ext.Msg.QUESTION
/* 342 */             ,buttons: Ext.Msg.YESNOCANCEL
/* 343 */             ,scope: this
/* 344 */             ,fn: function(b, text, opt){
/* 345 */                 switch(b){
/* 346 */                     case 'yes':
/* 347 */                         this.save();
/* 348 */                         break;
/* 349 */                     case 'no':
/* 350 */                         this.clear();

/* Form.js */

/* 351 */                         this.loadData(this.requestedLoadData);
/* 352 */                         break;
/* 353 */                     default:
/* 354 */                         delete this.requestedLoadData;
/* 355 */                 }
/* 356 */             }
/* 357 */         });
/* 358 */     }
/* 359 */ 
/* 360 */     ,readValues: function() {
/* 361 */         this.grid.readValues();
/* 362 */         this.data.data = Ext.apply(this.data.data, this.fieldsZone.getForm().getFieldValues());
/* 363 */         return this.data;
/* 364 */     }
/* 365 */ 
/* 366 */     /**
/* 367 *|      * set value for a field
/* 368 *|      *
/* 369 *|      * TODO: review for duplicated fields, and for fields outside of the grid
/* 370 *|      *
/* 371 *|      * @param varchar fieldName
/* 372 *|      * @param variant value
/* 373 *|      */
/* 374 */     ,setFieldValue: function (fieldName, value) {
/* 375 */         if(this.grid) {
/* 376 */             this.grid.setFieldValue(fieldName, value);
/* 377 */         }
/* 378 */     }
/* 379 */ 
/* 380 */     ,save: function(callback, scope) {
/* 381 */         if(!this._isDirty) {
/* 382 */             return;
/* 383 */         }
/* 384 */ 
/* 385 */         this.readValues();
/* 386 */ 
/* 387 */         if(callback) {
/* 388 */             this.saveCallback = callback.bind(scope || this);
/* 389 */         }
/* 390 */ 
/* 391 */         this.getEl().mask(L.Saving + ' ...', 'x-mask-loading');
/* 392 */ 
/* 393 */         this.fieldsZone.getForm().submit({
/* 394 */             clientValidation: true
/* 395 */             ,loadMask: false
/* 396 */             ,params: {
/* 397 */                 data: Ext.encode(this.data)
/* 398 */             }
/* 399 */             ,scope: this
/* 400 */             ,success: this.processSave

/* Form.js */

/* 401 */             ,failure: this.processSave
/* 402 */         });
/* 403 */ 
/* 404 */     }
/* 405 */ 
/* 406 */     ,processSave: function(form, action) {
/* 407 */         this.getEl().unmask();
/* 408 */         var r = action.result;
/* 409 */         if (!r || (r.success !== true)) {
/* 410 */             delete this.saveCallback;
/* 411 */             return;
/* 412 */         }
/* 413 */         this._isDirty = false;
/* 414 */         if(this.saveCallback) {
/* 415 */             this.saveCallback(this, form, action);
/* 416 */             delete this.saveCallback;
/* 417 */         }
/* 418 */ 
/* 419 */         App.fireEvent('objectchanged', r.data, this);
/* 420 */     }
/* 421 */ 
/* 422 */     ,clear: function(){
/* 423 */         this.data = {};
/* 424 */         this.titleView.update(this.data);
/* 425 */         if(this.grid) {
/* 426 */             this.grid.hide();
/* 427 */         }
/* 428 */         this.fieldsZone.removeAll(true);
/* 429 */         this._isDirty = false;
/* 430 */         this.fireEvent('clear', this);
/* 431 */     }
/* 432 */ 
/* 433 */     ,onSaveObjectEvent: function(key, ev) {
/* 434 */         this.fireEvent('saveobject', this, ev);
/* 435 */     }
/* 436 */ 
/* 437 */     ,getContainerToolbarItems: function() {
/* 438 */         var rez = {
/* 439 */             tbar: {}
/* 440 */             ,menu: {}
/* 441 */         };
/* 442 */ 
/* 443 */         if(CB.DB.templates.getType(this.data.template_id) === 'search') {
/* 444 */             rez.tbar['search'] = {};
/* 445 */             rez.menu['save'] = {};
/* 446 */         } else {
/* 447 */             rez.tbar['save'] = {};
/* 448 */             rez.tbar['cancel'] = {};
/* 449 */             rez.tbar['openInTabsheet'] = {};
/* 450 */         }

/* Form.js */

/* 451 */ 
/* 452 */         return rez;
/* 453 */     }
/* 454 */ 
/* 455 */     /**
/* 456 *|      * check if all fields are valid in current object form
/* 457 *|      * For now only return vertical grid status
/* 458 *|      * Later validation of separate fields should be made if needed
/* 459 *|      * @return bool
/* 460 *|      */
/* 461 */     ,isValid: function() {
/* 462 */         var rez = true;
/* 463 */ 
/* 464 */         if(this.grid && this.grid.isValid) {
/* 465 */             rez = this.grid.isValid();
/* 466 */         }
/* 467 */ 
/* 468 */         return rez;
/* 469 */     }
/* 470 */ 
/* 471 */ });
/* 472 */ 

;
/* Window.js */

/* 1    */ Ext.namespace('CB');
/* 2    */ 
/* 3    */ Ext.define('CB.object.edit.Window', {
/* 4    */     extend: 'Ext.Window'
/* 5    */     ,alias: 'CBObjectEditWindow'
/* 6    */ 
/* 7    */     ,xtype: 'CBObjectEditWindow'
/* 8    */ 
/* 9    */     ,closable: true
/* 10   */     ,minimizable: true
/* 11   */     ,maximizable: true
/* 12   */     ,layout: 'border'
/* 13   */     ,border: false
/* 14   */     ,minWidth: 200
/* 15   */     ,minHeight: 200
/* 16   */     ,width: 600
/* 17   */     ,height: 450
/* 18   */     ,iconCls: 'icon-none'
/* 19   */     ,scrollable: false
/* 20   */ 
/* 21   */     ,initComponent: function() {
/* 22   */ 
/* 23   */         this.data = Ext.apply({}, this.config.data);
/* 24   */         delete this.data.html;
/* 25   */ 
/* 26   */         this.updateWindowTitle();
/* 27   */ 
/* 28   */         this.objectsStore = new CB.DB.DirectObjectsStore({
/* 29   */             listeners:{
/* 30   */                 scope: this
/* 31   */                 ,add: this.onObjectsStoreChange
/* 32   */                 ,load: this.onObjectsStoreLoad
/* 33   */             }
/* 34   */         });
/* 35   */ 
/* 36   */         //init viewMode (preview / edit)
/* 37   */         this.viewMode = Ext.valueFrom(this.data.view, 'preview');
/* 38   */ 
/* 39   */         //get template config
/* 40   */         this.templateCfg = CB.DB.templates.getProperty(this.data.template_id, 'cfg');
/* 41   */ 
/* 42   */         //get template type
/* 43   */         this.templateType = CB.DB.templates.getType(this.data.template_id);
/* 44   */ 
/* 45   */         //prepare interface components
/* 46   */         this.initActions();
/* 47   */ 
/* 48   */         this.initContainerItems();
/* 49   */ 
/* 50   */         //create and add title view

/* Window.js */

/* 51   */         this.titleView = new CB.object.TitleView();
/* 52   */         this.titleContainer.add(this.titleView);
/* 53   */ 
/* 54   */         Ext.apply(this, {
/* 55   */             cls: 'x-panel-white'
/* 56   */             ,bodyStyle: 'border: 0; padding: 0; border-top: 1px solid #99bce8'
/* 57   */ 
/* 58   */             ,tbar: this.getToolbarButtons()
/* 59   */ 
/* 60   */             ,items: this.getLayoutItems()
/* 61   */ 
/* 62   */             ,stateful: true
/* 63   */             ,stateId: 'oew' + this.data.template_id
/* 64   */ 
/* 65   */             ,listeners: {
/* 66   */                 scope: this
/* 67   */                 ,'change': this.onChange
/* 68   */                 ,'afterrender': this.onAfterRender
/* 69   */                 ,'beforeclose': this.onBeforeClose
/* 70   */ 
/* 71   */                 ,'openpreview': this.onOpenPreviewEvent
/* 72   */                 ,'openproperties': this.onOpenPreviewEvent
/* 73   */ 
/* 74   */                 ,'editobject': this.onEditObjectEvent
/* 75   */                 ,'editmeta': this.onEditObjectEvent
/* 76   */ 
/* 77   */                 ,'fileupload': this.onFileUploadEvent
/* 78   */ 
/* 79   */                 ,'getdraftid': this.onGetDraftId
/* 80   */ 
/* 81   */                 ,'show': this.onShowWindow
/* 82   */                 ,'beforedestroy': this.onBeforeDestroy
/* 83   */             }
/* 84   */         });
/* 85   */ 
/* 86   */         this.callParent(arguments);
/* 87   */ 
/* 88   */         Ext.Direct.on('exception', this.onAppException, this);
/* 89   */ 
/* 90   */         App.Favorites.on('change', this.onFavoritesChange, this);
/* 91   */ 
/* 92   */         this.doLoad();
/* 93   */     }
/* 94   */ 
/* 95   */     ,onBeforeDestroy: function() {
/* 96   */         Ext.Direct.un('exception', this.onAppException, this);
/* 97   */         App.Favorites.un('change', this.onFavoritesChange, this);
/* 98   */     }
/* 99   */ 
/* 100  */     /**

/* Window.js *|

/* 101  *|      * init this component actions
/* 102  *|      * @return void
/* 103  *|      */
/* 104  */     ,initActions: function() {
/* 105  */         this.actions = {
/* 106  */             edit: new Ext.Action({
/* 107  */                 text: L.Edit
/* 108  */                 ,iconCls: 'i-edit-obj'
/* 109  */                 ,hidden: true
/* 110  */                 ,scope: this
/* 111  */                 ,handler: this.onEditClick
/* 112  */             })
/* 113  */ 
/* 114  */             ,save: new Ext.Action({
/* 115  */                 text: L.Save
/* 116  */                 ,iconCls: 'icon-save'
/* 117  */                 // ,disabled: true
/* 118  */                 ,hidden: true
/* 119  */                 ,scope: this
/* 120  */                 ,handler: this.onSaveClick
/* 121  */             })
/* 122  */ 
/* 123  */             ,cancel: new Ext.Action({
/* 124  */                 text: L.Cancel
/* 125  */                 ,iconCls: 'i-cancel'
/* 126  */                 ,hidden: true
/* 127  */                 ,scope: this
/* 128  */                 ,handler: this.close
/* 129  */             })
/* 130  */ 
/* 131  */             ,'delete': new Ext.Action({
/* 132  */                 text: L.Delete
/* 133  */                 ,scope: this
/* 134  */                 ,disabled: !Ext.isNumeric(this.data.id)
/* 135  */                 ,handler: this.onDeleteClick
/* 136  */             })
/* 137  */ 
/* 138  */             ,refresh: new Ext.Action({
/* 139  */                 iconCls: 'i-refresh'
/* 140  */                 ,scope: this
/* 141  */                 ,handler: this.onRefreshClick
/* 142  */             })
/* 143  */ 
/* 144  */             ,rename: new Ext.Action({
/* 145  */                 text: L.Rename
/* 146  */                 ,scope: this
/* 147  */                 ,handler: this.onRenameClick
/* 148  */             })
/* 149  */ 
/* 150  */             ,star: new Ext.Action({

/* Window.js */

/* 151  */                 iconCls: 'i-star'
/* 152  */                 ,qtip: L.Star
/* 153  */                 ,itemId: 'star'
/* 154  */                 ,hidden: true
/* 155  */                 ,scope: this
/* 156  */                 ,handler: this.onStarClick
/* 157  */             })
/* 158  */ 
/* 159  */             ,unstar: new Ext.Action({
/* 160  */                 iconCls: 'i-unstar'
/* 161  */                 ,qtip: L.Unstar
/* 162  */                 ,itemId: 'unstar'
/* 163  */                 ,hidden: true
/* 164  */                 ,scope: this
/* 165  */                 ,handler: this.onUnstarClick
/* 166  */             })
/* 167  */ 
/* 168  */             ,showInfoPanel: new Ext.Action({
/* 169  */                 iconCls: 'i-info'
/* 170  */                 ,enableToggle: true
/* 171  */                 ,pressed: true
/* 172  */                 ,scope: this
/* 173  */                 ,handler: this.onShowInfoPanelClick
/* 174  */             })
/* 175  */ 
/* 176  */             ,permalink: new Ext.Action({
/* 177  */                 text: L.Permalink
/* 178  */                 ,itemId: 'permalink'
/* 179  */                 ,scope: this
/* 180  */                 ,handler: this.onPermalinkClick
/* 181  */             })
/* 182  */ 
/* 183  */             ,notifyOn: new Ext.Action({
/* 184  */                 text: L.NotifyOn
/* 185  */                 ,hidden: true
/* 186  */                 ,iconCls: 'im-watch'
/* 187  */                 ,itemId: 'notifyOn'
/* 188  */                 ,scope: this
/* 189  */                 ,handler: this.onSubscriptionButtonClick
/* 190  */             })
/* 191  */ 
/* 192  */             ,notifyOff: new Ext.Action({
/* 193  */                 text: L.NotifyOff
/* 194  */                 ,hidden: true
/* 195  */                 ,iconCls: 'im-ignore'
/* 196  */                 ,itemId: 'notifyOff'
/* 197  */                 ,scope: this
/* 198  */                 ,handler: this.onSubscriptionButtonClick
/* 199  */             })
/* 200  */         };

/* Window.js */

/* 201  */     }
/* 202  */ 
/* 203  */     /**
/* 204  *|      * method that should return top toolbar buttons
/* 205  *|      * @return array
/* 206  *|      */
/* 207  */     ,getToolbarButtons: function() {
/* 208  */         return [
/* 209  */             this.actions.edit
/* 210  */             ,this.actions.save
/* 211  */             ,this.actions.cancel
/* 212  */             ,'->'
/* 213  */             ,this.actions.star
/* 214  */             ,this.actions.unstar
/* 215  */             ,this.actions.refresh
/* 216  */             ,new Ext.Button({
/* 217  */                 qtip: L.More
/* 218  */                 ,itemId: 'more'
/* 219  */                 ,arrowVisible: false
/* 220  */                 ,iconCls: 'i-points'
/* 221  */                 ,menu: [
/* 222  */                     this.actions['delete']
/* 223  */                     ,this.actions.rename
/* 224  */                     ,this.actions.permalink
/* 225  */                     ,'-'
/* 226  */                     ,this.actions.notifyOn
/* 227  */                     ,this.actions.notifyOff
/* 228  */                 ]
/* 229  */             })
/* 230  */             ,this.actions.showInfoPanel
/* 231  */         ];
/* 232  */     }
/* 233  */ 
/* 234  */     /**
/* 235  *|      * initialize containers used
/* 236  *|      * @return void
/* 237  *|      */
/* 238  */     ,initContainerItems: function() {
/* 239  */         this.titleContainer = Ext.create({
/* 240  */             xtype: 'panel'
/* 241  */             ,border: false
/* 242  */             ,autoHeight: true
/* 243  */             ,items: []
/* 244  */         });
/* 245  */ 
/* 246  */         this.complexFieldContainer = Ext.create({
/* 247  */             xtype: 'form'
/* 248  */             ,border: false
/* 249  */             ,autoHeight: true
/* 250  */             ,scrollable: false

/* Window.js */

/* 251  */             ,labelAlign: 'top'
/* 252  */             ,cls: 'complex-fieldcontainer'
/* 253  */             ,bodyStyle: 'margin: 0; padding: 0'
/* 254  */             ,api: {
/* 255  */                 submit: CB_Objects.save
/* 256  */             }
/* 257  */             ,items: []
/* 258  */         });
/* 259  */ 
/* 260  */         this.gridContainer = Ext.create('CB.object.plugin.ObjectProperties', {
/* 261  */             border: false
/* 262  */             ,autoHeight: true
/* 263  */             ,items: []
/* 264  */         });
/* 265  */ 
/* 266  */         this.gridContainer.params = this.data;
/* 267  */ 
/* 268  */         this.gridContainer.onItemChange = Ext.Function.createSequence(
/* 269  */             this.gridContainer.onItemChange
/* 270  */             ,Ext.Function.bind(this.loadPreviewData, this)
/* 271  */             ,this.gridContainer
/* 272  */         );
/* 273  */ 
/* 274  */         this.pluginsContainer = Ext.create({
/* 275  */             xtype: 'CBObjectProperties'
/* 276  */             ,api: CB_Objects.getPluginsData
/* 277  */             ,border: false
/* 278  */             ,autoHeight: true
/* 279  */             ,scrollable: false
/* 280  */             ,listeners: {
/* 281  */                 scope: this
/* 282  */                 ,loaded: this.onPluginsContainerLoaded
/* 283  */             }
/* 284  */         });
/* 285  */     }
/* 286  */ 
/* 287  */     /**
/* 288  *|      * function that should return items structure based on template config
/* 289  *|      * @return array
/* 290  *|      */
/* 291  */     ,getLayoutItems: function() {
/* 292  */         var rez = [
/* 293  */             {
/* 294  */                 region: 'center'
/* 295  */                 ,scrollable: true
/* 296  */                 ,border: false
/* 297  */                 ,layout: {
/* 298  */                     type: 'vbox'
/* 299  */                     ,align: 'stretch'
/* 300  */                 }

/* Window.js */

/* 301  */                 ,items: [
/* 302  */                     this.titleContainer
/* 303  */                     ,this.gridContainer
/* 304  */                     ,this.complexFieldContainer
/* 305  */                     ,{
/* 306  */                         itemId: 'infoPanel'
/* 307  */                         ,border: false
/* 308  */                         ,bodyStyle: 'padding-top: 15px'
/* 309  */                         ,autoHeight: true
/* 310  */                         ,items: [
/* 311  */                             this.pluginsContainer
/* 312  */                         ]
/* 313  */                     }
/* 314  */                 ]
/* 315  */             }
/* 316  */         ];
/* 317  */ 
/* 318  */         //hide infopanel switcher by default, for vertical layout
/* 319  */         this.actions.showInfoPanel.setHidden(true);
/* 320  */ 
/* 321  */         if((this.templateCfg.layout === 'horizontal') || (this.templateType === 'file')) {
/* 322  */             this.complexFieldContainer.flex = 1;
/* 323  */             this.complexFieldContainer.layout = 'fit';
/* 324  */ 
/* 325  */             this.actions.showInfoPanel.setHidden(false);
/* 326  */ 
/* 327  */             rez = [
/* 328  */                 {
/* 329  */                     region: 'center'
/* 330  */                     ,border: false
/* 331  */                     ,bodyStyle: 'border-bottom:0; border-left: 0'
/* 332  */                     ,scrollable: false
/* 333  */                     ,layout: {
/* 334  */                         type: 'vbox'
/* 335  */                         ,align: 'stretch'
/* 336  */                     }
/* 337  */                     ,items: [
/* 338  */                         this.titleContainer
/* 339  */                         ,this.complexFieldContainer
/* 340  */                     ]
/* 341  */                 }, {
/* 342  */                     region: 'east'
/* 343  */                     ,itemId: 'infoPanel'
/* 344  */                     ,header: false
/* 345  */                     ,border: false
/* 346  */                     ,scrollable: true
/* 347  */                     ,layout: {
/* 348  */                         type: 'vbox'
/* 349  */                         ,align: 'stretch'
/* 350  */                     }

/* Window.js */

/* 351  */ 
/* 352  */                     ,split: {
/* 353  */                         size: 2
/* 354  */                     }
/* 355  */ 
/* 356  */                     ,width: 300
/* 357  */                     ,items: [
/* 358  */                         ,this.gridContainer
/* 359  */                         ,this.pluginsContainer
/* 360  */                     ]
/* 361  */                 }
/* 362  */             ];
/* 363  */         }
/* 364  */ 
/* 365  */         return rez;
/* 366  */     }
/* 367  */ 
/* 368  */     ,onShowWindow: function(c) {
/* 369  */         this.getEl().focus(10);
/* 370  */     }
/* 371  */ 
/* 372  */     ,onAfterRender: function(c) {
/* 373  */         // map multiple keys to multiple actions by strings and array of codes
/* 374  */         var map = new Ext.KeyMap(
/* 375  */             c.getEl()
/* 376  */             ,[{
/* 377  */                 key: "s"
/* 378  */                 ,ctrl:true
/* 379  */                 ,shift:false
/* 380  */                 ,stopEvent: true
/* 381  */                 ,scope: this
/* 382  */                 ,fn: this.onSaveObjectEvent
/* 383  */             }]
/* 384  */         );
/* 385  */ 
/* 386  */         //attach key listeners to grid view
/* 387  */         if(this.grid) {
/* 388  */             new Ext.util.KeyMap({
/* 389  */                 target: this.grid.getView().getEl()
/* 390  */                 ,binding: [{
/* 391  */                         key: "s"
/* 392  */                         ,ctrl: true
/* 393  */                         ,shift: false
/* 394  */                         ,stopEvent: true
/* 395  */                         ,scope: this
/* 396  */                         ,fn: this.onSaveObjectEvent
/* 397  */                     },{
/* 398  */                         key: Ext.EventObject.ESC
/* 399  */                         ,ctrl: false
/* 400  */                         ,shift: false

/* Window.js */

/* 401  */                         ,scope: this
/* 402  */                         ,stopEvent: true
/* 403  */                         ,fn: this.close
/* 404  */                     }
/* 405  */                 ]
/* 406  */             });
/* 407  */         }
/* 408  */     }
/* 409  */ 
/* 410  */     /**
/* 411  *|      * clear containers method
/* 412  *|      * @return void
/* 413  *|      */
/* 414  */     ,clearContainers: function() {
/* 415  */         this.complexFieldContainer.removeAll(true);
/* 416  */         this.complexFieldContainer.update('');
/* 417  */ 
/* 418  */         this.gridContainer.removeAll(false);
/* 419  */         this.gridContainer.update('');
/* 420  */     }
/* 421  */ 
/* 422  */     /**
/* 423  *|      * redirection method to corresponding load method depending on current viewModeSet
/* 424  *|      * @return void
/* 425  *|      */
/* 426  */     ,doLoad: function() {
/* 427  */ 
/* 428  */         this.clearContainers();
/* 429  */         this['load' + Ext.util.Format.capitalize(this.viewMode) + 'Data']();
/* 430  */ 
/* 431  */     }
/* 432  */ 
/* 433  */     /**
/* 434  *|      * method for loading preview data for current item
/* 435  *|      * @return void
/* 436  *|      */
/* 437  */     ,loadPreviewData: function() {
/* 438  */         CB_Objects.getPluginsData(
/* 439  */             {
/* 440  */                 id: this.data.id
/* 441  */                 // ,from: 'window'
/* 442  */             }
/* 443  */             ,this.processLoadPreviewData
/* 444  */             ,this
/* 445  */         );
/* 446  */         // this.updateButtons();
/* 447  */     }
/* 448  */ 
/* 449  */     /**
/* 450  *|      * method for loading data into edit mode

/* Window.js *|

/* 451  *|      * @return void
/* 452  *|      */
/* 453  */     ,loadEditData: function() {
/* 454  */ 
/* 455  */         var data = this.data;
/* 456  */ 
/* 457  */         // for a new object we just load template locally
/* 458  */         if(isNaN(data.id)) {
/* 459  */             if(Ext.isEmpty(data.name)) {
/* 460  */                 data.name = L.New + ' ' + CB.DB.templates.getName(data.template_id);
/* 461  */             }
/* 462  */ 
/* 463  */             this.processLoadEditData({
/* 464  */                     success: true
/* 465  */                     ,data: data
/* 466  */                 }
/* 467  */             );
/* 468  */         } else {
/* 469  */             CB_Objects.load(
/* 470  */                 {id: this.data.id}
/* 471  */                 ,this.processLoadEditData
/* 472  */                 ,this
/* 473  */             );
/* 474  */         }
/* 475  */ 
/* 476  */         this.pluginsContainer.doLoad({
/* 477  */             id: this.data.id
/* 478  */             ,template_id: this.data.template_id
/* 479  */             ,from: 'window'
/* 480  */         });
/* 481  */     }
/* 482  */ 
/* 483  */     /**
/* 484  *|      * method for processing server data on loading preview
/* 485  *|      * @return void
/* 486  *|      */
/* 487  */     ,processLoadPreviewData: function(r, e) {
/* 488  */         if(!r || (r.success !== true)) {
/* 489  */             return;
/* 490  */         }
/* 491  */ 
/* 492  */         var objProperties  = Ext.valueFrom(r.data.objectProperties, {}).data
/* 493  */             ,preview = Ext.valueFrom(objProperties, {}).preview;
/* 494  */ 
/* 495  */         //delete preview property from object data if set
/* 496  */         if(preview) {
/* 497  */             delete objProperties.preview;
/* 498  */         }
/* 499  */ 
/* 500  */         this.data = Ext.apply(Ext.valueFrom(this.data, {}), objProperties);

/* Window.js */

/* 501  */         this.data.from = 'window';
/* 502  */ 
/* 503  */         this.titleView.update(this.data);
/* 504  */ 
/* 505  */         delete r.data.objectProperties;
/* 506  */         delete r.data.thumb;
/* 507  */ 
/* 508  */         if(preview) {
/* 509  */             if(this.gridContainer.rendered) {
/* 510  */                 this.gridContainer.update(preview[0]);
/* 511  */             } else {
/* 512  */                 this.gridContainer.html = preview[0];
/* 513  */             }
/* 514  */ 
/* 515  */             var cfp = Ext.valueFrom(preview[1], '');
/* 516  */             if(this.complexFieldContainer.rendered) {
/* 517  */                 this.complexFieldContainer.update(cfp);
/* 518  */             } else {
/* 519  */                 this.complexFieldContainer.html = cfp;
/* 520  */             }
/* 521  */ 
/* 522  */         } else {
/* 523  */             this.gridContainer.hide();
/* 524  */             if(this.complexFieldContainer.rendered) {
/* 525  */                 this.complexFieldContainer.update('');
/* 526  */             } else {
/* 527  */                 this.complexFieldContainer.html = '';
/* 528  */             }
/* 529  */         }
/* 530  */ 
/* 531  */         this.pluginsContainer.loadedParams = this.data;
/* 532  */ 
/* 533  */         this.pluginsContainer.onLoadData(r, e);
/* 534  */ 
/* 535  */         this.postLoadProcess();
/* 536  */     }
/* 537  */ 
/* 538  */     /**
/* 539  *|      * method for processing server data on editing item
/* 540  *|      * @return void
/* 541  *|      */
/* 542  */     ,processLoadEditData: function(r, e) {
/* 543  */         if(!r || (r.success !== true)) {
/* 544  */             return;
/* 545  */         }
/* 546  */ 
/* 547  */         this.data = r.data;
/* 548  */         if(Ext.isEmpty(this.data.data)) {
/* 549  */             this.data.data = {};
/* 550  */         }

/* Window.js */

/* 551  */ 
/* 552  */         this.titleView.update(this.data);
/* 553  */ 
/* 554  */         r.data.from = 'window';
/* 555  */         this.pluginsContainer.loadedParams = r.data;
/* 556  */ 
/* 557  */         this.objectsStore.proxy.extraParams = {
/* 558  */             id: r.data.id
/* 559  */             ,template_id: r.data.template_id
/* 560  */             ,data: r.data.data
/* 561  */         };
/* 562  */ 
/* 563  */         //focus default grid cell if no comment given that should be scrolled and focused
/* 564  */         if(Ext.isEmpty(this.initialConfig.data.comment)) {
/* 565  */             this.startEditAfterObjectsStoreLoadIfNewObject = true;
/* 566  */         }
/* 567  */ 
/* 568  */         this.objectsStore.reload();
/* 569  */ 
/* 570  */         /* detect template type of the opened object and create needed grid */
/* 571  */         var gridType = (this.templateType === 'search')
/* 572  */             ? 'CBVerticalSearchEditGrid'
/* 573  */             : 'CBVerticalEditGrid';
/* 574  */ 
/* 575  */         if(this.lastgGridType != gridType) {
/* 576  */             this.gridContainer.removeAll(true);
/* 577  */             this.grid = Ext.create(
/* 578  */                 gridType
/* 579  */                 ,{
/* 580  */                     title: L.Details
/* 581  */                     ,autoHeight: true
/* 582  */                     ,hidden: true
/* 583  */                     ,refOwner: this
/* 584  */                     ,includeTopFields: true
/* 585  */                     ,stateId: 'oevg' //object edit vertical grid
/* 586  */                     ,autoExpandColumn: 'value'
/* 587  */                     ,scrollable: false
/* 588  */                     ,viewConfig: {
/* 589  */                         forceFit: true
/* 590  */                         ,autoFill: true
/* 591  */                     }
/* 592  */                     ,listeners: {
/* 593  */                         scope: this
/* 594  */ 
/* 595  */                         ,beforeedit: this.saveScroll
/* 596  */                         ,edit: this.restoreScroll
/* 597  */ 
/* 598  */                         ,savescroll: this.saveScroll
/* 599  */                         ,restorescroll: this.restoreScroll
/* 600  */                     }

/* Window.js */

/* 601  */                 }
/* 602  */             );
/* 603  */             this.lastgGridType = gridType;
/* 604  */ 
/* 605  */         }
/* 606  */         this.gridContainer.add(this.grid);
/* 607  */ 
/* 608  */         this.gridContainer.show();
/* 609  */ 
/* 610  */         //add loading class that will hide the grid while objectsStore loads
/* 611  */         if(!this.objectsStore.isLoaded()) {
/* 612  */             this.grid.addCls('loading');
/* 613  */         }
/* 614  */ 
/* 615  */         this.grid.reload();
/* 616  */ 
/* 617  */         if(this.grid.store.getCount() > 0) {
/* 618  */             this.grid.show();
/* 619  */ 
/* 620  */             if(this.grid.rendered) {
/* 621  */                 this.grid.getView().refresh(true);
/* 622  */             }
/* 623  */         }
/* 624  */ 
/* 625  */         this.updateComplexFieldContainer();
/* 626  */ 
/* 627  */         this._isDirty = false;
/* 628  */ 
/* 629  */         this.postLoadProcess();
/* 630  */     }
/* 631  */ 
/* 632  */     /**
/* 633  *|      * method specific for complex field container update
/* 634  *|      * based on loaded data
/* 635  *|      * @return void
/* 636  *|      */
/* 637  */     ,updateComplexFieldContainer: function() {
/* 638  */         if(this.grid.templateStore) {
/* 639  */             var fields = [];
/* 640  */             this.grid.templateStore.each(
/* 641  */                 function(r) {
/* 642  */                     if(r.get('cfg').showIn === 'tabsheet') {
/* 643  */                         var cfg = {
/* 644  */                             border: false
/* 645  */                             ,isTemplateField: true
/* 646  */                             ,name: r.get('name')
/* 647  */                             ,value: this.data.data[r.get('name')]
/* 648  */                             ,height: Ext.valueFrom(r.get('cfg').height, 200)
/* 649  */                             ,anchor: '100%'
/* 650  */                             ,grow: true

/* Window.js */

/* 651  */                             ,title: r.get('title')
/* 652  */                             ,fieldLabel: r.get('title')
/* 653  */                             ,labelAlign: 'top'
/* 654  */                             ,labelCls: 'fwB ttU'
/* 655  */                             ,labelSeparator: ''
/* 656  */                             ,listeners: {
/* 657  */                                 scope: this
/* 658  */                                 ,change: function(field, newValue, oldValue) {
/* 659  */                                     this.fireEvent('change', field.name, newValue, oldValue);
/* 660  */                                 }
/* 661  */                                 ,sync: function(){
/* 662  */                                     this.fireEvent('change');
/* 663  */                                 }
/* 664  */                             }
/* 665  */                             ,xtype: (r.get('type') === 'html')
/* 666  */                                 ? 'CBHtmlEditor'
/* 667  */                                 : 'textarea'
/* 668  */                         };
/* 669  */                         this.complexFieldContainer.add(cfg);
/* 670  */                     }
/* 671  */                 }
/* 672  */                 ,this
/* 673  */             );
/* 674  */         }
/* 675  */ 
/* 676  */         this.complexFieldContainer.setVisible(this.complexFieldContainer.items.getCount() > 0);
/* 677  */     }
/* 678  */ 
/* 679  */     /**
/* 680  *|      * method called after preview or edit data has been loaded
/* 681  *|      * @return void
/* 682  *|      */
/* 683  */     ,postLoadProcess: function() {
/* 684  */         if(!this.hasLayout && this.updateLayout) {
/* 685  */             this.updateLayout();
/* 686  */         }
/* 687  */ 
/* 688  */         this.updateWindowTitle();
/* 689  */ 
/* 690  */         this.updateButtons();
/* 691  */ 
/* 692  */         if(this.gridContainer.rendered) {
/* 693  */             this.gridContainer.attachEvents();
/* 694  */         }
/* 695  */ 
/* 696  */         this.fireEvent('loaded', this);
/* 697  */     }
/* 698  */ 
/* 699  */     /**
/* 700  *|      * method for updating window title and icon according to template and data

/* Window.js *|

/* 701  *|      * @return void
/* 702  *|      */
/* 703  */     ,updateWindowTitle: function() {
/* 704  */         var templatesStore = CB.DB.templates
/* 705  */             ,templateId = this.data.template_id
/* 706  */             ,d = this.data
/* 707  */             ,title = Ext.valueFrom(d.name, d.title);
/* 708  */ 
/* 709  */         if(Ext.isEmpty(title)) {
/* 710  */             title = L.New + ' ' + templatesStore.getProperty(templateId, 'name');
/* 711  */         }
/* 712  */         this.setTitle(title);
/* 713  */ 
/* 714  */         this.setIconCls(getItemIcon(this.data));
/* 715  */     }
/* 716  */ 
/* 717  */     ,updateButtons: function() {
/* 718  */         if(this.viewMode === 'preview') {
/* 719  */             this.actions.edit.show();
/* 720  */             this.actions.save.hide();
/* 721  */             this.actions.cancel.hide();
/* 722  */ 
/* 723  */             this.actions.rename.show();
/* 724  */         } else {
/* 725  */             this.actions.edit.hide();
/* 726  */             this.actions.save.show();
/* 727  */             // this.actions.save.setDisabled(!this._isDirty);
/* 728  */             this.actions.cancel.show();
/* 729  */ 
/* 730  */             this.actions.rename.hide();
/* 731  */         }
/* 732  */ 
/* 733  */         this.onFavoritesChange();
/* 734  */     }
/* 735  */ 
/* 736  */     /**
/* 737  *|      * listner method for change field values
/* 738  *|      * @param  string fieldName
/* 739  *|      * @param  variant newValue
/* 740  *|      * @param  variant oldValue
/* 741  *|      * @return void
/* 742  *|      */
/* 743  */     ,onChange: function(fieldName, newValue, oldValue){
/* 744  */         this._isDirty = true;
/* 745  */ 
/* 746  */         // this.actions.save.setDisabled(!this.isValid());
/* 747  */ 
/* 748  */         if(!Ext.isEmpty(fieldName) && Ext.isString(fieldName)) {
/* 749  */             this.fireEvent('fieldchange', fieldName, newValue, oldValue);
/* 750  */         }

/* Window.js */

/* 751  */         // this.updateLayout();
/* 752  */ 
/* 753  */         //fire event after change event process
/* 754  */         this.fireEvent('changed', this);
/* 755  */     }
/* 756  */ 
/* 757  */     ,onLoaded: function(editForm) {
/* 758  */         var title = Ext.valueFrom(editForm.data.name, '');
/* 759  */ 
/* 760  */         this.setTitle(Ext.util.Format.htmlEncode(title));
/* 761  */         this.setIconCls(getItemIcon(editForm.data));
/* 762  */         this.updateLayout();
/* 763  */     }
/* 764  */ 
/* 765  */     ,onPluginsContainerLoaded: function(cmp, commonParams) {
/* 766  */         var icd = this.initialConfig.data;
/* 767  */ 
/* 768  */         if(!Ext.isEmpty(icd.comment)) {
/* 769  */             cmp.setCommentValue(icd.comment);
/* 770  */ 
/* 771  */             //scroll it into view
/* 772  */             var cc = cmp.getCommentComponent();
/* 773  */             if(cc) {
/* 774  */                 var i = this.items.getAt(0);
/* 775  */                 if(!i.scrollable) {
/* 776  */                     i = this.items.getAt(1);
/* 777  */                 }
/* 778  */                 cc.getEl().scrollIntoView(i.body, false, false, true);
/* 779  */ 
/* 780  */                 i.body.scrollBy(0, 40, false);
/* 781  */ 
/* 782  */                 cc.focus(false, 100);
/* 783  */             }
/* 784  */ 
/* 785  */         }
/* 786  */ 
/* 787  */         var subscription = Ext.valueFrom(commonParams.subscription, 'ignore');
/* 788  */         this.actions.notifyOn.setHidden(subscription === 'watch');
/* 789  */         this.actions.notifyOff.setHidden(subscription === 'ignore');
/* 790  */     }
/* 791  */ 
/* 792  */     ,onSubscriptionButtonClick: function(b, e) {
/* 793  */         var type = (b.itemId === 'notifyOn')
/* 794  */             ? 'watch'
/* 795  */             : 'ignore';
/* 796  */ 
/* 797  */         CB_Objects.setSubscription(
/* 798  */             {
/* 799  */                 objectId: this.data.id
/* 800  */                 ,type: type

/* Window.js */

/* 801  */             }
/* 802  */             ,function(r, e) {
/* 803  */                 if(!r || (r.success !== true)) {
/* 804  */                     return;
/* 805  */                 }
/* 806  */ 
/* 807  */                 this.actions.notifyOn.setHidden(type === 'watch');
/* 808  */                 this.actions.notifyOff.setHidden(type === 'ignore');
/* 809  */             }
/* 810  */             ,this
/* 811  */         );
/* 812  */     }
/* 813  */ 
/* 814  */     ,onNotificationsCustomizeClick: function(b, e) {
/* 815  */         var w = new CB.notifications.SettingsWindow();
/* 816  */         w.show();
/* 817  */     }
/* 818  */ 
/* 819  */     ,onSaveObjectEvent: function(objComp, ev) {
/* 820  */         ev.stopEvent();
/* 821  */         if(this.actions.save.isDisabled()) {
/* 822  */             return false;
/* 823  */         }
/* 824  */         this.onSaveClick();
/* 825  */     }
/* 826  */ 
/* 827  */     /**
/* 828  *|      * handler for edit toolbar button
/* 829  *|      * @param  button b
/* 830  *|      * @param  event e
/* 831  *|      * @return void
/* 832  *|      */
/* 833  */     ,onEditClick: function(b, e) {
/* 834  */         this.viewMode = 'edit';
/* 835  */         this.doLoad();
/* 836  */     }
/* 837  */ 
/* 838  */     ,onSaveClick: function(b, e) {
/* 839  */         if(!this.isValid()) {
/* 840  */             var i = this.items.getAt(0)
/* 841  */                 ,g = this.grid
/* 842  */                 ,v = g.getView();
/* 843  */             if(!i.scrollable) {
/* 844  */                 i = this.items.getAt(1);
/* 845  */             }
/* 846  */             Ext.get(v.getRow(g.invalidRecord)).scrollIntoView(i.body, null, false);
/* 847  */ 
/* 848  */             return this.grid.focusInvalidRecord();
/* 849  */ 
/* 850  */         }

/* Window.js */

/* 851  */ 
/* 852  */         if(!this._isDirty) {
/* 853  */             return this.close();
/* 854  */         }
/* 855  */ 
/* 856  */         this.readValues();
/* 857  */ 
/* 858  */         this.getEl().mask(L.Saving + ' ...', 'x-mask-loading');
/* 859  */ 
/* 860  */         this.saving = true;
/* 861  */ 
/* 862  */         this.complexFieldContainer.getForm().submit({
/* 863  */             clientValidation: true
/* 864  */             ,loadMask: false
/* 865  */             ,params: {
/* 866  */                 data: Ext.encode(this.data)
/* 867  */             }
/* 868  */             ,scope: this
/* 869  */             ,success: this.processSave
/* 870  */             ,failure: this.processSave
/* 871  */         });
/* 872  */     }
/* 873  */ 
/* 874  */     /**
/* 875  *|      * method for pocessing save responce
/* 876  *|      * @param  component form
/* 877  *|      * @param  object action
/* 878  *|      * @return void
/* 879  *|      */
/* 880  */     ,processSave: function(form, action) {
/* 881  */         this.getEl().unmask();
/* 882  */         delete this.saving;
/* 883  */ 
/* 884  */         var r = action.result;
/* 885  */ 
/* 886  */         if(!r || (r.success !== true)) {
/* 887  */             App.showException(r);
/* 888  */         } else {
/* 889  */             this._isDirty = false;
/* 890  */             App.fireEvent('objectchanged', r.data, this);
/* 891  */             this.close();
/* 892  */         }
/* 893  */     }
/* 894  */ 
/* 895  */     ,onAppException: function() {
/* 896  */         if(this.saving) {
/* 897  */             delete this.saving;
/* 898  */             this.getEl().unmask();
/* 899  */         }
/* 900  */     }

/* Window.js */

/* 901  */ 
/* 902  */     ,onObjectsStoreLoad: function(store, records, options) {
/* 903  */         this.onObjectsStoreChange(store, records, options);
/* 904  */ 
/* 905  */ 
/* 906  */         if(!this.grid.editing) {
/* 907  */             this.grid.getView().refresh();
/* 908  */ 
/* 909  */             if(this.startEditAfterObjectsStoreLoadIfNewObject === true) {
/* 910  */                 this.focusDefaultCell();
/* 911  */             }
/* 912  */         }
/* 913  */ 
/* 914  */         this.grid.removeCls('loading');
/* 915  */     }
/* 916  */ 
/* 917  */     ,onObjectsStoreChange: function(store, records, options){
/* 918  */         Ext.each(
/* 919  */             records
/* 920  */             ,function(r){
/* 921  */                 r.set('iconCls', getItemIcon(r.data));
/* 922  */             }
/* 923  */             ,this
/* 924  */         );
/* 925  */     }
/* 926  */ 
/* 927  */     /**
/* 928  *|      * focus value column in first row, and start editing if it's a new object
/* 929  *|      * @return void
/* 930  *|      */
/* 931  */     ,focusDefaultCell: function() {
/* 932  */         if(this.grid &&
/* 933  */             !this.grid.editing &&
/* 934  */             this.grid.getEl() &&
/* 935  */             (this.grid.store.getCount() > 0)
/* 936  */         ) {
/* 937  */             var valueCol = this.grid.headerCt.child('[dataIndex="value"]');
/* 938  */             var colIdx = valueCol.getIndex();
/* 939  */ 
/* 940  */             this.grid.getSelectionModel().select({row: 0, column: colIdx});
/* 941  */             this.grid.getNavigationModel().setPosition(0, colIdx);
/* 942  */ 
/* 943  */             if(this.startEditAfterObjectsStoreLoadIfNewObject && isNaN(this.data.id)) {
/* 944  */                 this.grid.editingPlugin.startEditByPosition({row: 0, column: colIdx});
/* 945  */             }
/* 946  */ 
/* 947  */             delete this.startEditAfterObjectsStoreLoadIfNewObject;
/* 948  */         }
/* 949  */     }
/* 950  */ 

/* Window.js */

/* 951  */     ,readValues: function() {
/* 952  */         this.grid.readValues();
/* 953  */ 
/* 954  */         this.data.data = Ext.apply(
/* 955  */             this.data.data
/* 956  */             ,this.complexFieldContainer.getForm().getFieldValues()
/* 957  */         );
/* 958  */ 
/* 959  */         return this.data;
/* 960  */     }
/* 961  */ 
/* 962  */     /**
/* 963  *|      * set value for a field
/* 964  *|      *
/* 965  *|      * TODO: review for duplicated fields, and for fields outside of the grid
/* 966  *|      *
/* 967  *|      * @param varchar fieldName
/* 968  *|      * @param variant value
/* 969  *|      */
/* 970  */     ,setFieldValue: function (fieldName, value) {
/* 971  */         if(this.grid) {
/* 972  */             this.grid.setFieldValue(fieldName, value);
/* 973  */         }
/* 974  */     }
/* 975  */ 
/* 976  */     ,onBeforeClose: function(){
/* 977  */         if(this._confirmedClosing || !this._isDirty){
/* 978  */             return true;
/* 979  */         }
/* 980  */ 
/* 981  */         if(this.isValid()) {
/* 982  */             Ext.Msg.show({
/* 983  */                 title:  L.Confirmation
/* 984  */                 ,msg:   L.SavingChangedDataMessage
/* 985  */                 ,icon:  Ext.Msg.QUESTION
/* 986  */                 ,buttons: Ext.Msg.YESNOCANCEL
/* 987  */                 ,scope: this
/* 988  */                 ,fn: function(b, text, opt){
/* 989  */                     switch(b){
/* 990  */                     case 'yes':
/* 991  */                         this._confirmedClosing = true;
/* 992  */                         this.onSaveClick();
/* 993  */                         break;
/* 994  */ 
/* 995  */                     case 'no':
/* 996  */                         this._confirmedClosing = true;
/* 997  */                         this.close();
/* 998  */                         break;
/* 999  */                     }
/* 1000 */                 }

/* Window.js */

/* 1001 */             }).getEl().center(this);
/* 1002 */ 
/* 1003 */         } else {
/* 1004 */             Ext.Msg.show({
/* 1005 */                 title:  L.Confirmation
/* 1006 */                 ,msg:   L.CloseWithChangesConfirmation
/* 1007 */                 ,icon:  Ext.Msg.QUESTION
/* 1008 */                 ,buttons: Ext.Msg.YESNO
/* 1009 */                 ,scope: this
/* 1010 */                 ,fn: function(b, text, opt){
/* 1011 */                     switch(b){
/* 1012 */                     case 'yes':
/* 1013 */                         this._confirmedClosing = true;
/* 1014 */                         this.close();
/* 1015 */                         break;
/* 1016 */                     }
/* 1017 */                 }
/* 1018 */             }).getEl().center(this);
/* 1019 */         }
/* 1020 */ 
/* 1021 */         return false;
/* 1022 */     }
/* 1023 */ 
/* 1024 */     /**
/* 1025 *|      * reload  window
/* 1026 *|      * @param  button b
/* 1027 *|      * @param  event e
/* 1028 *|      * @return void
/* 1029 *|      */
/* 1030 */     ,onRefreshClick: function(b, e) {
/* 1031 */         this.doLoad();
/* 1032 */     }
/* 1033 */ 
/* 1034 */     /**
/* 1035 *|      * handler for show right panel toolbar button
/* 1036 *|      * @param  button b
/* 1037 *|      * @param  event e
/* 1038 *|      * @return void
/* 1039 *|      */
/* 1040 */     ,onShowInfoPanelClick: function(b, e) {
/* 1041 */         var ip = this.queryById('infoPanel');
/* 1042 */ 
/* 1043 */         if(ip) {
/* 1044 */             ip.setVisible(b.pressed);
/* 1045 */         }
/* 1046 */     }
/* 1047 */ 
/* 1048 */     /**
/* 1049 *|      * handler for open preview from components below
/* 1050 *|      *

/* Window.js *|

/* 1051 *|      * It was opening preview in current component,
/* 1052 *|      * when editing on the right side was available.
/* 1053 *|      * Now it opens popup window in preview mode.
/* 1054 *|      *
/* 1055 *|      * @param  object data
/* 1056 *|      * @param  event e
/* 1057 *|      * @return void
/* 1058 *|      */
/* 1059 */     ,onOpenPreviewEvent: function(data, e) {
/* 1060 */         if(Ext.isEmpty(data)) {
/* 1061 */             data = Ext.clone(this.data);
/* 1062 */         }
/* 1063 */ 
/* 1064 */         if(this.data && (data.id == this.data.id)) {
/* 1065 */             Ext.applyIf(data, this.data);
/* 1066 */         }
/* 1067 */ 
/* 1068 */         App.openObjectWindow(Ext.clone(data), e);
/* 1069 */     }
/* 1070 */ 
/* 1071 */     /**
/* 1072 *|      * handler for open edit object event from components below
/* 1073 *|      *
/* 1074 *|      * It was opening edit in current component,
/* 1075 *|      * when editing on the right side was available.
/* 1076 *|      * Now it opens popup window in edit mode.
/* 1077 *|      *
/* 1078 *|      * @param  object data
/* 1079 *|      * @param  event e
/* 1080 *|      * @return void
/* 1081 *|      */
/* 1082 */     ,onEditObjectEvent: function(data, e) {
/* 1083 */         if(e) {
/* 1084 */             e.stopEvent();
/* 1085 */         }
/* 1086 */ 
/* 1087 */         if(Ext.isEmpty(data)) {
/* 1088 */             data = this.data;
/* 1089 */         }
/* 1090 */ 
/* 1091 */         var p = Ext.clone(data);
/* 1092 */ 
/* 1093 */         p.view = 'edit';
/* 1094 */ 
/* 1095 */         if(p.id == this.data.id) {
/* 1096 */             this.viewMode = 'edit';
/* 1097 */             this.doLoad();
/* 1098 */         } else {
/* 1099 */             App.openObjectWindow(p);
/* 1100 */         }

/* Window.js */

/* 1101 */     }
/* 1102 */ 
/* 1103 */     ,onDeleteClick: function(b, e) {
/* 1104 */         this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 1105 */ 
/* 1106 */         CB.browser.Actions.deleteSelection(
/* 1107 */             [this.data]
/* 1108 */             ,this.processDelete
/* 1109 */             ,this
/* 1110 */         );
/* 1111 */ 
/* 1112 */     }
/* 1113 */ 
/* 1114 */     ,processDelete: function(r, e) {
/* 1115 */         this.getEl().unmask();
/* 1116 */ 
/* 1117 */         if(r && (r.success === true)) {
/* 1118 */             this._confirmedClosing = true;
/* 1119 */             this.close();
/* 1120 */         }
/* 1121 */     }
/* 1122 */ 
/* 1123 */     /**
/* 1124 *|      * save scroll position method for vertical grid editor
/* 1125 *|      * @return variant cusrrent scroll position
/* 1126 *|      */
/* 1127 */     ,saveScroll: function() {
/* 1128 */         var gc = this.gridContainer.ownerCt;
/* 1129 */         this.lastScroll = gc.body.getScroll();
/* 1130 */ 
/* 1131 */         return this.lastScroll;
/* 1132 */     }
/* 1133 */ 
/* 1134 */     /**
/* 1135 *|      * restore scroll position method for vertical grid editor
/* 1136 *|      * @return void
/* 1137 *|      */
/* 1138 */     ,restoreScroll: function() {
/* 1139 */         var gc = this.gridContainer.ownerCt;
/* 1140 */         gc.body.setScrollLeft(this.lastScroll.left);
/* 1141 */         gc.body.setScrollTop(this.lastScroll.top);
/* 1142 */     }
/* 1143 */ 
/* 1144 */     ,onGetDraftId: function(callback, scope) {
/* 1145 */         delete this.getDraftIdCallback;
/* 1146 */ 
/* 1147 */         if(Ext.isEmpty(callback)) {
/* 1148 */             callback = Ext.emptyFn;
/* 1149 */         }
/* 1150 */ 

/* Window.js */

/* 1151 */         this.getDraftIdCallback = scope
/* 1152 */             ? Ext.Function.bind(callback, scope)
/* 1153 */             : callback;
/* 1154 */ 
/* 1155 */         if(!isNaN(this.data.id)) {
/* 1156 */             this.getDraftIdCallback(this.data.id);
/* 1157 */ 
/* 1158 */         } else {
/* 1159 */             this.readValues();
/* 1160 */ 
/* 1161 */             var data = Ext.apply({}, this.data);
/* 1162 */             data.draft = true;
/* 1163 */ 
/* 1164 */             CB_Objects.create(
/* 1165 */                 data
/* 1166 */                 ,this.processSaveDraft
/* 1167 */                 ,this
/* 1168 */             );
/* 1169 */         }
/* 1170 */     }
/* 1171 */ 
/* 1172 */     ,processSaveDraft: function(r, e) {
/* 1173 */         if(!r || (r.success !== true)) {
/* 1174 */             return;
/* 1175 */         }
/* 1176 */ 
/* 1177 */         var id = r.data.id;
/* 1178 */         this.data.id = id;
/* 1179 */         this.data.pid = r.data.pid;
/* 1180 */         // this.data.draft = true;
/* 1181 */ 
/* 1182 */         //update loadedData.id of the plugins container so it will reload automaticly
/* 1183 */         //on fileuploaded event
/* 1184 */         this.pluginsContainer.loadedParams = {
/* 1185 */             id: id
/* 1186 */             ,template_id: this.data.template_id
/* 1187 */             ,from: 'window'
/* 1188 */         };
/* 1189 */ 
/* 1190 */         this.getDraftIdCallback(id, e);
/* 1191 */     }
/* 1192 */ 
/* 1193 */     ,onFileUploadEvent: function(p, e) {
/* 1194 */         this.uploadFieldData = {
/* 1195 */             pid: this.data.id
/* 1196 */         };
/* 1197 */ 
/* 1198 */         if(isNaN(this.uploadFieldData.pid)) {
/* 1199 */             this.onGetDraftId(
/* 1200 */                 function(id, e) {

/* Window.js */

/* 1201 */                     this.uploadFieldData.pid = id;
/* 1202 */                 }
/* 1203 */                 ,this
/* 1204 */             );
/* 1205 */ 
/* 1206 */         }
/* 1207 */ 
/* 1208 */         App.mainViewPort.onFileUpload(this.uploadFieldData, e);
/* 1209 */     }
/* 1210 */ 
/* 1211 */     /**
/* 1212 *|      * validation check
/* 1213 *|      * @return Boolean
/* 1214 *|      */
/* 1215 */     ,isValid: function(){
/* 1216 */         var rez = true;
/* 1217 */         if(this.grid && this.grid.isValid) {
/* 1218 */             rez = this.grid.isValid();
/* 1219 */         }
/* 1220 */ 
/* 1221 */         return rez;
/* 1222 */     }
/* 1223 */ 
/* 1224 */     ,onRenameClick: function(b, e) {
/* 1225 */         var d = this.data
/* 1226 */             ,data = {
/* 1227 */                 path: d.id
/* 1228 */                 ,name: Ext.util.Format.htmlDecode(d.name)
/* 1229 */                 ,scope: this
/* 1230 */                 ,callback: function(r, e) {
/* 1231 */                     this.data.name = r.data.newName;
/* 1232 */                     this.updateWindowTitle();
/* 1233 */                     this.titleView.update(this.data);
/* 1234 */                 }
/* 1235 */             };
/* 1236 */ 
/* 1237 */         App.promptRename(data);
/* 1238 */     }
/* 1239 */ 
/* 1240 */     ,onPermalinkClick: function(b, e) {
/* 1241 */         window.prompt(
/* 1242 */             'Copy to clipboard: Ctrl+C, Enter'
/* 1243 */             , window.location.origin + '/' + App.config.coreName + '/view/' + this.data.id + '/'
/* 1244 */         );
/* 1245 */     }
/* 1246 */ 
/* 1247 */     ,onStarClick: function(b, e) {
/* 1248 */         var ld = this.data
/* 1249 */             ,d = {
/* 1250 */                 id: ld.id

/* Window.js */

/* 1251 */                 ,name: ld.name
/* 1252 */                 ,iconCls: ld.iconCls
/* 1253 */                 ,path: '/' + ld.pids + '/' + ld.id
/* 1254 */                 ,pathText: ld.path
/* 1255 */             };
/* 1256 */ 
/* 1257 */         App.Favorites.setStarred(d);
/* 1258 */     }
/* 1259 */ 
/* 1260 */     ,onUnstarClick: function(b, e) {
/* 1261 */         App.Favorites.setUnstarred(this.data.id);
/* 1262 */     }
/* 1263 */ 
/* 1264 */     ,onFavoritesChange: function() {
/* 1265 */         var isStarred = App.Favorites.isStarred(this.data.id);
/* 1266 */ 
/* 1267 */         this.actions.star.setHidden(isStarred);
/* 1268 */         this.actions.unstar.setHidden(!isStarred);
/* 1269 */     }
/* 1270 */ });
/* 1271 */ 

;
/* TitleView.js */

/* 1   */ Ext.namespace('CB.object.widget');
/* 2   */ 
/* 3   */ Ext.define('CB.object.TitleView', {
/* 4   */     extend: 'Ext.DataView'
/* 5   */ 
/* 6   */     ,initComponent: function() {
/* 7   */         this.tpl = new Ext.XTemplate(
/* 8   */             '<tpl for=".">'
/* 9   */             ,'<div class="obj-header"><b class="{titleCls}">{[ Ext.valueFrom(values.name, \'\') ]}</b> &nbsp;'
/* 10  */                 ,'{[ this.getStatusInfo(values) ]}'
/* 11  */                 ,'<div class="path fs12">'
/* 12  */                     ,'{[ this.getPath(values) ]}'
/* 13  */                 ,'</div>'
/* 14  */                 ,'<div class="info">'
/* 15  */                     ,'{[ this.getTitleInfo(values) ]}'
/* 16  */                 ,'</div>'
/* 17  */             ,'</div>'
/* 18  */             ,'</tpl>'
/* 19  */             ,{
/* 20  */                 getStatusInfo: this.getStatusInfo
/* 21  */                 ,getPath: this.getPath
/* 22  */                 ,getTitleInfo: this.getTitleInfo
/* 23  */             }
/* 24  */         );
/* 25  */ 
/* 26  */         Ext.apply(this, {
/* 27  */             autoHeight: true
/* 28  */             ,cls: 'obj-plugin-title'
/* 29  */             ,itemSelector: '.none'
/* 30  */             ,data: Ext.valueFrom(this.config.data, {})
/* 31  */             ,listeners: {
/* 32  */                 scope: this
/* 33  */                 ,containerclick: this.onContainerClick
/* 34  */             }
/* 35  */         });
/* 36  */ 
/* 37  */         this.callParent(arguments);
/* 38  */     }
/* 39  */ 
/* 40  */     /**
/* 41  *|      * get status info displayed next to the title
/* 42  *|      * @return string
/* 43  *|      */
/* 44  */     ,getStatusInfo: function (values) {
/* 45  */         if(Ext.isEmpty(values.status)) {
/* 46  */             return '';
/* 47  */         }
/* 48  */ 
/* 49  */         var rez = '<div class="dIB fs12 ' + Ext.valueFrom(values.statusCls, '') + '"">' +
/* 50  */             values.status + '</div>';

/* TitleView.js */

/* 51  */ 
/* 52  */         return rez;
/* 53  */     }
/* 54  */ 
/* 55  */     /**
/* 56  *|      * get path
/* 57  *|      * @return string
/* 58  *|      */
/* 59  */     ,getPath: function (values) {
/* 60  */         if(Ext.isEmpty(values.path)) {
/* 61  */             return '';
/* 62  */         }
/* 63  */ 
/* 64  */         var rez = '<a class="click" title="' + values.path + '">' +
/* 65  */             App.shortenStringLeft(values.path, 50) + '</a>';
/* 66  */ 
/* 67  */         return rez;
/* 68  */     }
/* 69  */ 
/* 70  */     /**
/* 71  *|      * get info displayed under the title
/* 72  *|      * Ex: TemplateType &#8226; #{id} &#8226; Ubdate by <a href="#">user name</a> time ago
/* 73  *|      * @return string
/* 74  *|      */
/* 75  */     ,getTitleInfo: function (values) {
/* 76  */         var rez = [];
/* 77  */ 
/* 78  */         // #Id
/* 79  */         if(values.id) {
/* 80  */             rez.push('#' + values.id);
/* 81  */         }
/* 82  */ 
/* 83  */         // Template
/* 84  */         rez.push(CB.DB.templates.getName(values.template_id));
/* 85  */ 
/* 86  */         // Creator
/* 87  */         if (values.cid) {
/* 88  */             rez.push(
/* 89  */                 L.CreatedBy +
/* 90  */                 ' <a class="click">' + CB.DB.usersStore.getName(values.cid) + '</a> ' +
/* 91  */                 Ext.valueFrom(values.cdate_ago_text, '')
/* 92  */             );
/* 93  */         }
/* 94  */ 
/* 95  */         // Updater
/* 96  */         if (values.uid) {
/* 97  */             rez.push(
/* 98  */                 L.UpdatedBy +
/* 99  */                 ' <a class="click">' + CB.DB.usersStore.getName(values.uid) + '</a> ' +
/* 100 */                 Ext.valueFrom(values.udate_ago_text, '')

/* TitleView.js */

/* 101 */             );
/* 102 */         }
/* 103 */ 
/* 104 */         return rez.join(' &#8226; ');
/* 105 */     }
/* 106 */ 
/* 107 */     ,onContainerClick: function(view, e, eOpts) {
/* 108 */         if(e) {
/* 109 */             var el = e.getTarget('.path');
/* 110 */             if(el) {
/* 111 */                 App.openPath(this.data.pids);
/* 112 */             }
/* 113 */ 
/* 114 */         }
/* 115 */     }
/* 116 */ });
/* 117 */ 

;
/* ViewContainer.js */

/* 1    */ Ext.namespace('CB');
/* 2    */ 
/* 3    */ Ext.define('CB.object.ViewContainer', {
/* 4    */     extend: 'Ext.Panel'
/* 5    */ 
/* 6    */     ,border: false
/* 7    */     ,layout: 'card'
/* 8    */     ,activeItem: 0
/* 9    */ 
/* 10   */     ,constructor: function() {
/* 11   */ 
/* 12   */         Ext.apply(this, {
/* 13   */             loadedData: {}
/* 14   */         });
/* 15   */ 
/* 16   */         this.callParent(arguments);
/* 17   */     }
/* 18   */ 
/* 19   */     ,initComponent: function() {
/* 20   */ 
/* 21   */         this.initButtons();
/* 22   */ 
/* 23   */         Ext.apply(this, {
/* 24   */             tbar: new Ext.Toolbar({
/* 25   */                 border: false
/* 26   */                 ,style: 'background: #ffffff'
/* 27   */                 ,defaults: {
/* 28   */                     scale: 'medium'
/* 29   */                 }
/* 30   */                 ,items: [
/* 31   */                     this.BC.get('edit')
/* 32   */                     ,this.BC.get('fitImage')
/* 33   */                     ,this.BC.get('download')
/* 34   */                     ,this.BC.get('completetask')
/* 35   */                     ,'->'
/* 36   */                     ,this.BC.get('preview')
/* 37   */                     ,this.BC.get('star')
/* 38   */                     ,this.BC.get('unstar')
/* 39   */                     ,this.BC.get('more')
/* 40   */                     ,'-'
/* 41   */                     ,this.BC.get('openExternal')
/* 42   */                     ,this.BC.get('close')
/* 43   */                 ]
/* 44   */             })
/* 45   */ 
/* 46   */             ,defaults: {
/* 47   */                 border: false
/* 48   */                 ,header: false
/* 49   */             }
/* 50   */             ,items: [{

/* ViewContainer.js */

/* 51   */                     xtype: 'CBObjectProperties'
/* 52   */ 
/* 53   */                     ,api: CB_Objects.getPluginsData
/* 54   */                     ,listeners: {
/* 55   */                         scope: this
/* 56   */ 
/* 57   */                         ,openpreview: this.onOpenPreviewEvent
/* 58   */ 
/* 59   */                         ,editobject: this.onEditObjectEvent
/* 60   */                         ,editmeta: this.onEditObjectEvent
/* 61   */ 
/* 62   */                         ,loaded: this.onPluginsContainerLoaded
/* 63   */                         // ,loaded: this.onCardItemLoaded
/* 64   */                     }
/* 65   */                 },{
/* 66   */                     xtype: 'CBObjectPreview'
/* 67   */                     ,listeners: {
/* 68   */                         scope: this
/* 69   */                         ,loaded: this.onCardItemLoaded
/* 70   */                     }
/* 71   */                 }
/* 72   */             ]
/* 73   */             ,listeners: {
/* 74   */                 scope: this
/* 75   */                 ,show: this.onShowEvent
/* 76   */                 ,lockpanel: this.onLockPanelEvent
/* 77   */                 ,beforedestroy: this.onBeforeDestroy
/* 78   */             }
/* 79   */         });
/* 80   */ 
/* 81   */ 
/* 82   */         this.callParent(arguments);
/* 83   */ 
/* 84   */         this.topToolbar = this.dockedItems.getAt(0);
/* 85   */ 
/* 86   */         this.delayedLoadTask = new Ext.util.DelayedTask(this.doLoad, this);
/* 87   */ 
/* 88   */         this.enableBubble(['changeparams', 'filedownload', 'createobject']);
/* 89   */ 
/* 90   */         App.mainViewPort.on('objectsdeleted', this.onObjectsDeleted, this);
/* 91   */         App.on('objectchanged', this.onObjectChanged, this);
/* 92   */         App.on('objectsaction', this.onObjectsAction, this);
/* 93   */ 
/* 94   */         App.Favorites.on('change', this.onFavoritesChange, this);
/* 95   */     }
/* 96   */ 
/* 97   */     /**
/* 98   *|      * init actions used in this component
/* 99   *|      * @return void
/* 100  *|      */

/* ViewContainer.js */

/* 101  */     ,initActions: function() {
/* 102  */         this.actions = {
/* 103  */ 
/* 104  */             edit: new Ext.Action({
/* 105  */                 iconCls: 'im-edit-obj'
/* 106  */                 ,itemId: 'edit'
/* 107  */                 ,text: L.Edit
/* 108  */                 ,disabled: true
/* 109  */                 ,scale: 'medium'
/* 110  */                 ,scope: this
/* 111  */                 ,handler: this.onEditClick
/* 112  */             })
/* 113  */ 
/* 114  */             ,download: new Ext.Action({
/* 115  */                 text: L.Download
/* 116  */                 ,itemId: 'download'
/* 117  */                 ,iconCls: 'im-download'
/* 118  */                 ,hidden: true
/* 119  */                 ,scale: 'medium'
/* 120  */                 ,scope: this
/* 121  */                 ,handler: this.onDownloadClick
/* 122  */             })
/* 123  */ 
/* 124  */             ,fitImage: new Ext.Action({
/* 125  */                 iconCls: 'im-fit'
/* 126  */                 ,itemId: 'fitImage'
/* 127  */                 ,hidden: true
/* 128  */                 ,enableToggle: true
/* 129  */                 ,pressed: true
/* 130  */                 ,scale: 'medium'
/* 131  */                 ,scope: this
/* 132  */                 ,handler: this.onFitImageClick
/* 133  */             })
/* 134  */ 
/* 135  */             ,completeTask: new Ext.Action({
/* 136  */                 iconCls: 'im-task-complete'
/* 137  */                 ,itemId: 'completetask'
/* 138  */                 ,text: L.Done
/* 139  */                 ,hidden: true
/* 140  */                 ,scale: 'medium'
/* 141  */                 ,scope: this
/* 142  */                 ,handler: this.onCompleteTaskClick
/* 143  */             })
/* 144  */ 
/* 145  */             ,preview: new Ext.Action({
/* 146  */                 iconCls: 'im-preview'
/* 147  */                 ,itemId: 'preview'
/* 148  */                 ,enableToggle: true
/* 149  */                 ,qtip: L.Preview
/* 150  */                 ,hidden: true

/* ViewContainer.js */

/* 151  */                 ,scale: 'medium'
/* 152  */                 ,scope: this
/* 153  */                 ,handler: this.onPreviewClick
/* 154  */             })
/* 155  */ 
/* 156  */             ,openExternal: new Ext.Action({
/* 157  */                 iconCls: 'im-external'
/* 158  */                 ,itemId: 'openExternal'
/* 159  */                 ,scale: 'medium'
/* 160  */                 ,hidden: true
/* 161  */                 ,scope: this
/* 162  */                 ,handler: this.onOpenExternalClick
/* 163  */             })
/* 164  */ 
/* 165  */             ,close: new Ext.Action({
/* 166  */                 iconCls: 'im-cancel'
/* 167  */                 ,itemId: 'close'
/* 168  */                 ,scale: 'medium'
/* 169  */                 ,scope: this
/* 170  */                 ,handler: this.onCloseClick
/* 171  */             })
/* 172  */ 
/* 173  */             ,star: new Ext.Action({
/* 174  */                 iconCls: 'i-star'
/* 175  */                 ,qtip: L.Star
/* 176  */                 ,itemId: 'star'
/* 177  */                 ,scale: 'medium'
/* 178  */                 ,hidden: true
/* 179  */                 ,scope: this
/* 180  */                 ,handler: this.onStarClick
/* 181  */             })
/* 182  */ 
/* 183  */             ,unstar: new Ext.Action({
/* 184  */                 iconCls: 'i-unstar'
/* 185  */                 ,qtip: L.Unstar
/* 186  */                 ,itemId: 'unstar'
/* 187  */                 ,scale: 'medium'
/* 188  */                 ,hidden: true
/* 189  */                 ,scope: this
/* 190  */                 ,handler: this.onUnstarClick
/* 191  */             })
/* 192  */ 
/* 193  */             ,notifyOn: new Ext.Action({
/* 194  */                 text: L.NotifyOn
/* 195  */                 ,iconCls: 'im-watch'
/* 196  */                 ,itemId: 'notifyOn'
/* 197  */                 ,scope: this
/* 198  */                 ,handler: this.onSubscriptionButtonClick
/* 199  */             })
/* 200  */ 

/* ViewContainer.js */

/* 201  */             ,notifyOff: new Ext.Action({
/* 202  */                 text: L.NotifyOff
/* 203  */                 ,iconCls: 'im-ignore'
/* 204  */                 ,itemId: 'notifyOff'
/* 205  */                 ,scope: this
/* 206  */                 ,handler: this.onSubscriptionButtonClick
/* 207  */             })
/* 208  */         };
/* 209  */     }
/* 210  */ 
/* 211  */     /**
/* 212  *|      * define buttons config, init ButtonCollection
/* 213  *|      * @return void
/* 214  *|      */
/* 215  */     ,initButtons: function() {
/* 216  */         this.initActions();
/* 217  */ 
/* 218  */         //define button configs
/* 219  */         this.menuItemConfigs = {
/* 220  */             reload: {
/* 221  */                 iconCls: 'i-refresh'
/* 222  */                 ,itemId: 'reload'
/* 223  */                 ,text: L.Refresh
/* 224  */                 ,scope: this
/* 225  */                 ,handler: this.onReloadClick
/* 226  */             }
/* 227  */ 
/* 228  */             ,completetask: {
/* 229  */                 iconCls: 'im-task-complete'
/* 230  */                 ,itemId: 'completetask'
/* 231  */                 ,scale: 'medium'
/* 232  */                 ,text: L.Done
/* 233  */                 ,scope: this
/* 234  */                 ,handler: this.onCompleteTaskClick
/* 235  */             }
/* 236  */ 
/* 237  */             ,closetask: {
/* 238  */                 text: L.ClosingTask
/* 239  */                 ,itemId: 'closetask'
/* 240  */                 ,scope: this
/* 241  */                 ,handler: this.onCloseTaskClick
/* 242  */             }
/* 243  */ 
/* 244  */             ,reopentask: {
/* 245  */                 text: L.ReopeningTask
/* 246  */                 ,itemId: 'reopentask'
/* 247  */                 ,scope: this
/* 248  */                 ,handler: this.onReopenTaskClick
/* 249  */             }
/* 250  */ 

/* ViewContainer.js */

/* 251  */             ,rename: {
/* 252  */                 itemId: 'rename'
/* 253  */                 ,text: L.Rename
/* 254  */                 ,scope: this
/* 255  */                 ,handler: this.onRenameClick
/* 256  */             }
/* 257  */ 
/* 258  */             ,permissions: {
/* 259  */                 itemId: 'permissions'
/* 260  */                 ,text: L.Permissions
/* 261  */                 ,scope: this
/* 262  */                 ,handler: this.onPermissionsClick
/* 263  */             }
/* 264  */ 
/* 265  */             ,webdavlink: {
/* 266  */                 text: L.WebDAVLink
/* 267  */                 ,itemId: 'webdavlink'
/* 268  */                 ,scope: this
/* 269  */                 ,handler: this.onWebDAVLinkClick
/* 270  */             }
/* 271  */ 
/* 272  */             ,permalink: {
/* 273  */                 text: L.Permalink
/* 274  */                 ,itemId: 'permalink'
/* 275  */                 ,scope: this
/* 276  */                 ,handler: this.onPermalinkClick
/* 277  */             }
/* 278  */ 
/* 279  */             ,'setOwner': {
/* 280  */                 text: L.SetOwner
/* 281  */                 ,itemId: 'setOwner'
/* 282  */                 ,menu: getMenuUserItems(
/* 283  */                     this.onSetOwnershipClick
/* 284  */                     ,this
/* 285  */                 )
/* 286  */             }
/* 287  */ 
/* 288  */             ,'new': {
/* 289  */                 text: L.New
/* 290  */                 ,itemId: 'newItem'
/* 291  */                 ,name: 'newmenu'
/* 292  */                 ,menu: []
/* 293  */             }
/* 294  */         };
/* 295  */ 
/* 296  */         /* will use BC abreviation for Button Collection */
/* 297  */         this.BC = new Ext.util.MixedCollection();
/* 298  */ 
/* 299  */         this.BC.addAll([
/* 300  */             new Ext.Button(this.actions.edit)

/* ViewContainer.js */

/* 301  */             ,new Ext.Button(this.actions.download)
/* 302  */             ,new Ext.Button(this.actions.close)
/* 303  */             ,new Ext.Button(this.actions.openExternal)
/* 304  */             ,new Ext.Button(this.actions.fitImage)
/* 305  */             ,new Ext.Button(this.actions.completeTask)
/* 306  */             ,new Ext.Button(this.actions.star)
/* 307  */             ,new Ext.Button(this.actions.unstar)
/* 308  */             ,new Ext.Button(this.actions.preview)
/* 309  */ 
/* 310  */             ,new Ext.Button({
/* 311  */                 itemId: 'more'
/* 312  */                 ,arrowVisible: false
/* 313  */                 ,iconCls: 'im-points'
/* 314  */                 ,scale: 'medium'
/* 315  */                 ,menu: []
/* 316  */             })
/* 317  */         ]);
/* 318  */     }
/* 319  */ 
/* 320  */     /**
/* 321  *|      * on show
/* 322  *|      * @param  component
/* 323  *|      * @return void
/* 324  *|      */
/* 325  */     ,onShowEvent: function(c) {
/* 326  */         if(this.lastLoadData) {
/* 327  */             this.load(this.lastLoadData);
/* 328  */         }
/* 329  */     }
/* 330  */ 
/* 331  */     /**
/* 332  *|      * remove listeners on destroy
/* 333  *|      * @param  component
/* 334  *|      * @return void
/* 335  *|      */
/* 336  */     ,onBeforeDestroy: function(c) {
/* 337  */         App.mainViewPort.un('objectsdeleted', this.onObjectsDeleted, this);
/* 338  */         App.un('objectchanged', this.onObjectChanged, this);
/* 339  */         App.un('objectsaction', this.onObjectsAction, this);
/* 340  */     }
/* 341  */ 
/* 342  */     /**
/* 343  *|      * change active view (properties/preview)
/* 344  *|      * @param int index
/* 345  *|      * @param bool autoLoad
/* 346  *|      */
/* 347  */     ,setActiveView: function(index, autoLoad){
/* 348  */         var currentItemIndex = this.items.indexOf(this.getLayout().activeItem);
/* 349  */ 
/* 350  */         if(currentItemIndex == index) {

/* ViewContainer.js */

/* 351  */             return;
/* 352  */         }
/* 353  */ 
/* 354  */         this.clear();
/* 355  */ 
/* 356  */         this.getLayout().setActiveItem(index);
/* 357  */ 
/* 358  */         this.onViewChange();
/* 359  */ 
/* 360  */         if(autoLoad !== false) {
/* 361  */             this.load(this.requestedLoadData);
/* 362  */         }
/* 363  */     }
/* 364  */ 
/* 365  */     /**
/* 366  *|      * adjustments on view change
/* 367  *|      * @return void
/* 368  *|      */
/* 369  */     ,onViewChange: function() {
/* 370  */         var d = this.loadedData;
/* 371  */         this.actions.edit.setDisabled(isNaN(d.id) || Ext.isEmpty(d.id));
/* 372  */         this.BC.get('preview').toggle(this.loadedData.viewIndex == 1, false);
/* 373  */     }
/* 374  */ 
/* 375  */     /**
/* 376  *|      * clear function
/* 377  *|      * @return {[type]} [description]
/* 378  *|      */
/* 379  */     ,clear: function() {
/* 380  */         this.delayedLoadTask.cancel();
/* 381  */         delete this.locked;
/* 382  */         delete this.requestedLoadData;
/* 383  */         this.previousLoadedData = Ext.clone(this.loadedData);
/* 384  */         this.loadedData = {};
/* 385  */         this.getLayout().activeItem.clear();
/* 386  */         this.updateToolbarAndMenuItems();
/* 387  */     }
/* 388  */ 
/* 389  */     /**
/* 390  *|      * loading an object into the panel in a specific view
/* 391  *|      * @param  {[type]} objectData
/* 392  *|      * @return {[type]}
/* 393  *|      */
/* 394  */     ,load: function(objectData) {
/* 395  */         var el = this.getLayout().activeItem.getEl();
/* 396  */ 
/* 397  */         if(!el || !el.isVisible(true)) {
/* 398  */             this.lastLoadData = objectData;
/* 399  */             return;
/* 400  */         }

/* ViewContainer.js */

/* 401  */ 
/* 402  */         delete this.lastLoadData;
/* 403  */ 
/* 404  */         if(this.locked) {
/* 405  */             delete this.requestedLoadData;
/* 406  */             return;
/* 407  */         }
/* 408  */ 
/* 409  */         if(!isNaN(objectData)) {
/* 410  */             objectData = {
/* 411  */                 id: objectData
/* 412  */             };
/* 413  */         }
/* 414  */ 
/* 415  */         if(Ext.isEmpty(objectData) || Ext.isEmpty(objectData.id) || isNaN(objectData.id)) {
/* 416  */             this.clear();
/* 417  */ 
/* 418  */             return;
/* 419  */         }
/* 420  */ 
/* 421  */         var ai = this.getLayout().activeItem;
/* 422  */ 
/* 423  */         //current view index
/* 424  */         var cvi = this.items.indexOf(ai);
/* 425  */ 
/* 426  */         // check  if a new request is waiting to be loaded
/* 427  */         if(Ext.isEmpty(this.requestedLoadData)) {
/* 428  */             //check if object data are identical to previous loaded object
/* 429  */             if(!objectData.force) {
/* 430  */                 if(this.loadedData && objectData &&
/* 431  */                     (objectData.id == this.loadedData.id) &&
/* 432  */                     (Ext.valueFrom(objectData.viewIndex, cvi) == Ext.valueFrom(this.loadedData.viewIndex, cvi))
/* 433  */                 ) {
/* 434  */                     return;
/* 435  */                 }
/* 436  */             }
/* 437  */ 
/* 438  */             // save current scroll position for history navigation
/* 439  */             if(!Ext.isEmpty(ai.body)) {
/* 440  */                 this.loadedData.scroll = ai.body.getScroll();
/* 441  */             }
/* 442  */         } else {
/* 443  */             //check if object data are identical to previous load request
/* 444  */             if((objectData.id == this.requestedLoadData.id) &&
/* 445  */                 (Ext.valueFrom(objectData.viewIndex, cvi) == Ext.valueFrom(this.requestedLoadData.viewIndex, cvi))
/* 446  */             ) {
/* 447  */                 return;
/* 448  */             }
/* 449  */         }
/* 450  */ 

/* ViewContainer.js */

/* 451  */         // cancel previous wating request and start a new one
/* 452  */         // this.delayedLoadTask.cancel();
/* 453  */         this.clear();
/* 454  */ 
/* 455  */         // save requested data
/* 456  */         this.requestedLoadData = Ext.apply({}, objectData);
/* 457  */ 
/* 458  */         //automatic switch to plugins panel if different object types
/* 459  */         if(this.previousLoadedData &&
/* 460  */             (CB.DB.templates.getType(this.requestedLoadData.template_id) !=
/* 461  */             CB.DB.templates.getType(this.previousLoadedData.template_id))
/* 462  */         ) {
/* 463  */             this.setActiveView(0);
/* 464  */         }
/* 465  */ 
/* 466  */         // this.loadedData = {};
/* 467  */         // this.items.getAt(0).clear();
/* 468  */ 
/* 469  */         // instantiate a delay to exclude flood requests
/* 470  */         this.delayedLoadTask.delay(3, this.doLoad, this);
/* 471  */     }
/* 472  */ 
/* 473  */     /**
/* 474  *|      * direct loading method of the this.requestedLoadData
/* 475  *|      * @return void
/* 476  *|      */
/* 477  */     ,doLoad: function() {
/* 478  */         if(this.locked) {
/* 479  */             delete this.requestedLoadData;
/* 480  */             return;
/* 481  */         }
/* 482  */ 
/* 483  */         var id = this.requestedLoadData
/* 484  */             ? Ext.valueFrom(this.requestedLoadData.nid, this.requestedLoadData.id)
/* 485  */             : null
/* 486  */             ,params = Ext.apply({id: id}, this.requestedLoadData);
/* 487  */ 
/* 488  */         delete this.requestedLoadData;
/* 489  */ 
/* 490  */         if(Ext.isDefined(params.viewIndex)) {
/* 491  */             this.setActiveView(params.viewIndex, false);
/* 492  */         }
/* 493  */ 
/* 494  */         var activeItem = this.getLayout().activeItem;
/* 495  */ 
/* 496  */         params.viewIndex = this.items.indexOf(activeItem);
/* 497  */ 
/* 498  */         this.loadedData = params;
/* 499  */ 
/* 500  */         switch(activeItem.getXType()) {

/* ViewContainer.js */

/* 501  */             case 'CBObjectPreview':
/* 502  */                 this.topToolbar.setVisible(!Ext.isEmpty(id));
/* 503  */                 this.doLayout();
/* 504  */ 
/* 505  */                 //used params by preview component to detect wich buttons to display when asked
/* 506  */                 activeItem.params = params;
/* 507  */ 
/* 508  */                 activeItem.loadPreview(id);
/* 509  */                 break;
/* 510  */             case 'CBObjectProperties':
/* 511  */             case 'CBEditObject':
/* 512  */                 activeItem.load(this.loadedData);
/* 513  */                 break;
/* 514  */         }
/* 515  */         this.onViewChange();
/* 516  */     }
/* 517  */ 
/* 518  */     ,onPluginsContainerLoaded: function(cmp, params) {
/* 519  */         this.loadedData.subscription = params.subscription;
/* 520  */         this.onCardItemLoaded(cmp);
/* 521  */     }
/* 522  */     /**
/* 523  *|      * adjustments on view loaded
/* 524  *|      * @param  object item
/* 525  *|      * @return void
/* 526  *|      */
/* 527  */     ,onCardItemLoaded: function(item) {
/* 528  */         this.locked = false;
/* 529  */ 
/* 530  */         this.updateToolbarAndMenuItems();
/* 531  */ 
/* 532  */         this.fireEvent('loaded', this, item);
/* 533  */ 
/* 534  */         if(Ext.isEmpty(this.loadedData) || Ext.isEmpty(this.loadedData.scroll)) {
/* 535  */             return;
/* 536  */         }
/* 537  */         if(item.body) {
/* 538  */             item.body.scrollTo('left', this.loadedData.scroll.left);
/* 539  */             item.body.scrollTo('top', this.loadedData.scroll.top);
/* 540  */         }
/* 541  */     }
/* 542  */ 
/* 543  */     /**
/* 544  *|      * update toolbar and menu item corresponding to active view
/* 545  *|      * @return void
/* 546  *|      */
/* 547  */     ,updateToolbarAndMenuItems: function() {
/* 548  */         var ai = this.getLayout().activeItem;
/* 549  */ 
/* 550  */         if(this.menu) {

/* ViewContainer.js */

/* 551  */             this.menu.removeAll(true);
/* 552  */             this.menu.destroy();
/* 553  */         }
/* 554  */ 
/* 555  */         this.menu = new Ext.menu.Menu({items:[]});
/* 556  */ 
/* 557  */         this.BC.get('more').setMenu(this.menu, true);
/* 558  */ 
/* 559  */         //hide all by default
/* 560  */         this.topToolbar.items.each(
/* 561  */             function(i) {
/* 562  */                 if((['close'].indexOf(i.itemId) < 0) &&
/* 563  */                    (['tbfill', 'tbseparator'].indexOf(i.getXType()) < 0)
/* 564  */                 ) {
/* 565  */                     i.hide();
/* 566  */                 }
/* 567  */             }
/* 568  */         );
/* 569  */ 
/* 570  */         if(!Ext.isNumeric(this.loadedData.id)) {
/* 571  */             return;
/* 572  */         }
/* 573  */ 
/* 574  */         var ti = ai.getContainerToolbarItems();
/* 575  */         if(Ext.isEmpty(ti)) {
/* 576  */             return;
/* 577  */         }
/* 578  */ 
/* 579  */         ti.menu['notifyOn'] = {addDivider: 'top'};
/* 580  */         ti.menu['notifyOff'] = {};
/* 581  */ 
/* 582  */         /* update menu items */
/* 583  */         var isFirstItem = true;
/* 584  */         Ext.iterate(
/* 585  */             ti.menu
/* 586  */             ,function(k, v, o) {
/* 587  */ 
/* 588  */                 if(k === '-') {
/* 589  */                     this.menu.add('-');
/* 590  */                 } else {
/* 591  */                     var b = (this.menuItemConfigs[k])
/* 592  */                         ? Ext.clone(this.menuItemConfigs[k])
/* 593  */                         : this.actions[k];
/* 594  */ 
/* 595  */                     if(b) {
/* 596  */                         if ((!isFirstItem) &&
/* 597  */                           (v.addDivider === 'top')
/* 598  */                         ) {
/* 599  */                             this.menu.add('-');
/* 600  */                         }

/* ViewContainer.js */

/* 601  */ 
/* 602  */                         this.menu.add(b);
/* 603  */                         isFirstItem = false;
/* 604  */                     }
/* 605  */                 }
/* 606  */             }
/* 607  */             ,this
/* 608  */         );
/* 609  */ 
/* 610  */         //add "more" button to toolbar config if menu is not empty
/* 611  */         if(this.menu.items.getCount() > 0) {
/* 612  */             ti.tbar['more'] = {};
/* 613  */         }
/* 614  */ 
/* 615  */         ti.tbar.star = {};
/* 616  */         ti.tbar.unstar = {};
/* 617  */ 
/* 618  */         var subscription = Ext.valueFrom(this.loadedData.subscription, 'ignore');
/* 619  */ 
/* 620  */         this.actions.notifyOn.setHidden(subscription === 'watch');
/* 621  */         this.actions.notifyOff.setHidden(subscription === 'ignore');
/* 622  */ 
/* 623  */         // hide all bottons from toolbar
/* 624  */         Ext.iterate(
/* 625  */             ti.tbar
/* 626  */             ,function(k, v, o) {
/* 627  */                 var b = this.BC.get(k);
/* 628  */                 //if not defined the we should add this custom button
/* 629  */                 //to the collection to be available later
/* 630  */                 if(b) {
/* 631  */                     if(b.baseAction) {
/* 632  */                         b.baseAction.show();
/* 633  */                     } else {
/* 634  */                         b.show();
/* 635  */                     }
/* 636  */                 }
/* 637  */             }
/* 638  */             ,this
/* 639  */         );
/* 640  */ 
/* 641  */         this.onFavoritesChange();
/* 642  */ 
/* 643  */         this.updateCreateMenu();
/* 644  */     }
/* 645  */ 
/* 646  */     /**
/* 647  *|      * update create menu under the points button
/* 648  *|      * @return {[type]} [description]
/* 649  *|      */
/* 650  */     ,updateCreateMenu: function() {

/* ViewContainer.js */

/* 651  */         if(!this.menu) {
/* 652  */             return;
/* 653  */         }
/* 654  */ 
/* 655  */         var nmb = this.menu.child('[name="newmenu"]');
/* 656  */ 
/* 657  */         if(nmb) {
/* 658  */             updateMenu(
/* 659  */                 nmb
/* 660  */                 ,this.getLayout().activeItem.createMenu
/* 661  */                 ,this.onCreateObjectClick
/* 662  */                 ,this
/* 663  */             );
/* 664  */ 
/* 665  */             nmb.setDisabled(nmb.menu.items.getCount() < 1);
/* 666  */         }
/* 667  */     }
/* 668  */ 
/* 669  */     /**
/* 670  *|      * edit an item
/* 671  *|      * Shold be reviewed and merge with next method
/* 672  *|      * or even moved/merged to mainViewPort component
/* 673  *|      * @param  object objectData
/* 674  *|      * @param  event e
/* 675  *|      * @return void
/* 676  *|      */
/* 677  */     ,edit: function (objectData, e) {
/* 678  */         objectData.view = 'edit';
/* 679  */ 
/* 680  */         this.openObjectWindow(objectData);
/* 681  */     }
/* 682  */ 
/* 683  */     /**
/* 684  *|      * open an object edit window with given data
/* 685  *|      * @param  object objectData
/* 686  *|      * @return void
/* 687  *|      */
/* 688  */     ,openObjectWindow: function(objectData) {
/* 689  */         var data = Ext.apply({}, objectData);
/* 690  */         //edit object in popup window
/* 691  */         delete data.html;
/* 692  */         App.openObjectWindow(data);
/* 693  */     }
/* 694  */ 
/* 695  */     /**
/* 696  *|      * handler for edit button click
/* 697  *|      *
/* 698  *|      * @param  button b
/* 699  *|      * @param  event e
/* 700  *|      * @return void

/* ViewContainer.js *|

/* 701  *|      */
/* 702  */     ,onEditClick: function(b, e) {
/* 703  */         var p = Ext.apply({}, this.loadedData);
/* 704  */ 
/* 705  */         switch(detectFileEditor(p.name)) {
/* 706  */             case 'webdav':
/* 707  */                 App.openWebdavDocument(p);
/* 708  */                 break;
/* 709  */ 
/* 710  */             default:
/* 711  */                 p.comment = this.getCommentValue();
/* 712  */ 
/* 713  */                 this.setCommentValue('');
/* 714  */ 
/* 715  */                 this.edit(p, e);
/* 716  */                 break;
/* 717  */         }
/* 718  */     }
/* 719  */ 
/* 720  */     /**
/* 721  *|      * handler for reload button
/* 722  *|      * Reloads active view (properties or preview)
/* 723  *|      *
/* 724  *|      * @param  button b
/* 725  *|      * @param  event e
/* 726  *|      * @return void
/* 727  *|      */
/* 728  */     ,onReloadClick: function(b, e) {
/* 729  */         this.getLayout().activeItem.reload();
/* 730  */     }
/* 731  */ 
/* 732  */     /**
/* 733  *|      * handler for rename button
/* 734  *|      * Open permissions window for loaded item by calling viewport method
/* 735  *|      * @param  button b
/* 736  *|      * @param  event e
/* 737  *|      * @return void
/* 738  *|      */
/* 739  */     ,onRenameClick: function(b, e) {
/* 740  */         var data = {
/* 741  */             path: this.loadedData.id
/* 742  */             ,name: Ext.util.Format.htmlDecode(this.loadedData.name)
/* 743  */             ,scope: this
/* 744  */             ,callback: function(r, e) {
/* 745  */                 this.loadedData.name = r.data.newName;
/* 746  */             }
/* 747  */         };
/* 748  */ 
/* 749  */         App.promptRename(data);
/* 750  */     }

/* ViewContainer.js */

/* 751  */ 
/* 752  */     /**
/* 753  *|      * handler for permissions button
/* 754  *|      * Open permissions window for loaded item by calling viewport method
/* 755  *|      * @param  button b
/* 756  *|      * @param  event e
/* 757  *|      * @return void
/* 758  *|      */
/* 759  */     ,onPermissionsClick: function(b, e) {
/* 760  */         App.mainViewPort.openPermissions(this.loadedData.id);
/* 761  */     }
/* 762  */ 
/* 763  */     /**
/* 764  *|      * event handler for objects deletion
/* 765  *|      *
/* 766  *|      * There is no need to reload this view because the grid will reload and change the selection,
/* 767  *|      * but need to cancel the edit
/* 768  *|      *
/* 769  *|      * @param  array ids
/* 770  *|      * @param  object e
/* 771  *|      * @return void
/* 772  *|      */
/* 773  */     ,onObjectsDeleted: function(ids, e) {
/* 774  */         if(!Ext.isEmpty(this.loadedData) && setsHaveIntersection(ids, this.loadedData.id)) {
/* 775  */             // delete this.locked;
/* 776  */             this.setActiveView(0, false);
/* 777  */             this.clear();
/* 778  */             // this.loadedData = {};
/* 779  */             // this.items.getAt(0).clear();
/* 780  */             // this.updateToolbarAndMenuItems();
/* 781  */         }
/* 782  */     }
/* 783  */ 
/* 784  */     /**
/* 785  *|      * handler for fit image toolbar button
/* 786  *|      * toggle fit image preview
/* 787  *|      * This method actually should be managed by preview component
/* 788  *|      *
/* 789  *|      * @param  button b
/* 790  *|      * @param  event e
/* 791  *|      * @return void
/* 792  *|      */
/* 793  */     ,onFitImageClick: function(b, e) {
/* 794  */         var ai = this.getLayout().activeItem;
/* 795  */         if(ai.onFitImageClick) {
/* 796  */             ai.onFitImageClick(b, e);
/* 797  */         }
/* 798  */     }
/* 799  */ 
/* 800  */     /**

/* ViewContainer.js *|

/* 801  *|      * handler for preview toolbar button
/* 802  *|      *
/* 803  *|      * @param  button b
/* 804  *|      * @param  event e
/* 805  *|      * @return void
/* 806  *|      */
/* 807  */     ,onPreviewClick: function(b, e) {
/* 808  */         var p = Ext.clone(this.loadedData);
/* 809  */ 
/* 810  */         p.viewIndex = b.pressed
/* 811  */             ? 1
/* 812  */             : 0;
/* 813  */ 
/* 814  */         this.delayedLoadTask.cancel();
/* 815  */         this.requestedLoadData = p;
/* 816  */ 
/* 817  */         this.doLoad();
/* 818  */     }
/* 819  */ 
/* 820  */     /**
/* 821  *|      * handler for open external toolbar button
/* 822  *|      * @param  button b
/* 823  *|      * @param  event e
/* 824  *|      * @return void
/* 825  *|      */
/* 826  */     ,onOpenExternalClick: function(b, e) {
/* 827  */         var d = Ext.apply({}, this.loadedData);
/* 828  */ 
/* 829  */         d.comment = this.getCommentValue();
/* 830  */ 
/* 831  */         this.setCommentValue('');
/* 832  */ 
/* 833  */         this.openObjectWindow(d);
/* 834  */     }
/* 835  */ 
/* 836  */     /**
/* 837  *|      * handler for open preview from components below
/* 838  *|      *
/* 839  *|      * It was opening preview in current component,
/* 840  *|      * when editing on the right side was available.
/* 841  *|      * Now it opens popup window in preview mode.
/* 842  *|      *
/* 843  *|      * @param  object data
/* 844  *|      * @param  event e
/* 845  *|      * @return void
/* 846  *|      */
/* 847  */     ,onOpenPreviewEvent: function(data, e) {
/* 848  */         if(Ext.isEmpty(data)) {
/* 849  */             data = this.loadedData;
/* 850  */         }

/* ViewContainer.js */

/* 851  */ 
/* 852  */         if(this.loadedData && (data.id == this.loadedData.id)) {
/* 853  */             Ext.applyIf(data, this.loadedData);
/* 854  */         }
/* 855  */ 
/* 856  */         App.openObjectWindow(Ext.clone(data), e);
/* 857  */     }
/* 858  */ 
/* 859  */     /**
/* 860  *|      * handler for open edit object event from components below
/* 861  *|      *
/* 862  *|      * It was opening edit in current component,
/* 863  *|      * when editing on the right side was available.
/* 864  *|      * Now it opens popup window in edit mode.
/* 865  *|      *
/* 866  *|      * @param  object data
/* 867  *|      * @param  event e
/* 868  *|      * @return void
/* 869  *|      */
/* 870  */     ,onEditObjectEvent: function(data, e) {
/* 871  */         if(e) {
/* 872  */             e.stopEvent();
/* 873  */         }
/* 874  */ 
/* 875  */         if(Ext.isEmpty(data)) {
/* 876  */             data = this.loadedData;
/* 877  */         }
/* 878  */ 
/* 879  */         var p = Ext.clone(data);
/* 880  */ 
/* 881  */         this.edit(p, e);
/* 882  */     }
/* 883  */ 
/* 884  */     /**
/* 885  *|      * handler for download toolbar button
/* 886  *|      *
/* 887  *|      * @param  button b
/* 888  *|      * @param  event e
/* 889  *|      * @return void
/* 890  *|      */
/* 891  */     ,onDownloadClick: function(b, e) {
/* 892  */         this.fireEvent('filedownload', [this.loadedData.id], false, e);
/* 893  */     }
/* 894  */ 
/* 895  */     /**
/* 896  *|      * handler for creating new items from dropdown menu
/* 897  *|      *
/* 898  *|      * @param  button b
/* 899  *|      * @param  event e
/* 900  *|      * @return void

/* ViewContainer.js *|

/* 901  *|      */
/* 902  */     ,onCreateObjectClick: function(b, e) {
/* 903  */         this.goBackOnSave = true;
/* 904  */ 
/* 905  */         var d = b.config.data;
/* 906  */         d.pid = this.loadedData.id;
/* 907  */         d.path = this.loadedData.path;
/* 908  */         this.fireEvent('createobject', d, e);
/* 909  */     }
/* 910  */ 
/* 911  */     /**
/* 912  *|      * handler for close task toolbar button
/* 913  *|      * It is available when an active task is loaded.
/* 914  *|      *
/* 915  *|      * @param  button b
/* 916  *|      * @param  event e
/* 917  *|      * @return void
/* 918  *|      */
/* 919  */     ,onCloseTaskClick: function(b, e) {
/* 920  */         this.getEl().mask(L.CompletingTask + ' ...', 'x-mask-loading');
/* 921  */         CB_Tasks.close(this.loadedData.id, this.onTaskChanged, this);
/* 922  */     }
/* 923  */ 
/* 924  */     /**
/* 925  *|      * handler for reopen a closed task toolbar button
/* 926  *|      * It is available when a closed task is loaded.
/* 927  *|      *
/* 928  *|      * @param  button b
/* 929  *|      * @param  event e
/* 930  *|      * @return void
/* 931  *|      */
/* 932  */     ,onReopenTaskClick: function(b, e) {
/* 933  */         this.getEl().mask(L.ReopeningTask + ' ...', 'x-mask-loading');
/* 934  */         CB_Tasks.reopen(this.loadedData.id, this.onTaskChanged, this);
/* 935  */     }
/* 936  */ 
/* 937  */     /**
/* 938  *|      * handler for completing task toolbar button
/* 939  *|      * It is available when a task is loaded.
/* 940  *|      *
/* 941  *|      * @param  button b
/* 942  *|      * @param  event e
/* 943  *|      * @return void
/* 944  *|      */
/* 945  */     ,onCompleteTaskClick: function(b, e) {
/* 946  */         CB_Tasks.complete(
/* 947  */             {
/* 948  */                 id: this.loadedData.id
/* 949  */                 ,message: ''
/* 950  */             }

/* ViewContainer.js */

/* 951  */             ,this.onTaskChanged
/* 952  */             ,this
/* 953  */         );
/* 954  */     }
/* 955  */ 
/* 956  */     /**
/* 957  *|      * common handler for task actions responce
/* 958  *|      *
/* 959  *|      * @param  responce r
/* 960  *|      * @param  event e
/* 961  *|      * @return void
/* 962  *|      */
/* 963  */     ,onTaskChanged: function(r, e){
/* 964  */         this.getEl().unmask();
/* 965  */         App.fireEvent('objectchanged', this.loadedData, this);
/* 966  */     }
/* 967  */ 
/* 968  */     ,onSubscriptionButtonClick: function(b, e) {
/* 969  */         var type = (b.itemId === 'notifyOn')
/* 970  */             ? 'watch'
/* 971  */             : 'ignore';
/* 972  */ 
/* 973  */         CB_Objects.setSubscription(
/* 974  */             {
/* 975  */                 objectId: this.loadedData.id
/* 976  */                 ,type: type
/* 977  */             }
/* 978  */             ,function(r, e) {
/* 979  */                 if(!r || (r.success !== true)) {
/* 980  */                     return;
/* 981  */                 }
/* 982  */ 
/* 983  */                 this.actions.notifyOn.setHidden(type === 'watch');
/* 984  */                 this.actions.notifyOff.setHidden(type === 'ignore');
/* 985  */             }
/* 986  */             ,this
/* 987  */         );
/* 988  */     }
/* 989  */ 
/* 990  */     /**
/* 991  *|      * handler for WebDav Link menu button click
/* 992  *|      * Shows a window with link for WebDav editing
/* 993  *|      *
/* 994  *|      * @param  button b
/* 995  *|      * @param  event e
/* 996  *|      * @return void
/* 997  *|      */
/* 998  */     ,onWebDAVLinkClick: function(b, e) {
/* 999  */         App.openWebdavDocument(
/* 1000 */             this.loadedData

/* ViewContainer.js */

/* 1001 */             ,false
/* 1002 */         );
/* 1003 */     }
/* 1004 */ 
/* 1005 */     /**
/* 1006 *|      * handler for Permalink menu button click
/* 1007 *|      * Shows a prompt window with permalink
/* 1008 *|      *
/* 1009 *|      * @param  button b
/* 1010 *|      * @param  event e
/* 1011 *|      * @return void
/* 1012 *|      */
/* 1013 */     ,onPermalinkClick: function(b, e) {
/* 1014 */         window.prompt(
/* 1015 */             'Copy to clipboard: Ctrl+C, Enter'
/* 1016 */             , window.location.origin + '/' + App.config.coreName + '/view/' + this.loadedData.id + '/');
/* 1017 */     }
/* 1018 */ 
/* 1019 */     /**
/* 1020 *|      * handler for lockpanel event
/* 1021 *|      * Current component wouldnt accept any load requests when locked
/* 1022 *|      *
/* 1023 *|      * @param  boolean status
/* 1024 *|      * @return void
/* 1025 *|      */
/* 1026 */     ,onLockPanelEvent: function(status) {
/* 1027 */         this.locked = status;
/* 1028 */     }
/* 1029 */ 
/* 1030 */     /**
/* 1031 *|      * method for setting selected file version on contained versions plugin
/* 1032 *|      * This method was used by files editing window
/* 1033 *|      * Now it would be changed/removed
/* 1034 *|      *
/* 1035 *|      * @param object params
/* 1036 *|      */
/* 1037 */     ,setSelectedVersion: function(params) {
/* 1038 */         var ai = this.getLayout().activeItem;
/* 1039 */         if(ai.isXType('CBObjectProperties')) {
/* 1040 */             ai.setSelectedVersion(params);
/* 1041 */         }
/* 1042 */     }
/* 1043 */ 
/* 1044 */     /**
/* 1045 *|      * handler for objects action event (move/copy)
/* 1046 *|      *
/* 1047 *|      * @param  object r responce
/* 1048 *|      * @param  event e
/* 1049 *|      * @return void
/* 1050 *|      */

/* ViewContainer.js */

/* 1051 */     ,onObjectsAction: function(action, r, e){
/* 1052 */         if(this.loadedData.id == r.targetId) {
/* 1053 */             this.onReloadClick();
/* 1054 */         }
/* 1055 */     }
/* 1056 */ 
/* 1057 */     /**
/* 1058 *|      * handler for global object change event
/* 1059 *|      * Here we react and reload the view if necessary
/* 1060 *|      * @param  object data
/* 1061 *|      * @param  component component
/* 1062 *|      * @return void
/* 1063 *|      */
/* 1064 */     ,onObjectChanged: function(data, component) {
/* 1065 */         if(!isNaN(data)) {
/* 1066 */             data = {id: data};
/* 1067 */         }
/* 1068 */ 
/* 1069 */         if(!Ext.isEmpty(data.isNew)) {
/* 1070 */             this.requestedLoadData = data;
/* 1071 */             this.doLoad();
/* 1072 */             return;
/* 1073 */         }
/* 1074 */ 
/* 1075 */         if(!Ext.isEmpty(this.loadedData)) {
/* 1076 */             if((data.pid == this.loadedData.id) || (data.id == this.loadedData.id)) {
/* 1077 */                 this.onReloadClick();
/* 1078 */             }
/* 1079 */         }
/* 1080 */     }
/* 1081 */ 
/* 1082 */     /**
/* 1083 *|      * close this view container (hides it)
/* 1084 *|      * @return void
/* 1085 *|      */
/* 1086 */     ,onCloseClick: function() {
/* 1087 */         this.collapse();
/* 1088 */     }
/* 1089 */ 
/* 1090 */     ,onSetOwnershipClick: function(b, e) {
/* 1091 */         if(!Ext.isEmpty(this.loadedData.id)) {
/* 1092 */             CB_Objects.setOwnership(
/* 1093 */                 {
/* 1094 */                     ids: this.loadedData.id
/* 1095 */                     ,userId: b.userId
/* 1096 */                 }
/* 1097 */                 ,this.processSetOwnership
/* 1098 */                 ,this
/* 1099 */             );
/* 1100 */         }

/* ViewContainer.js */

/* 1101 */     }
/* 1102 */ 
/* 1103 */     ,processSetOwnership: function(r, e) {
/* 1104 */         if(r && r.success) {
/* 1105 */             App.fireEvent('objectchanged', this.loadedData, this);
/* 1106 */         }
/* 1107 */     }
/* 1108 */ 
/* 1109 */     ,onStarClick: function(b, e) {
/* 1110 */         var ld = this.loadedData
/* 1111 */             ,d = {
/* 1112 */                 id: ld.id
/* 1113 */                 ,name: ld.name
/* 1114 */                 ,iconCls: ld.iconCls
/* 1115 */                 ,path: '/' + ld.pids + '/' + ld.id
/* 1116 */                 ,pathText: ld.path
/* 1117 */             };
/* 1118 */ 
/* 1119 */         App.Favorites.setStarred(d);
/* 1120 */     }
/* 1121 */ 
/* 1122 */     ,onUnstarClick: function(b, e) {
/* 1123 */         App.Favorites.setUnstarred(this.loadedData.id);
/* 1124 */     }
/* 1125 */ 
/* 1126 */     ,onFavoritesChange: function() {
/* 1127 */         if(this.loadedData) {
/* 1128 */             var isStarred = App.Favorites.isStarred(this.loadedData.id);
/* 1129 */ 
/* 1130 */             this.actions.star.setHidden(isStarred);
/* 1131 */             this.actions.unstar.setHidden(!isStarred);
/* 1132 */         }
/* 1133 */     }
/* 1134 */ }
/* 1135 */ );
/* 1136 */ 
/* 1137 */ CB.object.ViewContainer.borrow(
/* 1138 */     CB.object.view.Properties
/* 1139 */     ,[
/* 1140 */         'getCommentComponent'
/* 1141 */         ,'getCommentValue'
/* 1142 */         ,'setCommentValue'
/* 1143 */     ]
/* 1144 */ );
/* 1145 */ 

;
/* Panel.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.search.edit.Panel', {
/* 4   */ 
/* 5   */     extend: 'CB.object.edit.Form'
/* 6   */ 
/* 7   */     ,xtype: 'CBSearchPanel'
/* 8   */ 
/* 9   */     ,hideTitle: true
/* 10  */ 
/* 11  */     ,initComponent: function(){
/* 12  */         this.actions = {
/* 13  */             search: new Ext.Action({
/* 14  */                 text: L.Search
/* 15  */                 ,iconCls: 'im-search'
/* 16  */                 ,itemId: 'search'
/* 17  */                 ,scale: 'medium'
/* 18  */                 ,tooltip: L.Search
/* 19  */                 ,scope: this
/* 20  */                 ,handler: this.onSearchClick
/* 21  */             })
/* 22  */             ,tune: new Ext.Action({
/* 23  */                 iconCls: 'im-tune'
/* 24  */                 ,itemId: 'tune'
/* 25  */                 ,scale: 'medium'
/* 26  */                 ,qtip: L.Tune
/* 27  */                 ,scope: this
/* 28  */                 ,enableToggle: true
/* 29  */                 ,handler: this.onTuneClick
/* 30  */             })
/* 31  */             ,clear: new Ext.Action({
/* 32  */                 iconCls: 'im-refresh'
/* 33  */                 ,itemId: 'clear'
/* 34  */                 ,scale: 'medium'
/* 35  */                 ,qtip: L.Clear
/* 36  */                 ,scope: this
/* 37  */                 ,handler: this.onClearClick
/* 38  */             })
/* 39  */ 
/* 40  */             ,save: new Ext.Action({
/* 41  */                 iconCls: 'is-tick'
/* 42  */                 ,itemId: 'save'
/* 43  */                 ,scale: 'medium'
/* 44  */                 ,text: L.Save
/* 45  */                 ,disabled: true
/* 46  */                 ,scope: this
/* 47  */                 ,handler: this.onSaveClick
/* 48  */             })
/* 49  */         };
/* 50  */ 

/* Panel.js */

/* 51  */         this.moreMenu = new Ext.menu.Menu({items:[
/* 52  */             new Ext.menu.Item(this.actions.save)
/* 53  */         ]});
/* 54  */ 
/* 55  */         Ext.apply(this, {
/* 56  */             tbar: [
/* 57  */                 this.actions.search
/* 58  */                 ,'->'
/* 59  */                 ,this.actions.tune
/* 60  */                 ,this.actions.clear
/* 61  */                 ,{
/* 62  */                     iconCls: 'im-points'
/* 63  */                     ,itemId: 'more'
/* 64  */                     ,scale: 'medium'
/* 65  */                     ,scope: this
/* 66  */                     ,handler: function(b, e) {
/* 67  */                         this.moreMenu.showBy(b.getEl());
/* 68  */                     }
/* 69  */                 }
/* 70  */             ]
/* 71  */         });
/* 72  */ 
/* 73  */         this.on(
/* 74  */             'change'
/* 75  */             ,function() {
/* 76  */                 this.actions.save.enable();
/* 77  */             }
/* 78  */             ,this
/* 79  */         );
/* 80  */         this.on(
/* 81  */             'clear'
/* 82  */             ,function() {
/* 83  */                 this.actions.save.disable();
/* 84  */             }
/* 85  */             ,this
/* 86  */         );
/* 87  */ 
/* 88  */         this.enableBubble(['changeparams']);
/* 89  */ 
/* 90  */         this.callParent(arguments);
/* 91  */     }
/* 92  */ 
/* 93  */     ,onSearchClick: function() {
/* 94  */         var p = Ext.copyTo({}, this.data, 'id,template_id');
/* 95  */         p.data = Ext.apply({} , this.readValues().data);
/* 96  */ 
/* 97  */         var browser = App.activateBrowserTab();
/* 98  */         browser.changeSomeParams({
/* 99  */             query: ''
/* 100 */             ,search: p

/* Panel.js */

/* 101 */             ,userViewChange: false
/* 102 */             ,forceLoad: true
/* 103 */         });
/* 104 */     }
/* 105 */ 
/* 106 */     ,processLoadData: function(r, e) {
/* 107 */         if(isNaN(r.data.id)) {
/* 108 */             r.data.name = L.Search + ' ' + CB.DB.templates.getName(r.data.template_id);
/* 109 */         }
/* 110 */ 
/* 111 */         this.callParent(arguments);
/* 112 */     }
/* 113 */ 
/* 114 */     ,onTuneClick: function (b, e) {
/* 115 */         this.grid.headerCt.child('[dataIndex="cond"]').setHidden(!b.pressed);
/* 116 */     }
/* 117 */ 
/* 118 */     ,onClearClick: function (b, e) {
/* 119 */         var data = {template_id: this.data.template_id};
/* 120 */         this.clear();
/* 121 */         this.loadData(data);
/* 122 */     }
/* 123 */ 
/* 124 */     ,onSaveClick: Ext.emptyFn
/* 125 */ });
/* 126 */ 

;
/* Window.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.search.edit.Window', {
/* 4   */     extend: 'Ext.Window'
/* 5   */     ,alias: 'CBSearchEditWindow'
/* 6   */ 
/* 7   */     ,xtype: 'CBSearchEditWindow'
/* 8   */ 
/* 9   */     ,closable: true
/* 10  */     ,minimizable: true
/* 11  */     ,maximizable: true
/* 12  */     ,layout: 'fit'
/* 13  */     ,border: false
/* 14  */     ,minWidth: 200
/* 15  */     ,minHeight: 200
/* 16  */     ,width: 400
/* 17  */     ,height: 450
/* 18  */     ,iconCls: 'icon-none'
/* 19  */     ,scrollable: true
/* 20  */ 
/* 21  */     ,initComponent: function() {
/* 22  */         this.data = Ext.apply({}, this.config.data);
/* 23  */ 
/* 24  */         Ext.apply(this, {
/* 25  */             cls: 'x-panel-white'
/* 26  */             ,bodyStyle: 'border: 0'
/* 27  */ 
/* 28  */             ,items: [
/* 29  */                 {
/* 30  */                     xtype: 'CBSearchPanel'
/* 31  */                     ,hideTitle: true
/* 32  */                     ,scrollable: true
/* 33  */                     ,listeners: {
/* 34  */                         scope: this
/* 35  */                         ,loaded: this.onLoaded
/* 36  */                     }
/* 37  */                 }
/* 38  */             ]
/* 39  */             ,listeners: {
/* 40  */                 scope: this
/* 41  */                 ,'afterrender': this.onAfterRender
/* 42  */                 // ,'beforeclose': this.onBeforeClose
/* 43  */             }
/* 44  */         });
/* 45  */ 
/* 46  */         this.callParent(arguments);
/* 47  */ 
/* 48  */         this.editForm = this.items.getAt(0);
/* 49  */     }
/* 50  */ 

/* Window.js */

/* 51  */     ,onAfterRender: function() {
/* 52  */         this.editForm.load(this.data);
/* 53  */     }
/* 54  */ 
/* 55  */     ,onLoaded: function(editForm) {
/* 56  */         var title = Ext.valueFrom(editForm.data.name, '');
/* 57  */ 
/* 58  */         this.setTitle(Ext.util.Format.htmlEncode(title));
/* 59  */         this.setIconCls(getItemIcon(editForm.data));
/* 60  */         this.updateLayout();
/* 61  */     }
/* 62  */ 
/* 63  */     ,onSaveObjectEvent: function(objComp, ev) {
/* 64  */         ev.stopPropagation();
/* 65  */         ev.preventDefault();
/* 66  */         if(this.actions.save.isDisabled()) {
/* 67  */             return false;
/* 68  */         }
/* 69  */         this.onSaveClick();
/* 70  */     }
/* 71  */ 
/* 72  */     ,onSaveClick: function() {
/* 73  */         this.editForm.save(
/* 74  */             //callback function
/* 75  */             function(component, form, action){
/* 76  */                 var r = action.result;
/* 77  */                 if(!r || (r.success !== true)) {
/* 78  */                     App.showException(r);
/* 79  */                 } else {
/* 80  */                     this.actions.save.setDisabled(true);
/* 81  */                     this.close();
/* 82  */                 }
/* 83  */             }
/* 84  */             ,this
/* 85  */         );
/* 86  */     }
/* 87  */ 
/* 88  */     ,onIconChange: function(f, newIconCls, oldIconCls, eOpts) {
/* 89  */         this.setIconCls(newIconCls);
/* 90  */     }
/* 91  */ 
/* 92  */     ,onBeforeClose: function(){
/* 93  */         if(this._confirmedClosing || !this.editForm._isDirty){
/* 94  */             return true;
/* 95  */         }
/* 96  */ 
/* 97  */         Ext.Msg.show({
/* 98  */             title:  L.Confirmation
/* 99  */             ,msg:   L.SavingChangedDataMessage
/* 100 */             ,icon:  Ext.Msg.QUESTION

/* Window.js */

/* 101 */             ,buttons: Ext.Msg.YESNOCANCEL
/* 102 */             ,scope: this
/* 103 */             ,fn: function(b, text, opt){
/* 104 */                 switch(b){
/* 105 */                 case 'yes':
/* 106 */                     this._confirmedClosing = true;
/* 107 */                     this.editForm.save(this.close, this);
/* 108 */                     break;
/* 109 */                 case 'no':
/* 110 */                     this._confirmedClosing = true;
/* 111 */                     this.close();
/* 112 */                     break;
/* 113 */                 }
/* 114 */             }
/* 115 */         }).getEl().center(this);
/* 116 */ 
/* 117 */         return false;
/* 118 */     }
/* 119 */ });
/* 120 */ 

;
/* Field.js */

/* 1  */ Ext.ns('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.search.Field', {
/* 4  */ 
/* 5  */     extend: 'Ext.form.field.Text'
/* 6  */ 
/* 7  */     ,xtype: 'CBSearchField'
/* 8  */     ,alias: 'widget.CBSearchField'
/* 9  */ 
/* 10 */     ,emptyText: L.Search
/* 11 */     ,enableKeyEvents: true
/* 12 */     ,style: 'background-color: #fff'
/* 13 */ 
/* 14 */     ,triggers: {
/* 15 */         clear: {
/* 16 */             cls: 'x-form-clear-trigger'
/* 17 */             ,hidden: true
/* 18 */             ,scope: 'this'
/* 19 */             ,handler: 'onTrigger1Click'
/* 20 */         }
/* 21 */         ,search: {
/* 22 */             cls: 'x-form-search-trigger'
/* 23 */             ,scope: 'this'
/* 24 */             ,handler: 'onTrigger2Click'
/* 25 */         }
/* 26 */     }
/* 27 */ 
/* 28 */     ,initComponent : function(){
/* 29 */         Ext.apply(this, {
/* 30 */             listeners: {
/* 31 */                 scope: this
/* 32 */                 ,keyup: function(ed, e){
/* 33 */                     if(Ext.isEmpty(this.getValue())) {
/* 34 */                         this.triggers.clear.hide();
/* 35 */ 
/* 36 */                     } else {
/* 37 */                         this.triggers.clear.show();
/* 38 */                     }
/* 39 */                 }
/* 40 */                 ,specialkey: function(ed, e){
/* 41 */                     switch(e.getKey()){
/* 42 */                         case e.ESC:
/* 43 */                             this.onTrigger1Click(e);
/* 44 */                             break;
/* 45 */                         case e.ENTER:
/* 46 */                             this.onTrigger2Click(e);
/* 47 */                             break;
/* 48 */                     }
/* 49 */                 }
/* 50 */             }

/* Field.js */

/* 51 */         });
/* 52 */ 
/* 53 */         this.callParent(arguments);
/* 54 */     }
/* 55 */ 
/* 56 */     ,afterRender: function() {
/* 57 */         this.callParent(arguments);
/* 58 */     }
/* 59 */ 
/* 60 */     ,setValue: function(value) {
/* 61 */         this.callParent(arguments);
/* 62 */ 
/* 63 */         if (Ext.isEmpty(value)){
/* 64 */             this.triggers.clear.hide();
/* 65 */         } else {
/* 66 */             this.triggers.clear.show();
/* 67 */         }
/* 68 */     }
/* 69 */ 
/* 70 */     ,onTrigger1Click : function(e){
/* 71 */         if(Ext.isEmpty(this.getValue())) {
/* 72 */             return;
/* 73 */         }
/* 74 */ 
/* 75 */         this.setValue('');
/* 76 */         this.triggers.clear.hide();
/* 77 */         this.fireEvent('search', '', e);
/* 78 */     }
/* 79 */ 
/* 80 */     ,onTrigger2Click : function(e){
/* 81 */         this.fireEvent('search', this.getValue(), this, e);
/* 82 */     }
/* 83 */ 
/* 84 */     ,clear: function(){
/* 85 */         this.setValue('');
/* 86 */         this.triggers.clear.hide();
/* 87 */     }
/* 88 */ });
/* 89 */ 

;
/* Base.js */

/* 1  */ Ext.namespace('CB.object.plugin');
/* 2  */ 
/* 3  */ Ext.define('CB.object.plugin.Base', {
/* 4  */     extend: 'Ext.Panel'
/* 5  */     ,border: false
/* 6  */     ,header: false
/* 7  */     ,cls: 'obj-plugin'
/* 8  */ 
/* 9  */     ,initComponent: function(){
/* 10 */         this.prepareToolbar();
/* 11 */ 
/* 12 */         this.enableBubble(['openproperties', 'createobject', 'objectopen']);
/* 13 */ 
/* 14 */         this.callParent(arguments);
/* 15 */     }
/* 16 */ 
/* 17 */     /**
/* 18 *|      * method to be overriten in descendant classes
/* 19 *|      * @param  array r
/* 20 *|      * @param  event e
/* 21 *|      * @return void
/* 22 *|      */
/* 23 */     ,onLoadData: function(r, e) {
/* 24 */         if(Ext.isEmpty(r.data)) {
/* 25 */             return;
/* 26 */         }
/* 27 */     }
/* 28 */ 
/* 29 */     /**
/* 30 *|      * get parent panel loaded data
/* 31 *|      * @return object
/* 32 *|      */
/* 33 */     ,getLoadedObjectProperties: function() {
/* 34 */         var pluginsPanel = this.up('panel');
/* 35 */ 
/* 36 */         return pluginsPanel
/* 37 */             ? pluginsPanel.loadedData
/* 38 */             : {};
/* 39 */     }
/* 40 */ 
/* 41 */     /**
/* 42 *|      * base method for preparing toolbar items
/* 43 *|      * @return void
/* 44 *|      */
/* 45 */     ,prepareToolbar: function() {
/* 46 */         if(Ext.isEmpty(this.title) && Ext.isEmpty(this.actions)) {
/* 47 */             return;
/* 48 */         }
/* 49 */ 
/* 50 */         var tbarItems = [];

/* Base.js */

/* 51 */         if(!Ext.isEmpty(this.title)) {
/* 52 */             tbarItems.push({
/* 53 */                 xtype: 'label'
/* 54 */                 ,cls: 'title'
/* 55 */                 ,text: this.title
/* 56 */             });
/* 57 */         }
/* 58 */ 
/* 59 */         var items = this.getToolbarItems();
/* 60 */ 
/* 61 */         if(!Ext.isEmpty(items)) {
/* 62 */             tbarItems.push('->');
/* 63 */             for (var i = 0; i < items.length; i++) {
/* 64 */                 tbarItems.push(items[i]);
/* 65 */             }
/* 66 */         }
/* 67 */ 
/* 68 */         this.tbar = tbarItems;
/* 69 */     }
/* 70 */ 
/* 71 */     /**
/* 72 *|      * placeholder to get and array of itemIds for components to be displayed in toolbar
/* 73 *|      * @return array
/* 74 *|      */
/* 75 */     ,getToolbarItems: function() {
/* 76 */         return [];
/* 77 */     }
/* 78 */ 
/* 79 */     /**
/* 80 *|      * placeholder to get and array of itemIds for components to be displayed in container toolbar
/* 81 *|      * @return array
/* 82 *|      */
/* 83 */     ,getContainerToolbarItems: function() {
/* 84 */         return {};
/* 85 */     }
/* 86 */ 
/* 87 */     /**
/* 88 *|      * common method used to open another object
/* 89 *|      * @param  object data
/* 90 *|      * @return void
/* 91 *|      */
/* 92 */     ,openObjectProperties: function(data) {
/* 93 */         App.openObjectWindow(data);
/* 94 */     }
/* 95 */ });
/* 96 */ 

;
/* Thumb.js */

/* 1  */ Ext.namespace('CB.object.plugin');
/* 2  */ 
/* 3  */ Ext.define('CB.object.plugin.Thumb', {
/* 4  */     extend: 'CB.object.plugin.Base'
/* 5  */     ,alias: 'CBObjectPluginThumb'
/* 6  */ 
/* 7  */     ,initComponent: function(){
/* 8  */         var tpl = new Ext.XTemplate(
/* 9  */             '<tpl for=".">'
/* 10 */                 ,'<div style="width: 100%; text-align: center; margin: 30px 0">'
/* 11 */                 ,'{[ Ext.isEmpty(values.html) ? "<img class=\\"click preview-thumb " + values.cls + "\\" src=\\"'+Ext.BLANK_IMAGE_URL+'\\" alt=\\"'+L.Preview +'\\" />" : values.html ]}'
/* 12 */                 ,'</div>'
/* 13 */             ,'</tpl>'
/* 14 */         );
/* 15 */         this.dataView = new Ext.DataView({
/* 16 */             tpl: tpl
/* 17 */             ,autoHeight: true
/* 18 */             ,itemSelector: 'div'
/* 19 */             ,data: []
/* 20 */             ,listeners: {
/* 21 */                 scope: this
/* 22 */                 ,itemclick: this.onThumbClick
/* 23 */                 ,viewready: this.onViewReady
/* 24 */             }
/* 25 */         });
/* 26 */ 
/* 27 */         Ext.apply(this, {
/* 28 */             cls: ''
/* 29 */             ,items: this.dataView
/* 30 */         });
/* 31 */ 
/* 32 */         this.callParent(arguments);
/* 33 */ 
/* 34 */         this.enableBubble(['openpreview']);
/* 35 */     }
/* 36 */ 
/* 37 */     ,onLoadData: function(r, e) {
/* 38 */         if(this.rendered) {
/* 39 */             this.dataView.update(r.data);
/* 40 */             this.updateLayout({defer: true});
/* 41 */         } else {
/* 42 */             this.dataView.data = r.data;
/* 43 */         }
/* 44 */     }
/* 45 */ 
/* 46 */     /**
/* 47 *|      * Update component layout when images are loaded
/* 48 *|      * because images could be without a specified size
/* 49 *|      * and when loaded a part of the image could pass the borders
/* 50 *|      *

/* Thumb.js *|

/* 51 *|      * @param  component cmp
/* 52 *|      * @param  object eOpts
/* 53 *|      * @return void
/* 54 *|      */
/* 55 */     ,onViewReady: function(cmp, eOpts) {
/* 56 */         var images = this.getEl().query('img');
/* 57 */         if(Ext.isEmpty(images)) {
/* 58 */             return;
/* 59 */         }
/* 60 */         for (var i = images.length - 1; i >= 0; i--) {
/* 61 */             images[i].onload = Ext.Function.bind(this.updateLayout, this);
/* 62 */             images[i].onclick = Ext.Function.bind(this.onThumbClick, this);
/* 63 */         }
/* 64 */ 
/* 65 */     }
/* 66 */ 
/* 67 */     ,onThumbClick: function(e) {//dv, index, el, e
/* 68 */         var te = Ext.get(e.target);
/* 69 */         if(!te) {
/* 70 */             return;
/* 71 */         }
/* 72 */ 
/* 73 */         if(te.hasCls('click')) { //preview-thumb
/* 74 */             this.fireEvent('openpreview', this.params, e);
/* 75 */         }
/* 76 */     }
/* 77 */ });
/* 78 */ 

;
/* Comments.js */

/* 1   */ Ext.namespace('CB.object.plugin');
/* 2   */ 
/* 3   */ Ext.define('CB.object.plugin.Comments', {
/* 4   */     extend: 'CB.object.plugin.Base'
/* 5   */     ,alias: 'CBObjectPluginComments'
/* 6   */ 
/* 7   */     ,commentFieldConfig: {
/* 8   */         xtype: 'CBFieldComment'
/* 9   */     }
/* 10  */ 
/* 11  */     ,initComponent: function(config) {
/* 12  */         this.actions = {
/* 13  */             edit: new Ext.Action({
/* 14  */                 text: L.Edit
/* 15  */                 ,scope: this
/* 16  */                 ,handler: this.onEditClick
/* 17  */             })
/* 18  */ 
/* 19  */             ,remove: new Ext.Action({
/* 20  */                 text: L.Delete
/* 21  */                 ,iconCls: 'i-trash'
/* 22  */                 ,scope: this
/* 23  */                 ,handler: this.onRemoveClick
/* 24  */             })
/* 25  */         };
/* 26  */ 
/* 27  */         var tpl = new Ext.XTemplate(
/* 28  */             '<table class="block-plugin" style="margin:0">'
/* 29  */             ,'<div class="load-more click">' + L.MoreCommentsHint
/* 30  */             ,'  <span class="fr cG">{[this.totalText]}</span>'
/* 31  */             ,'</div>'
/* 32  */             ,'<tpl for=".">'
/* 33  */             ,'<tr>'
/* 34  */             ,'    <td class="obj">'
/* 35  */             ,'        <img class="i32" src="' + App.config.photoPath + '{cid}.jpg?32={[ CB.DB.usersStore.getPhotoParam(values.cid) ]}" title="{user}">'
/* 36  */             ,'    </td>'
/* 37  */             ,'    <td class="comment">'
/* 38  */             ,'      <div class="comment-text">'
/* 39  */             ,'        <tpl if="cid == App.loginData.id">'
/* 40  */             ,'          <span class="i-bullet-arrow-down comment-actions-button">&nbsp;</span>'
/* 41  */             ,'        </tpl>'
/* 42  */             ,'        <b class="user">{[ values.user.split("\\n")[0]]}</b>'
/* 43  */             ,'        {[ Ext.util.Format.nl2br(values.content)]}'
/* 44  */             ,'      </div>'
/* 45  */             ,'      <div title="' + L.ShowAll + '" class="show-all click"></div>'
/* 46  */             ,'      {[values.files ? "<div>" + values.files + "</div>" : "" ]}'
/* 47  */             ,'      <div class="gr" title="{[ displayDateTime(values.cdate) ]}">{cdate_text}</div>'
/* 48  */             ,'    </td>'
/* 49  */             ,'</tr>'
/* 50  */             ,'</tpl>'

/* Comments.js */

/* 51  */             ,'</table>'
/* 52  */         );
/* 53  */ 
/* 54  */         this.dataView = new Ext.DataView({
/* 55  */             tpl: tpl
/* 56  */             ,store: Ext.create('Ext.data.JsonStore', {
/* 57  */                 fields: [
/* 58  */                    {name: 'id', type: 'int'}
/* 59  */                    ,{name: 'pid', type: 'int'}
/* 60  */                    ,{name: 'template_id', type: 'int'}
/* 61  */                    ,{name: 'cid', type: 'int'}
/* 62  */                    ,'user'
/* 63  */                    ,'cdate'
/* 64  */                    ,'cdate_text'
/* 65  */                    ,'content'
/* 66  */                 ]
/* 67  */                 ,proxy: {
/* 68  */                     type: 'memory'
/* 69  */                     ,reader: {
/* 70  */                         type: 'json'
/* 71  */                     }
/* 72  */                 }
/* 73  */             })
/* 74  */             ,region: 'center'
/* 75  */             ,deferInitialRefresh: true
/* 76  */             ,itemSelector:'tr'
/* 77  */             ,listeners: {
/* 78  */                 scope: this
/* 79  */                 ,itemclick: this.onItemClick
/* 80  */                 ,containerclick: this.onContainerClick
/* 81  */                 ,resize: this.onDataViewResize
/* 82  */             }
/* 83  */         });
/* 84  */ 
/* 85  */         var cfg = Ext.apply(
/* 86  */             this.commentFieldConfig
/* 87  */             ,{
/* 88  */                 params: this.params
/* 89  */ 
/* 90  */                 ,listeners: {
/* 91  */                     scope: this
/* 92  */                     ,addcomment: this.onAddCommentClick
/* 93  */                 }
/* 94  */             }
/* 95  */         );
/* 96  */         this.addCommentLink = Ext.create({
/* 97  */             xtype: 'component'
/* 98  */             ,autoEl: {
/* 99  */                 tag: 'div'
/* 100 */                 ,html: L.AddComment

/* Comments.js */

/* 101 */                 ,cls: 'fwB click icon-padding i-chat-bubble cG'
/* 102 */             }
/* 103 */             ,margin: '3 10 3 10'
/* 104 */             ,border: false
/* 105 */             ,listeners: {
/* 106 */                 scope: this
/* 107 */                 ,afterrender: function(c, eOpts) {
/* 108 */                     c.getEl().on('click', this.onAddCommentLinkClick, this);
/* 109 */                 }
/* 110 */             }
/* 111 */         });
/* 112 */ 
/* 113 */         this.addCommentField = Ext.create(cfg);
/* 114 */ 
/* 115 */         if(this.initialConfig.header !== false) {
/* 116 */             this.title = L.Comments;
/* 117 */         }
/* 118 */ 
/* 119 */         Ext.apply(this, {
/* 120 */             cls: 'obj-plugin block-plugin-comments'
/* 121 */             ,autoHeight: true
/* 122 */             ,anchor: '100%'
/* 123 */             ,border: false
/* 124 */             ,bodyStyle: 'padding-top: 3px'
/* 125 */             ,items: [
/* 126 */                 this.dataView
/* 127 */                 // ,this.addCommentField
/* 128 */             ]
/* 129 */         });
/* 130 */ 
/* 131 */         if (this.initialConfig.showAddLabel) {
/* 132 */             this.items.push(this.addCommentLink);
/* 133 */         } else {
/* 134 */             this.items.push(this.addCommentField);
/* 135 */         }
/* 136 */ 
/* 137 */         this.callParent(arguments);
/* 138 */ 
/* 139 */         this.enableBubble(['getdraftid']);
/* 140 */     }
/* 141 */ 
/* 142 */     ,onLoadData: function(r, e) {
/* 143 */         this.loadedData = r;
/* 144 */ 
/* 145 */         if(r.total > r.data.length) {
/* 146 */             this.addCls('have-more-items');
/* 147 */         } else {
/* 148 */             this.removeCls('have-more-items');
/* 149 */         }
/* 150 */         this.dataView.tpl.totalText = r.data.length + ' ' + L.of + ' ' + r.total;

/* Comments.js */

/* 151 */         this.dataView.store.loadData(r.data);
/* 152 */ 
/* 153 */         this.attachElementsEvents();
/* 154 */ 
/* 155 */         Ext.defer(this.onDataViewResize, 1500, this);
/* 156 */     }
/* 157 */ 
/* 158 */     ,attachElementsEvents: function() {
/* 159 */         var el  = this.getEl();
/* 160 */ 
/* 161 */         if(el) {
/* 162 */             var lm = el.down('div.load-more');
/* 163 */ 
/* 164 */             if(lm && !lm.hasListener('click')) {
/* 165 */                 lm.on('click', this.onLoadMoreClick, this);
/* 166 */             }
/* 167 */         }
/* 168 */     }
/* 169 */ 
/* 170 */     /**
/* 171 *|      * handler for load more comments click
/* 172 *|      * @param  Ext.eventObject e
/* 173 *|      * @return void
/* 174 *|      */
/* 175 */     ,onLoadMoreClick: function(e) {
/* 176 */         var params = {
/* 177 */             id: this.params.id
/* 178 */         };
/* 179 */ 
/* 180 */         if(this.loadedData && !Ext.isEmpty(this.loadedData.data)) {
/* 181 */             params.beforeId = this.loadedData.data[0].id;
/* 182 */         }
/* 183 */ 
/* 184 */         CB_Objects_Plugins_Comments.loadMore(
/* 185 */             params
/* 186 */             ,this.processLoadMore
/* 187 */             ,this
/* 188 */         );
/* 189 */     }
/* 190 */ 
/* 191 */     /**
/* 192 *|      * processing handler for loading more comments from server
/* 193 *|      * @param  result r
/* 194 *|      * @param  Ext.eventObject e
/* 195 *|      * @return void
/* 196 *|      */
/* 197 */     ,processLoadMore: function(r, e) {
/* 198 */         if(!r || (r.success !== true)) {
/* 199 */             App.showException(r);
/* 200 */             return;

/* Comments.js */

/* 201 */         }
/* 202 */ 
/* 203 */         if(Ext.isEmpty(r.data)) {
/* 204 */             return;
/* 205 */         }
/* 206 */ 
/* 207 */         if(Ext.isEmpty(this.loadedData.data)) {
/* 208 */             this.loadedData.data = [];
/* 209 */         }
/* 210 */ 
/* 211 */         this.loadedData.data = r.data.concat(this.loadedData.data);
/* 212 */ 
/* 213 */         var panel = this.up('panel')
/* 214 */             ,scrollable = false
/* 215 */             ,scrollPosition;
/* 216 */ 
/* 217 */         while(!scrollable && panel) {
/* 218 */             scrollable = panel.getScrollable();
/* 219 */             panel = panel.up('panel');
/* 220 */         }
/* 221 */ 
/* 222 */         if(scrollable) {
/* 223 */             scrollPosition = scrollable.getPosition();
/* 224 */         }
/* 225 */ 
/* 226 */         this.onLoadData(this.loadedData, e);
/* 227 */ 
/* 228 */         if(scrollable) {
/* 229 */             scrollable.scrollTo(scrollPosition);
/* 230 */         }
/* 231 */     }
/* 232 */ 
/* 233 */     ,onGetDraftIdCallback: function(draftId) {
/* 234 */         if(isNaN(draftId)) {
/* 235 */             return;
/* 236 */         }
/* 237 */ 
/* 238 */         this.params.id = draftId;
/* 239 */ 
/* 240 */         this.onAddCommentClick();
/* 241 */     }
/* 242 */ 
/* 243 */     ,onAddCommentClick: function(comment, e) {
/* 244 */         if(isNaN(this.params.id)) {
/* 245 */             this.fireEvent(
/* 246 */                 'getdraftid'
/* 247 */                 ,this.onGetDraftIdCallback
/* 248 */                 ,this
/* 249 */             );
/* 250 */             return ;

/* Comments.js */

/* 251 */         }
/* 252 */ 
/* 253 */         var msg = this.addCommentField.getValue().trim();
/* 254 */ 
/* 255 */         if(Ext.isEmpty(msg)) {
/* 256 */             return;
/* 257 */         }
/* 258 */ 
/* 259 */         this.addCommentField.disable();
/* 260 */ 
/* 261 */         var p = {
/* 262 */             id: this.params.id
/* 263 */             ,msg: msg
/* 264 */         };
/* 265 */ 
/* 266 */         if(this.addCommentField.draftCommentId) {
/* 267 */             p.draftId = this.addCommentField.draftCommentId;
/* 268 */         }
/* 269 */ 
/* 270 */         CB_Objects.addComment(
/* 271 */             p
/* 272 */             ,this.onAddCommentProcess
/* 273 */             ,this
/* 274 */         );
/* 275 */     }
/* 276 */ 
/* 277 */     ,onAddCommentProcess: function(r, e) {
/* 278 */         this.addCommentField.enable();
/* 279 */ 
/* 280 */         if(!r || (r.success !== true)) {
/* 281 */             // show error
/* 282 */             Ext.Msg.alert(L.Error, L.AddCommentError);
/* 283 */ 
/* 284 */             return;
/* 285 */         } else {
/* 286 */ 
/* 287 */             if(Ext.isEmpty(this.loadedData.data)) {
/* 288 */                 this.loadedData.data = [];
/* 289 */             }
/* 290 */ 
/* 291 */             this.loadedData.data.push(r.data);
/* 292 */             this.onLoadData(this.loadedData);
/* 293 */ 
/* 294 */             this.addCommentField.reset();
/* 295 */         }
/* 296 */     }
/* 297 */ 
/* 298 */     ,onItemClick: function(dataView, record, item, index, e, eOpts) {
/* 299 */         var el = e.getTarget('.comment-actions-button');
/* 300 */ 

/* Comments.js */

/* 301 */         if(el) {
/* 302 */             e.stopEvent();
/* 303 */             this.showActionsMenu(e);
/* 304 */             return;
/* 305 */         }
/* 306 */ 
/* 307 */         el = e.getTarget('.obj-ref');
/* 308 */ 
/* 309 */         if(el) {
/* 310 */             e.stopEvent();
/* 311 */ 
/* 312 */             var name = el.attributes.title
/* 313 */                 ? el.attributes.title.value
/* 314 */                 : el.innerText;
/* 315 */ 
/* 316 */             this.openObjectProperties({
/* 317 */                 id: el.attributes.itemid.value
/* 318 */                 ,template_id: el.attributes.templateid.value
/* 319 */                 ,name: name
/* 320 */             });
/* 321 */ 
/* 322 */             return;
/* 323 */         }
/* 324 */ 
/* 325 */         el = e.getTarget('.show-all');
/* 326 */         if(el) {
/* 327 */             e.stopEvent();
/* 328 */             this.onShowAllClick(record, item, index);
/* 329 */ 
/* 330 */             return;
/* 331 */         }
/* 332 */ 
/* 333 */     }
/* 334 */ 
/* 335 */     ,onContainerClick: function(view, e, eOpts) {
/* 336 */         var el = e.getTarget('.load-more');
/* 337 */ 
/* 338 */         if(el) {
/* 339 */             el = Ext.get(el);
/* 340 */             if(!el.hasListener('click')) {
/* 341 */                 e.stopEvent();
/* 342 */                 this.onLoadMoreClick(e);
/* 343 */             }
/* 344 */         }
/* 345 */     }
/* 346 */ 
/* 347 */     ,showActionsMenu: function(e) {
/* 348 */         if(!this.actionsMenu) {
/* 349 */             this.actionsMenu = Ext.create(
/* 350 */                 'Ext.menu.Menu'

/* Comments.js */

/* 351 */                 ,{
/* 352 */                     items: [
/* 353 */                         this.actions.edit
/* 354 */                         ,this.actions.remove
/* 355 */                     ]
/* 356 */                 }
/* 357 */             );
/* 358 */         }
/* 359 */ 
/* 360 */         this.actionsMenu.showAt(e.getXY());
/* 361 */         // very strange .. the menu desnt show automaticly (maybe because its beta Ext)
/* 362 */         Ext.defer(this.actionsMenu.show, 10, this.actionsMenu);
/* 363 */     }
/* 364 */ 
/* 365 */     ,onEditClick: function(b, e) {
/* 366 */         var rec = this.dataView.getSelection()[0];
/* 367 */ 
/* 368 */         if(!rec || (rec.get('cid') != App.loginData.id)) {
/* 369 */             return;
/* 370 */         }
/* 371 */ 
/* 372 */         CB_Objects.load({id: rec.get('id')}, this.processEditComment, this);
/* 373 */     }
/* 374 */ 
/* 375 */     ,processEditComment: function(r, e) {
/* 376 */         if(!r || (r.success !== true)) {
/* 377 */             return;
/* 378 */         }
/* 379 */ 
/* 380 */         var value = (r.data.data && r.data.data['_title'])
/* 381 */             ? r.data.data['_title']
/* 382 */             : r.data.name;
/* 383 */ 
/* 384 */         this.editingCommentId = r.data.id;
/* 385 */ 
/* 386 */         var ed = new CB.TextEditWindow({
/* 387 */             data: {
/* 388 */                 value: value
/* 389 */                 ,callback: this.onSubmitEditedComment
/* 390 */                 ,scope: this
/* 391 */             }
/* 392 */         });
/* 393 */ 
/* 394 */         ed.show();
/* 395 */     }
/* 396 */ 
/* 397 */     ,onSubmitEditedComment: function(editor, value) {
/* 398 */         CB_Objects.updateComment(
/* 399 */             {
/* 400 */                 id: this.editingCommentId

/* Comments.js */

/* 401 */                 ,text: value
/* 402 */             }
/* 403 */             ,this.onEditCommentProcess
/* 404 */             ,this
/* 405 */         );
/* 406 */ 
/* 407 */         delete this.editingCommentId;
/* 408 */     }
/* 409 */ 
/* 410 */     ,onEditCommentProcess: function(r, e) {
/* 411 */         if(!r || (r.success !== true)) {
/* 412 */             return;
/* 413 */         }
/* 414 */ 
/* 415 */         //App.fireEvent('objectchanged', r.data, this);
/* 416 */ 
/* 417 */         //replace processed text into loaded data
/* 418 */         var rec = this.dataView.store.findRecord('id', r.data.id, 0, false, false, true);
/* 419 */ 
/* 420 */         if(rec) {
/* 421 */             //remove item from loadedData
/* 422 */             if(Ext.isArray(this.loadedData.data)) {
/* 423 */                 var item = Ext.Array.findBy(
/* 424 */                     this.loadedData.data
/* 425 */                     ,function(i) {
/* 426 */                         return (i.id == rec.data.id);
/* 427 */                     }
/* 428 */                     ,this
/* 429 */                 );
/* 430 */                 if(item) {
/* 431 */                     item.content = r.data.content;
/* 432 */                 }
/* 433 */             }
/* 434 */ 
/* 435 */             //remove record from view store
/* 436 */             rec.set('content', r.data.content);
/* 437 */ 
/* 438 */             this.dataView.refresh();
/* 439 */ 
/* 440 */             Ext.defer(this.onDataViewResize, 1500, this);
/* 441 */         }
/* 442 */     }
/* 443 */ 
/* 444 */     ,onRemoveClick: function(b, e) {
/* 445 */         var rec = this.dataView.getSelection()[0];
/* 446 */ 
/* 447 */         if(!rec || (rec.get('cid') != App.loginData.id)) {
/* 448 */             return;
/* 449 */         }
/* 450 */ 

/* Comments.js */

/* 451 */         CB_Objects.removeComment(
/* 452 */             {id: rec.get('id')}
/* 453 */             ,this.processRemoveComment
/* 454 */             ,this
/* 455 */         );
/* 456 */     }
/* 457 */ 
/* 458 */     ,processRemoveComment: function(r, e) {
/* 459 */         if(!r || (r.success !== true)) {
/* 460 */             return;
/* 461 */         }
/* 462 */ 
/* 463 */         var rec = this.dataView.getSelection()[0];
/* 464 */         if(rec) {
/* 465 */             //remove item from loadedData
/* 466 */             if(Ext.isArray(this.loadedData.data)) {
/* 467 */                 var item = Ext.Array.findBy(
/* 468 */                     this.loadedData.data
/* 469 */                     ,function(i) {
/* 470 */                         return (i.id == rec.data.id);
/* 471 */                     }
/* 472 */                     ,this
/* 473 */                 );
/* 474 */                 if(item) {
/* 475 */                     Ext.Array.remove(this.loadedData.data, item);
/* 476 */                 }
/* 477 */             }
/* 478 */ 
/* 479 */             //remove record from view store
/* 480 */             this.dataView.store.remove(rec);
/* 481 */         }
/* 482 */     }
/* 483 */ 
/* 484 */     /**
/* 485 *|      * expand comment body to see all content when show all button clicked
/* 486 *|      * @param  Ext.data.Model record
/* 487 *|      * @param  HTMLElement    item
/* 488 *|      * @param  int            index
/* 489 *|      * @return void
/* 490 *|      */
/* 491 */     ,onShowAllClick: function(record, item, index) {
/* 492 */         item.children[1].setAttribute('class', 'comment comment-expanded');
/* 493 */         this.updateLayout();
/* 494 */     }
/* 495 */ 
/* 496 */     /**
/* 497 *|      * listener to dataview resize event to add css for long comments
/* 498 *|      * @param  Ext.Component view
/* 499 *|      * @param  int width
/* 500 *|      * @param  int height

/* Comments.js *|

/* 501 *|      * @param  int oldWidth
/* 502 *|      * @param  int oldHeight
/* 503 *|      * @param  Object eOpts
/* 504 *|      * @return void
/* 505 *|      */
/* 506 */     ,onDataViewResize: function(view, width, height, oldWidth, oldHeight, eOpts) {
/* 507 */         var dv = this.dataView
/* 508 */             ,store = dv.store
/* 509 */             ,el = dv.getEl();
/* 510 */ 
/* 511 */         if(Ext.isEmpty(el)) {
/* 512 */             return;
/* 513 */         }
/* 514 */         var divs = dv.getEl().query('td.comment');
/* 515 */ 
/* 516 */         //iterate comments and see if any exceeds default height
/* 517 */         for (var i = 0; i < divs.length; i++) {
/* 518 */             var txtDiv = divs[i].children[0];
/* 519 */             if(txtDiv.clientHeight < txtDiv.scrollHeight) {
/* 520 */                 divs[i].setAttribute('class', 'comment comment-big');
/* 521 */             }
/* 522 */         }
/* 523 */ 
/* 524 */         this.updateLayout();
/* 525 */     }
/* 526 */ 
/* 527 */     ,onAddCommentLinkClick: function() {
/* 528 */         this.remove(this.addCommentLink);
/* 529 */         this.add(this.addCommentField);
/* 530 */         this.addCommentField.reset();
/* 531 */     }
/* 532 */ });
/* 533 */ 

;
/* ContentItems.js */

/* 1   */ Ext.namespace('CB.object.plugin');
/* 2   */ 
/* 3   */ Ext.define('CB.object.plugin.ContentItems', {
/* 4   */     extend: 'CB.object.plugin.Base'
/* 5   */     ,alias: 'CBObjectPluginContentItems'
/* 6   */ 
/* 7   */     ,initComponent: function(){
/* 8   */ 
/* 9   */         this.actions = {
/* 10  */            add: new Ext.Action({
/* 11  */                 iconCls: 'i-plus'
/* 12  */                 // ,text: L.Add
/* 13  */                 ,scope: this
/* 14  */                 ,handler: this.onAddClick
/* 15  */             })
/* 16  */ 
/* 17  */             ,permalink: new Ext.Action({
/* 18  */                 text: L.Permalink
/* 19  */                 ,itemId: 'permalink'
/* 20  */                 ,scope: this
/* 21  */                 ,handler: this.onPermalinkClick
/* 22  */             })
/* 23  */         };
/* 24  */ 
/* 25  */         var tpl = new Ext.XTemplate(
/* 26  */             '<table class="block-plugin">'
/* 27  */             ,'<tpl for=".">'
/* 28  */             ,'<tr>'
/* 29  */             ,'    <td class="obj">'
/* 30  */             ,'        <img class="i16u {iconCls}" src="'+ Ext.BLANK_IMAGE_URL +'">'
/* 31  */             ,'    </td>'
/* 32  */             ,'    <td>'
/* 33  */             ,'        <span class="click">{name}</span><br />'
/* 34  */             ,'        <span class="gr" title="{[ displayDateTime(values.cdate) ]}">{user}, {ago_text}</span>'
/* 35  */             ,'    </td>'
/* 36  */             ,'    <td class="elips">'
/* 37  */             ,'        <span class="click menu"></span>'
/* 38  */             ,'    </td>'
/* 39  */             ,'</tr>'
/* 40  */             ,'</tpl>'
/* 41  */             ,'</table>'
/* 42  */         );
/* 43  */ 
/* 44  */         this.store = new Ext.data.JsonStore({
/* 45  */             autoDestroy: true
/* 46  */             ,model: 'ContentItem'
/* 47  */             ,proxy: new  Ext.data.MemoryProxy()
/* 48  */         });
/* 49  */ 
/* 50  */         this.dataView = new Ext.DataView({

/* ContentItems.js */

/* 51  */             tpl: tpl
/* 52  */             ,store: this.store
/* 53  */             ,autoHeight: true
/* 54  */             ,itemSelector:'tr'
/* 55  */             ,listeners: {
/* 56  */                 scope: this
/* 57  */                 ,itemclick: this.onItemClick
/* 58  */             }
/* 59  */         });
/* 60  */ 
/* 61  */         Ext.apply(this, {
/* 62  */             title: L.Contents
/* 63  */             ,items: this.dataView
/* 64  */             ,listeners: {
/* 65  */                 scope: this
/* 66  */                 ,beforedestroy: this.onBeforeDestroy
/* 67  */             }
/* 68  */         });
/* 69  */ 
/* 70  */         this.callParent(arguments);
/* 71  */ 
/* 72  */         App.mainViewPort.on('objectsdeleted', this.onObjectsDeleted, this);
/* 73  */     }
/* 74  */ 
/* 75  */     ,onBeforeDestroy: function(c) {
/* 76  */         App.mainViewPort.un('objectsdeleted', this.onObjectsDeleted, this);
/* 77  */     }
/* 78  */ 
/* 79  */     ,onObjectsDeleted: function(ids) {
/* 80  */         this.store.deleteIds(ids);
/* 81  */     }
/* 82  */ 
/* 83  */     ,onLoadData: function(r, e) {
/* 84  */         if(Ext.isEmpty(r.data)) {
/* 85  */             return;
/* 86  */         }
/* 87  */         for (var i = 0; i < r.data.length; i++) {
/* 88  */             r.data[i].iconCls = getItemIcon(r.data[i]);
/* 89  */         }
/* 90  */         this.store.loadData(r.data);
/* 91  */     }
/* 92  */ 
/* 93  */     ,onItemClick: function (cmp, record, item, index, e, eOpts) {//dv, index, el, e
/* 94  */         var te = Ext.get(e.getTarget());
/* 95  */         if(!te) {
/* 96  */             return;
/* 97  */         }
/* 98  */ 
/* 99  */         if(te.hasCls('menu')) {
/* 100 */             this.clickedItemData = this.store.getAt(index).data;

/* ContentItems.js */

/* 101 */             this.showActionsMenu(e.getXY());
/* 102 */         } else if(te.hasCls('click')) {
/* 103 */             this.openObjectProperties(this.store.getAt(index).data);
/* 104 */         }
/* 105 */     }
/* 106 */ 
/* 107 */     ,showActionsMenu: function(coord){
/* 108 */         if(Ext.isEmpty(this.puMenu)) {
/* 109 */             this.puMenu = new Ext.menu.Menu({
/* 110 */                 items: [
/* 111 */                    {
/* 112 */                         text: L.Open
/* 113 */                         ,scope: this
/* 114 */                         ,handler: this.onOpenClick
/* 115 */                     },'-',{
/* 116 */                         text: L.Delete
/* 117 */                         ,iconCls: 'i-trash'
/* 118 */                         ,scope: this
/* 119 */                         ,handler: this.onDeleteItemClick
/* 120 */                     }
/* 121 */                     ,this.actions.permalink
/* 122 */                 ]
/* 123 */             });
/* 124 */         }
/* 125 */ 
/* 126 */         this.puMenu.showAt(coord);
/* 127 */     }
/* 128 */ 
/* 129 */     ,onDeleteItemClick: function(b, e) {
/* 130 */         App.mainViewPort.onDeleteObject(this.clickedItemData);
/* 131 */     }
/* 132 */ 
/* 133 */     ,onOpenClick: function(b, e) {
/* 134 */         this.openObjectProperties(this.clickedItemData);
/* 135 */     }
/* 136 */ 
/* 137 */     ,getToolbarItems: function() {
/* 138 */         return [this.actions.add];
/* 139 */     }
/* 140 */ 
/* 141 */     ,onAddClick: function(b, e) {
/* 142 */         if(this.pmenu) {
/* 143 */             this.pmenu.destroy();
/* 144 */         }
/* 145 */         this.pmenu = new Ext.menu.Menu({items: []});
/* 146 */ 
/* 147 */         updateMenu(
/* 148 */             {menu: this.pmenu}
/* 149 */             ,this.createMenu
/* 150 */             ,this.onCreateObjectClick

/* ContentItems.js */

/* 151 */             ,this
/* 152 */         );
/* 153 */         this.pmenu.showBy(b.getEl());
/* 154 */     }
/* 155 */ 
/* 156 */     ,onCreateObjectClick: function(b, e) {
/* 157 */         var d = b.config.data;
/* 158 */         d.pid = this.params.id;
/* 159 */         d.path = this.params.path;
/* 160 */         this.fireEvent('createobject', d, e);
/* 161 */     }
/* 162 */ 
/* 163 */     ,onPermalinkClick: function(b, e) {
/* 164 */         window.prompt(
/* 165 */             'Copy to clipboard: Ctrl+C, Enter'
/* 166 */             , window.location.origin + '/' + App.config.coreName + '/view/' + this.clickedItemData.id + '/'
/* 167 */         );
/* 168 */     }
/* 169 */ });
/* 170 */ 

;
/* Files.js */

/* 1   */ Ext.namespace('CB.object.plugin');
/* 2   */ 
/* 3   */ Ext.define('CB.object.plugin.Files', {
/* 4   */     extend: 'CB.object.plugin.Base'
/* 5   */     ,alias: 'CBObjectPluginFiles'
/* 6   */ 
/* 7   */     ,xtype: 'CBObjectPluginFiles'
/* 8   */     ,cls: 'obj-plugin'
/* 9   */ 
/* 10  */     // ,bodyStyle: 'min-height: 50px; margin-bottom:0; padding-bottom:30px'
/* 11  */     // ,bodyStyle: 'margin-bottom:0;'
/* 12  */ 
/* 13  */     ,initComponent: function(){
/* 14  */ 
/* 15  */         this.actions = {
/* 16  */            add: new Ext.Action({
/* 17  */                 // ,text: L.Add
/* 18  */                 iconCls: 'i-plus'
/* 19  */                 ,scope: this
/* 20  */                 ,handler: this.onAddClick
/* 21  */             })
/* 22  */ 
/* 23  */             ,rename: new Ext.Action({
/* 24  */                 itemId: 'rename'
/* 25  */                 ,text: L.Rename
/* 26  */                 ,scope: this
/* 27  */                 ,handler: this.onRenameClick
/* 28  */             })
/* 29  */ 
/* 30  */             ,webdavlink: new Ext.Action({
/* 31  */                 text: L.WebDAVLink
/* 32  */                 ,itemId: 'webdavlink'
/* 33  */                 ,scope: this
/* 34  */                 ,handler: this.onWebDAVLinkClick
/* 35  */             })
/* 36  */ 
/* 37  */             ,permalink: new Ext.Action({
/* 38  */                 text: L.Permalink
/* 39  */                 ,itemId: 'permalink'
/* 40  */                 ,scope: this
/* 41  */                 ,handler: this.onPermalinkClick
/* 42  */             })
/* 43  */         };
/* 44  */ 
/* 45  */         var tpl = new Ext.XTemplate(
/* 46  */             '<table class="block-plugin">'
/* 47  */             ,'<tpl for=".">'
/* 48  */             ,'<tr>'
/* 49  */             ,'    <td class="obj">'
/* 50  */             ,'        <div><img class="file- {iconCls}" src="'+ Ext.BLANK_IMAGE_URL +'"></div>'

/* Files.js */

/* 51  */             ,'    </td>'
/* 52  */             ,'    <td>'
/* 53  */             ,'        <span class="click">{name}</span><br />'
/* 54  */             ,'        <span class="gr" title="{[ displayDateTime(values.cdate) ]}">{[ App.customRenderers.filesize(values.size) ]}, {ago_text}</span>'
/* 55  */             ,'    </td>'
/* 56  */             ,'    <td class="elips">'
/* 57  */             ,'        <span class="click menu"></span>'
/* 58  */             ,'    </td>'
/* 59  */             ,'</tr>'
/* 60  */             ,'</tpl>'
/* 61  */             ,'</table>'
/* 62  */         );
/* 63  */ 
/* 64  */         this.store = new Ext.data.JsonStore({
/* 65  */             autoDestroy: true
/* 66  */             ,model: 'ContentItem'
/* 67  */             ,proxy: new  Ext.data.MemoryProxy()
/* 68  */             ,data: []
/* 69  */         });
/* 70  */ 
/* 71  */         this.dataView = new Ext.DataView({
/* 72  */             tpl: tpl
/* 73  */             ,store: this.store
/* 74  */             ,autoHeight: true
/* 75  */             ,itemSelector:'tr'
/* 76  */             ,listeners: {
/* 77  */                 scope: this
/* 78  */                 ,itemclick: this.onItemClick
/* 79  */             }
/* 80  */         });
/* 81  */ 
/* 82  */         this.dropPanel = new Ext.Panel({
/* 83  */             border: false
/* 84  */             ,padding: 0
/* 85  */             ,hidden: true
/* 86  */             ,html: ''
/* 87  */ 
/* 88  */             ,listeners: {
/* 89  */                 scope: this
/* 90  */ 
/* 91  */                 ,afterrender: function(p) {
/* 92  */                     var el = this.getEl();
/* 93  */                     el.on('click', this.onDropPanelClick, this);
/* 94  */                     var ddp = new CB.DD.Panel(
/* 95  */                         el
/* 96  */                         ,{
/* 97  */                             enableDrop: true
/* 98  */                             ,defaultAction: 'shortcut'
/* 99  */                         }
/* 100 */                     );

/* Files.js */

/* 101 */ 
/* 102 */                     ddp.onNodeDrop = Ext.Function.createInterceptor(
/* 103 */                         ddp.onNodeDrop,
/* 104 */                         function() {
/* 105 */                             Ext.apply(this.params, this.getLoadedObjectProperties());
/* 106 */ 
/* 107 */                             this.hideDropPanel();
/* 108 */                         }
/* 109 */                         ,this
/* 110 */                     );
/* 111 */ 
/* 112 */                     ddp.init(this);
/* 113 */                 }
/* 114 */             }
/* 115 */         });
/* 116 */ 
/* 117 */         Ext.apply(this, {
/* 118 */             title: L.Files
/* 119 */             ,items: [
/* 120 */                 this.dataView
/* 121 */                 ,this.dropPanel
/* 122 */             ]
/* 123 */             ,listeners: {
/* 124 */                 scope: this
/* 125 */                 ,beforedestroy: this.onBeforeDestroy
/* 126 */             }
/* 127 */         });
/* 128 */ 
/* 129 */         this.callParent(arguments);
/* 130 */ 
/* 131 */         this.enableBubble(['fileupload', 'lockpanel']);
/* 132 */ 
/* 133 */         this.dropZoneConfig = {
/* 134 */             pidPropety: 'id'
/* 135 */             ,dropZoneEl: this.dropPanel.getEl()
/* 136 */         };
/* 137 */         this.filesDropPlugin = new CB.plugin.dd.FilesDropZone({
/* 138 */             pidPropety: 'id'
/* 139 */         });
/* 140 */ 
/* 141 */         this.filesDropPlugin.init(this);
/* 142 */ 
/* 143 */         App.mainViewPort.on('objectsdeleted', this.onObjectsDeleted, this);
/* 144 */     }
/* 145 */ 
/* 146 */     ,onBeforeDestroy: function(c) {
/* 147 */         App.mainViewPort.un('objectsdeleted', this.onObjectsDeleted, this);
/* 148 */     }
/* 149 */ 
/* 150 */     ,onObjectsDeleted: function(ids) {

/* Files.js */

/* 151 */         this.store.deleteIds(ids);
/* 152 */     }
/* 153 */ 
/* 154 */     ,onLoadData: function(r, e) {
/* 155 */         var dropZoneHtml = L.DropZoneMsg;
/* 156 */ 
/* 157 */         //show upload zone by default when in window
/* 158 */         if(this.params && (this.params.from === 'window')) {
/* 159 */             this.dropPanel.show();
/* 160 */             this.actions.add.setHidden(true);
/* 161 */         } else {
/* 162 */             dropZoneHtml += ' <span class="i-cross click close" style="float: right; display: inline-block; height: 16px; width: 16px;"></span>';
/* 163 */         }
/* 164 */ 
/* 165 */         dropZoneHtml = '<div class="files-drop">'+ dropZoneHtml +'</div>';
/* 166 */ 
/* 167 */         if(this.dropPanel.rendered) {
/* 168 */             this.dropPanel.update(dropZoneHtml);
/* 169 */         } else {
/* 170 */             this.dropPanel.html = dropZoneHtml;
/* 171 */         }
/* 172 */ 
/* 173 */         if(!Ext.isEmpty(r.data)) {
/* 174 */             for (var i = 0; i < r.data.length; i++) {
/* 175 */                 r.data[i].iconCls = getItemIcon(r.data[i]);
/* 176 */             }
/* 177 */             this.store.loadData(r.data);
/* 178 */         }
/* 179 */     }
/* 180 */ 
/* 181 */     ,onItemClick: function (cmp, record, item, index, e, eOpts) {//dv, index, el, e
/* 182 */         var te = Ext.get(e.getTarget());
/* 183 */ 
/* 184 */         if(!te) {
/* 185 */             return;
/* 186 */         }
/* 187 */ 
/* 188 */         if(te.hasCls('menu')) {
/* 189 */             this.clickedItemData = this.store.getAt(index).data;
/* 190 */             this.showActionsMenu(e.getXY());
/* 191 */         } else if(te.hasCls('click')) {
/* 192 */             this.openObjectProperties(this.store.getAt(index).data);
/* 193 */         }
/* 194 */     }
/* 195 */ 
/* 196 */     ,showActionsMenu: function(coord){
/* 197 */         if(Ext.isEmpty(this.puMenu)) {
/* 198 */             this.puMenu = new Ext.menu.Menu({
/* 199 */                 items: [
/* 200 */ 

/* Files.js */

/* 201 */                     {
/* 202 */                         text: L.Open
/* 203 */                         ,scope: this
/* 204 */                         ,handler: this.onOpenClick
/* 205 */                     },{
/* 206 */                         text: L.Download
/* 207 */                         ,scope: this
/* 208 */                         ,handler: this.onDownloadClick
/* 209 */                     },'-',{
/* 210 */                         text: L.Cut
/* 211 */                         ,scope: this
/* 212 */                         ,handler: this.onCutItemClick
/* 213 */                     },{
/* 214 */                         text: L.Copy
/* 215 */                         ,scope: this
/* 216 */                         ,handler: this.onCopyItemClick
/* 217 */                     },{
/* 218 */                         text: L.Delete
/* 219 */                         ,iconCls: 'i-trash'
/* 220 */                         ,scope: this
/* 221 */                         ,handler: this.onDeleteItemClick
/* 222 */                     }
/* 223 */                     ,this.actions.rename
/* 224 */                     ,this.actions.permalink
/* 225 */                     ,this.actions.webdavlink
/* 226 */                 ]
/* 227 */             });
/* 228 */         }
/* 229 */ 
/* 230 */         this.actions.webdavlink.setHidden(detectFileEditor(this.clickedItemData.name) !== 'webdav');
/* 231 */ 
/* 232 */         this.puMenu.showAt(coord);
/* 233 */ 
/* 234 */         Ext.defer(this.puMenu.show, 10, this.puMenu);
/* 235 */     }
/* 236 */ 
/* 237 */     ,onDownloadClick: function(b, e) {
/* 238 */         App.downloadFile(this.clickedItemData.id);
/* 239 */     }
/* 240 */ 
/* 241 */     ,onCutItemClick: function(b, e) {
/* 242 */         App.clipboard.set([this.clickedItemData], 'move');
/* 243 */     }
/* 244 */ 
/* 245 */     ,onCopyItemClick: function(b, e) {
/* 246 */         App.clipboard.set([this.clickedItemData], 'copy');
/* 247 */     }
/* 248 */ 
/* 249 */     ,onDeleteItemClick: function(b, e) {
/* 250 */         App.mainViewPort.onDeleteObject(this.clickedItemData);

/* Files.js */

/* 251 */     }
/* 252 */ 
/* 253 */     ,onOpenClick: function(b, e) {
/* 254 */         this.openObjectProperties(this.clickedItemData);
/* 255 */     }
/* 256 */ 
/* 257 */     ,getToolbarItems: function() {
/* 258 */         return [this.actions.add];
/* 259 */     }
/* 260 */ 
/* 261 */     ,getContainerToolbarItems: function() {
/* 262 */         var rez = {
/* 263 */             tbar: {}
/* 264 */             ,menu: {}
/* 265 */         };
/* 266 */ 
/* 267 */         // if(this.params) {
/* 268 */         //     if(!this.isVisible()) {
/* 269 */         //         rez.menu['attachfile'] = {};
/* 270 */         //     }
/* 271 */         // }
/* 272 */         return rez;
/* 273 */     }
/* 274 */ 
/* 275 */     ,onAddClick: function(b, e) {
/* 276 */         this.lockPanel(true);
/* 277 */         this.dropPanel.show();
/* 278 */     }
/* 279 */ 
/* 280 */     ,onDropPanelClick: function(ev, el) {
/* 281 */         var te = ev.getTarget();
/* 282 */         if(Ext.isEmpty(te)) {
/* 283 */             return;
/* 284 */         }
/* 285 */         te = Ext.get(te);
/* 286 */         if(te.hasCls('close')) {
/* 287 */             this.hideDropPanel();
/* 288 */         }
/* 289 */ 
/* 290 */         if(te.hasCls('upload')) {
/* 291 */             this.fireEvent(
/* 292 */                 'fileupload'
/* 293 */                 ,{pid: Ext.valueFrom(this.params.id, this.params.path)}
/* 294 */                 ,ev
/* 295 */             );
/* 296 */ 
/* 297 */             this.hideDropPanel();
/* 298 */         }
/* 299 */     }
/* 300 */ 

/* Files.js */

/* 301 */     /**
/* 302 *|      * conditionally hides drop panel if not inside object window
/* 303 *|      * @return void
/* 304 *|      */
/* 305 */     ,hideDropPanel: function() {
/* 306 */         if(Ext.isEmpty(this.params) || (this.params.from !== 'window')) {
/* 307 */             this.dropPanel.hide();
/* 308 */             this.lockPanel(false);
/* 309 */         }
/* 310 */     }
/* 311 */ 
/* 312 */     ,lockPanel: function (status) {
/* 313 */         this.fireEvent('lockpanel', status, this);
/* 314 */     }
/* 315 */ 
/* 316 */     ,getProperty: function(propertyName) {
/* 317 */         return this.params[propertyName];
/* 318 */     }
/* 319 */ 
/* 320 */     ,onRenameClick: function(b, e) {
/* 321 */         var d = this.clickedItemData
/* 322 */             ,data = {
/* 323 */                 path: d.id
/* 324 */                 ,name: Ext.util.Format.htmlDecode(d.name)
/* 325 */             };
/* 326 */ 
/* 327 */         App.promptRename(data);
/* 328 */     }
/* 329 */ 
/* 330 */     ,onWebDAVLinkClick: function(b, e) {
/* 331 */         App.openWebdavDocument(this.clickedItemData, false);
/* 332 */     }
/* 333 */ 
/* 334 */     ,onPermalinkClick: function(b, e) {
/* 335 */         window.prompt(
/* 336 */             'Copy to clipboard: Ctrl+C, Enter'
/* 337 */             , window.location.origin + '/' + App.config.coreName + '/view/' + this.clickedItemData.id + '/'
/* 338 */         );
/* 339 */     }
/* 340 */ });
/* 341 */ 

;
/* ObjectProperties.js */

/* 1   */ Ext.namespace('CB.object.plugin');
/* 2   */ 
/* 3   */ Ext.define('CB.object.plugin.ObjectProperties', {
/* 4   */     extend: 'CB.object.plugin.Base'
/* 5   */     ,alias: 'CBObjectPluginObjectProperties'
/* 6   */ 
/* 7   */     ,initComponent: function(){
/* 8   */         Ext.apply(this, {
/* 9   */             html: ''
/* 10  */             ,cls: ''
/* 11  */             ,bodyStyle: 'margin-bottom: 30px'
/* 12  */             ,listeners: {
/* 13  */                 scope: this
/* 14  */                 ,afterrender: this.attachEvents
/* 15  */             }
/* 16  */         });
/* 17  */ 
/* 18  */         this.callParent(arguments);
/* 19  */     }
/* 20  */ 
/* 21  */     ,onLoadData: function(r, e) {
/* 22  */         if(Ext.isEmpty(r.data)) {
/* 23  */             return;
/* 24  */         }
/* 25  */ 
/* 26  */         Ext.apply(this.params, r.data);
/* 27  */ 
/* 28  */         var html = Ext.isArray(r.data.preview)
/* 29  */             ? r.data.preview.join(' ')
/* 30  */             : r.data.preview[0];
/* 31  */ 
/* 32  */         if(this.rendered) {
/* 33  */             this.update(html);
/* 34  */         } else {
/* 35  */             this.html = html;
/* 36  */         }
/* 37  */     }
/* 38  */ 
/* 39  */     ,attachEvents: function(){
/* 40  */         var a = this.getEl().query('a.click');
/* 41  */         Ext.each(
/* 42  */             a
/* 43  */             ,function(t){
/* 44  */                 Ext.get(t).addListener(
/* 45  */                     'click'
/* 46  */                     ,function(ev, el){
/* 47  */ 
/* 48  */                         el = Ext.get(el);
/* 49  */                         if(el) {
/* 50  */                             if(el.hasCls('link-type-grid')) {

/* ObjectProperties.js */

/* 51  */                                 App.openPath(el.getAttribute('path'));
/* 52  */                             }
/* 53  */                         }
/* 54  */                     }
/* 55  */                     ,this
/* 56  */                 );
/* 57  */             }
/* 58  */             ,this
/* 59  */         );
/* 60  */ 
/* 61  */ 
/* 62  */         a = this.getEl().query('a.obj-ref');
/* 63  */         Ext.each(
/* 64  */             a
/* 65  */             ,function(t){
/* 66  */                 Ext.get(t).addListener(
/* 67  */                     'click'
/* 68  */                     ,function(ev, el){
/* 69  */                         this.openObjectProperties({
/* 70  */                             id: el.attributes.itemid.value
/* 71  */                             ,template_id: el.attributes.templateid.value
/* 72  */                         });
/* 73  */                     }
/* 74  */                     ,this
/* 75  */                 );
/* 76  */             }
/* 77  */             ,this
/* 78  */         );
/* 79  */ 
/* 80  */         a = this.getEl().query('a.path');
/* 81  */         Ext.each(
/* 82  */             a
/* 83  */             ,function(t){
/* 84  */                 Ext.get(t).addListener(
/* 85  */                     'click'
/* 86  */                     ,function(ev, el){
/* 87  */                         App.locateObject(
/* 88  */                             this.params.id
/* 89  */                             ,el.attributes.getNamedItem('path').value
/* 90  */                         );
/* 91  */                     }
/* 92  */                     ,this
/* 93  */                 );
/* 94  */             }
/* 95  */             ,this
/* 96  */         );
/* 97  */ 
/* 98  */         a = this.getEl().query('a.item-action');
/* 99  */         Ext.each(
/* 100 */             a

/* ObjectProperties.js */

/* 101 */             ,function(t){
/* 102 */                 Ext.get(t).addListener(
/* 103 */                     'click'
/* 104 */                     ,this.onItemActionClick
/* 105 */                     ,this
/* 106 */                 );
/* 107 */             }
/* 108 */             ,this
/* 109 */         );
/* 110 */     }
/* 111 */ 
/* 112 */     ,onItemActionClick: function(ev, el){
/* 113 */         var action = 'onAction'
/* 114 */             + Ext.String.capitalize(el.attributes.getNamedItem('action').value)
/* 115 */             + 'Click';
/* 116 */ 
/* 117 */         if(this[action]) {
/* 118 */             this[action](ev, el);
/* 119 */         }
/* 120 */     }
/* 121 */ 
/* 122 */     ,onActionCloseClick: function(ev, el) {
/* 123 */         this.getEl().mask(L.CompletingTask + ' ...', 'x-mask-loading');
/* 124 */         CB_Tasks.close(this.params.id, this.onItemChange, this);
/* 125 */     }
/* 126 */ 
/* 127 */     ,onActionReopenClick: function(ev, el) {
/* 128 */         this.getEl().mask(L.ReopeningTask + ' ...', 'x-mask-loading');
/* 129 */         CB_Tasks.reopen(this.params.id, this.onItemChange, this);
/* 130 */     }
/* 131 */ 
/* 132 */     ,onActionCompleteClick: function(ev, el) {
/* 133 */         CB_Tasks.complete(
/* 134 */             {
/* 135 */                 id: this.params.id
/* 136 */                 ,message: ''
/* 137 */             }
/* 138 */             ,this.onItemChange
/* 139 */             ,this
/* 140 */         );
/* 141 */     }
/* 142 */ 
/* 143 */     ,onActionMarkcompleteClick: function(ev, el) {
/* 144 */         this.forUserId = el.attributes.getNamedItem('uid').value;
/* 145 */         CB_Tasks.setUserStatus(
/* 146 */             {
/* 147 */                 id: this.params.id
/* 148 */                 ,user_id: this.forUserId
/* 149 */                 ,status: 1
/* 150 */                 ,message: ''

/* ObjectProperties.js */

/* 151 */             }
/* 152 */             ,this.onItemChange
/* 153 */             ,this
/* 154 */         );
/* 155 */     }
/* 156 */ 
/* 157 */     ,onActionMarkincompleteClick: function(ev, el) {
/* 158 */         this.forUserId = el.attributes.getNamedItem('uid').value;
/* 159 */         CB_Tasks.setUserStatus(
/* 160 */             {
/* 161 */                 id: this.params.id
/* 162 */                 ,user_id: this.forUserId
/* 163 */                 ,status: 0
/* 164 */                 ,message: ''
/* 165 */             }
/* 166 */             ,this.onItemChange
/* 167 */             ,this
/* 168 */         );
/* 169 */     }
/* 170 */     ,onActionUpdateSolrDataClick: function(ev, el) {
/* 171 */         CB_Templates.updateSolrData(
/* 172 */             this.params.id
/* 173 */             ,this.onItemChange
/* 174 */             ,this
/* 175 */         );
/* 176 */     }
/* 177 */ 
/* 178 */     ,onItemChange: function(r, e){
/* 179 */         this.getEl().unmask();
/* 180 */         App.fireEvent('objectchanged', this.params, this);
/* 181 */     }
/* 182 */ 
/* 183 */     ,getContainerToolbarItems: function() {
/* 184 */         var rez = {
/* 185 */             tbar: {}
/* 186 */             ,menu: {}
/* 187 */         };
/* 188 */ 
/* 189 */         return rez;
/* 190 */     }
/* 191 */ 
/* 192 */ });
/* 193 */ 

;
/* SystemProperties.js */

/* 1  */ Ext.namespace('CB.object.plugin');
/* 2  */ 
/* 3  */ Ext.define('CB.object.plugin.SystemProperties', {
/* 4  */     extend: 'CB.object.plugin.Base'
/* 5  */     ,alias: 'CBObjectPluginSystemProperties'
/* 6  */ 
/* 7  */     ,initComponent: function(){
/* 8  */ 
/* 9  */         var tpl = new Ext.XTemplate(
/* 10 */             '<tpl for=".">'
/* 11 */             ,'<table class="item-props">'
/* 12 */             ,'<tbody><tr><td class="k">Id</td><td>{id}</td></tr>'
/* 13 */             ,'<tr><td class="k">'+L.Path+'</td><td><a class="click path">{path}</a></td></tr>'
/* 14 */             ,'{[ Ext.isEmpty(values.size) ?\'\' : \'<tr><td class="k">\' + L.Size + \'</td><td>\' + App.customRenderers.filesize(values.size) + \'</td></tr>\']}'
/* 15 */             ,'<tr><td class="k">'+L.Template+'</td><td>{template_name} <span class="dttm">(id: {template_id})</span></td></tr>'
/* 16 */             ,'<tr><td class="k">'+L.Created+'</td><td>{cid_text}<br><span class="dttm" title="{[ displayDateTime(values.cdate) ]}">{cdate_ago_text}</span></td></tr>'
/* 17 */             ,'<tr><td class="k">'+L.Modified+'</td><td>{uid_text}<br><span class="dttm" title="{[ displayDateTime(values.udate) ]}">{udate_ago_text}</span></td></tr>'
/* 18 */             ,'{[ Ext.isEmpty(values.did_text) ?\'\' : \'<tr><td class="k">\' + L.Deleted + \'</td><td>\' + values.did_text + \'<br><span class="dttm" title="\' + displayDateTime(values.ddate) + \'">\' + values.ddate_text + \'</span></td></tr>\']}'
/* 19 */             ,'</tbody></table>'
/* 20 */             ,'</tpl>'
/* 21 */         );
/* 22 */ 
/* 23 */         this.dataView = new Ext.DataView({
/* 24 */             tpl: tpl
/* 25 */             ,data: []
/* 26 */             ,autoHeight: true
/* 27 */             ,itemSelector:'tr'
/* 28 */             ,listeners: {
/* 29 */                 scope: this
/* 30 */                 ,afterrender: this.attachEvents
/* 31 */             }
/* 32 */         });
/* 33 */ 
/* 34 */         Ext.apply(this, {
/* 35 */             title: L.Properties
/* 36 */             ,items: this.dataView
/* 37 */         });
/* 38 */ 
/* 39 */         this.callParent(arguments);
/* 40 */ 
/* 41 */     }
/* 42 */ 
/* 43 */     ,onLoadData: function(r, e) {
/* 44 */         if(Ext.isEmpty(r.data)) {
/* 45 */             return;
/* 46 */         }
/* 47 */ 
/* 48 */         this.data = r.data;
/* 49 */         if(this.rendered) {
/* 50 */             this.dataView.apply(r.data);

/* SystemProperties.js */

/* 51 */         } else {
/* 52 */             this.dataView.data = r.data;
/* 53 */         }
/* 54 */     }
/* 55 */ 
/* 56 */     ,attachEvents: function(){
/* 57 */         var a = this.getEl().query('a.path');
/* 58 */         Ext.each(
/* 59 */             a
/* 60 */             ,function(t){
/* 61 */                 Ext.get(t).addListener(
/* 62 */                     'click'
/* 63 */                     ,this.onPathClick
/* 64 */                     ,this
/* 65 */                 );
/* 66 */             }
/* 67 */             ,this
/* 68 */         );
/* 69 */     }
/* 70 */ 
/* 71 */     /**
/* 72 *|      * handler to open path when clicked
/* 73 *|      * @param  event ev
/* 74 *|      * @param  element el
/* 75 *|      * @return void
/* 76 *|      */
/* 77 */     ,onPathClick: function(ev, el){
/* 78 */         App.openPath(this.params.path);
/* 79 */     }
/* 80 */ 
/* 81 */     ,getContainerToolbarItems: function() {
/* 82 */         var rez = {
/* 83 */             tbar: {}
/* 84 */             ,menu: {}
/* 85 */         };
/* 86 */ 
/* 87 */         if(this.params) {
/* 88 */ 
/* 89 */             if(CB.DB.templates.getType(this.params.template_id) === 'file') {
/* 90 */                 rez.menu['metadata']  = {order: 17};
/* 91 */                 rez.menu['webdavlink']  = {order: 18};
/* 92 */                 rez.menu['permalink']  = {order: 19};
/* 93 */             }
/* 94 */         }
/* 95 */ 
/* 96 */         return rez;
/* 97 */     }
/* 98 */ });
/* 99 */ 

;
/* Meta.js */

/* 1  */ Ext.namespace('CB.object.plugin');
/* 2  */ 
/* 3  */ Ext.define('CB.object.plugin.Meta', {
/* 4  */     extend: 'CB.object.plugin.ObjectProperties'
/* 5  */     ,alias: 'CBObjectPluginMeta'
/* 6  */ 
/* 7  */     ,title: L.Metadata
/* 8  */ 
/* 9  */     ,initComponent: function(){
/* 10 */         this.actions = {
/* 11 */             edit: new Ext.Action({
/* 12 */                 text: L.Edit
/* 13 */                 ,iconCls: 'i-edit'
/* 14 */                 ,scope: this
/* 15 */                 ,handler: this.onEditClick
/* 16 */             })
/* 17 */         };
/* 18 */ 
/* 19 */         this.menu = new Ext.menu.Menu({
/* 20 */             items: [
/* 21 */                 this.actions.edit
/* 22 */             ]
/* 23 */         });
/* 24 */ 
/* 25 */         this.prepareToolbar();
/* 26 */ 
/* 27 */         this.callParent(arguments);
/* 28 */ 
/* 29 */         Ext.apply(this, {
/* 30 */             border: false
/* 31 */             ,cls: 'obj-plugin'
/* 32 */         });
/* 33 */ 
/* 34 */         this.enableBubble(['editmeta']);
/* 35 */     }
/* 36 */ 
/* 37 */     ,getToolbarItems: function () {
/* 38 */ 
/* 39 */         return [{
/* 40 */             iconCls: 'i-points'
/* 41 */             ,scope: this
/* 42 */             ,handler: this.showMenu
/* 43 */         }];
/* 44 */     }
/* 45 */ 
/* 46 */     ,onEditClick: function(b, e) {
/* 47 */         this.fireEvent('editmeta', this.params, e);
/* 48 */     }
/* 49 */ 
/* 50 */     ,showMenu: function(b, e) {

/* Meta.js */

/* 51 */         this.menu.showBy(b.getEl());
/* 52 */     }
/* 53 */ });
/* 54 */ 

;
/* Tasks.js */

/* 1   */ Ext.namespace('CB.object.plugin');
/* 2   */ 
/* 3   */ Ext.define('CB.object.plugin.Tasks', {
/* 4   */     extend: 'CB.object.plugin.Base'
/* 5   */     ,alias: 'CBObjectPluginTasks'
/* 6   */ 
/* 7   */     ,initComponent: function(){
/* 8   */ 
/* 9   */         this.actions = {
/* 10  */            add: new Ext.Action({
/* 11  */                 iconCls: 'i-plus'
/* 12  */                 ,scope: this
/* 13  */                 ,handler: this.onAddClick
/* 14  */             })
/* 15  */         };
/* 16  */ 
/* 17  */         var tpl = new Ext.XTemplate(
/* 18  */             '<table class="block-plugin">'
/* 19  */             ,'<tpl for=".">'
/* 20  */             ,'<tr>'
/* 21  */             ,'    <td class="obj">'
/* 22  */             ,'        <img class="i32" src="' + App.config.photoPath + '{cid}.jpg?32={[ CB.DB.usersStore.getPhotoParam(values.cid) ]}" title="{user}">'
/* 23  */             ,'    </td>'
/* 24  */             ,'    <td>'
/* 25  */             ,'        <span class="click">{name}</span><br />'
/* 26  */             ,'        <span class="gr" title="{[ displayDateTime(values.cdate) ]}">{ago_text}</span>'
/* 27  */             ,'    </td>'
/* 28  */             ,'    <td class="elips">'
/* 29  */             ,'        <span class="click menu"></span>'
/* 30  */             ,'    </td>'
/* 31  */             ,'</tr>'
/* 32  */             ,'</tpl>'
/* 33  */             ,'</table>'
/* 34  */         );
/* 35  */ 
/* 36  */         this.store = new Ext.data.JsonStore({
/* 37  */             autoDestroy: true
/* 38  */             ,model: 'ContentItem'
/* 39  */             ,proxy: new  Ext.data.MemoryProxy()
/* 40  */         });
/* 41  */ 
/* 42  */         this.dataView = new Ext.DataView({
/* 43  */             tpl: tpl
/* 44  */             ,store: this.store
/* 45  */             ,autoHeight: true
/* 46  */             ,itemSelector:'tr'
/* 47  */             ,listeners: {
/* 48  */                 scope: this
/* 49  */                 ,itemclick: this.onItemClick
/* 50  */             }

/* Tasks.js */

/* 51  */         });
/* 52  */ 
/* 53  */         Ext.apply(this, {
/* 54  */             title: L.Tasks
/* 55  */             ,items: this.dataView
/* 56  */         });
/* 57  */ 
/* 58  */         this.callParent(arguments);
/* 59  */ 
/* 60  */         this.enableBubble(['createobject']);
/* 61  */     }
/* 62  */ 
/* 63  */     ,onLoadData: function(r, e) {
/* 64  */         if(Ext.isEmpty(r.data)) {
/* 65  */             return;
/* 66  */         }
/* 67  */         this.store.loadData(r.data);
/* 68  */     }
/* 69  */ 
/* 70  */     ,onItemClick: function (cmp, record, item, index, e, eOpts) {//dv, index, el, e
/* 71  */         var te = Ext.get(e.getTarget());
/* 72  */         if(!te) {
/* 73  */             return;
/* 74  */         }
/* 75  */ 
/* 76  */         if(te.hasCls('menu')) {
/* 77  */             this.showActionsMenu(e.getXY());
/* 78  */         } else if(te.hasCls('click')) {
/* 79  */             this.openObjectProperties(this.store.getAt(index).data);
/* 80  */         }
/* 81  */ 
/* 82  */     }
/* 83  */ 
/* 84  */     ,showActionsMenu: function(coord){
/* 85  */         if(Ext.isEmpty(this.puMenu)) {
/* 86  */             this.puMenu = new Ext.menu.Menu({
/* 87  */                 items: [
/* 88  */                     {
/* 89  */                         text: L.Close
/* 90  */                     },{
/* 91  */                         text: L.Delete
/* 92  */                         ,iconCls: 'i-trash'
/* 93  */                     }
/* 94  */                 ]
/* 95  */             });
/* 96  */         }
/* 97  */ 
/* 98  */         this.puMenu.showAt(coord);
/* 99  */     }
/* 100 */ 

/* Tasks.js */

/* 101 */     ,getToolbarItems: function() {
/* 102 */         return [this.actions.add];
/* 103 */     }
/* 104 */ 
/* 105 */     ,getContainerToolbarItems: function() {
/* 106 */         var rez = {
/* 107 */             tbar: {}
/* 108 */             ,menu: {}
/* 109 */         };
/* 110 */ 
/* 111 */         if(this.params) {
/* 112 */             rez['menu']['addtask'] = {order: 10};
/* 113 */ 
/* 114 */             if(CB.DB.templates.getType(this.params.template_id) !== 'file') {
/* 115 */                 rez['menu']['new'] = {order: 11};
/* 116 */             }
/* 117 */         }
/* 118 */ 
/* 119 */ 
/* 120 */         return rez;
/* 121 */     }
/* 122 */ 
/* 123 */     ,onAddClick: function(b, e) {
/* 124 */         this.fireEvent(
/* 125 */             'createobject'
/* 126 */             ,{
/* 127 */                 template_id: App.config.default_task_template
/* 128 */             }
/* 129 */             ,e
/* 130 */         );
/* 131 */     }
/* 132 */ });
/* 133 */ 

;
/* Versions.js */

/* 1   */ Ext.namespace('CB.object.plugin');
/* 2   */ 
/* 3   */ Ext.define('CB.object.plugin.Versions', {
/* 4   */     extend: 'CB.object.plugin.Base'
/* 5   */     ,alias: 'CBObjectPluginVersions'
/* 6   */ 
/* 7   */     ,initComponent: function(){
/* 8   */         this.actions = {
/* 9   */            restore: new Ext.Action({
/* 10  */                 text: L.Restore
/* 11  */                 ,scope: this
/* 12  */                 ,handler: this.onRestoreClick
/* 13  */             })
/* 14  */         };
/* 15  */ 
/* 16  */         this.store = new Ext.data.JsonStore({
/* 17  */             autoDestroy: true
/* 18  */             ,model: 'ContentItem'
/* 19  */             ,proxy: new  Ext.data.MemoryProxy()
/* 20  */             // ,fields: [
/* 21  */             //     {name: 'id', type: 'int'}
/* 22  */             //     ,{name: 'pid', type: 'int'}
/* 23  */             //     ,'name'
/* 24  */             //     ,{name: 'template_id', type: 'int'}
/* 25  */             //     ,{name: 'oid', type: 'int'}
/* 26  */             //     ,{name: 'cid', type: 'int'}
/* 27  */             //     ,'size'
/* 28  */             //     ,'cdate'
/* 29  */             //     ,'ago_text'
/* 30  */             //     ,'iconCls'
/* 31  */             //     ,'user'
/* 32  */             //     ,'cls'
/* 33  */             // ]
/* 34  */         });
/* 35  */ 
/* 36  */         this.dataView = new Ext.DataView({
/* 37  */             tpl: this.getTemplate()
/* 38  */             ,store: this.store
/* 39  */             ,autoHeight: true
/* 40  */             ,itemSelector:'tr'
/* 41  */             ,listeners: {
/* 42  */                 scope: this
/* 43  */                 ,itemclick: this.onItemClick
/* 44  */             }
/* 45  */         });
/* 46  */ 
/* 47  */         Ext.apply(this, {
/* 48  */             title: Ext.valueFrom(this.title, L.VersionsHistory)
/* 49  */             ,items: [
/* 50  */                 this.dataView

/* Versions.js */

/* 51  */             ]
/* 52  */         });
/* 53  */ 
/* 54  */         this.callParent(arguments);
/* 55  */ 
/* 56  */         this.enableBubble(['openversion']);
/* 57  */     }
/* 58  */ 
/* 59  */     ,getTemplate: function(){
/* 60  */         return new Ext.XTemplate(
/* 61  */             '<table class="block-plugin versions">'
/* 62  */             ,'<tpl for=".">'
/* 63  */             ,'<tr class="{cls}">'
/* 64  */             ,'    <td class="obj">'
/* 65  */             ,'        <div><img class="i32" src="' + App.config.photoPath + '{cid}.jpg{[ CB.DB.usersStore.getPhotoParam(values.cid) ]}" title="{user}"></div>'
/* 66  */             ,'    </td>'
/* 67  */             ,'    <td>'
/* 68  */             ,'        <span class="click">{name}</span><br />'
/* 69  */             ,'        <span class="gr" title="{[ displayDateTime(values.cdate) ]}">{[ App.customRenderers.filesize(values.size) ]}, {ago_text}</span>'
/* 70  */             ,'    </td>'
/* 71  */             ,'    <td class="elips">'
/* 72  */             ,'        <span class="click menu"></span>'
/* 73  */             ,'    </td>'
/* 74  */             ,'</tr>'
/* 75  */             ,'</tpl>'
/* 76  */             ,'</table>'
/* 77  */         );
/* 78  */     }
/* 79  */ 
/* 80  */     ,onLoadData: function(r, e) {
/* 81  */         if(Ext.isEmpty(r.data)) {
/* 82  */             return;
/* 83  */         }
/* 84  */ 
/* 85  */         for (var i = 0; i < r.data.length; i++) {
/* 86  */             r.data[i].iconCls = getItemIcon(r.data[i]);
/* 87  */         }
/* 88  */         this.store.loadData(r.data);
/* 89  */     }
/* 90  */ 
/* 91  */     ,onItemClick: function (cmp, record, item, index, e, eOpts) {//dv, index, el, e
/* 92  */         var te = Ext.get(e.getTarget());
/* 93  */         if(!te) {
/* 94  */             return;
/* 95  */         }
/* 96  */ 
/* 97  */         if(te.hasCls('menu')) {
/* 98  */             this.selectedRecord = this.store.getAt(index);
/* 99  */             this.showActionsMenu(e.getXY());
/* 100 */         } else if(te.hasCls('click')) {

/* Versions.js */

/* 101 */             this.fireEvent('openversion', this.store.getAt(index).data, this);
/* 102 */         }
/* 103 */     }
/* 104 */ 
/* 105 */     ,showActionsMenu: function(coord){
/* 106 */         if(Ext.isEmpty(this.puMenu)) {
/* 107 */             this.puMenu = new Ext.menu.Menu({
/* 108 */                 items: [this.actions.restore]
/* 109 */             });
/* 110 */         }
/* 111 */ 
/* 112 */         this.puMenu.showAt(coord);
/* 113 */     }
/* 114 */ 
/* 115 */     ,onRestoreClick: function(b, e) {
/* 116 */         CB_Files.restoreVersion(
/* 117 */             this.selectedRecord.get('id')
/* 118 */             ,function(r, e){
/* 119 */                 App.fireEvent('objectchanged', r.data, this);
/* 120 */             }
/* 121 */             ,this
/* 122 */         );
/* 123 */     }
/* 124 */ 
/* 125 */     ,setSelectedVersion: function(params) {
/* 126 */         this.store.each(
/* 127 */             function(r) {
/* 128 */                 r.set('cls', (r.get('id') == params.versionId) ? 'sel' : '');
/* 129 */             }
/* 130 */             ,this
/* 131 */         );
/* 132 */     }
/* 133 */ });
/* 134 */ 

;
/* CurrentVersion.js */

/* 1  */ Ext.namespace('CB.object.plugin');
/* 2  */ 
/* 3  */ Ext.define('CB.object.plugin.CurrentVersion', {
/* 4  */     extend: 'CB.object.plugin.Versions'
/* 5  */     ,alias: 'CBObjectPluginCurrentVersion'
/* 6  */ 
/* 7  */     ,initComponent: function(){
/* 8  */ 
/* 9  */         Ext.apply(this, {
/* 10 */             title: L.CurrentVersion
/* 11 */         });
/* 12 */ 
/* 13 */         this.callParent(arguments);
/* 14 */     }
/* 15 */ 
/* 16 */     ,getTemplate: function(){
/* 17 */         return new Ext.XTemplate(
/* 18 */             '<table class="block-plugin versions">'
/* 19 */             ,'<tpl for=".">'
/* 20 */             ,'<tr class="{cls}">'
/* 21 */             ,'    <td class="obj">'
/* 22 */             ,'        <div><img class="i32" src="' + App.config.photoPath + '{[this.getUserId(values)]}.jpg?32={[this.getUserName(values)]}" title="{user}"></div>'
/* 23 */             ,'    </td>'
/* 24 */             ,'    <td>'
/* 25 */             ,'        <span class="click">{name}</span><br />'
/* 26 */             ,'        <span class="gr" title="{[this.getDate(values)]}">{[ App.customRenderers.filesize(values.size) ]}, {ago_text}</span>'
/* 27 */             ,'    </td>'
/* 28 */             ,'</tr>'
/* 29 */             ,'</tpl>'
/* 30 */             ,'</table>'
/* 31 */             ,{
/* 32 */                 getUserId: function(values){
/* 33 */                     return Ext.valueFrom(values.uid, values.cid);
/* 34 */                 }
/* 35 */                 ,getUserName: function(values){
/* 36 */                     return CB.DB.usersStore.getPhotoParam(this.getUserId(values));
/* 37 */                 }
/* 38 */                 ,getDate: function(values){
/* 39 */                     return Ext.valueFrom(values.udate, values.cdate);
/* 40 */                 }
/* 41 */             }
/* 42 */         );
/* 43 */     }
/* 44 */ 
/* 45 */     ,onItemClick: function (cmp, record, item, index, e, eOpts) {// dv, index, el, e
/* 46 */         var te = Ext.get(e.getTarget());
/* 47 */         if(!te) {
/* 48 */             return;
/* 49 */         }
/* 50 */ 

/* CurrentVersion.js */

/* 51 */         if(te.hasCls('click')) {
/* 52 */             this.fireEvent('openversion', {id: null}, this);
/* 53 */         }
/* 54 */     }
/* 55 */ 
/* 56 */     ,setSelectedVersion: function(params) {
/* 57 */         this.store.each(
/* 58 */             function(r) {
/* 59 */                 r.set('cls', Ext.isEmpty(params.versionId) ? 'sel' : '');
/* 60 */             }
/* 61 */             ,this
/* 62 */         );
/* 63 */     }
/* 64 */ 
/* 65 */ });
/* 66 */ 

;
/* Window.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.file.edit.Window', {
/* 4   */     extend: 'CB.object.edit.Window'
/* 5   */ 
/* 6   */     ,alias: 'CBFileEditWindow'
/* 7   */ 
/* 8   */     ,xtype: 'CBFileEditWindow'
/* 9   */ 
/* 10  */     ,width: 600
/* 11  */     ,height: 550
/* 12  */ 
/* 13  */     ,initComponent: function() {
/* 14  */         this.callParent(arguments);
/* 15  */ 
/* 16  */         this.on('openversion', this.onOpenVersionEvent, this);
/* 17  */     }
/* 18  */ 
/* 19  */     /**
/* 20  *|      * init this component actions
/* 21  *|      * @return void
/* 22  *|      */
/* 23  */     ,initActions: function() {
/* 24  */         this.callParent(arguments);
/* 25  */ 
/* 26  */         Ext.apply(this.actions, {
/* 27  */             download: new Ext.Action({
/* 28  */                 text: L.Download
/* 29  */                 ,iconCls: 'icon-download'
/* 30  */                 ,scope: this
/* 31  */                 ,handler: this.onDownloadClick
/* 32  */             })
/* 33  */ 
/* 34  */             ,restoreVersion: new Ext.Action({
/* 35  */                 text: L.Restore
/* 36  */                 ,iconCls: 'i-restore'
/* 37  */                 ,hidden: true
/* 38  */                 ,scope: this
/* 39  */                 ,handler: this.onRestoreVersionClick
/* 40  */             })
/* 41  */ 
/* 42  */             ,webdavlink: new Ext.Action({
/* 43  */                 text: L.WebDAVLink
/* 44  */                 ,itemId: 'webdavlink'
/* 45  */                 ,scope: this
/* 46  */                 ,handler: this.onWebDAVLinkClick
/* 47  */             })
/* 48  */         });
/* 49  */     }
/* 50  */ 

/* Window.js */

/* 51  */     /**
/* 52  *|      * method that should return top toolbar buttons
/* 53  *|      * @return array
/* 54  *|      */
/* 55  */     ,getToolbarButtons: function() {
/* 56  */         //call parent to let it define other buttons required like follow
/* 57  */         this.callParent(arguments);
/* 58  */ 
/* 59  */         this.downloadSeparator = Ext.create({xtype: 'tbseparator'});
/* 60  */ 
/* 61  */         return [
/* 62  */             this.actions.edit
/* 63  */             ,this.actions.restoreVersion
/* 64  */             ,this.actions.save
/* 65  */             ,this.actions.cancel
/* 66  */             ,this.downloadSeparator
/* 67  */             ,this.actions.download
/* 68  */             ,'->'
/* 69  */             ,this.actions.star
/* 70  */             ,this.actions.unstar
/* 71  */             ,this.actions.refresh
/* 72  */             ,new Ext.Button({
/* 73  */                 qtip: L.More
/* 74  */                 ,itemId: 'more'
/* 75  */                 ,arrowVisible: false
/* 76  */                 ,iconCls: 'i-points'
/* 77  */                 ,menu: [
/* 78  */                     this.actions['delete']
/* 79  */                     ,this.actions.webdavlink
/* 80  */                     ,this.actions.rename
/* 81  */                     ,this.actions.permalink
/* 82  */                     ,'-'
/* 83  */                     ,this.actions.notifyOn
/* 84  */                     ,this.actions.notifyOff
/* 85  */                 ]
/* 86  */             })
/* 87  */             ,this.actions.showInfoPanel
/* 88  */         ];
/* 89  */     }
/* 90  */ 
/* 91  */     /**
/* 92  *|      * initialize containers used
/* 93  *|      * @return void
/* 94  *|      */
/* 95  */     ,initContainerItems: function() {
/* 96  */         this.callParent(arguments);
/* 97  */ 
/* 98  */         // add title for gird container in edit mode
/* 99  */         this.gridContainer.cls = 'obj-plugin';
/* 100 */         this.gridContainer.addDocked(

/* Window.js */

/* 101 */             [{
/* 102 */                 xtype: 'toolbar'
/* 103 */                 ,hidden: true
/* 104 */                 ,border: false
/* 105 */                 ,items: [{
/* 106 */                     xtype: 'label'
/* 107 */                     ,cls: 'title'
/* 108 */                     ,text: L.Metadata
/* 109 */                 }]
/* 110 */             }]
/* 111 */             ,'top'
/* 112 */         );
/* 113 */ 
/* 114 */         Ext.destroy(this.complexFieldContainer);
/* 115 */ 
/* 116 */         this.complexFieldContainer = Ext.create({
/* 117 */             xtype: 'form'
/* 118 */             ,border: false
/* 119 */             ,layout: 'fit'
/* 120 */             ,flex: 1
/* 121 */             ,api: {
/* 122 */                 submit: CB_Objects.save
/* 123 */             }
/* 124 */             ,items: []
/* 125 */         });
/* 126 */ 
/* 127 */         Ext.override(
/* 128 */             this.pluginsContainer
/* 129 */             ,{
/* 130 */                 onLoadData: this.onPluginContainerLoadData
/* 131 */             }
/* 132 */         );
/* 133 */     }
/* 134 */ 
/* 135 */     /**
/* 136 *|      * function that should return items structure based on template config
/* 137 *|      * @return array
/* 138 *|      */
/* 139 */     ,getLayoutItems: function() {
/* 140 */         this.templateCfg.layout = 'horizontal';
/* 141 */ 
/* 142 */         var rez = [
/* 143 */             {
/* 144 */                 region: 'center'
/* 145 */                 ,border: false
/* 146 */                 ,scrollable: true
/* 147 */                 ,layout: {
/* 148 */                     type: 'vbox'
/* 149 */                     ,align: 'stretch'
/* 150 */                 }

/* Window.js */

/* 151 */                 ,items: [
/* 152 */                     this.titleContainer
/* 153 */                     ,this.complexFieldContainer
/* 154 */                 ]
/* 155 */             }, {
/* 156 */                 region: 'east'
/* 157 */                 ,itemId: 'infoPanel'
/* 158 */                 ,header: false
/* 159 */                 ,border: false
/* 160 */                 ,scrollable: true
/* 161 */                 ,layout: {
/* 162 */                     type: 'vbox'
/* 163 */                     ,align: 'stretch'
/* 164 */                 }
/* 165 */ 
/* 166 */                 ,split: {
/* 167 */                     size: 2
/* 168 */                 }
/* 169 */ 
/* 170 */                 ,width: 300
/* 171 */                 ,items: [
/* 172 */                     ,this.gridContainer
/* 173 */                     ,this.pluginsContainer
/* 174 */                 ]
/* 175 */             }
/* 176 */         ];
/* 177 */ 
/* 178 */         return rez;
/* 179 */     }
/* 180 */ 
/* 181 */     /**
/* 182 *|      * loading preview panel of the file
/* 183 *|      * @return void
/* 184 *|      */
/* 185 */     ,processLoadPreviewData: function(r, e) {
/* 186 */         this.callParent(arguments);
/* 187 */ 
/* 188 */         var scrollable = (getFileExtension(this.data.name) !== 'pdf');
/* 189 */ 
/* 190 */         this.previewPanel = new CB.object.view.Preview({
/* 191 */             border: false
/* 192 */             ,scrollable: scrollable
/* 193 */             ,bodyStyle: 'padding: 5px'
/* 194 */         });
/* 195 */ 
/* 196 */         this.complexFieldContainer.removeAll(true);
/* 197 */         this.complexFieldContainer.update('');
/* 198 */         this.complexFieldContainer.add(
/* 199 */             this.previewPanel
/* 200 */         );

/* Window.js */

/* 201 */ 
/* 202 */         this.previewPanel.loadPreview(this.data.id, this.loadedVersionId);
/* 203 */     }
/* 204 */ 
/* 205 */     /**
/* 206 *|      * method for processing server data on editing item
/* 207 *|      * @return void
/* 208 *|      */
/* 209 */     ,processLoadEditData: function(r, e) {
/* 210 */         this.gridContainer.getDockedComponent(0).setHidden(false);
/* 211 */         this.callParent(arguments);
/* 212 */     }
/* 213 */ 
/* 214 */     ,updateComplexFieldContainer: function() {
/* 215 */         this.editType = detectFileEditor(this.data.name);
/* 216 */ 
/* 217 */         switch(this.editType) {
/* 218 */             case 'text':
/* 219 */                 this.contentEditor = new Ext.ux.AceEditor({border: false});
/* 220 */                 break;
/* 221 */ 
/* 222 */             case 'html':
/* 223 */                 this.contentEditor = new Ext.ux.HtmlEditor({
/* 224 */                     border: false
/* 225 */                     ,cls: 'editor-no-border'
/* 226 */                     ,listeners: {
/* 227 */                         scope: this
/* 228 */                         ,change: this.onEditorChangeEvent
/* 229 */                         ,sync: this.onEditorChangeEvent
/* 230 */                     }
/* 231 */                 });
/* 232 */                 break;
/* 233 */         }
/* 234 */ 
/* 235 */         if(this.contentEditor) {
/* 236 */             this.complexFieldContainer.add(this.contentEditor);
/* 237 */ 
/* 238 */             this.loadContent();
/* 239 */         }
/* 240 */     }
/* 241 */ 
/* 242 */     ,loadContent: function() {
/* 243 */         CB_Files.getContent(this.data.id, this.onLoadContent, this);
/* 244 */     }
/* 245 */ 
/* 246 */     ,onLoadContent: function(r, e) {
/* 247 */         if(!r || (r.success !== true)) {
/* 248 */             plog('Error loading file content ', this.data);
/* 249 */             return;
/* 250 */         }

/* Window.js */

/* 251 */ 
/* 252 */         if(this.contentEditor) {
/* 253 */             this.contentEditor.setValue(r.data);
/* 254 */         }
/* 255 */     }
/* 256 */ 
/* 257 */     ,onPluginContainerLoadData: function(r, e) {
/* 258 */         var w = this.up('window');
/* 259 */         if(w && w.viewMode === 'edit') {
/* 260 */             delete r.data.meta;
/* 261 */         }
/* 262 */ 
/* 263 */         this.callParent(arguments);
/* 264 */     }
/* 265 */ 
/* 266 */     ,updateButtons: function() {
/* 267 */         this.editType = detectFileEditor(this.data.name);
/* 268 */ 
/* 269 */         this.callParent(arguments);
/* 270 */ 
/* 271 */         this.downloadSeparator.setHidden(this.actions.cancel.isHidden());
/* 272 */ 
/* 273 */         this.actions.edit.setHidden(
/* 274 */             (this.viewMode === 'edit') ||
/* 275 */             (this.editType === false) ||
/* 276 */             !Ext.isEmpty(this.loadedVersionId)
/* 277 */         );
/* 278 */ 
/* 279 */         this.actions.webdavlink.setHidden(this.editType !== 'webdav');
/* 280 */ 
/* 281 */         this.actions.save.setDisabled(false);
/* 282 */ 
/* 283 */         this.actions.restoreVersion.setHidden(Ext.isEmpty(this.loadedVersionId));
/* 284 */ 
/* 285 */         this.pluginsContainer.setSelectedVersion({
/* 286 */             id: this.data.id
/* 287 */             ,versionId: this.loadedVersionId
/* 288 */         });
/* 289 */     }
/* 290 */ 
/* 291 */     /**
/* 292 *|      * handler for edit toolbar button
/* 293 *|      * @param  button b
/* 294 *|      * @param  event e
/* 295 *|      * @return void
/* 296 *|      */
/* 297 */     ,onEditClick: function(b, e) {
/* 298 */         switch(this.editType) {
/* 299 */             case 'text':
/* 300 */             case 'html':

/* Window.js */

/* 301 */                 this.viewMode = 'edit';
/* 302 */                 this.doLoad();
/* 303 */                 break;
/* 304 */ 
/* 305 */             case 'webdav':
/* 306 */ 
/* 307 */                 App.openWebdavDocument(this.data);
/* 308 */                 break;
/* 309 */         }
/* 310 */     }
/* 311 */ 
/* 312 */     ,onSaveClick: function(b, e) {
/* 313 */         this.saveContent();
/* 314 */ 
/* 315 */         if(!this._isDirty) {
/* 316 */             this.closeOnSaveContent = true;
/* 317 */ 
/* 318 */         } else {
/* 319 */             this.readValues();
/* 320 */ 
/* 321 */             this.getEl().mask(L.Saving + ' ...', 'x-mask-loading');
/* 322 */ 
/* 323 */             this.complexFieldContainer.getForm().submit({
/* 324 */                 clientValidation: true
/* 325 */                 ,loadMask: false
/* 326 */                 ,params: {
/* 327 */                     data: Ext.encode(this.data)
/* 328 */                 }
/* 329 */                 ,scope: this
/* 330 */                 ,success: this.processSave
/* 331 */                 ,failure: this.processSave
/* 332 */             });
/* 333 */         }
/* 334 */     }
/* 335 */ 
/* 336 */     ,saveContent: function() {
/* 337 */         if(Ext.isEmpty(this.contentEditor)) {
/* 338 */             return;
/* 339 */         }
/* 340 */ 
/* 341 */         var ed = this.contentEditor.editor
/* 342 */             ? this.contentEditor.editor
/* 343 */             : this.contentEditor
/* 344 */ 
/* 345 */             ,session = ed.getSession
/* 346 */                 ? ed.getSession()
/* 347 */                 : null;
/* 348 */ 
/* 349 */         this.getEl().mask(L.Processing + ' ...', 'x-mask-loading');
/* 350 */ 

/* Window.js */

/* 351 */         CB_Files.saveContent(
/* 352 */             {
/* 353 */                 id: this.data.id
/* 354 */                 ,data: session
/* 355 */                     ? session.getValue()
/* 356 */                     : ed.getValue()
/* 357 */             }
/* 358 */             ,this.processSaveContent
/* 359 */             ,this
/* 360 */         );
/* 361 */     }
/* 362 */ 
/* 363 */     ,processSaveContent: function(r, e){
/* 364 */         this.getEl().unmask();
/* 365 */         this.actions.save.setDisabled(Ext.isEmpty(this.contentEditor));
/* 366 */         if(this.closeOnSaveContent) {
/* 367 */             this.close();
/* 368 */         }
/* 369 */     }
/* 370 */ 
/* 371 */     /**
/* 372 *|      * method for pocessing save responce
/* 373 *|      * @param  component form
/* 374 *|      * @param  object action
/* 375 *|      * @return void
/* 376 *|      */
/* 377 */     ,processSave: function(form, action) {
/* 378 */         this.getEl().unmask();
/* 379 */ 
/* 380 */         var r = action.result;
/* 381 */ 
/* 382 */         if(!r || (r.success !== true)) {
/* 383 */             App.showException(r);
/* 384 */         } else {
/* 385 */             this._isDirty = false;
/* 386 */             App.fireEvent('objectchanged', r.data, this);
/* 387 */             this.close();
/* 388 */         }
/* 389 */     }
/* 390 */ 
/* 391 */     /**
/* 392 *|      * event handler for content editors change
/* 393 *|      * @param  component ed
/* 394 *|      * @return void
/* 395 *|      */
/* 396 */     ,onEditorChangeEvent: function(ed) {
/* 397 */         this.actions.save.setDisabled(false);
/* 398 */     }
/* 399 */ 
/* 400 */     ,readValues: function() {

/* Window.js */

/* 401 */         this.grid.readValues();
/* 402 */ 
/* 403 */         this.data.data = Ext.apply(
/* 404 */             this.data.data
/* 405 */             ,this.complexFieldContainer.getForm().getFieldValues()
/* 406 */         );
/* 407 */ 
/* 408 */         return this.data;
/* 409 */     }
/* 410 */ 
/* 411 */     /**
/* 412 *|      * download button handler
/* 413 *|      * @param  Button b
/* 414 *|      * @param  EventObject e
/* 415 *|      * @return void
/* 416 *|      */
/* 417 */     ,onDownloadClick: function(b, e){
/* 418 */         App.downloadFile(this.data.id, false, this.loadedVersionId);
/* 419 */     }
/* 420 */ 
/* 421 */     ,onOpenVersionEvent: function(data, pluginComponent) {
/* 422 */         this.loadedVersionId = data.id;
/* 423 */ 
/* 424 */         if(!Ext.isEmpty(this.loadedVersionId)) {
/* 425 */             this.viewMode = 'preview';
/* 426 */         }
/* 427 */ 
/* 428 */         this.doLoad();
/* 429 */     }
/* 430 */ 
/* 431 */     ,onRestoreVersionClick: function(){
/* 432 */         if(Ext.isEmpty(this.loadedVersionId)) {
/* 433 */             return;
/* 434 */         }
/* 435 */ 
/* 436 */         CB_Files.restoreVersion(
/* 437 */             this.loadedVersionId
/* 438 */             ,function(r, e){
/* 439 */                 App.mainViewPort.fireEvent('fileuploaded', {data: r.data});
/* 440 */ 
/* 441 */                 delete this.loadedVersionId;
/* 442 */ 
/* 443 */                 this.doLoad();
/* 444 */             }
/* 445 */             ,this
/* 446 */         );
/* 447 */     }
/* 448 */ 
/* 449 */     ,onWebDAVLinkClick: function(b, e) {
/* 450 */         App.openWebdavDocument(this.data ,false);

/* Window.js */

/* 451 */     }
/* 452 */ });
/* 453 */ 

;
/* CB.WebdavWindow.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.WebdavWindow', {
/* 4  */     extend: 'Ext.Window'
/* 5  */ 
/* 6  */     ,initComponent: function() {
/* 7  */         this.data = this.config.data;
/* 8  */ 
/* 9  */         if(Ext.isEmpty(this.data)) {
/* 10 */             this.data = {};
/* 11 */         }
/* 12 */ 
/* 13 */         this.textField = new Ext.form.TextField({
/* 14 */            value: this.data.link
/* 15 */             ,fieldLabel: 'Link'
/* 16 */             ,labelWidth: 25
/* 17 */             ,selectOnFocus: true
/* 18 */             ,style: 'font-size: 10px'
/* 19 */             ,width: '100%'
/* 20 */         });
/* 21 */ 
/* 22 */         this.cbHideDialog = new Ext.form.Checkbox({
/* 23 */             xtype: 'checkbox'
/* 24 */             ,height: 20
/* 25 */             ,boxLabel: 'Enable cbdav & don\'t show this dialog'
/* 26 */             ,checked: (Ext.util.Cookies.get('webdavHideDlg') == 1)
/* 27 */         });
/* 28 */ 
/* 29 */         Ext.apply(this, {
/* 30 */             modal: true
/* 31 */             ,width: 400
/* 32 */             ,autoHeight: true
/* 33 */             ,border: true
/* 34 */             ,closable: true
/* 35 */             ,cls: 'webdav'
/* 36 */             ,title: 'WebDAV'
/* 37 */             ,padding: 10
/* 38 */             ,bodyStyle: 'padding:10px'
/* 39 */ 
/* 40 */             ,items: [
/* 41 */                 this.textField
/* 42 */                 ,{
/* 43 */                     xtype: 'displayfield'
/* 44 */                     ,value: '<br />Open this link in your editor (Word, LibreOffice).<br /> You\'ll be asked for your CaseBox username/password.'
/* 45 */                 }
/* 46 */                 ,{
/* 47 */                     xtype: 'displayfield'
/* 48 */                     ,value: '<br />Install <a href="http://www.casebox.org/dl/cbdav.exe" class="click">cbdav.exe</a> to automatically open the document when you<br />double clicka file or use the edit button.<br /><br />'
/* 49 */                 }
/* 50 */                 ,this.cbHideDialog

/* CB.WebdavWindow.js */

/* 51 */                 ,{
/* 52 */                     xtype: 'button'
/* 53 */                     ,style: 'margin: auto'
/* 54 */                     ,scope: this
/* 55 */                     ,value: 'Ok'
/* 56 */                     ,text: 'Ok'
/* 57 */                     ,label: 'Ok'
/* 58 */                     ,handler: this.onOkClick
/* 59 */                 }
/* 60 */             ]
/* 61 */ 
/* 62 */             ,listeners: {
/* 63 */                 scope: this
/* 64 */                 ,afterrender: this.onShow
/* 65 */             }
/* 66 */         });
/* 67 */ 
/* 68 */         this.callParent(arguments);
/* 69 */     }
/* 70 */ 
/* 71 */     ,onShow: function() {
/* 72 */         this.textField.focus(true, 100);
/* 73 */         this.updateLayout();
/* 74 */     }
/* 75 */ 
/* 76 */     ,onOkClick: function(b, e) {
/* 77 */         Ext.util.Cookies.set('webdavHideDlg', this.cbHideDialog.getValue() ? 1 : 0);
/* 78 */ 
/* 79 */         this.close();
/* 80 */     }
/* 81 */ }
/* 82 */ );
/* 83 */ 

;
/* DBProvider.js */

/* 1  */ Ext.namespace('CB.state');
/* 2  */ 
/* 3  */ Ext.define('CB.state.DBProvider', {
/* 4  */     extend: 'Ext.state.Provider'
/* 5  */ 
/* 6  */     ,constructor: function(config){
/* 7  */         // this.callParent(arguments);
/* 8  */         // CB.state.DBProvider.superclass.constructor.call(this, arguments);
/* 9  */ 
/* 10 */         Ext.apply(
/* 11 */             this
/* 12 */             ,{
/* 13 */                 api: {
/* 14 */                     read: CB_State_DBProvider.read
/* 15 */                     ,write: CB_State_DBProvider.set
/* 16 */                 }
/* 17 */             }
/* 18 */         );
/* 19 */ 
/* 20 */         Ext.apply(this, config);
/* 21 */ 
/* 22 */         this.callParent(arguments);
/* 23 */         CB.state.DBProvider.superclass.constructor.call(this);
/* 24 */ 
/* 25 */         this.load();
/* 26 */     }
/* 27 */ 
/* 28 */     /**
/* 29 *|      * load remote saved state from server
/* 30 *|      * @return void
/* 31 *|      */
/* 32 */     ,load: function() {
/* 33 */         this.api.read(this.onLoad, this);
/* 34 */     }
/* 35 */ 
/* 36 */     ,onLoad: function(r, e) {
/* 37 */         if(!r || (r.success !== true)) {
/* 38 */             return;
/* 39 */         }
/* 40 */ 
/* 41 */         this.state = r.data;
/* 42 */     }
/* 43 */ 
/* 44 */     /**
/* 45 *|      * Sets the value for a key
/* 46 *|      * @param {String} name The key name
/* 47 *|      * @param {Mixed} value The value to set
/* 48 *|      */
/* 49 */     ,set: function(name, value){
/* 50 */         var method = Ext.isEmpty(value)

/* DBProvider.js */

/* 51 */             ? 'clear'
/* 52 */             : 'set';
/* 53 */ 
/* 54 */         this.api.write(
/* 55 */             {
/* 56 */                 'name': name
/* 57 */                 ,'value': value
/* 58 */             }
/* 59 */             ,function(r, e) {
/* 60 */                 if(!r || (r.success !== true)) {
/* 61 */                     return;
/* 62 */                 }
/* 63 */                 CB.state.DBProvider.superclass[method].call(this, name, value);
/* 64 */             }
/* 65 */             ,this
/* 66 */         );
/* 67 */     }
/* 68 */ 
/* 69 */     /**
/* 70 *|      * Clears a value from the state
/* 71 *|      * @param {String} name The key name
/* 72 *|      */
/* 73 */     ,clear: function(name){
/* 74 */         this.set(name, null);
/* 75 */     }
/* 76 */ });
/* 77 */ 

;
/* Comment.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.field.Comment', {
/* 4   */     extend: 'Ext.panel.Panel'
/* 5   */ 
/* 6   */     ,alias: 'CBFieldComment'
/* 7   */ 
/* 8   */     ,xtype: 'CBFieldComment'
/* 9   */ 
/* 10  */     ,layout: {
/* 11  */         type: 'hbox'
/* 12  */         ,align: 'stretch'
/* 13  */     }
/* 14  */ 
/* 15  */     ,initComponent: function() {
/* 16  */ 
/* 17  */         this.initChildItems();
/* 18  */ 
/* 19  */         Ext.apply(this, {
/* 20  */             autoHeight: true
/* 21  */             ,border: false
/* 22  */             ,listeners: {
/* 23  */                 scope: this
/* 24  */                 ,beforedestroy: this.removeUploaderListeners
/* 25  */             }
/* 26  */         });
/* 27  */ 
/* 28  */         this.callParent(arguments);
/* 29  */     }
/* 30  */ 
/* 31  */     ,initChildItems: function() {
/* 32  */         this.getTextInputField();
/* 33  */ 
/* 34  */         this.attachFileButton = new Ext.button.Button({
/* 35  */             qtip: L.AttachFile
/* 36  */             ,text: ''
/* 37  */             ,iconCls: 'i-attach'
/* 38  */             ,hidden: (Ext.isEmpty(this.params) || Ext.isEmpty(this.params.id))
/* 39  */             ,width: 24
/* 40  */             ,scope: this
/* 41  */             ,handler: this.onAttachFileClick
/* 42  */         });
/* 43  */ 
/* 44  */         this.filesLabel = new Ext.form.field.Display({
/* 45  */             cls: 'click'
/* 46  */         });
/* 47  */ 
/* 48  */         this.messageToolbar = new Ext.Toolbar({
/* 49  */             hidden: false
/* 50  */             ,style: 'padding: 0; border: 0; background-color:  transparent;' // background-color: transparent;

/* Comment.js */

/* 51  */             ,items: [
/* 52  */                 this.attachFileButton
/* 53  */                 ,this.filesLabel
/* 54  */                 ,'->'
/* 55  */                 ,{
/* 56  */                     text: L.Reply
/* 57  */                     ,scope: this
/* 58  */                     ,handler: this.onAddCommentClick
/* 59  */                 }
/* 60  */             ]
/* 61  */         });
/* 62  */ 
/* 63  */ 
/* 64  */         this.items = [
/* 65  */             {
/* 66  */                 xtype: 'label'
/* 67  */                 ,width: 44
/* 68  */                 ,html: '<img class="i32" src="' + App.config.photoPath +
/* 69  */                         App.loginData.id + '.jpg?32=' +
/* 70  */                         CB.DB.usersStore.getPhotoParam(App.loginData.id) +
/* 71  */                         '" title="' + getUserDisplayName(true) + '">'
/* 72  */             }
/* 73  */             ,{
/* 74  */                 xtype: 'panel'
/* 75  */                 ,flex: 1
/* 76  */                 ,layout: 'anchor'
/* 77  */                 ,padding: '0px 3px 5px 5px'
/* 78  */                 ,autoHeight: true
/* 79  */                 ,boder: false
/* 80  */                 ,bodyCls: 'x-panel-white'
/* 81  */                 ,bodyStyle: 'border: 0'
/* 82  */                 ,items: [
/* 83  */                     this.messageField
/* 84  */                     ,this.messageToolbar
/* 85  */                 ]
/* 86  */             }
/* 87  */         ];
/* 88  */     }
/* 89  */ 
/* 90  */     ,getTextInputField: function(config) {
/* 91  */ 
/* 92  */         if(Ext.isEmpty(this.messageField)) {
/* 93  */             var cfg = {
/* 94  */                 emptyText: L.WriteComment + '...'
/* 95  */                 ,anchor: '100%'
/* 96  */                 ,grow: true
/* 97  */                 ,growMin: 10
/* 98  */                 ,enableKeyEvents: true
/* 99  */                 ,cls: "comment-input"
/* 100 */                 ,style: 'margin-top: 5px; font-family: arial,sans-serif; font-size: 12px'

/* Comment.js */

/* 101 */ 
/* 102 */                 ,plugins: [
/* 103 */                     {
/* 104 */                         ptype: 'CBPluginFieldDropDownList'
/* 105 */                     }
/* 106 */                 ]
/* 107 */ 
/* 108 */                 ,listeners: {
/* 109 */                     scope: this
/* 110 */                     ,keypress: this.onMessageBoxKeyPress
/* 111 */                     ,autosize: this.onMessageBoxAutoSize
/* 112 */                     ,focus: function(field) {
/* 113 */                         field.focused = true;
/* 114 */                     }
/* 115 */                     ,blur: function(field) {
/* 116 */                         delete field.focused;
/* 117 */                     }
/* 118 */                 }
/* 119 */             };
/* 120 */ 
/* 121 */             if(config) {
/* 122 */                 Ext.apply(cfg, config);
/* 123 */             }
/* 124 */ 
/* 125 */             this.messageField = new Ext.form.TextArea(cfg);
/* 126 */         }
/* 127 */ 
/* 128 */         return this.messageField;
/* 129 */     }
/* 130 */ 
/* 131 */     ,onMessageBoxKeyPress: function(tf, e) {
/* 132 */         if ( ([10, 13].indexOf(e.getKey()) >= 0) && e.ctrlKey) {
/* 133 */             this.onAddCommentClick();
/* 134 */         }
/* 135 */     }
/* 136 */ 
/* 137 */     ,onMessageBoxAutoSize: function(field, width) {
/* 138 */         if(!field.isVisible()) {
/* 139 */             return;
/* 140 */         }
/* 141 */     }
/* 142 */ 
/* 143 */     /**
/* 144 *|      * placeholder handler, should be overwriten
/* 145 *|      * @param  component b
/* 146 *|      * @param  event e
/* 147 *|      * @return void
/* 148 *|      */
/* 149 */     ,onAddCommentClick: function(b, e) {
/* 150 */         this.fireEvent('addcomment', this.getValue(), e);

/* Comment.js */

/* 151 */     }
/* 152 */ 
/* 153 */     ,getValue: function() {
/* 154 */         return this.messageField.getValue();
/* 155 */     }
/* 156 */ 
/* 157 */     ,reset: function() {
/* 158 */         this.messageField.focus();
/* 159 */ 
/* 160 */         this.messageField.reset();
/* 161 */         this.messageField.autoSize();
/* 162 */ 
/* 163 */         delete this.draftCommentId;
/* 164 */ 
/* 165 */         this.updateFilesLabel();
/* 166 */     }
/* 167 */ 
/* 168 */     ,onAttachFileClick: function(b, e) {
/* 169 */         if(Ext.isEmpty(this.draftCommentId)) {
/* 170 */             this.draftCommentId = Ext.id();
/* 171 */         }
/* 172 */ 
/* 173 */         this.addUploaderListeners();
/* 174 */ 
/* 175 */         App.mainViewPort.fireEvent(
/* 176 */             'fileupload'
/* 177 */             ,{
/* 178 */                 pid: this.params.id
/* 179 */                 ,draftPid: this.draftCommentId
/* 180 */                 ,response: 'autorename'
/* 181 */             }
/* 182 */             ,e
/* 183 */         );
/* 184 */         // App.addFilesToUploadQueue(
/* 185 */         //     field.fileInputEl.dom.files
/* 186 */         //     ,{
/* 187 */         //     }
/* 188 */         // );
/* 189 */ 
/* 190 */ 
/* 191 */         this.updateFilesLabel();
/* 192 */     }
/* 193 */ 
/* 194 */     ,addUploaderListeners: function() {
/* 195 */         var fu = App.getFileUploader();
/* 196 */         if(fu) {
/* 197 */             fu.on(
/* 198 */                 'fileuploadend'
/* 199 */                 ,this.updateFilesLabel
/* 200 */                 ,this

/* Comment.js */

/* 201 */             );
/* 202 */             fu.on(
/* 203 */                 'progresschange'
/* 204 */                 ,this.updateFilesLabel
/* 205 */                 ,this
/* 206 */             );
/* 207 */         }
/* 208 */     }
/* 209 */ 
/* 210 */     ,removeUploaderListeners: function() {
/* 211 */         var fu = App.getFileUploader();
/* 212 */ 
/* 213 */         if(fu) {
/* 214 */             fu.un(
/* 215 */                 'fileuploadend'
/* 216 */                 ,this.updateFilesLabel
/* 217 */                 ,this
/* 218 */             );
/* 219 */             fu.un(
/* 220 */                 'progresschange'
/* 221 */                 ,this.updateFilesLabel
/* 222 */                 ,this
/* 223 */             );
/* 224 */         }
/* 225 */     }
/* 226 */ 
/* 227 */     ,updateFilesLabel: function() {
/* 228 */         var fu = App.getFileUploader()
/* 229 */             ,label = this.filesLabel;
/* 230 */ 
/* 231 */         if(Ext.isEmpty(this.draftCommentId) || Ext.isEmpty(fu)) {
/* 232 */             label.setValue('');
/* 233 */             return;
/* 234 */         }
/* 235 */ 
/* 236 */         var t = ''
/* 237 */             ,store = fu.store
/* 238 */             ,stats = fu.getStatsForPid(this.draftCommentId);
/* 239 */ 
/* 240 */         if(stats.pending > 0) {
/* 241 */             t = Ext.String.uncapitalize(L.Uploading) + ' <span style="color: #555">' +
/* 242 */                 Ext.String.repeat('●', stats.total - stats.pending) +
/* 243 */                 Ext.String.repeat('○', stats.pending) +
/* 244 */                 '</span>';
/* 245 */ 
/* 246 */             label.setValue(t);
/* 247 */         } else {
/* 248 */             if(stats.total > 0) {
/* 249 */                 t = stats.total + ' ' + Ext.String.uncapitalize(L.Files);
/* 250 */                 label.setValue(t);

/* Comment.js */

/* 251 */             } else {
/* 252 */                 label.setValue('');
/* 253 */             }
/* 254 */         }
/* 255 */     }
/* 256 */ });
/* 257 */ 

;
/* CommentLight.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.field.CommentLight', {
/* 4   */     extend: 'CB.field.Comment'
/* 5   */ 
/* 6   */     ,alias: 'CBFieldCommentLight'
/* 7   */ 
/* 8   */     ,xtype: 'CBFieldCommentLight'
/* 9   */ 
/* 10  */     ,initChildItems: function() {
/* 11  */         this.attachFileButton = new Ext.form.field.File({
/* 12  */             qtip: L.AttachFile
/* 13  */             ,buttonOnly: true
/* 14  */             ,buttonText: ''
/* 15  */             ,buttonConfig: {
/* 16  */                 iconCls: 'i-attach'
/* 17  */             }
/* 18  */             ,hidden: (Ext.isEmpty(this.params) || Ext.isEmpty(this.params.id))
/* 19  */             ,width: 24
/* 20  */             ,listeners: {
/* 21  */                 scope: this
/* 22  */                 ,change: this.onAttachFileClick
/* 23  */                 ,render: function (ed) {
/* 24  */                     ed.fileInputEl.set({
/* 25  */                         multiple: true
/* 26  */                     });
/* 27  */                 }
/* 28  */             }
/* 29  */         });
/* 30  */ 
/* 31  */         this.getTextInputField();
/* 32  */ 
/* 33  */ 
/* 34  */         this.filesLabel = new Ext.form.field.Display({
/* 35  */             cls: 'click'
/* 36  */             ,hidden: true //shows only when attaching files
/* 37  */         });
/* 38  */ 
/* 39  */         this.items = [
/* 40  */             {
/* 41  */                 xtype: 'label'
/* 42  */                 ,width: 50
/* 43  */                 ,padding: '2px 0'
/* 44  */                 ,html: '<img class="i32" src="' + App.config.photoPath +
/* 45  */                         App.loginData.id + '.jpg?32=' +
/* 46  */                         CB.DB.usersStore.getPhotoParam(App.loginData.id) +
/* 47  */                         '" title="' + getUserDisplayName(true) + '">'
/* 48  */             }
/* 49  */             ,{
/* 50  */                 xtype: 'panel'

/* CommentLight.js */

/* 51  */                 ,padding: 0
/* 52  */                 ,border: 0
/* 53  */                 ,flex: 1
/* 54  */                 ,layout: {
/* 55  */                     type: 'vbox'
/* 56  */                     ,align: 'stretch'
/* 57  */                 }
/* 58  */                 ,items: [
/* 59  */                     this.messageField
/* 60  */                     ,this.filesLabel
/* 61  */                 ]
/* 62  */             }
/* 63  */         ];
/* 64  */     }
/* 65  */ 
/* 66  */     ,getTextInputField: function(config) {
/* 67  */ 
/* 68  */         if(Ext.isEmpty(this.messageField)) {
/* 69  */             var cfg = {
/* 70  */                 flex: 1
/* 71  */                 ,grow: true
/* 72  */                 ,growMin: 10
/* 73  */                 ,minHeight: 10
/* 74  */                 ,enableKeyEvents: true
/* 75  */                 ,cls: "comment-input"
/* 76  */                 // ,style: 'margin-top: 5px; font-family: arial,sans-serif; font-size: 12px'
/* 77  */                 ,triggers: {
/* 78  */                     attach: {
/* 79  */                         cls: 'comment-trigger-attach'
/* 80  */                         ,scope: this
/* 81  */                         ,handler: this.onAttachFileClick
/* 82  */                     }
/* 83  */                     ,reply: {
/* 84  */                         cls: 'comment-trigger-reply'
/* 85  */                         ,scope: this
/* 86  */                         ,handler: this.onAddCommentClick
/* 87  */                     }
/* 88  */                 }
/* 89  */ 
/* 90  */                 ,plugins: [
/* 91  */                     {
/* 92  */                         ptype: 'CBPluginFieldDropDownList'
/* 93  */                     }
/* 94  */                 ]
/* 95  */ 
/* 96  */                 ,listeners: {
/* 97  */                     scope: this
/* 98  */                     ,keypress: this.onMessageBoxKeyPress
/* 99  */                     ,autosize: this.onMessageBoxAutoSize
/* 100 */                 }

/* CommentLight.js */

/* 101 */             };
/* 102 */ 
/* 103 */             if(config) {
/* 104 */                 Ext.apply(cfg, config);
/* 105 */             }
/* 106 */ 
/* 107 */             this.messageField = new Ext.form.TextArea(cfg);
/* 108 */         }
/* 109 */ 
/* 110 */         return this.messageField;
/* 111 */     }
/* 112 */ 
/* 113 */     ,updateFilesLabel: function() {
/* 114 */         var f = this.filesLabel;
/* 115 */         this.callParent(arguments);
/* 116 */ 
/* 117 */         f.setHidden(Ext.isEmpty(f.getValue()));
/* 118 */     }
/* 119 */ });
/* 120 */ 

;
/* Breadcrumb.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ Ext.define('CB.widget.Breadcrumb', {
/* 3   */     extend: 'Ext.view.View'
/* 4   */ 
/* 5   */     ,alias: 'CB.Breadcrumb'
/* 6   */ 
/* 7   */     ,xtype: 'CBBreadcrumb'
/* 8   */ 
/* 9   */     ,border: false
/* 10  */ 
/* 11  */     ,autoWidth: true
/* 12  */ 
/* 13  */     ,initComponent: function(){
/* 14  */         var store = new Ext.data.JsonStore({
/* 15  */                 proxy: {
/* 16  */                     type: 'memory'
/* 17  */                     ,reader: {
/* 18  */                         type: 'json'
/* 19  */                     }
/* 20  */                 }
/* 21  */                 ,fields: ['id', 'name', 'iconCls']
/* 22  */             });
/* 23  */ 
/* 24  */         var dir = (App.config.rtl === true) ? 'l' : 'r';
/* 25  */ 
/* 26  */         var tpl = new Ext.XTemplate(
/* 27  */                 '<div class="breadcrumb" role="navigation" style="right: auto">'
/* 28  */                     ,'<tpl for=".">'
/* 29  */                         ,'<div class="item" role="listitem">{[ (xindex < xcount) ? \'<span class="im-arr-' + dir + ' f' + dir + '"></span>\': \'\']}{name}</div>'
/* 30  */                     ,'</tpl>'
/* 31  */                 ,'</div>'
/* 32  */             );
/* 33  */ 
/* 34  */         Ext.apply(this, {
/* 35  */             tpl: tpl
/* 36  */             ,itemSelector: '.item'
/* 37  */             ,store: store
/* 38  */             ,listeners: {
/* 39  */                 scope: this
/* 40  */                 ,resize: this.onViewResize
/* 41  */                 ,itemclick: this.onItemClick
/* 42  */             }
/* 43  */         });
/* 44  */ 
/* 45  */         this.callParent(arguments);
/* 46  */     }
/* 47  */ 
/* 48  */     /**
/* 49  *|      * update breadcrumb value
/* 50  *|      * @param array pathArray

/* Breadcrumb.js *|

/* 51  *|      */
/* 52  */     ,setValue: function(pathArray) {
/* 53  */         this.store.loadData(pathArray);
/* 54  */     }
/* 55  */ 
/* 56  */     /**
/* 57  *|      * handler for resize event
/* 58  *|      * @param  object view
/* 59  *|      * @param  int width
/* 60  *|      * @param  int height
/* 61  *|      * @param  int oldWidth
/* 62  *|      * @param  int oldHeight
/* 63  *|      * @param  object eOpts
/* 64  *|      * @return void
/* 65  *|      */
/* 66  */     ,onViewResize: function(view, width, height, oldWidth, oldHeight, eOpts) {
/* 67  */         var node
/* 68  */             ,nodesWidth = 0
/* 69  */             ,minNodeWidth = 50
/* 70  */             ,parentNodesWidth
/* 71  */             ,parentNodesMaxWidth
/* 72  */             ,parentNodesWidthLimit
/* 73  */             ,widthDelta
/* 74  */             ,smallerNodesDelta = 0
/* 75  */             ,store = this.store
/* 76  */             ,lastRecord = store.last()
/* 77  */             ,lastNode = view.getNode(lastRecord);
/* 78  */ 
/* 79  */ 
/* 80  */         // get common items width
/* 81  */         store.each(
/* 82  */             function(r) {
/* 83  */                 var node = view.getNode(r);
/* 84  */                 nodesWidth += node.scrollWidth;
/* 85  */             }
/* 86  */             ,this
/* 87  */         );
/* 88  */ 
/* 89  */         if(nodesWidth > width) {
/* 90  */             // exclude last item width and we get target width of parent nodes
/* 91  */             parentNodesMaxWidth = width - lastNode.scrollWidth;
/* 92  */ 
/* 93  */             //get the limit width
/* 94  */             parentNodesWidthLimit = parentNodesMaxWidth / (store.getCount() -1);
/* 95  */ 
/* 96  */             //real width of parnet nodes
/* 97  */             parentNodesWidth = nodesWidth - lastNode.scrollWidth;
/* 98  */ 
/* 99  */             //iterate parent nodes an calculate delta for smaller nodes width than parentNodesWidthLimit
/* 100 */             if(parentNodesWidthLimit >= minNodeWidth) {

/* Breadcrumb.js */

/* 101 */                 store.each(
/* 102 */                     function(r) {
/* 103 */                         if(r != lastRecord) {
/* 104 */                             node = view.getNode(r);
/* 105 */                             if(node.scrollWidth < parentNodesWidthLimit) {
/* 106 */                                 smallerNodesDelta += node.scrollWidth;
/* 107 */                             }
/* 108 */                         }
/* 109 */                     }
/* 110 */                     ,this
/* 111 */                 );
/* 112 */             }
/* 113 */ 
/* 114 */             //increase parentNodesWidthLimit with smallerNodesDelta
/* 115 */             parentNodesWidthLimit += smallerNodesDelta;
/* 116 */ 
/* 117 */             //now iterate parent nodes an set style width
/* 118 */             store.each(
/* 119 */                 function(r) {
/* 120 */                     if(r != lastRecord) {
/* 121 */                         node = view.getNode(r);
/* 122 */                         if(parentNodesWidthLimit < minNodeWidth) {
/* 123 */                             node.setAttribute('style', 'width: 0; padding: 0');
/* 124 */                         } else {
/* 125 */                             if(node.scrollWidth > parentNodesWidthLimit) {
/* 126 */                                 node.setAttribute('style', 'width: ' + parentNodesWidthLimit + 'px');
/* 127 */                             } else {
/* 128 */                                 node.removeAttribute('style');
/* 129 */                             }
/* 130 */                         }
/* 131 */                     }
/* 132 */                 }
/* 133 */                 ,this
/* 134 */             );
/* 135 */ 
/* 136 */ 
/* 137 */         } else {//clear items widths
/* 138 */             store.each(
/* 139 */                 function(r) {
/* 140 */                     node = view.getNode(r);
/* 141 */                     node.removeAttribute('style');
/* 142 */                 }
/* 143 */                 ,this
/* 144 */             );
/* 145 */         }
/* 146 */     }
/* 147 */ }
/* 148 */ );
/* 149 */ 

;
/* DataSorter.js */

/* 1   */ Ext.define('CB.widget.DataSorter', {
/* 2   */     extend: 'Ext.window.Window'
/* 3   */ 
/* 4   */     ,requires: [
/* 5   */         'Ext.button.Button'
/* 6   */         ,'Ext.grid.Panel'
/* 7   */     ]
/* 8   */ 
/* 9   */     ,alias: 'widget.DataSorter'
/* 10  */ 
/* 11  */     ,xtype: 'CBDataSorter'
/* 12  */ 
/* 13  */     ,alwaysOnTop: true
/* 14  */ 
/* 15  */     ,modal: true
/* 16  */ 
/* 17  */     ,closable: true
/* 18  */ 
/* 19  */     ,closeAction: 'destroy'
/* 20  */ 
/* 21  */     ,minimizable: false
/* 22  */ 
/* 23  */     ,minWidth: 250
/* 24  */     ,minHeight: 300
/* 25  */     ,width: 350
/* 26  */     ,height: 400
/* 27  */ 
/* 28  */     ,initComponent: function () {
/* 29  */         var me = this;
/* 30  */ 
/* 31  */         this.store = new Ext.data.JsonStore({
/* 32  */             model: 'Generic'
/* 33  */             ,proxy: {
/* 34  */                 type: 'memory'
/* 35  */                 ,reader: {
/* 36  */                     type: 'json'
/* 37  */                 }
/* 38  */             }
/* 39  */         });
/* 40  */ 
/* 41  */         this.grid = Ext.create('Ext.grid.Panel', {
/* 42  */             border: false
/* 43  */             ,store: this.store
/* 44  */             ,columns: [
/* 45  */                 {
/* 46  */                     text: L.Name
/* 47  */                     ,dataIndex: 'name'
/* 48  */                     ,sortable: false
/* 49  */                     ,flex: true
/* 50  */                     ,renderer: function(v, m, r, ri, ci, s){

/* DataSorter.js */

/* 51  */                         m.css = 'icon-grid-column-top '+ r.get('iconCls');
/* 52  */                         v = '<span class="order-arrows"><b class="click arrow-up">&nbsp;</b><b class="click arrow-down">&nbsp;</b></span><span class="n">' + v + '</span>';
/* 53  */                         return v;
/* 54  */                     }
/* 55  */                 }
/* 56  */             ]
/* 57  */             ,viewConfig: {
/* 58  */                 plugins: {
/* 59  */                     ptype: 'gridviewdragdrop',
/* 60  */                     dragText: L.ReorderDDText
/* 61  */                 }
/* 62  */                 ,listeners: {
/* 63  */                     scope: this
/* 64  */                     ,itemclick: this.onGridItemClick
/* 65  */                 }
/* 66  */             }
/* 67  */         });
/* 68  */ 
/* 69  */ 
/* 70  */         Ext.apply(me, {
/* 71  */             title: L.SortValue
/* 72  */             ,border: false
/* 73  */             ,layout: 'fit'
/* 74  */             ,cls: 'x-panel-white'
/* 75  */             ,tbar: Ext.create('Ext.panel.Panel', {
/* 76  */                 autoHeight  : true
/* 77  */                 ,border: false
/* 78  */                 ,bodyPadding: 3
/* 79  */                 ,html: L.ReorderItemsMsg
/* 80  */             })
/* 81  */             ,items: [
/* 82  */                 this.grid
/* 83  */             ]
/* 84  */             ,buttons: [
/* 85  */                 '->'
/* 86  */                 ,{
/* 87  */                     text: Ext.MessageBox.buttonText.ok
/* 88  */                     ,scope: this
/* 89  */                     ,handler: this.onOkClick
/* 90  */                 },{
/* 91  */                     text: L.Cancel
/* 92  */                     ,scope: this
/* 93  */                     ,handler: this.destroy
/* 94  */                 }
/* 95  */             ]
/* 96  */             ,listeners: {
/* 97  */                 scope: this
/* 98  */                 ,afterrender: this.onAfterRender
/* 99  */             }
/* 100 */         });

/* DataSorter.js */

/* 101 */ 
/* 102 */         me.callParent(arguments);
/* 103 */     }
/* 104 */ 
/* 105 */     ,onAfterRender: function() {
/* 106 */         var map = new Ext.util.KeyMap({
/* 107 */             target: this.grid.getView().getEl()
/* 108 */             ,binding: [{
/* 109 */                 key: [10,13]
/* 110 */                 ,scope: this
/* 111 */                 ,fn: this.onOkClick
/* 112 */             }, {
/* 113 */                 key: Ext.event.Event.UP
/* 114 */                 ,ctrl: true
/* 115 */                 ,shift: false
/* 116 */                 ,scope: this
/* 117 */                 ,fn: this.onMoveUpClick
/* 118 */             }, {
/* 119 */                 key: Ext.event.Event.DOWN
/* 120 */                 ,ctrl: true
/* 121 */                 ,shift: false
/* 122 */                 ,scope: this
/* 123 */                 ,fn: this.onMoveDownClick
/* 124 */             }]
/* 125 */         });
/* 126 */ 
/* 127 */         var r = this.store.getAt(0)
/* 128 */             ,v = this.grid.getView();
/* 129 */         if(r) {
/* 130 */             //select
/* 131 */             v.getSelectionModel().select([r]);
/* 132 */             //focus
/* 133 */             v.getNavigationModel().setPosition(0, 0);
/* 134 */             v.focus(10);
/* 135 */             v.focusRow(r, 100);
/* 136 */         }
/* 137 */     }
/* 138 */ 
/* 139 */     ,onMoveUpClick: function(key, e) {
/* 140 */         var v = this.grid.getView()
/* 141 */             ,s = v.getSelection()
/* 142 */             ,idx;
/* 143 */ 
/* 144 */         if(!Ext.isEmpty(s)) {
/* 145 */             idx = this.store.indexOf(s[0]);
/* 146 */             if(idx > 0) {
/* 147 */                 v.plugins[0].dropZone.handleNodeDrop(
/* 148 */                     {records: s, view: v}
/* 149 */                     ,this.store.getAt(idx - 1)
/* 150 */                     ,'before'

/* DataSorter.js */

/* 151 */                 );
/* 152 */             }
/* 153 */         }
/* 154 */     }
/* 155 */ 
/* 156 */     ,onMoveDownClick: function(key, e) {
/* 157 */         var v = this.grid.getView()
/* 158 */             ,s = v.getSelection()
/* 159 */             ,idx;
/* 160 */ 
/* 161 */         if(!Ext.isEmpty(s)) {
/* 162 */             idx = this.store.indexOf(s[0]);
/* 163 */             if((idx + 1) < this.store.getCount()) {
/* 164 */                 v.plugins[0].dropZone.handleNodeDrop(
/* 165 */                     {records: s, view: v}
/* 166 */                     ,this.store.getAt(idx + 1)
/* 167 */                     ,'after'
/* 168 */                 );
/* 169 */             }
/* 170 */         }
/* 171 */     }
/* 172 */ 
/* 173 */     ,onGridItemClick: function(view, record, item, index, e, eOpts) {
/* 174 */         var el = e.getTarget('.arrow-down');
/* 175 */         if(el) {
/* 176 */             this.onMoveDownClick();
/* 177 */         } else {
/* 178 */             el = e.getTarget('.arrow-up');
/* 179 */             if(el) {
/* 180 */                 this.onMoveUpClick();
/* 181 */             }
/* 182 */         }
/* 183 */     }
/* 184 */ 
/* 185 */     ,onOkClick: function (b, e) {
/* 186 */         var st = this.store
/* 187 */             ,rez = st.collect('id');
/* 188 */ 
/* 189 */         this.fireEvent('change', this, rez);
/* 190 */     }
/* 191 */ });
/* 192 */ 

;
/* LeafletPanel.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.widget.LeafletPanel', {
/* 4  */     extend: 'Ext.Panel'
/* 5  */ 
/* 6  */     ,alias: 'CB.LeafletPanel'
/* 7  */ 
/* 8  */     ,xtype: 'CBLeafletPanel'
/* 9  */ 
/* 10 */     ,initComponent: function(){
/* 11 */         Ext.apply(this, {
/* 12 */             border: false
/* 13 */             ,listeners: {
/* 14 */                 scope: this
/* 15 */                 ,boxready: this.onBoxReady
/* 16 */             }
/* 17 */         });
/* 18 */ 
/* 19 */         this.callParent(arguments);
/* 20 */     }
/* 21 */ 
/* 22 */     ,onBoxReady: function(panel) {
/* 23 */         if (!window.LL) {
/* 24 */             return alert('No Leaflet library');
/* 25 */         }
/* 26 */ 
/* 27 */         var map = LL.map(this.body.id)
/* 28 */             // create the tile layer with correct attribution
/* 29 */             ,osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'
/* 30 */ 
/* 31 */             ,osm = new LL.TileLayer(
/* 32 */                 osmUrl
/* 33 */                 ,{
/* 34 */                     minZoom: 0
/* 35 */                     ,maxZoom: 18
/* 36 */                 }
/* 37 */             );
/* 38 */ 
/* 39 */         this.map = map;
/* 40 */ 
/* 41 */         map.addLayer(osm);
/* 42 */ 
/* 43 */         this.fireEvent('mapready', this);
/* 44 */ 
/* 45 */         map.on('click', this.onMapClick, this);
/* 46 */     }
/* 47 */ 
/* 48 */     /**
/* 49 *|      * onMapClick
/* 50 *|      * @param  object e

/* LeafletPanel.js *|

/* 51 *|      *          containerPoint: o.Point
/* 52 *|      *           latlng: o.LatLng
/* 53 *|      *           layerPoint: o.Point
/* 54 *|      *           originalEvent: MouseEvent
/* 55 *|      *           target: e
/* 56 *|      *           type: "click"
/* 57 *|      * @return void
/* 58 *|      */
/* 59 */     ,onMapClick: function(e) {
/* 60 */         this.fireEvent('mapclick', this, e);
/* 61 */     }
/* 62 */ 
/* 63 */     ,setViewConfig: function(cfg) {
/* 64 */         var dl = Ext.valueFrom(cfg.defaultLocation, {})
/* 65 */             ,lat = Ext.valueFrom(dl.lat, 0)
/* 66 */             ,lng = Ext.valueFrom(dl.lng, 0)
/* 67 */             ,zoom = Ext.valueFrom(dl.zoom, 3);
/* 68 */ 
/* 69 */         if (!Ext.isEmpty(cfg.url)) {
/* 70 */             this.map.eachLayer(
/* 71 */                 function(l) {
/* 72 */                     if(l && l.setUrl) {
/* 73 */                         l.setUrl(cfg.url);
/* 74 */                     }
/* 75 */                 }
/* 76 */             );
/* 77 */         }
/* 78 */ 
/* 79 */         this.map.setView(
/* 80 */             new LL.LatLng(lat, lng)
/* 81 */             ,zoom
/* 82 */             ,{
/* 83 */                 reset: true
/* 84 */             }
/* 85 */         );
/* 86 */     }
/* 87 */ 
/* 88 */     ,setView: function(ll, z, o) {
/* 89 */         this.map.setView(ll, z, o);
/* 90 */     }
/* 91 */ }
/* 92 */ );
/* 93 */ 

;
/* LeafletWindow.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.widget.LeafletWindow', {
/* 4   */     extend: 'Ext.Window'
/* 5   */ 
/* 6   */     ,alias: 'CB.LeafletWindow'
/* 7   */ 
/* 8   */     ,xtype: 'CBLeafletWindow'
/* 9   */ 
/* 10  */     ,height: 400
/* 11  */     ,width: 700
/* 12  */     ,maximizable: true
/* 13  */     ,minimizable: true
/* 14  */ 
/* 15  */     ,initComponent: function(){
/* 16  */         this.actions = {
/* 17  */             save: new Ext.Action({
/* 18  */                 text: L.Save
/* 19  */                 ,iconCls: 'icon-save'
/* 20  */                 ,disabled: true
/* 21  */                 ,scope: this
/* 22  */                 ,handler: this.onSaveClick
/* 23  */             })
/* 24  */ 
/* 25  */             ,cancel: new Ext.Action({
/* 26  */                 text: L.Cancel
/* 27  */                 ,iconCls: 'i-cancel'
/* 28  */                 ,scope: this
/* 29  */                 ,handler: this.close
/* 30  */             })
/* 31  */ 
/* 32  */             ,set: new Ext.Action({
/* 33  */                 text: L.Set
/* 34  */                 ,scope: this
/* 35  */                 ,handler: this.onSetClick
/* 36  */             })
/* 37  */         };
/* 38  */ 
/* 39  */         this.mapPanel = Ext.create('CB.LeafletPanel', {
/* 40  */             listeners: {
/* 41  */                 scope: this
/* 42  */                 ,mapready: this.onMapReady
/* 43  */                 ,mapclick: this.onMapClick
/* 44  */             }
/* 45  */         });
/* 46  */ 
/* 47  */         this.latEd = new Ext.form.TextField({
/* 48  */             enableKeyEvents: true
/* 49  */             ,fieldLabel: L.Latitude
/* 50  */             ,labelWidth: 50

/* LeafletWindow.js */

/* 51  */             ,width: 120
/* 52  */             ,maskRe: /[\-\d\.]/
/* 53  */             ,listeners: {
/* 54  */                 specialkey: this.onEditorEnterPress
/* 55  */                 ,scope: this
/* 56  */             }
/* 57  */         });
/* 58  */ 
/* 59  */         this.longEd = new Ext.form.TextField({
/* 60  */             enableKeyEvents: true
/* 61  */             ,fieldLabel: L.Longitude
/* 62  */             ,labelWidth: 55
/* 63  */             ,width: 125
/* 64  */             ,maskRe: /[\-\d\.]/
/* 65  */             ,listeners: {
/* 66  */                 specialkey: this.onEditorEnterPress
/* 67  */                 ,scope: this
/* 68  */             }
/* 69  */         });
/* 70  */ 
/* 71  */         Ext.apply(this, {
/* 72  */             layout: 'fit'
/* 73  */             ,border: false
/* 74  */             // ,bodyBorder: false
/* 75  */             ,cls: 'x-panel-white'
/* 76  */             ,tbar: [
/* 77  */                 this.actions.save
/* 78  */                 ,this.actions.cancel
/* 79  */                 ,'->'
/* 80  */                 ,this.latEd
/* 81  */                 ,{
/* 82  */                     xtype: 'tbspacer'
/* 83  */                     ,width: 10
/* 84  */                 }
/* 85  */                 ,this.longEd
/* 86  */                 ,this.actions.set
/* 87  */             ]
/* 88  */             ,items: [
/* 89  */                 this.mapPanel
/* 90  */             ]
/* 91  */             ,bbar: [
/* 92  */                 {
/* 93  */                     xtype: 'label'
/* 94  */                     ,text: 'Location'
/* 95  */                 }
/* 96  */             ]
/* 97  */         });
/* 98  */ 
/* 99  */         this.callParent(arguments);
/* 100 */     }

/* LeafletWindow.js */

/* 101 */ 
/* 102 */     ,onMapReady: function(p) {
/* 103 */         var d = this.initialConfig.data
/* 104 */             ,cfg = Ext.valueFrom(d.cfg, {});
/* 105 */ 
/* 106 */         if (!Ext.isEmpty(d.value)) {
/* 107 */ 
/* 108 */             var a = d.value.split(',')
/* 109 */                 ,lat = a[0]
/* 110 */                 ,lng = a[1];
/* 111 */ 
/* 112 */             cfg.defaultLocation = {
/* 113 */                 lat: lat
/* 114 */                 ,lng: lng
/* 115 */             };
/* 116 */ 
/* 117 */             this.latEd.setValue(lat);
/* 118 */             this.longEd.setValue(lng);
/* 119 */ 
/* 120 */             this.getMarker().setLatLng(new LL.LatLng(lat, lng));
/* 121 */         }
/* 122 */ 
/* 123 */         p.setViewConfig(cfg);
/* 124 */     }
/* 125 */ 
/* 126 */     ,onMapClick: function(p, e) {
/* 127 */         var ll = e.latlng.wrap()
/* 128 */             ,lat = ll.lat.toFixed(4)
/* 129 */             ,lng = ll.lng.toFixed(4)
/* 130 */             ,marker = this.getMarker();
/* 131 */ 
/* 132 */         this.latEd.setValue(lat);
/* 133 */         this.longEd.setValue(lng);
/* 134 */ 
/* 135 */         marker.setLatLng(ll);
/* 136 */         this.actions.save.setDisabled(false);
/* 137 */     }
/* 138 */ 
/* 139 */     ,onSaveClick: function() {
/* 140 */         var d  = this.initialConfig.data;
/* 141 */ 
/* 142 */         if (d.callback) {
/* 143 */             var f = Ext.Function.bind(
/* 144 */                 d.callback
/* 145 */                 ,Ext.valueFrom(d.scope, this)
/* 146 */                 ,[
/* 147 */                     this
/* 148 */                     ,this.latEd.getValue() + ',' + this.longEd.getValue()
/* 149 */                 ]
/* 150 */             );

/* LeafletWindow.js */

/* 151 */ 
/* 152 */             f();
/* 153 */         }
/* 154 */ 
/* 155 */         this.close();
/* 156 */     }
/* 157 */ 
/* 158 */     ,getMarker: function(ll) {
/* 159 */         if(!this.marker) {
/* 160 */             this.marker = LL.marker(new LL.LatLng(0, 0), {
/* 161 */                 icon:  LL.icon({
/* 162 */                     iconUrl: '/css/i/marker.png',
/* 163 */                     iconSize: [25, 41],
/* 164 */                     'marker-color': 'ff8888'
/* 165 */                 }),
/* 166 */                 draggable: true
/* 167 */             });
/* 168 */ 
/* 169 */             this.marker.on('dragend', this.onMarkerDragEnd, this);
/* 170 */ 
/* 171 */             this.marker.addTo(this.mapPanel.map);
/* 172 */         }
/* 173 */ 
/* 174 */         return this.marker;
/* 175 */     }
/* 176 */ 
/* 177 */     ,onMarkerDragEnd: function(e) {
/* 178 */         var ll =  e.target.getLatLng().wrap()
/* 179 */             ,lat = ll.lat.toFixed(4)
/* 180 */             ,lng = ll.lng.toFixed(4);
/* 181 */ 
/* 182 */         this.latEd.setValue(lat);
/* 183 */         this.longEd.setValue(lng);
/* 184 */         this.actions.save.setDisabled(false);
/* 185 */     }
/* 186 */ 
/* 187 */     ,onEditorEnterPress: function (ed, e) {
/* 188 */         if (e.getKey() == e.ENTER) {
/* 189 */             this.onSetClick();
/* 190 */         }
/* 191 */     }
/* 192 */ 
/* 193 */     ,onSetClick: function(b, e) {
/* 194 */         var lat = this.latEd.getValue()
/* 195 */             ,lng = this.longEd.getValue();
/* 196 */ 
/* 197 */         if (!Ext.isEmpty(lat) && !Ext.isEmpty(lng)) {
/* 198 */             var ll = new LL.LatLng(lat, lng);
/* 199 */             this.getMarker().setLatLng(ll);
/* 200 */             this.mapPanel.map.setView(ll);

/* LeafletWindow.js */

/* 201 */         }
/* 202 */     }
/* 203 */ }
/* 204 */ );
/* 205 */ 

;
/* TaskBar.js */

/* 1   */ Ext.define('CB.widget.TaskBar', {
/* 2   */     extend: 'Ext.toolbar.Toolbar'
/* 3   */ 
/* 4   */     ,requires: [
/* 5   */         'Ext.button.Button'
/* 6   */         ,'Ext.resizer.Splitter'
/* 7   */         ,'Ext.menu.Menu'
/* 8   */     ]
/* 9   */ 
/* 10  */     ,alias: 'widget.taskbar'
/* 11  */ 
/* 12  */     ,cls: 'cb-taskbar'
/* 13  */ 
/* 14  */     ,alwaysOnTop: true
/* 15  */ 
/* 16  */     ,initComponent: function () {
/* 17  */         var me = this;
/* 18  */ 
/* 19  */         me.windowBar = new Ext.toolbar.Toolbar(me.getWindowBarConfig());
/* 20  */ 
/* 21  */         me.tray = new Ext.toolbar.Toolbar(me.getTrayConfig());
/* 22  */ 
/* 23  */         me.items = [
/* 24  */             me.windowBar
/* 25  */             ,'-'
/* 26  */             ,me.tray
/* 27  */         ];
/* 28  */ 
/* 29  */         me.windowMenu = new Ext.menu.Menu({
/* 30  */             defaultAlign: 'br-tr'
/* 31  */             ,items: [
/* 32  */                 {text: L.Restore, handler: me.onWindowMenuRestore, scope: me}
/* 33  */                 ,{text: L.Minimize, handler: me.onWindowMenuMinimize, scope: me}
/* 34  */                 ,{text: L.Maximize, handler: me.onWindowMenuMaximize, scope: me}
/* 35  */                 ,'-'
/* 36  */                 ,{text: L.Close, handler: me.onWindowMenuClose, scope: me}
/* 37  */             ]
/* 38  */             ,listeners: {
/* 39  */                 scope: me
/* 40  */                 ,beforeshow: me.onWindowMenuBeforeShow
/* 41  */                 ,hide: me.onWindowMenuHide
/* 42  */             }
/* 43  */         });
/* 44  */ 
/* 45  */         me.callParent();
/* 46  */     }
/* 47  */ 
/* 48  */     ,afterLayout: function () {
/* 49  */         var me = this;
/* 50  */         me.callParent();

/* TaskBar.js */

/* 51  */         me.windowBar.el.on(
/* 52  */             'contextmenu'
/* 53  */             ,me.onButtonContextMenu
/* 54  */             ,me
/* 55  */         );
/* 56  */     },
/* 57  */ 
/* 58  */     /**
/* 59  *|      * This method returns the configuration object for the Tray toolbar. A derived
/* 60  *|      * class can override this method, call the base version to build the config and
/* 61  *|      * then modify the returned object before returning it.
/* 62  *|      */
/* 63  */     getTrayConfig: function () {
/* 64  */         var ret = {
/* 65  */             items: this.trayItems
/* 66  */         };
/* 67  */         delete this.trayItems;
/* 68  */ 
/* 69  */         return ret;
/* 70  */     }
/* 71  */ 
/* 72  */     ,getWindowBarConfig: function () {
/* 73  */         return {
/* 74  */             flex: 1
/* 75  */             ,cls: 'cb-windowbar'
/* 76  */             ,items: ['&#160;']
/* 77  */             ,layout: {
/* 78  */                 overflowHandler: 'Scroller'
/* 79  */             }
/* 80  */         };
/* 81  */     }
/* 82  */ 
/* 83  */     ,getWindowBtnFromEl: function (el) {
/* 84  */         var c = this.windowBar.getChildByElement(el);
/* 85  */         return c || null;
/* 86  */     }
/* 87  */ 
/* 88  */     ,onButtonContextMenu: function (e) {
/* 89  */         var me = this
/* 90  */             ,t = e.getTarget()
/* 91  */             ,btn = me.getWindowBtnFromEl(t);
/* 92  */ 
/* 93  */         if (btn) {
/* 94  */             e.stopEvent();
/* 95  */             me.windowMenu.theWin = btn.win;
/* 96  */             me.windowMenu.showBy(t);
/* 97  */         }
/* 98  */     }
/* 99  */ 
/* 100 */     //------------------------------------------------------

/* TaskBar.js */

/* 101 */     // Window context menu handlers
/* 102 */ 
/* 103 */     ,onWindowMenuBeforeShow: function (menu) {
/* 104 */         var items = menu.items.items
/* 105 */             ,win = menu.theWin;
/* 106 */         items[0].setDisabled(win.maximized !== true && win.hidden !== true); // Restore
/* 107 */         items[1].setDisabled(win.minimized === true); // Minimize
/* 108 */         items[2].setDisabled(win.maximized === true || win.hidden === true); // Maximize
/* 109 */     }
/* 110 */ 
/* 111 */     ,onWindowMenuHide: function (menu) {
/* 112 */         Ext.defer(
/* 113 */             function() {
/* 114 */                 menu.theWin = null;
/* 115 */             }
/* 116 */             ,1
/* 117 */         );
/* 118 */     }
/* 119 */ 
/* 120 */     ,onWindowMenuRestore: function () {
/* 121 */         var me = this
/* 122 */             ,win = me.windowMenu.theWin;
/* 123 */ 
/* 124 */         me.restoreWindow(win);
/* 125 */     }
/* 126 */ 
/* 127 */     ,onWindowMenuMinimize: function () {
/* 128 */         var me = this
/* 129 */             ,win = me.windowMenu.theWin;
/* 130 */ 
/* 131 */         win.minimize();
/* 132 */     }
/* 133 */ 
/* 134 */     ,onWindowMenuMaximize: function () {
/* 135 */         var me = this
/* 136 */             ,win = me.windowMenu.theWin;
/* 137 */ 
/* 138 */         win.maximize();
/* 139 */         win.toFront();
/* 140 */     }
/* 141 */ 
/* 142 */     ,onWindowMenuClose: function () {
/* 143 */         var me = this
/* 144 */             ,win = me.windowMenu.theWin;
/* 145 */ 
/* 146 */         win.close();
/* 147 */     }
/* 148 */ 
/* 149 */     ,onWindowBtnClick: function (btn) {
/* 150 */         var win = btn.win;

/* TaskBar.js */

/* 151 */ 
/* 152 */         if (win.minimized || win.hidden) {
/* 153 */             btn.disable();
/* 154 */             win.show(
/* 155 */                 null
/* 156 */                 ,function() {
/* 157 */                     btn.enable();
/* 158 */                 }
/* 159 */             );
/* 160 */         } else if (win.active) {
/* 161 */             btn.disable();
/* 162 */             win.on(
/* 163 */                 'hide'
/* 164 */                 ,function() {
/* 165 */                     btn.enable();
/* 166 */                 }
/* 167 */                 ,null
/* 168 */                 ,{single: true}
/* 169 */             );
/* 170 */             win.minimize();
/* 171 */         } else {
/* 172 */             win.toFront();
/* 173 */         }
/* 174 */     }
/* 175 */ 
/* 176 */     ,addTaskButton: function(win) {
/* 177 */         var config = {
/* 178 */             iconCls: win.iconCls
/* 179 */             ,textAlign: 'left'
/* 180 */             ,enableToggle: true
/* 181 */             ,toggleGroup: 'all'
/* 182 */             ,width: 140
/* 183 */             ,margin: '0 2 0 3'
/* 184 */             ,text: Ext.util.Format.ellipsis(win.title, 20)
/* 185 */             ,listeners: {
/* 186 */                 // click: this.onWindowBtnClick
/* 187 */                 toggle: this.onWindowBtnClick
/* 188 */                 ,scope: this
/* 189 */             }
/* 190 */             ,win: win
/* 191 */         };
/* 192 */ 
/* 193 */         var cmp = this.windowBar.add(config);
/* 194 */ 
/* 195 */         this.setActiveButton(cmp);
/* 196 */ 
/* 197 */         win.on('activate', this.markActive, this);
/* 198 */         win.on('beforeshow', this.markActive, this);
/* 199 */         win.on('deactivate', this.markInactive, this);
/* 200 */         win.on('minimize', this.minimizeWin, this);

/* TaskBar.js */

/* 201 */         win.on('beforedestroy', this.removeWin, this);
/* 202 */         win.on('titlechange', this.onWindowTitleChange, this);
/* 203 */         win.on('iconclschange', this.onWindowIconChange, this);
/* 204 */ 
/* 205 */         return cmp;
/* 206 */     }
/* 207 */ 
/* 208 */     ,removeTaskButton: function (btn) {
/* 209 */         var found
/* 210 */             ,me = this;
/* 211 */ 
/* 212 */         me.windowBar.items.each(
/* 213 */             function (item) {
/* 214 */                 if (item === btn) {
/* 215 */                     found = item;
/* 216 */                 }
/* 217 */                 return !found;
/* 218 */             }
/* 219 */         );
/* 220 */         if (found) {
/* 221 */             me.windowBar.remove(found);
/* 222 */         }
/* 223 */ 
/* 224 */         return found;
/* 225 */     }
/* 226 */ 
/* 227 */     ,setActiveButton: function(btn) {
/* 228 */         this.windowBar.items.each(
/* 229 */             function (item) {
/* 230 */                 if (item.isButton) {
/* 231 */                     item.toggle(false, true);
/* 232 */                 }
/* 233 */             }
/* 234 */         );
/* 235 */         if (btn) {
/* 236 */             btn.toggle(true, true);
/* 237 */             btn.win.active = true;
/* 238 */         }
/* 239 */     }
/* 240 */ 
/* 241 */     ,markActive: function(win) {
/* 242 */         if (this.activeWindow && this.activeWindow != win) {
/* 243 */             this.markInactive(this.activeWindow);
/* 244 */         }
/* 245 */ 
/* 246 */         this.setActiveButton(win.taskButton);
/* 247 */         this.activeWindow = win;
/* 248 */         win.minimized = false;
/* 249 */         win.active = true;
/* 250 */     }

/* TaskBar.js */

/* 251 */ 
/* 252 */     ,markInactive: function(win) {
/* 253 */         if (win == this.activeWindow) {
/* 254 */             this.activeWindow = null;
/* 255 */             if(win.taskButton.el) {
/* 256 */                 win.taskButton.toggle(false, true);
/* 257 */             }
/* 258 */ 
/* 259 */             delete win.active;
/* 260 */         }
/* 261 */     }
/* 262 */ 
/* 263 */     ,minimizeWin: function(win) {
/* 264 */         win.minimized = true;
/* 265 */         win.hide();
/* 266 */         this.markInactive(win);
/* 267 */     }
/* 268 */ 
/* 269 */     ,removeWin: function(win) {
/* 270 */         this.removeTaskButton(win.taskButton);
/* 271 */     }
/* 272 */ 
/* 273 */     ,restoreWindow: function (win) {
/* 274 */         if (win.isVisible()) {
/* 275 */             win.restore();
/* 276 */             win.toFront();
/* 277 */         } else {
/* 278 */             win.show();
/* 279 */         }
/* 280 */         return win;
/* 281 */     }
/* 282 */ 
/* 283 */     ,onWindowTitleChange: function(win, newTitle, oldTitle, eOpts) {
/* 284 */         win.taskButton.setText(newTitle);
/* 285 */     }
/* 286 */ 
/* 287 */     ,onWindowIconChange: function(win, newIconCls, oldIconCls, eOpts) {
/* 288 */         win.taskButton.setIconCls(newIconCls);
/* 289 */     }
/* 290 */ });
/* 291 */ 

;
/* Base.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.widget.block.Base', {
/* 4  */     extend: 'Ext.Panel'
/* 5  */ 
/* 6  */     ,alias: 'CBWidgetBlockBase'
/* 7  */ 
/* 8  */     ,xtype: 'CBWidgetBlockBase'
/* 9  */ 
/* 10 */     ,initComponent: function(){
/* 11 */         Ext.apply(this, {
/* 12 */             border: false
/* 13 */             ,cls: 'panel-header-nobg'
/* 14 */         });
/* 15 */ 
/* 16 */         this.callParent(arguments);
/* 17 */     }
/* 18 */ });
/* 19 */ 

;
/* Chart.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.widget.block.Chart', {
/* 4   */     extend: 'CB.widget.block.Base'
/* 5   */ 
/* 6   */     ,alias: 'CBWidgetBlockChart'
/* 7   */ 
/* 8   */     ,xtype: 'CBWidgetBlockChart'
/* 9   */ 
/* 10  */     ,width: 300
/* 11  */     ,height: 300
/* 12  */     ,minWidth: 200
/* 13  */     ,minHeight: 200
/* 14  */ 
/* 15  */     ,initComponent: function(){
/* 16  */ 
/* 17  */         Ext.apply(this, {
/* 18  */             border: false
/* 19  */             ,autoHeight: true
/* 20  */ 
/* 21  */             ,layout: {
/* 22  */                 type: 'vbox'
/* 23  */                 ,pack: 'top'
/* 24  */             }
/* 25  */ 
/* 26  */             ,listeners: {
/* 27  */                 scope: this
/* 28  */                 ,afterrender: this.onAfterRender
/* 29  */             }
/* 30  */         });
/* 31  */ 
/* 32  */         this.callParent(arguments);
/* 33  */ 
/* 34  */         this.initSeriesStyles();
/* 35  */ 
/* 36  */         this.initChartConfigs();
/* 37  */     }
/* 38  */ 
/* 39  */     ,initSeriesStyles: function() {
/* 40  */         this.seriesStyles = [];
/* 41  */         for (var i = 0; i < App.colors.length; i++) {
/* 42  */             this.seriesStyles.push({
/* 43  */                 color: App.colors[i]
/* 44  */             });
/* 45  */         }
/* 46  */     }
/* 47  */ 
/* 48  */     ,initChartConfigs: function() {
/* 49  */         this.chartDataStore = new Ext.data.JsonStore({
/* 50  */             autoDestroy: false

/* Chart.js */

/* 51  */             ,model: 'GenericCount'
/* 52  */         });
/* 53  */ 
/* 54  */         this.chartConfigs = {
/* 55  */             'bar': {
/* 56  */                 width: '100%'
/* 57  */                 ,store: this.chartDataStore
/* 58  */                 ,colors: App.colors
/* 59  */                 ,axes: [
/* 60  */                     {
/* 61  */                         type: 'numeric'
/* 62  */                         ,position: 'bottom'
/* 63  */                         ,fields: 'count'
/* 64  */                         ,grid: true
/* 65  */                     },{
/* 66  */                         type: 'category'
/* 67  */                         ,position: 'left'
/* 68  */                         ,fields: 'name'
/* 69  */                         ,grid: true
/* 70  */                     }
/* 71  */                 ]
/* 72  */                 ,series: [{
/* 73  */                     type: 'bar'
/* 74  */                     ,axis: 'bottom'
/* 75  */                     ,xField: 'name'
/* 76  */                     ,yField: 'count'
/* 77  */                     ,style: {
/* 78  */                         opacity: 0.80
/* 79  */                         ,minGapWidth: 10
/* 80  */                     }
/* 81  */                     ,highlight: {
/* 82  */                         fillStyle: 'rgba(249, 204, 157, 1.0)'
/* 83  */                         ,strokeStyle: 'black'
/* 84  */                         ,radius: 10
/* 85  */                     }
/* 86  */                     ,label: {
/* 87  */                         field: 'count'
/* 88  */                         ,display: 'insideEnd'
/* 89  */                     }
/* 90  */                     ,listeners: {
/* 91  */                         scope: this
/* 92  */                         ,itemclick: this.onChartItemClick
/* 93  */                     }
/* 94  */                 }]
/* 95  */             }
/* 96  */             ,'column': {
/* 97  */                 width: '100%'
/* 98  */                 ,store: this.chartDataStore
/* 99  */                 ,colors: App.colors
/* 100 */                 ,axes: [{

/* Chart.js */

/* 101 */                         type: 'numeric'
/* 102 */                         ,position: 'left'
/* 103 */                         ,adjustByMajorUnit: true
/* 104 */                         ,fields: ['count']
/* 105 */                         ,grid: true
/* 106 */                     }, {
/* 107 */                         type: 'category'
/* 108 */                         ,position: 'bottom'
/* 109 */                         ,fields: ['name']
/* 110 */                         ,grid: true
/* 111 */                         ,label: {
/* 112 */                              rotation: {degrees: 315}
/* 113 */                         }
/* 114 */                     }
/* 115 */                 ]
/* 116 */                 ,series: [{
/* 117 */                     type: 'column'
/* 118 */                     ,xField: 'name'
/* 119 */                     ,yField: ['count']
/* 120 */                     ,stacked: true
/* 121 */                     ,highlight: {
/* 122 */                         fillStyle: 'yellow'
/* 123 */                     }
/* 124 */                     ,label: {
/* 125 */                         field: 'count'
/* 126 */                         ,display: 'insideEnd'
/* 127 */                     }
/* 128 */                     ,listeners: {
/* 129 */                         scope: this
/* 130 */                         ,itemclick: this.onChartItemClick
/* 131 */                     }
/* 132 */                 }]
/* 133 */             }
/* 134 */             ,'pie': {
/* 135 */                 width: '100%'
/* 136 */                 ,store: this.chartDataStore
/* 137 */                 ,series: [{
/* 138 */                     type: 'pie',
/* 139 */                     angleField: 'count',
/* 140 */                     label: {
/* 141 */                         field: 'name',
/* 142 */                         display: 'outside',
/* 143 */                         calloutLine: true
/* 144 */                     },
/* 145 */                     showInLegend: true,
/* 146 */                     highlight: true,
/* 147 */                     highlightCfg: {
/* 148 */                         'stroke-width': 20,
/* 149 */                         stroke: '#fff'
/* 150 */                     }

/* Chart.js */

/* 151 */                     ,listeners: {
/* 152 */                         scope: this
/* 153 */                         ,itemclick: this.onChartItemClick
/* 154 */                     }
/* 155 */                 }]
/* 156 */             }
/* 157 */         };
/* 158 */ 
/* 159 */         return this.chartConfigs;
/* 160 */     }
/* 161 */ 
/* 162 */     ,onAfterRender: function(p) {
/* 163 */         if(!Ext.isEmpty(this.config.data)) {
/* 164 */             this.loadData(this.config.data);
/* 165 */         }
/* 166 */     }
/* 167 */ 
/* 168 */     ,loadData: function(data, overrides) {
/* 169 */         var rez = {
/* 170 */             data: {}
/* 171 */             ,charts: []
/* 172 */         }
/* 173 */         ,d = rez.data;
/* 174 */ 
/* 175 */         Ext.apply(rez, overrides);
/* 176 */ 
/* 177 */         if(data.view) {
/* 178 */             var vp = data.view;
/* 179 */ 
/* 180 */             if(Ext.isEmpty(rez.charts)  && vp.chartType) {
/* 181 */                 rez.charts = Ext.isString(vp.chartType)
/* 182 */                     ? [vp.chartType]
/* 183 */                     : vp.chartType;
/* 184 */             }
/* 185 */ 
/* 186 */             if(Ext.isEmpty(rez.facet) && vp.rows && !Ext.isEmpty(vp.rows.facet)) {
/* 187 */                 rez.facet = vp.rows.facet;
/* 188 */             }
/* 189 */         }
/* 190 */ 
/* 191 */         Ext.iterate(
/* 192 */             data.facets
/* 193 */             ,function(key, val, o) {
/* 194 */                 d[key] = CB.facet.List.prototype.getFacetData(key, val.items);
/* 195 */ 
/* 196 */                 //set first facet as selected if not specified
/* 197 */                 if(Ext.isEmpty(rez.facet)) {
/* 198 */                     rez['facet'] = key;
/* 199 */                 }
/* 200 */ 

/* Chart.js */

/* 201 */                 for (var i = 0; i < d[key].length; i++) {
/* 202 */                     if(Ext.isObject(d[key][i].items)) {
/* 203 */                         d[key][i].name = d[key][i].items.name;
/* 204 */                         d[key][i].count = d[key][i].items.count;
/* 205 */                     } else {
/* 206 */                         d[key][i].count = d[key][i].items;
/* 207 */                     }
/* 208 */                     d[key][i].name = htmlEntityDecode(App.shortenString(d[key][i].name, 30));
/* 209 */                 }
/* 210 */ 
/* 211 */                 if(data.sorter) {
/* 212 */                     d[key] = Ext.Array.sort(d[key], data.sorter);
/* 213 */                 }
/* 214 */             }
/* 215 */             ,this
/* 216 */         );
/* 217 */ 
/* 218 */         if(d[rez.facet]) {
/* 219 */             this.chartDataStore.loadData(Ext.clone(d[rez.facet]));
/* 220 */         } else {
/* 221 */             this.chartDataStore.removeAll();
/* 222 */         }
/* 223 */ 
/* 224 */         if (Ext.isEmpty(rez.charts)) {
/* 225 */             rez.charts = ['pie'];
/* 226 */         }
/* 227 */ 
/* 228 */         this.chartData = rez;
/* 229 */ 
/* 230 */         this.changeCharts(rez.charts);
/* 231 */ 
/* 232 */         return rez;
/* 233 */     }
/* 234 */ 
/* 235 */     ,changeCharts: function(charts) {
/* 236 */         this.removeAll(true);
/* 237 */ 
/* 238 */         var cfg = Ext.clone(this.chartConfigs[charts[0]]);
/* 239 */ 
/* 240 */         if(!Ext.isEmpty(cfg)) {
/* 241 */             cfg.height = Math.max(cfg.store.getCount() * 25, 300);
/* 242 */ 
/* 243 */             this.chart = Ext.create(
/* 244 */                 'Ext.chart.Chart'
/* 245 */                 ,cfg
/* 246 */             );
/* 247 */ 
/* 248 */             this.add(this.chart);
/* 249 */         }
/* 250 */ 

/* Chart.js */

/* 251 */         this.updateLayout();
/* 252 */     }
/* 253 */ 
/* 254 */     ,onChartItemClick: function(o, e) {
/* 255 */         this.fireEvent('itemclick', o, e);
/* 256 */     }
/* 257 */ });
/* 258 */ 

;
/* Grid.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.widget.block.Grid', {
/* 4  */     extend: 'CB.widget.block.Base'
/* 5  */ 
/* 6  */     ,alias: 'CBWidgetBlockGrid'
/* 7  */ 
/* 8  */     ,xtype: 'CBWidgetBlockGrid'
/* 9  */ 
/* 10 */     ,minHeight: 100
/* 11 */ 
/* 12 */     ,initComponent: function(){
/* 13 */         this.store = new Ext.data.JsonStore({
/* 14 */             autoDestroy: true
/* 15 */             ,remoteSort: false
/* 16 */             ,model: 'FieldObjects'
/* 17 */             ,proxy: {
/* 18 */                 type: 'memory'
/* 19 */                 ,reader: {
/* 20 */                     type: 'json'
/* 21 */                 }
/* 22 */             }
/* 23 */         });
/* 24 */ 
/* 25 */         this.grid = new CB.browser.view.Grid({
/* 26 */             border: false
/* 27 */             ,refOwner: this
/* 28 */             ,store: this.store
/* 29 */             ,getProperty: Ext.emptyFn
/* 30 */             ,saveGridState: Ext.emptyFn
/* 31 */             ,hideBottomBar: true
/* 32 */         });
/* 33 */ 
/* 34 */         Ext.apply(this, {
/* 35 */             layout: 'fit'
/* 36 */             ,items: [
/* 37 */                 this.grid
/* 38 */             ]
/* 39 */             ,listeners: {
/* 40 */                 scope: this
/* 41 */                 ,afterrender: this.onAfterRender
/* 42 */             }
/* 43 */         });
/* 44 */ 
/* 45 */         this.callParent(arguments);
/* 46 */     }
/* 47 */ 
/* 48 */     ,onAfterRender: function() {
/* 49 */         var ic = this.initialConfig
/* 50 */             ,s = this.store;

/* Grid.js */

/* 51 */         if(!Ext.isEmpty(ic.data)) {
/* 52 */             for (var i = 0; i < ic.data.length; i++) {
/* 53 */                 ic.data[i].iconCls = getItemIcon(ic.data[i]);
/* 54 */             }
/* 55 */ 
/* 56 */             s.proxy.reader.rawData = ic.data;
/* 57 */             s.loadData(ic.data.data);
/* 58 */ 
/* 59 */             s.fireEvent(
/* 60 */                 'manualload'
/* 61 */                 ,s
/* 62 */                 ,s.data.items
/* 63 */                 ,true
/* 64 */                 ,{}
/* 65 */             );
/* 66 */         }
/* 67 */     }
/* 68 */ });
/* 69 */ 

;
/* Map.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.widget.block.Map', {
/* 4  */     extend: 'CB.widget.block.Base'
/* 5  */ 
/* 6  */     ,alias: 'CBWidgetBlockMap'
/* 7  */ 
/* 8  */     ,xtype: 'CBWidgetBlockMap'
/* 9  */ 
/* 10 */     ,initComponent: function(){
/* 11 */         this.mapPanel = Ext.create(
/* 12 */             'CB.LeafletPanel'
/* 13 */             ,{
/* 14 */                 listeners: {
/* 15 */                     scope: this
/* 16 */                     ,mapready: this.onMapReady
/* 17 */                 }
/* 18 */             }
/* 19 */         );
/* 20 */ 
/* 21 */         Ext.apply(this, {
/* 22 */             minWidth: 300
/* 23 */             ,minHeight: 200
/* 24 */             ,layout: 'fit'
/* 25 */             ,items: this.mapPanel
/* 26 */         });
/* 27 */ 
/* 28 */         this.callParent(arguments);
/* 29 */     }
/* 30 */ 
/* 31 */     ,onMapReady: function(p) {
/* 32 */         p.setViewConfig(this.initialConfig.params);
/* 33 */     }
/* 34 */ });
/* 35 */ 

;
/* Pivot.js */

/* 1   */ Ext.namespace('CB');
/* 2   */ 
/* 3   */ Ext.define('CB.widget.block.Pivot', {
/* 4   */     extend: 'CB.widget.block.Chart'
/* 5   */ 
/* 6   */     ,alias: 'CBWidgetBlockPivot'
/* 7   */ 
/* 8   */     ,xtype: 'CBWidgetBlockPivot'
/* 9   */ 
/* 10  */     ,width: 400
/* 11  */     ,height: 400
/* 12  */ 
/* 13  */     ,onTableCellClick: function(ev, el, p) {
/* 14  */         this.fireEvent('cellclick', ev, el, p);
/* 15  */     }
/* 16  */ 
/* 17  */     ,loadData: function(data, overrides) {
/* 18  */         var rez = {
/* 19  */             data: {}
/* 20  */             ,titles: [] // 2 levels, for both facets
/* 21  */             ,xField: ''
/* 22  */             ,yField: ''
/* 23  */             ,charts: []
/* 24  */             ,refs: {}
/* 25  */         }
/* 26  */         ,d = {};
/* 27  */ 
/* 28  */         this.selectedStat = null;
/* 29  */ 
/* 30  */         if (overrides) {
/* 31  */             Ext.apply(rez, overrides);
/* 32  */         }
/* 33  */ 
/* 34  */         if(data.pivot) {
/* 35  */             var key = ''
/* 36  */                 ,arr;
/* 37  */             if(Ext.isEmpty(rez.xField) || Ext.isEmpty(rez.yField)) {
/* 38  */                 //just get the facets the server returned the pivot for
/* 39  */ 
/* 40  */                 Ext.iterate(
/* 41  */                     data.pivot
/* 42  */                     ,function(k, v) {
/* 43  */                         key = k;
/* 44  */                     }
/* 45  */                     ,this
/* 46  */                 );
/* 47  */ 
/* 48  */                 var q = key.split(',');
/* 49  */                 rez.xField = q[0];
/* 50  */                 rez.yField = q[1];

/* Pivot.js */

/* 51  */             }
/* 52  */ 
/* 53  */             if(data.pivot[key]) {
/* 54  */                 Ext.copyTo(rez, data.pivot[key], 'data,titles,stats');
/* 55  */             }
/* 56  */         }
/* 57  */ 
/* 58  */         if(data.view) {
/* 59  */             var vp = data.view;
/* 60  */             rez.view = vp;
/* 61  */ 
/* 62  */             this.selectedStat = vp.selectedStat;
/* 63  */ 
/* 64  */             if(Ext.isEmpty(rez.charts)  && vp.pivotType) {
/* 65  */                 rez.charts = Ext.isString(vp.pivotType)
/* 66  */                     ? [vp.pivotType]
/* 67  */                     : vp.pivotType;
/* 68  */             }
/* 69  */ 
/* 70  */             if(Ext.isEmpty(rez.xField) && vp.rows && !Ext.isEmpty(vp.rows.facet)) {
/* 71  */                 rez.xField = vp.rows.facet;
/* 72  */             }
/* 73  */             if(Ext.isEmpty(rez.xField) && vp.cols && !Ext.isEmpty(vp.cols.facet)) {
/* 74  */                 rez.yField = vp.cols.facet;
/* 75  */             }
/* 76  */         }
/* 77  */ 
/* 78  */         // loading facets list
/* 79  */         Ext.iterate(
/* 80  */             data.facets
/* 81  */             ,function(key, val, o) {
/* 82  */                 d[key] = CB.facet.List.prototype.getFacetData(key, val.items);
/* 83  */ 
/* 84  */                 for (var i = 0; i < d[key].length; i++) {
/* 85  */                     if(Ext.isObject(d[key][i].items)) {
/* 86  */                         d[key][i].name = d[key][i].items.name;
/* 87  */                         d[key][i].count = d[key][i].items.count;
/* 88  */                     }
/* 89  */                     d[key][i].name = App.shortenString(d[key][i].name, 30);
/* 90  */                 }
/* 91  */             }
/* 92  */             ,this
/* 93  */         );
/* 94  */ 
/* 95  */         // create refs object for common usage
/* 96  */         if(!Ext.isEmpty(data.pivot)) {
/* 97  */             var i, j, f1, f2, value, f1t;
/* 98  */ 
/* 99  */             d = data.pivot[rez.xField + ',' + rez.yField];
/* 100 */ 

/* Pivot.js */

/* 101 */             if(d && d.data) {
/* 102 */                 for (i = 0; i < d.data.length; i++) {
/* 103 */                     f1 = d.data[i];
/* 104 */                     f1t = 0;
/* 105 */                     if(!Ext.isEmpty(f1.pivot)) {
/* 106 */                         for (j = 0; j < f1.pivot.length; j++) {
/* 107 */                             f2 = f1.pivot[j];
/* 108 */ 
/* 109 */                             value = this.getFacetCount(f2);
/* 110 */ 
/* 111 */                             if(value > 0) {
/* 112 */                                 rez.refs[f1.value + '_' + f2.value] = value;
/* 113 */ 
/* 114 */                                 if(Ext.isEmpty(rez.refs['t_' + f2.value])) {
/* 115 */                                     rez.refs['t_' + f2.value] = 0;
/* 116 */                                 }
/* 117 */ 
/* 118 */                                 if(Ext.isNumeric(value)) {
/* 119 */                                     rez.refs['t_' + f2.value] += value;
/* 120 */                                     f1t += value;
/* 121 */                                 }
/* 122 */                             }
/* 123 */                         }
/* 124 */                     }
/* 125 */ 
/* 126 */                     // value = this.getFacetCount(f1);
/* 127 */                     // if(value > 0) {
/* 128 */                     //     rez.refs[f1.value + '_t'] = this.getFacetCount(f1);
/* 129 */                     // }
/* 130 */                     if(f1t > 0) {
/* 131 */                         rez.refs[f1.value + '_t'] = f1t;
/* 132 */                     }
/* 133 */                 }
/* 134 */             }
/* 135 */         }
/* 136 */ 
/* 137 */         if (Ext.isEmpty(rez.charts)) {
/* 138 */             rez.charts = ['table'];
/* 139 */         }
/* 140 */ 
/* 141 */         this.chartData = rez;
/* 142 */ 
/* 143 */         this.changeCharts(rez.charts);
/* 144 */ 
/* 145 */         return rez;
/* 146 */     }
/* 147 */ 
/* 148 */     /**
/* 149 *|      * display desired charts
/* 150 *|      * @param  array charts

/* Pivot.js *|

/* 151 *|      * @return void
/* 152 *|      */
/* 153 */     ,changeCharts: function(charts) {
/* 154 */         var data = this.chartData;
/* 155 */ 
/* 156 */         this.removeAll(true);
/* 157 */ 
/* 158 */         if(charts.indexOf('table') > -1) {
/* 159 */             var html = '';
/* 160 */ 
/* 161 */             var hr = '<th> &nbsp; </th>';
/* 162 */             Ext.iterate(
/* 163 */                 data.titles[1]
/* 164 */                 ,function(k, v, o) {
/* 165 */                     hr += '<th title="' + Ext.String.htmlEncode(v) +'">' +
/* 166 */                         Ext.String.htmlEncode(App.shortenString(v, 10)) + '</th>';
/* 167 */                 }
/* 168 */                 ,this
/* 169 */             );
/* 170 */             html += '<tr>' + hr + '<th>' + L.Total + '</th></tr>';
/* 171 */ 
/* 172 */             Ext.iterate(
/* 173 */                 data.titles[0]
/* 174 */                 ,function(k, v, o) {
/* 175 */                     if(Ext.isEmpty(data.refs[k + '_t'])) {
/* 176 */                         return;
/* 177 */                     }
/* 178 */ 
/* 179 */                     var r = '<th style="text-align:left" title="' + Ext.String.htmlEncode(v) + '">' +
/* 180 */                         Ext.String.htmlEncode(App.shortenString(v, 25)) + '</th>';
/* 181 */ 
/* 182 */                     Ext.iterate(
/* 183 */                         data.titles[1]
/* 184 */                         ,function(q, z, y) {
/* 185 */                             r += '<td f="' + k + '|' + q + '">' + Ext.valueFrom(data.refs[k + '_' + q], '') + '</td>';
/* 186 */                         }
/* 187 */                         ,this
/* 188 */                     );
/* 189 */ 
/* 190 */                     html += '<tr>' + r + '<td class="total" f="'+ k +'|">' + Ext.util.Format.number(Ext.valueFrom(data.refs[k + '_t'], ''), '0.##') + '</td></tr>';
/* 191 */                 }
/* 192 */                 ,this
/* 193 */             );
/* 194 */ 
/* 195 */             var total = 0;
/* 196 */             var r = '<th>' + L.Total + '</th>';
/* 197 */             Ext.iterate(
/* 198 */                 data.titles[1]
/* 199 */                 ,function(q, z, y) {
/* 200 */                     var nr = Ext.valueFrom(data.refs['t_' + q], '');

/* Pivot.js */

/* 201 */                     r += '<td class="total" f="|'+ q +'">' + Ext.util.Format.number(nr, '0.##') + '</td>';
/* 202 */                     if(Ext.isNumeric(nr)) {
/* 203 */                         total += nr;
/* 204 */                     }
/* 205 */                 }
/* 206 */                 ,this
/* 207 */             );
/* 208 */ 
/* 209 */             //get stats value if set
/* 210 */             var value = this.getFacetCount(data);
/* 211 */ 
/* 212 */             html += '<tr>' + r + '<td class="total">' + Ext.util.Format.number(value ? value : total, '0.##') + '</td></tr>';
/* 213 */ 
/* 214 */             html = '<table class="pivot">' + html + '</table>';
/* 215 */ 
/* 216 */             var table = this.add({
/* 217 */                 xtype: 'panel'
/* 218 */                 ,border: false
/* 219 */                 ,autoHeight: true
/* 220 */                 ,padding: 10
/* 221 */                 ,html: html
/* 222 */                 ,listeners: {
/* 223 */                     scope: this
/* 224 */                     ,afterrender: function(p) {
/* 225 */                         var a = p.getEl().query('td');
/* 226 */                         for (var i = 0; i < a.length; i++) {
/* 227 */                             Ext.get(a[i]).on('click', this.onTableCellClick, this);
/* 228 */                         }
/* 229 */                     }
/* 230 */                 }
/* 231 */             });
/* 232 */         }
/* 233 */ 
/* 234 */         if(charts.indexOf('stackedBars') > -1) {
/* 235 */             this.addChart('bar');
/* 236 */         }
/* 237 */         if(charts.indexOf('stackedColumns') > -1) {
/* 238 */             this.addChart('column');
/* 239 */         }
/* 240 */ 
/* 241 */         this.updateLayout();
/* 242 */     }
/* 243 */ 
/* 244 */     ,addChart: function(chartType) {
/* 245 */         var d = this.chartData;
/* 246 */ 
/* 247 */         /* create data, stores and charts on the fly */
/* 248 */         var series = [
/* 249 */                 {
/* 250 */                     xField: d.xField

/* Pivot.js */

/* 251 */                     ,yField: []
/* 252 */                     ,title: []
/* 253 */                 },{
/* 254 */                     xField: d.yField
/* 255 */                     ,yField: []
/* 256 */                     ,title: []
/* 257 */                 }
/* 258 */             ]
/* 259 */             ,data = [[], []];
/* 260 */ 
/* 261 */         Ext.iterate(
/* 262 */             d.titles[0]
/* 263 */             ,function(k, v, o) {
/* 264 */                 //add fields and titles
/* 265 */                 series[1].yField.push('f' + k);
/* 266 */                 series[1].title.push(v);
/* 267 */ 
/* 268 */                 //add data
/* 269 */                 var r = {};
/* 270 */                 r[d.xField] = '"' + v + '"';
/* 271 */                 Ext.iterate(
/* 272 */                     d.titles[1]
/* 273 */                     ,function(q, z, y) {
/* 274 */                         var w = Ext.valueFrom(d.refs[k + '_' + q], '');
/* 275 */                         r['f' + q] = Ext.isEmpty(w) ? 0 : w;
/* 276 */                     }
/* 277 */                     ,this
/* 278 */                 );
/* 279 */                 data[0].push(r);
/* 280 */             }
/* 281 */             ,this
/* 282 */         );
/* 283 */ 
/* 284 */         Ext.iterate(
/* 285 */             d.titles[1]
/* 286 */             ,function(k, v, o) {
/* 287 */                 //add fields and titles
/* 288 */                 series[0].yField.push('f' + k);
/* 289 */                 series[0].title.push(v);
/* 290 */ 
/* 291 */                 //add data
/* 292 */                 var r = {};
/* 293 */                 r[d.yField] = '"' + v + '"';
/* 294 */                 Ext.iterate(
/* 295 */                     d.titles[0]
/* 296 */                     ,function(q, z, y) {
/* 297 */                         var w = Ext.valueFrom(d.refs[q + '_' + k], '');
/* 298 */                         r['f' + q] = Ext.isEmpty(w) ? 0 : w;
/* 299 */                     }
/* 300 */                     ,this

/* Pivot.js */

/* 301 */                 );
/* 302 */                 data[1].push(r);
/* 303 */             }
/* 304 */             ,this
/* 305 */         );
/* 306 */ 
/* 307 */         var chartItems = []
/* 308 */             ,i = 0;
/* 309 */ 
/* 310 */         // for (i = 0; i < series.length; i++) {
/* 311 */             var serie = series[i];
/* 312 */ 
/* 313 */             var cfg = {
/* 314 */                 height: Math.max(data[i].length * 25, 400)
/* 315 */                 ,width: '100%'
/* 316 */                 ,store: new Ext.data.JsonStore({
/* 317 */                     fields: [serie.xField].concat(serie.yField)
/* 318 */                     ,proxy: {
/* 319 */                         type: 'memory'
/* 320 */                         ,reader: {
/* 321 */                             type: 'json'
/* 322 */                         }
/* 323 */                     }
/* 324 */                     ,data: data[i]
/* 325 */                 })
/* 326 */                 ,items: [{
/* 327 */                     type  : 'text',
/* 328 */                     text  : ' ',
/* 329 */                     x : 40, //the sprite x position
/* 330 */                     y : 12  //the sprite y position
/* 331 */                 }]
/* 332 */                 ,axes: [{
/* 333 */                     type: 'category'
/* 334 */                     ,position: (chartType === 'bar') ? 'left' : 'bottom'
/* 335 */                     ,fields: serie.xField
/* 336 */                     ,grid: true
/* 337 */                     ,minimum: 0
/* 338 */                 }, {
/* 339 */                     type: 'numeric'
/* 340 */                     ,position: (chartType === 'column') ? 'left' : 'bottom'
/* 341 */                     ,fields: serie.yField
/* 342 */                     ,grid: true
/* 343 */                 }]
/* 344 */ 
/* 345 */                 ,legend: {
/* 346 */                     position: 'right'
/* 347 */                     ,boxStrokeWidth: 0
/* 348 */                     // ,labelFont: '12px Helvetica'
/* 349 */                 }
/* 350 */                 ,seriesStyles: this.seriesStyles

/* Pivot.js */

/* 351 */                 ,series: [
/* 352 */                     Ext.apply(
/* 353 */                         serie
/* 354 */                         ,{
/* 355 */                             type: chartType
/* 356 */                             ,stacked: true
/* 357 */                             ,style: {
/* 358 */                                 opacity: 0.80
/* 359 */                             }
/* 360 */                             ,highlight: {
/* 361 */                                 'stroke-width': 2
/* 362 */                                 ,stroke: '#fff'
/* 363 */                             }
/* 364 */                         }
/* 365 */                     )
/* 366 */                 ]
/* 367 */             };
/* 368 */ 
/* 369 */             chartItems.push(
/* 370 */                 Ext.create(
/* 371 */                     'Ext.chart.Chart'
/* 372 */                     ,cfg
/* 373 */                 )
/* 374 */             );
/* 375 */         // }
/* 376 */ 
/* 377 */         return this.add(chartItems);
/* 378 */     }
/* 379 */ 
/* 380 */     ,getFacetCount: function(f) {
/* 381 */         var rez = 0
/* 382 */             ,sf = this.selectedStat;
/* 383 */ 
/* 384 */         if(sf &&
/* 385 */             sf.field &&
/* 386 */             f.stats &&
/* 387 */             f.stats.stats_fields &&
/* 388 */             f.stats.stats_fields[sf.field]
/* 389 */         ) {
/* 390 */             if(f.stats.stats_fields[sf.field][sf.type]) {
/* 391 */                 rez = f.stats.stats_fields[sf.field][sf.type];
/* 392 */             }
/* 393 */ 
/* 394 */         } else if(f.count){
/* 395 */             rez = f.count;
/* 396 */         }
/* 397 */ 
/* 398 */         return rez;
/* 399 */     }
/* 400 */ });

/* Pivot.js */

/* 401 */ 

;
/* Template.js */

/* 1  */ Ext.namespace('CB');
/* 2  */ 
/* 3  */ Ext.define('CB.widget.block.Template', {
/* 4  */     extend: 'CB.widget.block.Base'
/* 5  */ 
/* 6  */     ,alias: 'CBWidgetBlockTemplate'
/* 7  */ 
/* 8  */     ,xtype: 'CBWidgetBlockTemplate'
/* 9  */ 
/* 10 */     ,minHeight: 100
/* 11 */ 
/* 12 */     ,initComponent: function(){
/* 13 */         Ext.apply(this, {
/* 14 */             tpl: this.config.params.tpl
/* 15 */             ,data: this.config.data
/* 16 */         });
/* 17 */ 
/* 18 */         this.callParent(arguments);
/* 19 */     }
/* 20 */ });
/* 21 */ 
